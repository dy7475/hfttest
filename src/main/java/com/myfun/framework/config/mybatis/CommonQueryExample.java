package com.myfun.framework.config.mybatis;

import java.util.ArrayList;
import java.util.List;

import com.myfun.repository.support.generator.shard.ShardDb;


/**
 * 
* @ClassName: CommonQueryExample 
* @Description: 基础查询条件类(因framework项目中关于数据库切换标识只认ShardDb)
* @author fsjohnhuang
* @date 2020年6月10日 上午11:50:28 
*
 */
public class CommonQueryExample extends ShardDb {


    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public CommonQueryExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }
        
        /*********************  设置通用查询条件   ****************************/


		/**
		 * 
		 * @Title: andLike
		 * @Description: 模糊匹配查询
		 * @param @param cloumProperty
		 * @param @param property
		 * @param @param value
		 * @param @return 设定文件
		 * @return Criteria 返回类型
		 * @throws
		 */
        public Criteria andLike(String cloumProperty,String property,Object value) {
            addCriterion(cloumProperty+" like ", value, property);
            return (Criteria) this;
        }
        
        
		/**
		 * 
		 * @Title: andIsNull
		 * @Description: 指定条件不为空
		 * @param @param cloumProperty
		 * @param @return 设定文件
		 * @return Criteria 返回类型
		 * @throws
		 */
		public Criteria andIsNull(String cloumProperty) {
			addCriterion(cloumProperty + " is null");
			return (Criteria) this;
		}
        

		/**
		 * 
		* @Title: andIsNotNull 
		* @Description:指定条件为空
		* @param @param cloumProperty // 对应表中的列
		* @param @return    设定文件 
		* @return Criteria    返回类型 
		* @throws
		 */
        public Criteria andIsNotNull(String cloumProperty) {
        	addCriterion(cloumProperty + " is not null");
            return (Criteria) this;
        }
        
		/**
		 * 
		* @Title: andEqualTo 
		* @Description: 等于指定的值
		* @param @param cloumProperty
		* @param @param property
		* @param @param value
		* @param @return    设定文件 
		* @return Criteria    返回类型 
		* @throws
		 */
        public Criteria andEqualTo(String cloumProperty,String property,Object value) {
            addCriterion(cloumProperty+" =", value, property);
            return (Criteria) this;
        }

		/**
		 * 
		 * @Title: andNotEqualTo
		 * @Description: 不等于指定的值
		 * @param @param cloumProperty 对就表中的列
		 * @param @param property 实体属性
		 * @param @param value // 值
		 * @param @return 设定文件
		 * @return Criteria 返回类型
		 * @throws
		 */
        public Criteria andNotEqualTo(String cloumProperty,String property,Object value) {
            addCriterion(cloumProperty+" <>", value, property);
            return (Criteria) this;
        }


        /**
         * 
        * @Title: andGreaterThan 
        * @Description: 大于指定的值
        * @param @param cloumProperty
        * @param @param property
        * @param @param value
        * @param @return    设定文件 
        * @return Criteria    返回类型 
        * @throws
         */
        public Criteria andGreaterThan(String cloumProperty,String property,Object value) {
            addCriterion(cloumProperty+" >", value, property);
            return (Criteria) this;
        }

        /**
         * 
        * @Title: andGreaterThanOrEqualTo 
        * @Description: 大於等於指定的值 
        * @param @param cloumProperty
        * @param @param property
        * @param @param value
        * @param @return    设定文件 
        * @return Criteria    返回类型 
        * @throws
         */
        public Criteria andGreaterThanOrEqualTo(String cloumProperty,String property,Object value) {
        	addCriterion(cloumProperty+" >=", value, property);
            return (Criteria) this;
        }
        

        /**
         * 小于指定的值
         */
        public Criteria andLessThan(String cloumProperty,String property,Object value) {
        	addCriterion(cloumProperty+" <", value, property);
            return (Criteria) this;
        }

        /**
         * 小于或等于指定的值
         */
        public Criteria andLessThanOrEqualTo(String cloumProperty,String property,Object value) {
        	addCriterion(cloumProperty+" <=", value, property);
            return (Criteria) this;
        }

        /**
         * 在指定的范围内
         */
        public Criteria andIn(String cloumProperty,String property,List<Object> values) {
            addCriterion(cloumProperty+" in", values, property);
            return (Criteria) this;
        }

        /**
         * 在不在指定的范围内
         */
        public Criteria andNotIn(String cloumProperty,String property,List<Object> values) {
            addCriterion(cloumProperty+" not in", values, property);
            return (Criteria) this;
        }
        

        /**
         * 在指定的区间
         */
        public Criteria andBetween(String cloumProperty,String property,Object value1, Object value2) {
            addCriterion(cloumProperty+" between", value1, value2, property);
            return (Criteria) this;
        }

        /**
         * 不在指定的区间
         */
        public Criteria andNotBetween(String cloumProperty,String property,Object value1, Object value2) {
            addCriterion(cloumProperty+" not between", value1, value2, property);
            return (Criteria) this;
        }
        
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table tb_user_feedback
     *
     * @mbggenerated do_not_delete_during_merge Fri Jun 08 20:57:34 CST 2018
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table tb_user_feedback
     *
     * @mbggenerated Fri Jun 08 20:57:34 CST 2018
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

}
