<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.admindb.dao.AdminFunBuildingBiddingMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.admindb.po.AdminFunBuildingBidding">
    <!--@mbggenerated-->
    <id column="BIDDING_ID" jdbcType="INTEGER" property="biddingId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="BEGIN_TIME" jdbcType="TIMESTAMP" property="beginTime" />
    <result column="END_TIME" jdbcType="TIMESTAMP" property="endTime" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="PRICE" jdbcType="NUMERIC" property="price" />
    <result column="COMP_PRICE" jdbcType="NUMERIC" property="compPrice" />
    <result column="PERSONAL_PRICE" jdbcType="NUMERIC" property="personalPrice" />
    <result column="IS_TOP" jdbcType="TINYINT" property="isTop" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="QQ_STATUS" jdbcType="TINYINT" property="qqStatus" />
    <result column="HAOFANG_STATUS" jdbcType="TINYINT" property="haofangStatus" />
    <result column="PAY_FLAG" jdbcType="TINYINT" property="payFlag" />
    <result column="EXT_CODE_400" jdbcType="VARCHAR" property="extCode400" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="UA_TYPE" jdbcType="TINYINT" property="uaType" />
    <result column="UA_ID" jdbcType="INTEGER" property="uaId" />
    <result column="PERSONAL_COIN" jdbcType="NUMERIC" property="personalCoin" />
    <result column="COMP_COIN" jdbcType="NUMERIC" property="compCoin" />
    <result column="COMP_UA_ID" jdbcType="INTEGER" property="compUaId" />
    <result column="BIDD_SOURCE" jdbcType="TINYINT" property="biddSource" />
    <result column="RETURN_PRICE" jdbcType="TINYINT" property="returnPrice" />
    <result column="SYNC_FLAG" jdbcType="TINYINT" property="syncFlag" />
    <result column="YOUYOU_BIZ_SYNC_FLAG" jdbcType="TINYINT" property="youyouBizSyncFlag" />
    <result column="SORT_PRICE" jdbcType="NUMERIC" property="sortPrice" />
    <result column="ACTIVITY_PRICE" jdbcType="NUMERIC" property="activityPrice" />
    <result column="CASH_BALANCE_PRICE" jdbcType="NUMERIC" property="cashBalancePrice" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    BIDDING_ID, CITY_ID, BUILD_ID, BUILD_NAME, BEGIN_TIME, END_TIME, ARCHIVE_ID, PRICE, 
    COMP_PRICE, PERSONAL_PRICE, IS_TOP, CREATION_TIME, QQ_STATUS, HAOFANG_STATUS, PAY_FLAG, 
    EXT_CODE_400, UPDATE_TIME, UA_TYPE, UA_ID, PERSONAL_COIN, COMP_COIN, COMP_UA_ID, 
    BIDD_SOURCE, RETURN_PRICE, SYNC_FLAG, YOUYOU_BIZ_SYNC_FLAG, SORT_PRICE, ACTIVITY_PRICE, 
    CASH_BALANCE_PRICE
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBiddingExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_BUILDING_BIDDING
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_BUILDING_BIDDING
    where BIDDING_ID = #{biddingId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_BUILDING_BIDDING
    where BIDDING_ID = #{biddingId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBiddingExample">
    <!--@mbggenerated-->
    delete from FUN_BUILDING_BIDDING
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="biddingId" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBidding" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_BUILDING_BIDDING (CITY_ID, BUILD_ID, BUILD_NAME, 
      BEGIN_TIME, END_TIME, ARCHIVE_ID, 
      PRICE, COMP_PRICE, PERSONAL_PRICE, 
      IS_TOP, CREATION_TIME, QQ_STATUS, 
      HAOFANG_STATUS, PAY_FLAG, EXT_CODE_400, 
      UPDATE_TIME, UA_TYPE, UA_ID, 
      PERSONAL_COIN, COMP_COIN, COMP_UA_ID, 
      BIDD_SOURCE, RETURN_PRICE, SYNC_FLAG, 
      YOUYOU_BIZ_SYNC_FLAG, SORT_PRICE, ACTIVITY_PRICE, 
      CASH_BALANCE_PRICE)
    values (#{cityId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, #{buildName,jdbcType=VARCHAR}, 
      #{beginTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{archiveId,jdbcType=INTEGER}, 
      #{price,jdbcType=NUMERIC}, #{compPrice,jdbcType=NUMERIC}, #{personalPrice,jdbcType=NUMERIC}, 
      #{isTop,jdbcType=TINYINT}, #{creationTime,jdbcType=TIMESTAMP}, #{qqStatus,jdbcType=TINYINT}, 
      #{haofangStatus,jdbcType=TINYINT}, #{payFlag,jdbcType=TINYINT}, #{extCode400,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{uaType,jdbcType=TINYINT}, #{uaId,jdbcType=INTEGER}, 
      #{personalCoin,jdbcType=NUMERIC}, #{compCoin,jdbcType=NUMERIC}, #{compUaId,jdbcType=INTEGER}, 
      #{biddSource,jdbcType=TINYINT}, #{returnPrice,jdbcType=TINYINT}, #{syncFlag,jdbcType=TINYINT}, 
      #{youyouBizSyncFlag,jdbcType=TINYINT}, #{sortPrice,jdbcType=NUMERIC}, #{activityPrice,jdbcType=NUMERIC}, 
      #{cashBalancePrice,jdbcType=NUMERIC})
  </insert>
  <insert id="insertSelective" keyProperty="biddingId" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBidding" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_BUILDING_BIDDING
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="buildName != null">
        BUILD_NAME,
      </if>
      <if test="beginTime != null">
        BEGIN_TIME,
      </if>
      <if test="endTime != null">
        END_TIME,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="price != null">
        PRICE,
      </if>
      <if test="compPrice != null">
        COMP_PRICE,
      </if>
      <if test="personalPrice != null">
        PERSONAL_PRICE,
      </if>
      <if test="isTop != null">
        IS_TOP,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="qqStatus != null">
        QQ_STATUS,
      </if>
      <if test="haofangStatus != null">
        HAOFANG_STATUS,
      </if>
      <if test="payFlag != null">
        PAY_FLAG,
      </if>
      <if test="extCode400 != null">
        EXT_CODE_400,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="uaType != null">
        UA_TYPE,
      </if>
      <if test="uaId != null">
        UA_ID,
      </if>
      <if test="personalCoin != null">
        PERSONAL_COIN,
      </if>
      <if test="compCoin != null">
        COMP_COIN,
      </if>
      <if test="compUaId != null">
        COMP_UA_ID,
      </if>
      <if test="biddSource != null">
        BIDD_SOURCE,
      </if>
      <if test="returnPrice != null">
        RETURN_PRICE,
      </if>
      <if test="syncFlag != null">
        SYNC_FLAG,
      </if>
      <if test="youyouBizSyncFlag != null">
        YOUYOU_BIZ_SYNC_FLAG,
      </if>
      <if test="sortPrice != null">
        SORT_PRICE,
      </if>
      <if test="activityPrice != null">
        ACTIVITY_PRICE,
      </if>
      <if test="cashBalancePrice != null">
        CASH_BALANCE_PRICE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildName != null">
        #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="beginTime != null">
        #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=NUMERIC},
      </if>
      <if test="compPrice != null">
        #{compPrice,jdbcType=NUMERIC},
      </if>
      <if test="personalPrice != null">
        #{personalPrice,jdbcType=NUMERIC},
      </if>
      <if test="isTop != null">
        #{isTop,jdbcType=TINYINT},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="qqStatus != null">
        #{qqStatus,jdbcType=TINYINT},
      </if>
      <if test="haofangStatus != null">
        #{haofangStatus,jdbcType=TINYINT},
      </if>
      <if test="payFlag != null">
        #{payFlag,jdbcType=TINYINT},
      </if>
      <if test="extCode400 != null">
        #{extCode400,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uaType != null">
        #{uaType,jdbcType=TINYINT},
      </if>
      <if test="uaId != null">
        #{uaId,jdbcType=INTEGER},
      </if>
      <if test="personalCoin != null">
        #{personalCoin,jdbcType=NUMERIC},
      </if>
      <if test="compCoin != null">
        #{compCoin,jdbcType=NUMERIC},
      </if>
      <if test="compUaId != null">
        #{compUaId,jdbcType=INTEGER},
      </if>
      <if test="biddSource != null">
        #{biddSource,jdbcType=TINYINT},
      </if>
      <if test="returnPrice != null">
        #{returnPrice,jdbcType=TINYINT},
      </if>
      <if test="syncFlag != null">
        #{syncFlag,jdbcType=TINYINT},
      </if>
      <if test="youyouBizSyncFlag != null">
        #{youyouBizSyncFlag,jdbcType=TINYINT},
      </if>
      <if test="sortPrice != null">
        #{sortPrice,jdbcType=NUMERIC},
      </if>
      <if test="activityPrice != null">
        #{activityPrice,jdbcType=NUMERIC},
      </if>
      <if test="cashBalancePrice != null">
        #{cashBalancePrice,jdbcType=NUMERIC},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBiddingExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_BUILDING_BIDDING
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BUILDING_BIDDING
    <set>
      <if test="record.biddingId != null">
        BIDDING_ID = #{record.biddingId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.buildName != null">
        BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      </if>
      <if test="record.beginTime != null">
        BEGIN_TIME = #{record.beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null">
        END_TIME = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.price != null">
        PRICE = #{record.price,jdbcType=NUMERIC},
      </if>
      <if test="record.compPrice != null">
        COMP_PRICE = #{record.compPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.personalPrice != null">
        PERSONAL_PRICE = #{record.personalPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.isTop != null">
        IS_TOP = #{record.isTop,jdbcType=TINYINT},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.qqStatus != null">
        QQ_STATUS = #{record.qqStatus,jdbcType=TINYINT},
      </if>
      <if test="record.haofangStatus != null">
        HAOFANG_STATUS = #{record.haofangStatus,jdbcType=TINYINT},
      </if>
      <if test="record.payFlag != null">
        PAY_FLAG = #{record.payFlag,jdbcType=TINYINT},
      </if>
      <if test="record.extCode400 != null">
        EXT_CODE_400 = #{record.extCode400,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uaType != null">
        UA_TYPE = #{record.uaType,jdbcType=TINYINT},
      </if>
      <if test="record.uaId != null">
        UA_ID = #{record.uaId,jdbcType=INTEGER},
      </if>
      <if test="record.personalCoin != null">
        PERSONAL_COIN = #{record.personalCoin,jdbcType=NUMERIC},
      </if>
      <if test="record.compCoin != null">
        COMP_COIN = #{record.compCoin,jdbcType=NUMERIC},
      </if>
      <if test="record.compUaId != null">
        COMP_UA_ID = #{record.compUaId,jdbcType=INTEGER},
      </if>
      <if test="record.biddSource != null">
        BIDD_SOURCE = #{record.biddSource,jdbcType=TINYINT},
      </if>
      <if test="record.returnPrice != null">
        RETURN_PRICE = #{record.returnPrice,jdbcType=TINYINT},
      </if>
      <if test="record.syncFlag != null">
        SYNC_FLAG = #{record.syncFlag,jdbcType=TINYINT},
      </if>
      <if test="record.youyouBizSyncFlag != null">
        YOUYOU_BIZ_SYNC_FLAG = #{record.youyouBizSyncFlag,jdbcType=TINYINT},
      </if>
      <if test="record.sortPrice != null">
        SORT_PRICE = #{record.sortPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.activityPrice != null">
        ACTIVITY_PRICE = #{record.activityPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.cashBalancePrice != null">
        CASH_BALANCE_PRICE = #{record.cashBalancePrice,jdbcType=NUMERIC},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BUILDING_BIDDING
    set BIDDING_ID = #{record.biddingId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      BEGIN_TIME = #{record.beginTime,jdbcType=TIMESTAMP},
      END_TIME = #{record.endTime,jdbcType=TIMESTAMP},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      PRICE = #{record.price,jdbcType=NUMERIC},
      COMP_PRICE = #{record.compPrice,jdbcType=NUMERIC},
      PERSONAL_PRICE = #{record.personalPrice,jdbcType=NUMERIC},
      IS_TOP = #{record.isTop,jdbcType=TINYINT},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      QQ_STATUS = #{record.qqStatus,jdbcType=TINYINT},
      HAOFANG_STATUS = #{record.haofangStatus,jdbcType=TINYINT},
      PAY_FLAG = #{record.payFlag,jdbcType=TINYINT},
      EXT_CODE_400 = #{record.extCode400,jdbcType=VARCHAR},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      UA_TYPE = #{record.uaType,jdbcType=TINYINT},
      UA_ID = #{record.uaId,jdbcType=INTEGER},
      PERSONAL_COIN = #{record.personalCoin,jdbcType=NUMERIC},
      COMP_COIN = #{record.compCoin,jdbcType=NUMERIC},
      COMP_UA_ID = #{record.compUaId,jdbcType=INTEGER},
      BIDD_SOURCE = #{record.biddSource,jdbcType=TINYINT},
      RETURN_PRICE = #{record.returnPrice,jdbcType=TINYINT},
      SYNC_FLAG = #{record.syncFlag,jdbcType=TINYINT},
      YOUYOU_BIZ_SYNC_FLAG = #{record.youyouBizSyncFlag,jdbcType=TINYINT},
      SORT_PRICE = #{record.sortPrice,jdbcType=NUMERIC},
      ACTIVITY_PRICE = #{record.activityPrice,jdbcType=NUMERIC},
      CASH_BALANCE_PRICE = #{record.cashBalancePrice,jdbcType=NUMERIC}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBidding">
    <!--@mbggenerated-->
    update FUN_BUILDING_BIDDING
    <set>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildName != null">
        BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="beginTime != null">
        BEGIN_TIME = #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        END_TIME = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        PRICE = #{price,jdbcType=NUMERIC},
      </if>
      <if test="compPrice != null">
        COMP_PRICE = #{compPrice,jdbcType=NUMERIC},
      </if>
      <if test="personalPrice != null">
        PERSONAL_PRICE = #{personalPrice,jdbcType=NUMERIC},
      </if>
      <if test="isTop != null">
        IS_TOP = #{isTop,jdbcType=TINYINT},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="qqStatus != null">
        QQ_STATUS = #{qqStatus,jdbcType=TINYINT},
      </if>
      <if test="haofangStatus != null">
        HAOFANG_STATUS = #{haofangStatus,jdbcType=TINYINT},
      </if>
      <if test="payFlag != null">
        PAY_FLAG = #{payFlag,jdbcType=TINYINT},
      </if>
      <if test="extCode400 != null">
        EXT_CODE_400 = #{extCode400,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uaType != null">
        UA_TYPE = #{uaType,jdbcType=TINYINT},
      </if>
      <if test="uaId != null">
        UA_ID = #{uaId,jdbcType=INTEGER},
      </if>
      <if test="personalCoin != null">
        PERSONAL_COIN = #{personalCoin,jdbcType=NUMERIC},
      </if>
      <if test="compCoin != null">
        COMP_COIN = #{compCoin,jdbcType=NUMERIC},
      </if>
      <if test="compUaId != null">
        COMP_UA_ID = #{compUaId,jdbcType=INTEGER},
      </if>
      <if test="biddSource != null">
        BIDD_SOURCE = #{biddSource,jdbcType=TINYINT},
      </if>
      <if test="returnPrice != null">
        RETURN_PRICE = #{returnPrice,jdbcType=TINYINT},
      </if>
      <if test="syncFlag != null">
        SYNC_FLAG = #{syncFlag,jdbcType=TINYINT},
      </if>
      <if test="youyouBizSyncFlag != null">
        YOUYOU_BIZ_SYNC_FLAG = #{youyouBizSyncFlag,jdbcType=TINYINT},
      </if>
      <if test="sortPrice != null">
        SORT_PRICE = #{sortPrice,jdbcType=NUMERIC},
      </if>
      <if test="activityPrice != null">
        ACTIVITY_PRICE = #{activityPrice,jdbcType=NUMERIC},
      </if>
      <if test="cashBalancePrice != null">
        CASH_BALANCE_PRICE = #{cashBalancePrice,jdbcType=NUMERIC},
      </if>
    </set>
    where BIDDING_ID = #{biddingId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBidding">
    <!--@mbggenerated-->
    update FUN_BUILDING_BIDDING
    set CITY_ID = #{cityId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      BEGIN_TIME = #{beginTime,jdbcType=TIMESTAMP},
      END_TIME = #{endTime,jdbcType=TIMESTAMP},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      PRICE = #{price,jdbcType=NUMERIC},
      COMP_PRICE = #{compPrice,jdbcType=NUMERIC},
      PERSONAL_PRICE = #{personalPrice,jdbcType=NUMERIC},
      IS_TOP = #{isTop,jdbcType=TINYINT},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      QQ_STATUS = #{qqStatus,jdbcType=TINYINT},
      HAOFANG_STATUS = #{haofangStatus,jdbcType=TINYINT},
      PAY_FLAG = #{payFlag,jdbcType=TINYINT},
      EXT_CODE_400 = #{extCode400,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      UA_TYPE = #{uaType,jdbcType=TINYINT},
      UA_ID = #{uaId,jdbcType=INTEGER},
      PERSONAL_COIN = #{personalCoin,jdbcType=NUMERIC},
      COMP_COIN = #{compCoin,jdbcType=NUMERIC},
      COMP_UA_ID = #{compUaId,jdbcType=INTEGER},
      BIDD_SOURCE = #{biddSource,jdbcType=TINYINT},
      RETURN_PRICE = #{returnPrice,jdbcType=TINYINT},
      SYNC_FLAG = #{syncFlag,jdbcType=TINYINT},
      YOUYOU_BIZ_SYNC_FLAG = #{youyouBizSyncFlag,jdbcType=TINYINT},
      SORT_PRICE = #{sortPrice,jdbcType=NUMERIC},
      ACTIVITY_PRICE = #{activityPrice,jdbcType=NUMERIC},
      CASH_BALANCE_PRICE = #{cashBalancePrice,jdbcType=NUMERIC}
    where BIDDING_ID = #{biddingId,jdbcType=INTEGER}
  </update>
  
	<select id="getFunBuildBiddingSuccInfo" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBidding" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" />
		from FUN_BUILDING_BIDDING where
		CITY_ID = #{cityId,jdbcType=INTEGER}
		and BUILD_ID = #{buildId,jdbcType=INTEGER}
		and IS_TOP = 1
		and QQ_STATUS = 1
		and END_TIME &gt; getdate()
		and PAY_FLAG = 1
	</select>
	<select id="getBuildBiddingCount" resultType="java.lang.Integer">
		select count(BUILD_ID) from FUN_BUILDING_BIDDING where
		ARCHIVE_ID=#{archiveId} and END_TIME&gt;GETDATE() and QQ_STATUS=1
		AND BEGIN_TIME &lt; GETDATE()
		AND HAOFANG_STATUS=1
	</select>
	<update id="updateBiddingEndTimeToLastTime">
		UPDATE FUN_BUILDING_BIDDING
		SET END_TIME = #{endTime}
		WHERE END_TIME &gt;= #{nowDate}
		AND ARCHIVE_ID IN
		<foreach close=")" collection="archiveIds" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</update>
	<select id="getNowBuildingUserInfo" resultMap="BaseResultMap">
		SELECT BUILD_ID,ARCHIVE_ID,BEGIN_TIME,END_TIME,IS_TOP
		FROM FUN_BUILDING_BIDDING
		WHERE IS_TOP = 1 AND END_TIME &gt; GETDATE() AND CITY_ID = #{cityId} 
		AND BUILD_ID IN 
			<foreach close=")" collection="buildIds" index="index" item="buildId" open="(" separator=",">
				#{buildId}
			</foreach>
		AND ( QQ_STATUS = 1 or HAOFANG_STATUS = 1)
	</select>
	<select id="getFutureBuildBiddList" resultMap="BaseResultMap">
		SELECT 
		<if test="null == buildIds"> TOP 6 </if>
		<include refid="Base_Column_List" />
		from FUN_BUILDING_BIDDING
		where CITY_ID = #{cityId} AND BEGIN_TIME &gt;= GETDATE() AND QQ_STATUS = 0 AND HAOFANG_STATUS = 0 AND ARCHIVE_ID = #{selfArchiveId}
		<choose>
			<when test="null == buildIds">
				AND BUILD_ID IN (SELECT BUILD_ID FROM FUN_BUILD_ATTENTION WHERE CITY_ID = #{cityId} AND ARCHIVE_ID = #{selfArchiveId})
			</when>
			<otherwise>
				BUILD_ID IN
				<foreach close=")" collection="buildIds" index="index" item="buildId" open="(" separator=",">
					#{buildId}
				</foreach>
			</otherwise>
		</choose>
	</select>

	<select id="selectOneByExample" parameterType="com.myfun.repository.admindb.po.AdminFunBuildingBiddingExample" resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		TOP 1
		<include refid="Base_Column_List" />
		from FUN_BUILDING_BIDDING
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	
	<select id="getSelfBiddList" resultMap="BaseResultMap">
		select TOP 6 <include refid="Base_Column_List" />
		from FUN_BUILDING_BIDDING
		where ARCHIVE_ID = #{srcArchiveId} and CITY_ID = #{cityId} and IS_TOP = 1 and END_TIME &gt;= #{nowTime}
		and BUILD_ID in (select BUILD_ID from FUN_BUILD_ATTENTION where CITY_ID = #{cityId} and ARCHIVE_ID =  #{srcArchiveId})
		AND ( QQ_STATUS = '1' OR HAOFANG_STATUS = '1' )
	</select>
	
	<select id="getBiddSuccList" resultMap="BaseResultMap">
		select TOP 6 <include refid="Base_Column_List" />
		from FUN_BUILDING_BIDDING
		where ARCHIVE_ID != #{srcArchiveId} and CITY_ID = #{cityId} and IS_TOP = 1 and END_TIME &gt;= #{nowTime}
		and BUILD_ID in (select BUILD_ID from FUN_BUILD_ATTENTION where CITY_ID = #{cityId} and ARCHIVE_ID = #{srcArchiveId}
		<if test="buildIds!=null">
		  and BUILD_ID not in (${buildIds})
	    </if>) AND ( QQ_STATUS = '1' OR HAOFANG_STATUS = '1' )
	</select>
 
</mapper>