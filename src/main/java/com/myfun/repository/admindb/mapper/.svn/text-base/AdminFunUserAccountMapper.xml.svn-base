<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.admindb.dao.AdminFunUserAccountMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.admindb.po.AdminFunUserAccount">
    <!--@mbggenerated-->
    <id column="UA_ID" jdbcType="INTEGER" property="uaId" />
    <result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
    <result column="CITY_ID" jdbcType="SMALLINT" property="cityId" />
    <result column="AMOUNT" jdbcType="DECIMAL" property="amount" />
    <result column="CONSUMPT" jdbcType="DECIMAL" property="consumpt" />
    <result column="SCORES" jdbcType="INTEGER" property="scores" />
    <result column="NUM_COM" jdbcType="INTEGER" property="numCom" />
    <result column="REAMOUNT" jdbcType="DECIMAL" property="reamount" />
    <result column="NUM_SMS" jdbcType="INTEGER" property="numSms" />
    <result column="CON_SMS" jdbcType="INTEGER" property="conSms" />
    <result column="NUM_RECOM" jdbcType="INTEGER" property="numRecom" />
    <result column="USER_LASTLOGINTIME" jdbcType="TIMESTAMP" property="userLastlogintime" />
    <result column="ENABLE" jdbcType="BIT" property="enable" />
    <result column="ACCOUNT_QUESTION1" jdbcType="VARCHAR" property="accountQuestion1" />
    <result column="ACCOUNT_ANSWER1" jdbcType="VARCHAR" property="accountAnswer1" />
    <result column="ACCOUNT_QUESTION2" jdbcType="VARCHAR" property="accountQuestion2" />
    <result column="ACCOUNT_ANSWER2" jdbcType="VARCHAR" property="accountAnswer2" />
    <result column="AMOUNT_SMSLOCK" jdbcType="DECIMAL" property="amountSmslock" />
    <result column="HAOFANG_AMOUNT" jdbcType="DECIMAL" property="haofangAmount" />
    <result column="HIGH_AMOUNT" jdbcType="DECIMAL" property="highAmount" />
    <result column="BALANCE" jdbcType="DECIMAL" property="balance" />
    <result column="HAOFANG_AMOUNT_TICKET" jdbcType="DECIMAL" property="haofangAmountTicket" />
    <result column="HAOFANG_BUY" jdbcType="DECIMAL" property="haofangBuy" />
    <result column="UA_TYPE" jdbcType="TINYINT" property="uaType" />
    <result column="USED_COMP_HF" jdbcType="DECIMAL" property="usedCompHf" />
    <result column="AVAILABLE_DATE" jdbcType="TIMESTAMP" property="availableDate" />
    <result column="AMOUNT_LOCK" jdbcType="DECIMAL" property="amountLock" />
    <result column="AMOUNT_INCOME" jdbcType="DECIMAL" property="amountIncome" />
    <result column="CONTRACT_VERSION" jdbcType="VARCHAR" property="contractVersion" />
    <result column="CONTRACT_JSON" jdbcType="VARCHAR" property="contractJson" />
    <result column="VOIP_AMOUNT" jdbcType="DECIMAL" property="voipAmount" />
    <result column="YOU_AMOUNT" jdbcType="DECIMAL" property="youAmount" />
    <result column="VOIP_USED_COMP_HF" jdbcType="DECIMAL" property="voipUsedCompHf" />
    <result column="VOIP_AVAILABLE_DATE" jdbcType="TIMESTAMP" property="voipAvailableDate" />
    <result column="VOIP_MINUTE" jdbcType="INTEGER" property="voipMinute" />
    <result column="DIDI_BAIL" jdbcType="DECIMAL" property="didiBail" />
    <result column="CASH_MONEY" jdbcType="DECIMAL" property="cashMoney" />
    <result column="ALREADY_GET_MONEY" jdbcType="DECIMAL" property="alreadyGetMoney" />
    <result column="BUY_HAOFANG_BUY" jdbcType="DECIMAL" property="buyHaofangBuy" />
    <result column="TRUE_HOUSE_DEPOSIT" jdbcType="NUMERIC" property="trueHouseDeposit" />
    <result column="FREEZING_CASH_MONEY" jdbcType="NUMERIC" property="freezingCashMoney" />
    <result column="SHARE_MONEY" jdbcType="DECIMAL" property="shareMoney" />
    <result column="ACCOUNT_STATUS" jdbcType="TINYINT" property="accountStatus" />
    <result column="SALES_MONEY" jdbcType="NUMERIC" property="salesMoney" />
    <result column="CUR_MONTH_SHARE_MONEY" jdbcType="DECIMAL" property="curMonthShareMoney" />
    <result column="LAST_SHARE_MONEY" jdbcType="TIMESTAMP" property="lastShareMoney" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    UA_ID, USER_MOBILE, CITY_ID, AMOUNT, CONSUMPT, SCORES, NUM_COM, REAMOUNT, NUM_SMS, 
    CON_SMS, NUM_RECOM, USER_LASTLOGINTIME, [ENABLE], ACCOUNT_QUESTION1, ACCOUNT_ANSWER1, 
    ACCOUNT_QUESTION2, ACCOUNT_ANSWER2, AMOUNT_SMSLOCK, HAOFANG_AMOUNT, HIGH_AMOUNT, 
    BALANCE, HAOFANG_AMOUNT_TICKET, HAOFANG_BUY, UA_TYPE, USED_COMP_HF, AVAILABLE_DATE, 
    AMOUNT_LOCK, AMOUNT_INCOME, CONTRACT_VERSION, CONTRACT_JSON, VOIP_AMOUNT, YOU_AMOUNT, 
    VOIP_USED_COMP_HF, VOIP_AVAILABLE_DATE, VOIP_MINUTE, DIDI_BAIL, CASH_MONEY, ALREADY_GET_MONEY, 
    BUY_HAOFANG_BUY, TRUE_HOUSE_DEPOSIT, FREEZING_CASH_MONEY, SHARE_MONEY, ACCOUNT_STATUS, 
    SALES_MONEY, CUR_MONTH_SHARE_MONEY, LAST_SHARE_MONEY
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_USER_ACCOUNT
    where UA_ID = #{uaId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_USER_ACCOUNT
    where UA_ID = #{uaId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.admindb.po.AdminFunUserAccount">
    <!--@mbggenerated-->
    <selectKey keyProperty="uaId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_USER_ACCOUNT_UA_ID
    </selectKey>
    insert into FUN_USER_ACCOUNT (UA_ID, USER_MOBILE, CITY_ID, 
      AMOUNT, CONSUMPT, SCORES, 
      NUM_COM, REAMOUNT, NUM_SMS, 
      CON_SMS, NUM_RECOM, USER_LASTLOGINTIME, 
      [ENABLE], ACCOUNT_QUESTION1, ACCOUNT_ANSWER1, 
      ACCOUNT_QUESTION2, ACCOUNT_ANSWER2, AMOUNT_SMSLOCK, 
      HAOFANG_AMOUNT, HIGH_AMOUNT, BALANCE, 
      HAOFANG_AMOUNT_TICKET, HAOFANG_BUY, UA_TYPE, 
      USED_COMP_HF, AVAILABLE_DATE, AMOUNT_LOCK, 
      AMOUNT_INCOME, CONTRACT_VERSION, CONTRACT_JSON, 
      VOIP_AMOUNT, YOU_AMOUNT, VOIP_USED_COMP_HF, 
      VOIP_AVAILABLE_DATE, VOIP_MINUTE, DIDI_BAIL, 
      CASH_MONEY, ALREADY_GET_MONEY, BUY_HAOFANG_BUY, 
      TRUE_HOUSE_DEPOSIT, FREEZING_CASH_MONEY, SHARE_MONEY, 
      ACCOUNT_STATUS, SALES_MONEY, CUR_MONTH_SHARE_MONEY, 
      LAST_SHARE_MONEY)
    values (#{uaId,jdbcType=INTEGER}, #{userMobile,jdbcType=VARCHAR}, #{cityId,jdbcType=SMALLINT}, 
      #{amount,jdbcType=DECIMAL}, #{consumpt,jdbcType=DECIMAL}, #{scores,jdbcType=INTEGER}, 
      #{numCom,jdbcType=INTEGER}, #{reamount,jdbcType=DECIMAL}, #{numSms,jdbcType=INTEGER}, 
      #{conSms,jdbcType=INTEGER}, #{numRecom,jdbcType=INTEGER}, #{userLastlogintime,jdbcType=TIMESTAMP}, 
      #{enable,jdbcType=BIT}, #{accountQuestion1,jdbcType=VARCHAR}, #{accountAnswer1,jdbcType=VARCHAR}, 
      #{accountQuestion2,jdbcType=VARCHAR}, #{accountAnswer2,jdbcType=VARCHAR}, #{amountSmslock,jdbcType=DECIMAL}, 
      #{haofangAmount,jdbcType=DECIMAL}, #{highAmount,jdbcType=DECIMAL}, #{balance,jdbcType=DECIMAL}, 
      #{haofangAmountTicket,jdbcType=DECIMAL}, #{haofangBuy,jdbcType=DECIMAL}, #{uaType,jdbcType=TINYINT}, 
      #{usedCompHf,jdbcType=DECIMAL}, #{availableDate,jdbcType=TIMESTAMP}, #{amountLock,jdbcType=DECIMAL}, 
      #{amountIncome,jdbcType=DECIMAL}, #{contractVersion,jdbcType=VARCHAR}, #{contractJson,jdbcType=VARCHAR}, 
      #{voipAmount,jdbcType=DECIMAL}, #{youAmount,jdbcType=DECIMAL}, #{voipUsedCompHf,jdbcType=DECIMAL}, 
      #{voipAvailableDate,jdbcType=TIMESTAMP}, #{voipMinute,jdbcType=INTEGER}, #{didiBail,jdbcType=DECIMAL}, 
      #{cashMoney,jdbcType=DECIMAL}, #{alreadyGetMoney,jdbcType=DECIMAL}, #{buyHaofangBuy,jdbcType=DECIMAL}, 
      #{trueHouseDeposit,jdbcType=NUMERIC}, #{freezingCashMoney,jdbcType=NUMERIC}, #{shareMoney,jdbcType=DECIMAL}, 
      #{accountStatus,jdbcType=TINYINT}, #{salesMoney,jdbcType=NUMERIC}, #{curMonthShareMoney,jdbcType=DECIMAL}, 
      #{lastShareMoney,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.admindb.po.AdminFunUserAccount">
    <!--@mbggenerated-->
    <selectKey keyProperty="uaId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_USER_ACCOUNT_UA_ID
    </selectKey>
    insert into FUN_USER_ACCOUNT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      UA_ID,
      <if test="userMobile != null">
        USER_MOBILE,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="amount != null">
        AMOUNT,
      </if>
      <if test="consumpt != null">
        CONSUMPT,
      </if>
      <if test="scores != null">
        SCORES,
      </if>
      <if test="numCom != null">
        NUM_COM,
      </if>
      <if test="reamount != null">
        REAMOUNT,
      </if>
      <if test="numSms != null">
        NUM_SMS,
      </if>
      <if test="conSms != null">
        CON_SMS,
      </if>
      <if test="numRecom != null">
        NUM_RECOM,
      </if>
      <if test="userLastlogintime != null">
        USER_LASTLOGINTIME,
      </if>
      <if test="enable != null">
        [ENABLE],
      </if>
      <if test="accountQuestion1 != null">
        ACCOUNT_QUESTION1,
      </if>
      <if test="accountAnswer1 != null">
        ACCOUNT_ANSWER1,
      </if>
      <if test="accountQuestion2 != null">
        ACCOUNT_QUESTION2,
      </if>
      <if test="accountAnswer2 != null">
        ACCOUNT_ANSWER2,
      </if>
      <if test="amountSmslock != null">
        AMOUNT_SMSLOCK,
      </if>
      <if test="haofangAmount != null">
        HAOFANG_AMOUNT,
      </if>
      <if test="highAmount != null">
        HIGH_AMOUNT,
      </if>
      <if test="balance != null">
        BALANCE,
      </if>
      <if test="haofangAmountTicket != null">
        HAOFANG_AMOUNT_TICKET,
      </if>
      <if test="haofangBuy != null">
        HAOFANG_BUY,
      </if>
      <if test="uaType != null">
        UA_TYPE,
      </if>
      <if test="usedCompHf != null">
        USED_COMP_HF,
      </if>
      <if test="availableDate != null">
        AVAILABLE_DATE,
      </if>
      <if test="amountLock != null">
        AMOUNT_LOCK,
      </if>
      <if test="amountIncome != null">
        AMOUNT_INCOME,
      </if>
      <if test="contractVersion != null">
        CONTRACT_VERSION,
      </if>
      <if test="contractJson != null">
        CONTRACT_JSON,
      </if>
      <if test="voipAmount != null">
        VOIP_AMOUNT,
      </if>
      <if test="youAmount != null">
        YOU_AMOUNT,
      </if>
      <if test="voipUsedCompHf != null">
        VOIP_USED_COMP_HF,
      </if>
      <if test="voipAvailableDate != null">
        VOIP_AVAILABLE_DATE,
      </if>
      <if test="voipMinute != null">
        VOIP_MINUTE,
      </if>
      <if test="didiBail != null">
        DIDI_BAIL,
      </if>
      <if test="cashMoney != null">
        CASH_MONEY,
      </if>
      <if test="alreadyGetMoney != null">
        ALREADY_GET_MONEY,
      </if>
      <if test="buyHaofangBuy != null">
        BUY_HAOFANG_BUY,
      </if>
      <if test="trueHouseDeposit != null">
        TRUE_HOUSE_DEPOSIT,
      </if>
      <if test="freezingCashMoney != null">
        FREEZING_CASH_MONEY,
      </if>
      <if test="shareMoney != null">
        SHARE_MONEY,
      </if>
      <if test="accountStatus != null">
        ACCOUNT_STATUS,
      </if>
      <if test="salesMoney != null">
        SALES_MONEY,
      </if>
      <if test="curMonthShareMoney != null">
        CUR_MONTH_SHARE_MONEY,
      </if>
      <if test="lastShareMoney != null">
        LAST_SHARE_MONEY,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uaId,jdbcType=INTEGER},
      <if test="userMobile != null">
        #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="consumpt != null">
        #{consumpt,jdbcType=DECIMAL},
      </if>
      <if test="scores != null">
        #{scores,jdbcType=INTEGER},
      </if>
      <if test="numCom != null">
        #{numCom,jdbcType=INTEGER},
      </if>
      <if test="reamount != null">
        #{reamount,jdbcType=DECIMAL},
      </if>
      <if test="numSms != null">
        #{numSms,jdbcType=INTEGER},
      </if>
      <if test="conSms != null">
        #{conSms,jdbcType=INTEGER},
      </if>
      <if test="numRecom != null">
        #{numRecom,jdbcType=INTEGER},
      </if>
      <if test="userLastlogintime != null">
        #{userLastlogintime,jdbcType=TIMESTAMP},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=BIT},
      </if>
      <if test="accountQuestion1 != null">
        #{accountQuestion1,jdbcType=VARCHAR},
      </if>
      <if test="accountAnswer1 != null">
        #{accountAnswer1,jdbcType=VARCHAR},
      </if>
      <if test="accountQuestion2 != null">
        #{accountQuestion2,jdbcType=VARCHAR},
      </if>
      <if test="accountAnswer2 != null">
        #{accountAnswer2,jdbcType=VARCHAR},
      </if>
      <if test="amountSmslock != null">
        #{amountSmslock,jdbcType=DECIMAL},
      </if>
      <if test="haofangAmount != null">
        #{haofangAmount,jdbcType=DECIMAL},
      </if>
      <if test="highAmount != null">
        #{highAmount,jdbcType=DECIMAL},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="haofangAmountTicket != null">
        #{haofangAmountTicket,jdbcType=DECIMAL},
      </if>
      <if test="haofangBuy != null">
        #{haofangBuy,jdbcType=DECIMAL},
      </if>
      <if test="uaType != null">
        #{uaType,jdbcType=TINYINT},
      </if>
      <if test="usedCompHf != null">
        #{usedCompHf,jdbcType=DECIMAL},
      </if>
      <if test="availableDate != null">
        #{availableDate,jdbcType=TIMESTAMP},
      </if>
      <if test="amountLock != null">
        #{amountLock,jdbcType=DECIMAL},
      </if>
      <if test="amountIncome != null">
        #{amountIncome,jdbcType=DECIMAL},
      </if>
      <if test="contractVersion != null">
        #{contractVersion,jdbcType=VARCHAR},
      </if>
      <if test="contractJson != null">
        #{contractJson,jdbcType=VARCHAR},
      </if>
      <if test="voipAmount != null">
        #{voipAmount,jdbcType=DECIMAL},
      </if>
      <if test="youAmount != null">
        #{youAmount,jdbcType=DECIMAL},
      </if>
      <if test="voipUsedCompHf != null">
        #{voipUsedCompHf,jdbcType=DECIMAL},
      </if>
      <if test="voipAvailableDate != null">
        #{voipAvailableDate,jdbcType=TIMESTAMP},
      </if>
      <if test="voipMinute != null">
        #{voipMinute,jdbcType=INTEGER},
      </if>
      <if test="didiBail != null">
        #{didiBail,jdbcType=DECIMAL},
      </if>
      <if test="cashMoney != null">
        #{cashMoney,jdbcType=DECIMAL},
      </if>
      <if test="alreadyGetMoney != null">
        #{alreadyGetMoney,jdbcType=DECIMAL},
      </if>
      <if test="buyHaofangBuy != null">
        #{buyHaofangBuy,jdbcType=DECIMAL},
      </if>
      <if test="trueHouseDeposit != null">
        #{trueHouseDeposit,jdbcType=NUMERIC},
      </if>
      <if test="freezingCashMoney != null">
        #{freezingCashMoney,jdbcType=NUMERIC},
      </if>
      <if test="shareMoney != null">
        #{shareMoney,jdbcType=DECIMAL},
      </if>
      <if test="accountStatus != null">
        #{accountStatus,jdbcType=TINYINT},
      </if>
      <if test="salesMoney != null">
        #{salesMoney,jdbcType=NUMERIC},
      </if>
      <if test="curMonthShareMoney != null">
        #{curMonthShareMoney,jdbcType=DECIMAL},
      </if>
      <if test="lastShareMoney != null">
        #{lastShareMoney,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.admindb.po.AdminFunUserAccount">
    <!--@mbggenerated-->
    update FUN_USER_ACCOUNT
    <set>
      <if test="userMobile != null">
        USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="amount != null">
        AMOUNT = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="consumpt != null">
        CONSUMPT = #{consumpt,jdbcType=DECIMAL},
      </if>
      <if test="scores != null">
        SCORES = #{scores,jdbcType=INTEGER},
      </if>
      <if test="numCom != null">
        NUM_COM = #{numCom,jdbcType=INTEGER},
      </if>
      <if test="reamount != null">
        REAMOUNT = #{reamount,jdbcType=DECIMAL},
      </if>
      <if test="numSms != null">
        NUM_SMS = #{numSms,jdbcType=INTEGER},
      </if>
      <if test="conSms != null">
        CON_SMS = #{conSms,jdbcType=INTEGER},
      </if>
      <if test="numRecom != null">
        NUM_RECOM = #{numRecom,jdbcType=INTEGER},
      </if>
      <if test="userLastlogintime != null">
        USER_LASTLOGINTIME = #{userLastlogintime,jdbcType=TIMESTAMP},
      </if>
      <if test="enable != null">
        [ENABLE] = #{enable,jdbcType=BIT},
      </if>
      <if test="accountQuestion1 != null">
        ACCOUNT_QUESTION1 = #{accountQuestion1,jdbcType=VARCHAR},
      </if>
      <if test="accountAnswer1 != null">
        ACCOUNT_ANSWER1 = #{accountAnswer1,jdbcType=VARCHAR},
      </if>
      <if test="accountQuestion2 != null">
        ACCOUNT_QUESTION2 = #{accountQuestion2,jdbcType=VARCHAR},
      </if>
      <if test="accountAnswer2 != null">
        ACCOUNT_ANSWER2 = #{accountAnswer2,jdbcType=VARCHAR},
      </if>
      <if test="amountSmslock != null">
        AMOUNT_SMSLOCK = #{amountSmslock,jdbcType=DECIMAL},
      </if>
      <if test="haofangAmount != null">
        HAOFANG_AMOUNT = #{haofangAmount,jdbcType=DECIMAL},
      </if>
      <if test="highAmount != null">
        HIGH_AMOUNT = #{highAmount,jdbcType=DECIMAL},
      </if>
      <if test="balance != null">
        BALANCE = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="haofangAmountTicket != null">
        HAOFANG_AMOUNT_TICKET = #{haofangAmountTicket,jdbcType=DECIMAL},
      </if>
      <if test="haofangBuy != null">
        HAOFANG_BUY = #{haofangBuy,jdbcType=DECIMAL},
      </if>
      <if test="uaType != null">
        UA_TYPE = #{uaType,jdbcType=TINYINT},
      </if>
      <if test="usedCompHf != null">
        USED_COMP_HF = #{usedCompHf,jdbcType=DECIMAL},
      </if>
      <if test="availableDate != null">
        AVAILABLE_DATE = #{availableDate,jdbcType=TIMESTAMP},
      </if>
      <if test="amountLock != null">
        AMOUNT_LOCK = #{amountLock,jdbcType=DECIMAL},
      </if>
      <if test="amountIncome != null">
        AMOUNT_INCOME = #{amountIncome,jdbcType=DECIMAL},
      </if>
      <if test="contractVersion != null">
        CONTRACT_VERSION = #{contractVersion,jdbcType=VARCHAR},
      </if>
      <if test="contractJson != null">
        CONTRACT_JSON = #{contractJson,jdbcType=VARCHAR},
      </if>
      <if test="voipAmount != null">
        VOIP_AMOUNT = #{voipAmount,jdbcType=DECIMAL},
      </if>
      <if test="youAmount != null">
        YOU_AMOUNT = #{youAmount,jdbcType=DECIMAL},
      </if>
      <if test="voipUsedCompHf != null">
        VOIP_USED_COMP_HF = #{voipUsedCompHf,jdbcType=DECIMAL},
      </if>
      <if test="voipAvailableDate != null">
        VOIP_AVAILABLE_DATE = #{voipAvailableDate,jdbcType=TIMESTAMP},
      </if>
      <if test="voipMinute != null">
        VOIP_MINUTE = #{voipMinute,jdbcType=INTEGER},
      </if>
      <if test="didiBail != null">
        DIDI_BAIL = #{didiBail,jdbcType=DECIMAL},
      </if>
      <if test="cashMoney != null">
        CASH_MONEY = #{cashMoney,jdbcType=DECIMAL},
      </if>
      <if test="alreadyGetMoney != null">
        ALREADY_GET_MONEY = #{alreadyGetMoney,jdbcType=DECIMAL},
      </if>
      <if test="buyHaofangBuy != null">
        BUY_HAOFANG_BUY = #{buyHaofangBuy,jdbcType=DECIMAL},
      </if>
      <if test="trueHouseDeposit != null">
        TRUE_HOUSE_DEPOSIT = #{trueHouseDeposit,jdbcType=NUMERIC},
      </if>
      <if test="freezingCashMoney != null">
        FREEZING_CASH_MONEY = #{freezingCashMoney,jdbcType=NUMERIC},
      </if>
      <if test="shareMoney != null">
        SHARE_MONEY = #{shareMoney,jdbcType=DECIMAL},
      </if>
      <if test="accountStatus != null">
        ACCOUNT_STATUS = #{accountStatus,jdbcType=TINYINT},
      </if>
      <if test="salesMoney != null">
        SALES_MONEY = #{salesMoney,jdbcType=NUMERIC},
      </if>
      <if test="curMonthShareMoney != null">
        CUR_MONTH_SHARE_MONEY = #{curMonthShareMoney,jdbcType=DECIMAL},
      </if>
      <if test="lastShareMoney != null">
        LAST_SHARE_MONEY = #{lastShareMoney,jdbcType=TIMESTAMP},
      </if>
    </set>
    where UA_ID = #{uaId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.admindb.po.AdminFunUserAccount">
    <!--@mbggenerated-->
    update FUN_USER_ACCOUNT
    set USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      CITY_ID = #{cityId,jdbcType=SMALLINT},
      AMOUNT = #{amount,jdbcType=DECIMAL},
      CONSUMPT = #{consumpt,jdbcType=DECIMAL},
      SCORES = #{scores,jdbcType=INTEGER},
      NUM_COM = #{numCom,jdbcType=INTEGER},
      REAMOUNT = #{reamount,jdbcType=DECIMAL},
      NUM_SMS = #{numSms,jdbcType=INTEGER},
      CON_SMS = #{conSms,jdbcType=INTEGER},
      NUM_RECOM = #{numRecom,jdbcType=INTEGER},
      USER_LASTLOGINTIME = #{userLastlogintime,jdbcType=TIMESTAMP},
      [ENABLE] = #{enable,jdbcType=BIT},
      ACCOUNT_QUESTION1 = #{accountQuestion1,jdbcType=VARCHAR},
      ACCOUNT_ANSWER1 = #{accountAnswer1,jdbcType=VARCHAR},
      ACCOUNT_QUESTION2 = #{accountQuestion2,jdbcType=VARCHAR},
      ACCOUNT_ANSWER2 = #{accountAnswer2,jdbcType=VARCHAR},
      AMOUNT_SMSLOCK = #{amountSmslock,jdbcType=DECIMAL},
      HAOFANG_AMOUNT = #{haofangAmount,jdbcType=DECIMAL},
      HIGH_AMOUNT = #{highAmount,jdbcType=DECIMAL},
      BALANCE = #{balance,jdbcType=DECIMAL},
      HAOFANG_AMOUNT_TICKET = #{haofangAmountTicket,jdbcType=DECIMAL},
      HAOFANG_BUY = #{haofangBuy,jdbcType=DECIMAL},
      UA_TYPE = #{uaType,jdbcType=TINYINT},
      USED_COMP_HF = #{usedCompHf,jdbcType=DECIMAL},
      AVAILABLE_DATE = #{availableDate,jdbcType=TIMESTAMP},
      AMOUNT_LOCK = #{amountLock,jdbcType=DECIMAL},
      AMOUNT_INCOME = #{amountIncome,jdbcType=DECIMAL},
      CONTRACT_VERSION = #{contractVersion,jdbcType=VARCHAR},
      CONTRACT_JSON = #{contractJson,jdbcType=VARCHAR},
      VOIP_AMOUNT = #{voipAmount,jdbcType=DECIMAL},
      YOU_AMOUNT = #{youAmount,jdbcType=DECIMAL},
      VOIP_USED_COMP_HF = #{voipUsedCompHf,jdbcType=DECIMAL},
      VOIP_AVAILABLE_DATE = #{voipAvailableDate,jdbcType=TIMESTAMP},
      VOIP_MINUTE = #{voipMinute,jdbcType=INTEGER},
      DIDI_BAIL = #{didiBail,jdbcType=DECIMAL},
      CASH_MONEY = #{cashMoney,jdbcType=DECIMAL},
      ALREADY_GET_MONEY = #{alreadyGetMoney,jdbcType=DECIMAL},
      BUY_HAOFANG_BUY = #{buyHaofangBuy,jdbcType=DECIMAL},
      TRUE_HOUSE_DEPOSIT = #{trueHouseDeposit,jdbcType=NUMERIC},
      FREEZING_CASH_MONEY = #{freezingCashMoney,jdbcType=NUMERIC},
      SHARE_MONEY = #{shareMoney,jdbcType=DECIMAL},
      ACCOUNT_STATUS = #{accountStatus,jdbcType=TINYINT},
      SALES_MONEY = #{salesMoney,jdbcType=NUMERIC},
      CUR_MONTH_SHARE_MONEY = #{curMonthShareMoney,jdbcType=DECIMAL},
      LAST_SHARE_MONEY = #{lastShareMoney,jdbcType=TIMESTAMP}
    where UA_ID = #{uaId,jdbcType=INTEGER}
  </update>
  
  <resultMap id="sumCountMap" type="com.myfun.repository.admindb.dao.AdminPaidCountDto">
  	<result column="SUM_AMOUNT" jdbcType="VARCHAR" property="sumAmount" />
    <result column="SUM_HF_AMOUNT" jdbcType="VARCHAR" property="sumhfAmount" />
    <result column="SUM_HF_BUY" jdbcType="VARCHAR" property="sumhfBuy" />
  </resultMap>
  
  <resultMap extends="BaseResultMap" id="baseMapDto" type="com.myfun.repository.admindb.dto.AdminFunUsersAccountDto">
  	<result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="CITY_NAME" jdbcType="VARCHAR" property="cityName" />
    <result column="USER_MOBILET" jdbcType="VARCHAR" property="userMobile" />
    <result column="PRICE_RS" jdbcType="VARCHAR" property="priceRs" />
    <result column="AVA_DATE_FLAG" jdbcType="VARCHAR" property="avaDateFlag" />
  </resultMap>
  
  <!-- buniess -->
  
  <update id="updatePhoneNum" parameterType="java.util.Map">
  	update fun_user_account 
  	set user_mobile = #{newNum} 
  	where user_mobile =#{oldNum} 
  </update>
  
  <select id="getAmountByArchiveId" resultMap="BaseResultMap">
   SELECT
	 ISNULL(fua.AMOUNT, 0) as AMOUNT, ISNULL(fua.AMOUNT_SMSLOCK, 0) as AMOUNT_SMSLOCK, fua.UA_ID
	FROM
		FUN_USER_ACCOUNT fua
	JOIN FUN_ARCHIVE fa ON fua.UA_ID = fa.UA_ID
	WHERE
		fa.ARCHIVE_ID = #{aid}
  </select>
  
  <update id="updateAmountAndConsumpt">
  	update FUN_USER_ACCOUNT set AMOUNT = ISNULL(AMOUNT, 0)-${price}, CONSUMPT=ISNULL(CONSUMPT,0)+${price} where UA_ID = #{uaid}
  </update>
  
  <update id="updateScore">
  	UPDATE FUN_USERS_COUNT SET USER_PAID_SCORE = ISNULL(USER_PAID_SCORE, 0) + #{score} WHERE ARCHIVE_ID = #{aid};
  </update>
  
  <select id="getScoreByArchiveId" parameterType="java.lang.Integer" resultType="java.lang.Double">
  	 SELECT  ((USER_SALE_SCORE * USER_SALE_PER)+(USER_LEASE_SCORE * USER_LEASE_PER)+(USER_UINFO_SCORE*USER_UINFO_PER)+(USER_PAID_SCORE*USER_PAID_PER)+(USER_PUB_SCORE*USER_PUB_PER)) score  FROM  FUN_USERS_COUNT where ARCHIVE_ID=#{archivedId}
  </select>
  
  <delete id="deleteUaIdByCompId">
  	delete from FUN_USER_ACCOUNT WHERE UA_ID = (SELECT UA_ID FROM FUN_COMP WHERE COMP_ID = #{compId} )
  </delete>
  
  <select id="sumAmount" resultMap="sumCountMap">
  	SELECT SUM(AMOUNT) AS SUM_AMOUNT, (SUM(HAOFANG_AMOUNT)-SUM(HAOFANG_BUY)) 
	AS SUM_HF_AMOUNT, SUM(HAOFANG_BUY) AS SUM_HF_BUY FROM FUN_USER_ACCOUNT WHERE 1 = 1
	<if test="flag != null and flag != '' and flag == '1'">
        AND CITY_ID = #{cityId}
    </if>
   <if test="flag != null and flag != '' and flag == '0'">
      AND CITY_ID IN (SELECT CITY_ID FROM CRM_REGION_CITY WHERE COMP_ID = #{crmCompId}
    </if>
  </select>
  
  <select id="selectByTypeAndOther" parameterType="com.myfun.repository.admindb.param.AdminPaidCountParam" resultMap="baseMapDto">
  	select isnull(AMOUNT, 0) as AMOUNT, isnull(HAOFANG_AMOUNT, 0) as HAOFANG_AMOUNT,UA_ID as USER_NAME, CITY_ID as CITY_NAME
  	<!-- (SELECT USER_NAME FROM FUN_ARCHIVE WHERE FUN_ARCHIVE.UA_ID = FUN_USER_ACCOUNT.UA_ID AND FUN_ARCHIVE.VALID_ACCOUNT = 1) as USER_NAME,
  	(SELECT CITY_NAME FROM FUN_CITY WHERE FUN_CITY.CITY_ID = FUN_USER_ACCOUNT.CITY_ID) as CITY_NAME,
  	(SELECT USER_MOBILE FROM FUN_ARCHIVE WHERE FUN_ARCHIVE.UA_ID = FUN_USER_ACCOUNT.UA_ID AND FUN_ARCHIVE.VALID_ACCOUNT = 1) as USER_MOBILET -->
  	from FUN_USER_ACCOUNT
  	where 1 = 1
   	<if test="flag == 1">
        AND CITY_ID = #{cityId}
    </if> 
    <if test="flag == 2">
        AND CITY_ID in (SELECT CITY_ID FROM CRM_REGION_CITY WHERE COMP_ID = #{crmCompId})
    </if> 
     <if test="faaType ==1">  
          AND    AMOUNT &gt; 0.13
     </if>  
     	<if test="faaType ==2">  
           AND   HAOFANG_BUY &gt; 0
     </if>  
      <if test="faaType ==3">  
           AND   HAOFANG_AMOUNT &gt; 0
     </if>  
    order by HAOFANG_AMOUNT DESC, AMOUNT DESC
  </select>
  
  <update id="updateHaoFangAmount" parameterType="java.lang.Integer">
  	update FUN_USER_ACCOUNT SET HAOFANG_AMOUNT = ISNULL(HAOFANG_AMOUNT,0) + 10 WHERE UA_ID = #{uaId}
  </update>
  <update id="updateUsedCompHf">
  	update FUN_USER_ACCOUNT SET AVAILABLE_DATE = getdate(), USED_COMP_HF = #{usedCompAmount} WHERE UA_ID = #{uaId}
  </update>
  <select id="getUsableCompPrice" resultMap="baseMapDto">
    select HAOFANG_BUY, ROUND((#{compLimitPrice} - ISNULL(USED_COMP_HF,0)),1) as PRICE_RS,(case when (AVAILABLE_DATE &lt;= getdate() and dateadd(HH,24,
	CONVERT(VARCHAR(5),DATEPART(YYYY,AVAILABLE_DATE)) + '-' + CONVERT(VARCHAR(5),DATEPART(MM,AVAILABLE_DATE)) + '-' + 
	CONVERT(VARCHAR(5),DATEPART(dd,AVAILABLE_DATE))) &gt; getdate()) then 1 else 2 end) as AVA_DATE_FLAG from FUN_USER_ACCOUNT WHERE UA_ID = #{uaId}
  </select>
  <select id="selectByUserMoblie" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from FUN_USER_ACCOUNT
    where USER_MOBILE = #{userMobile}
  </select>
  <update id="updateSendGift">
  	UPDATE FUN_USER_ACCOUNT SET HAOFANG_AMOUNT = ISNULL(HAOFANG_AMOUNT, 0) + #{sendWxQuan} + #{sendBuyQuan} where UA_ID = #{compUaid}
  </update>
	
	<update id="subtractMoney">
		update FUN_USER_ACCOUNT set HAOFANG_AMOUNT=HAOFANG_AMOUNT-#{subPrice},HAOFANG_BUY=HAOFANG_BUY-#{subPrice} where UA_ID=#{uaId}
	</update>
	
	<update id="updateVoipUsedCompHf">
		UPDATE FUN_USER_ACCOUNT SET AVAILABLE_DATE = getdate(), VOIP_USED_COMP_HF = #{voipUsedCompAmount} WHERE UA_ID = #{uaId}
	</update>
	<select id="getVoipUsableCompPrice" resultMap="baseMapDto">
		<![CDATA[
			SELECT HAOFANG_BUY,
			ROUND((#{compLimitPrice} - ISNULL(VOIP_USED_COMP_HF,0)),1) as PRICE_RS,
			(case when (AVAILABLE_DATE <= getdate() and dateadd(HH,24,CONVERT(VARCHAR(100),AVAILABLE_DATE,23)) > getdate()) then 1 else 2 end) as AVA_DATE_FLAG 
			from FUN_USER_ACCOUNT WHERE UA_ID = #{uaId}
		]]>
	</select>
	 <select id="getAccountByArchiveId" resultMap="BaseResultMap">
	   SELECT
		 	fua.*
		FROM
			FUN_USER_ACCOUNT fua
		JOIN FUN_ARCHIVE fa ON fua.UA_ID = fa.UA_ID
		WHERE
		fa.ARCHIVE_ID = #{archiveId}
  </select>

  <select id="queryMoneyIsEnough" resultType="java.util.Map">
    select HAOFANG_AMOUNT, HAOFANG_BUY, ROUND((#{biddPrice}- ISNULL(USED_COMP_HF,0)),1) as PRICE_RS,
    (case when (AVAILABLE_DATE &lt;= getdate() and dateadd(HH,24,CONVERT(VARCHAR(100),AVAILABLE_DATE,23))
    &gt; getdate()) then 1  else 2 end) as AVA_DATE_FLAG from FUN_USER_ACCOUNT WHERE UA_ID = #{uaId}
  </select>
  
	<update id="updateHaoFangAmountByBiddType">
		UPDATE FUN_USER_ACCOUNT SET HAOFANG_AMOUNT = HAOFANG_AMOUNT - #{biddPrice}
		<if test="biddType == 1">
			,AMOUNT_LOCK = ISNULL(AMOUNT_LOCK,0) + #{biddPrice} 
		</if> 
		WHERE UA_ID = #{uaId} AND HAOFANG_AMOUNT &gt;= #{biddPrice} 
	</update>
	
	<update id="updateUsedCompHfByUaId">
		UPDATE FUN_USER_ACCOUNT SET AVAILABLE_DATE = GETDATE(), USED_COMP_HF = ISNULL(USED_COMP_HF,0) + #{biddPrice}
		WHERE UA_ID = #{uaId}
	</update>
	
	<update id="updateHaoFangBuyByUaId">
		UPDATE FUN_USER_ACCOUNT SET HAOFANG_BUY = HAOFANG_AMOUNT 
		WHERE UA_ID = #{uaId} AND HAOFANG_BUY &gt; HAOFANG_AMOUNT
	</update>
  <update id="updateGift4HfAmount">
      update FUN_USER_ACCOUNT set HAOFANG_AMOUNT = isnull(HAOFANG_AMOUNT, 0) + #{sendHfQuan} where UA_ID = #{uaId}
    </update>
  <update id="updateShareMoney" parameterType="java.lang.Integer">
  	update FUN_USER_ACCOUNT SET SHARE_MONEY = ISNULL(SHARE_MONEY,0) + 10 WHERE UA_ID = #{uaId}
  </update>

  <update id="rechargeHaofangAmount">
		UPDATE FUN_USER_ACCOUNT SET HAOFANG_AMOUNT = ISNULL(HAOFANG_AMOUNT,0) + #{deductMoney} WHERE UA_ID = #{uaId}
	</update>
</mapper>