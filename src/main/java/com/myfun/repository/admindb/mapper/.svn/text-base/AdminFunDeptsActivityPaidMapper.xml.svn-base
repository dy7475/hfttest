<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.myfun.repository.admindb.dao.AdminFunDeptsActivityPaidMapper" >
  <resultMap id="BaseResultMap" type="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaid" >
    <!--@mbggenerated-->
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="DEPT_ID" property="deptId" jdbcType="INTEGER" />
    <result column="ACTIVITY_TYPE" property="activityType" jdbcType="TINYINT" />
    <result column="PAID_TYPE" property="paidType" jdbcType="VARCHAR" />
    <result column="SERVICE_START_TIME" property="serviceStartTime" jdbcType="TIMESTAMP" />
    <result column="SERVICE_END_TIME" property="serviceEndTime" jdbcType="TIMESTAMP" />
    <result column="AMOUNT" property="amount" jdbcType="DECIMAL" />
    <result column="DEPT_LEVEL" property="deptLevel" jdbcType="TINYINT" />
    <result column="IS_AVAILABLE" property="isAvailable" jdbcType="TINYINT" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="CURPERSON_MONTH_SHARE_MONEY" property="curpersonMonthShareMoney" jdbcType="DECIMAL" />
    <result column="LAST_SHARE_MONEY_DATE" property="lastShareMoneyDate" jdbcType="TIMESTAMP" />
    <result column="COMP_ID" property="compId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--@mbggenerated-->
    ID, DEPT_ID, ACTIVITY_TYPE, PAID_TYPE, SERVICE_START_TIME, SERVICE_END_TIME, AMOUNT, 
    DEPT_LEVEL, IS_AVAILABLE, CREATE_TIME, CURPERSON_MONTH_SHARE_MONEY, LAST_SHARE_MONEY_DATE, 
    COMP_ID
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaidExample" >
    <!--@mbggenerated-->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_DEPTS_ACTIVITY_PAID
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_DEPTS_ACTIVITY_PAID
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    delete from FUN_DEPTS_ACTIVITY_PAID
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaidExample" >
    <!--@mbggenerated-->
    delete from FUN_DEPTS_ACTIVITY_PAID
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaid" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_DEPTS_ACTIVITY_PAID (DEPT_ID, ACTIVITY_TYPE, PAID_TYPE, 
      SERVICE_START_TIME, SERVICE_END_TIME, AMOUNT, 
      DEPT_LEVEL, IS_AVAILABLE, CREATE_TIME, 
      CURPERSON_MONTH_SHARE_MONEY, LAST_SHARE_MONEY_DATE, 
      COMP_ID)
    values (#{deptId,jdbcType=INTEGER}, #{activityType,jdbcType=TINYINT}, #{paidType,jdbcType=VARCHAR}, 
      #{serviceStartTime,jdbcType=TIMESTAMP}, #{serviceEndTime,jdbcType=TIMESTAMP}, #{amount,jdbcType=DECIMAL}, 
      #{deptLevel,jdbcType=TINYINT}, #{isAvailable,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{curpersonMonthShareMoney,jdbcType=DECIMAL}, #{lastShareMoneyDate,jdbcType=TIMESTAMP}, 
      #{compId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaid" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_DEPTS_ACTIVITY_PAID
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="deptId != null" >
        DEPT_ID,
      </if>
      <if test="activityType != null" >
        ACTIVITY_TYPE,
      </if>
      <if test="paidType != null" >
        PAID_TYPE,
      </if>
      <if test="serviceStartTime != null" >
        SERVICE_START_TIME,
      </if>
      <if test="serviceEndTime != null" >
        SERVICE_END_TIME,
      </if>
      <if test="amount != null" >
        AMOUNT,
      </if>
      <if test="deptLevel != null" >
        DEPT_LEVEL,
      </if>
      <if test="isAvailable != null" >
        IS_AVAILABLE,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="curpersonMonthShareMoney != null" >
        CURPERSON_MONTH_SHARE_MONEY,
      </if>
      <if test="lastShareMoneyDate != null" >
        LAST_SHARE_MONEY_DATE,
      </if>
      <if test="compId != null" >
        COMP_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="activityType != null" >
        #{activityType,jdbcType=TINYINT},
      </if>
      <if test="paidType != null" >
        #{paidType,jdbcType=VARCHAR},
      </if>
      <if test="serviceStartTime != null" >
        #{serviceStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceEndTime != null" >
        #{serviceEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="deptLevel != null" >
        #{deptLevel,jdbcType=TINYINT},
      </if>
      <if test="isAvailable != null" >
        #{isAvailable,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="curpersonMonthShareMoney != null" >
        #{curpersonMonthShareMoney,jdbcType=DECIMAL},
      </if>
      <if test="lastShareMoneyDate != null" >
        #{lastShareMoneyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="compId != null" >
        #{compId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaidExample" resultType="java.lang.Integer" >
    <!--@mbggenerated-->
    select count(*) from FUN_DEPTS_ACTIVITY_PAID
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_DEPTS_ACTIVITY_PAID
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null" >
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.activityType != null" >
        ACTIVITY_TYPE = #{record.activityType,jdbcType=TINYINT},
      </if>
      <if test="record.paidType != null" >
        PAID_TYPE = #{record.paidType,jdbcType=VARCHAR},
      </if>
      <if test="record.serviceStartTime != null" >
        SERVICE_START_TIME = #{record.serviceStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.serviceEndTime != null" >
        SERVICE_END_TIME = #{record.serviceEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.amount != null" >
        AMOUNT = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.deptLevel != null" >
        DEPT_LEVEL = #{record.deptLevel,jdbcType=TINYINT},
      </if>
      <if test="record.isAvailable != null" >
        IS_AVAILABLE = #{record.isAvailable,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.curpersonMonthShareMoney != null" >
        CURPERSON_MONTH_SHARE_MONEY = #{record.curpersonMonthShareMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.lastShareMoneyDate != null" >
        LAST_SHARE_MONEY_DATE = #{record.lastShareMoneyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.compId != null" >
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_DEPTS_ACTIVITY_PAID
    set ID = #{record.id,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      ACTIVITY_TYPE = #{record.activityType,jdbcType=TINYINT},
      PAID_TYPE = #{record.paidType,jdbcType=VARCHAR},
      SERVICE_START_TIME = #{record.serviceStartTime,jdbcType=TIMESTAMP},
      SERVICE_END_TIME = #{record.serviceEndTime,jdbcType=TIMESTAMP},
      AMOUNT = #{record.amount,jdbcType=DECIMAL},
      DEPT_LEVEL = #{record.deptLevel,jdbcType=TINYINT},
      IS_AVAILABLE = #{record.isAvailable,jdbcType=TINYINT},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      CURPERSON_MONTH_SHARE_MONEY = #{record.curpersonMonthShareMoney,jdbcType=DECIMAL},
      LAST_SHARE_MONEY_DATE = #{record.lastShareMoneyDate,jdbcType=TIMESTAMP},
      COMP_ID = #{record.compId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaid" >
    <!--@mbggenerated-->
    update FUN_DEPTS_ACTIVITY_PAID
    <set >
      <if test="deptId != null" >
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="activityType != null" >
        ACTIVITY_TYPE = #{activityType,jdbcType=TINYINT},
      </if>
      <if test="paidType != null" >
        PAID_TYPE = #{paidType,jdbcType=VARCHAR},
      </if>
      <if test="serviceStartTime != null" >
        SERVICE_START_TIME = #{serviceStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceEndTime != null" >
        SERVICE_END_TIME = #{serviceEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null" >
        AMOUNT = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="deptLevel != null" >
        DEPT_LEVEL = #{deptLevel,jdbcType=TINYINT},
      </if>
      <if test="isAvailable != null" >
        IS_AVAILABLE = #{isAvailable,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="curpersonMonthShareMoney != null" >
        CURPERSON_MONTH_SHARE_MONEY = #{curpersonMonthShareMoney,jdbcType=DECIMAL},
      </if>
      <if test="lastShareMoneyDate != null" >
        LAST_SHARE_MONEY_DATE = #{lastShareMoneyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="compId != null" >
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.admindb.po.AdminFunDeptsActivityPaid" >
    <!--@mbggenerated-->
    update FUN_DEPTS_ACTIVITY_PAID
    set DEPT_ID = #{deptId,jdbcType=INTEGER},
      ACTIVITY_TYPE = #{activityType,jdbcType=TINYINT},
      PAID_TYPE = #{paidType,jdbcType=VARCHAR},
      SERVICE_START_TIME = #{serviceStartTime,jdbcType=TIMESTAMP},
      SERVICE_END_TIME = #{serviceEndTime,jdbcType=TIMESTAMP},
      AMOUNT = #{amount,jdbcType=DECIMAL},
      DEPT_LEVEL = #{deptLevel,jdbcType=TINYINT},
      IS_AVAILABLE = #{isAvailable,jdbcType=TINYINT},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      CURPERSON_MONTH_SHARE_MONEY = #{curpersonMonthShareMoney,jdbcType=DECIMAL},
      LAST_SHARE_MONEY_DATE = #{lastShareMoneyDate,jdbcType=TIMESTAMP},
      COMP_ID = #{compId,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>