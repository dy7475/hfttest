<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.myfun.repository.admindb.dao.AdminFunPaidAduitMapper" >
  <resultMap id="BaseResultMap" type="com.myfun.repository.admindb.po.AdminFunPaidAduit" >
    <!--@mbggenerated-->
    <id column="ADUIT_ID" property="aduitId" jdbcType="INTEGER" />
    <result column="CREATION_TIME" property="creationTime" jdbcType="TIMESTAMP" />
    <result column="EXTRACT_AMOUNT" property="extractAmount" jdbcType="DECIMAL" />
    <result column="ADUIT_UID" property="aduitUid" jdbcType="INTEGER" />
    <result column="ADUIT_TIME" property="aduitTime" jdbcType="TIMESTAMP" />
    <result column="PAY_STATUS" property="payStatus" jdbcType="TINYINT" />
    <result column="COMP_NO" property="compNo" jdbcType="VARCHAR" />
    <result column="ARCHIVE_ID" property="archiveId" jdbcType="VARCHAR" />
    <result column="UA_TYPE" property="uaType" jdbcType="TINYINT" />
    <result column="ACCOUNT_ID" property="accountId" jdbcType="INTEGER" />
    <result column="CASH_TYPE" property="cashType" jdbcType="TINYINT" />
    <result column="WF_ID" property="wfId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.myfun.repository.admindb.po.AdminFunPaidAduit" extends="BaseResultMap" >
    <!--@mbggenerated-->
    <result column="PAID_ID" property="paidId" jdbcType="CLOB" />
    <result column="DES" property="des" jdbcType="CLOB" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--@mbggenerated-->
    ADUIT_ID, CREATION_TIME, EXTRACT_AMOUNT, ADUIT_UID, ADUIT_TIME, PAY_STATUS, COMP_NO, 
    ARCHIVE_ID, UA_TYPE, ACCOUNT_ID, CASH_TYPE, WF_ID
  </sql>
  <sql id="Blob_Column_List" >
    <!--@mbggenerated-->
    PAID_ID, DES
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduitExample" >
    <!--@mbggenerated-->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from FUN_PAID_ADUIT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduitExample" >
    <!--@mbggenerated-->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_PAID_ADUIT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from FUN_PAID_ADUIT
    where ADUIT_ID = #{aduitId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    delete from FUN_PAID_ADUIT
    where ADUIT_ID = #{aduitId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduitExample" >
    <!--@mbggenerated-->
    delete from FUN_PAID_ADUIT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduit" useGeneratedKeys="true" keyProperty="aduitId" >
    <!--@mbggenerated-->
    insert into FUN_PAID_ADUIT (CREATION_TIME, EXTRACT_AMOUNT, ADUIT_UID, 
      ADUIT_TIME, PAY_STATUS, COMP_NO, 
      ARCHIVE_ID, UA_TYPE, ACCOUNT_ID, 
      CASH_TYPE, WF_ID, PAID_ID, 
      DES)
    values (#{creationTime,jdbcType=TIMESTAMP}, #{extractAmount,jdbcType=DECIMAL}, #{aduitUid,jdbcType=INTEGER}, 
      #{aduitTime,jdbcType=TIMESTAMP}, #{payStatus,jdbcType=TINYINT}, #{compNo,jdbcType=VARCHAR}, 
      #{archiveId,jdbcType=VARCHAR}, #{uaType,jdbcType=TINYINT}, #{accountId,jdbcType=INTEGER}, 
      #{cashType,jdbcType=TINYINT}, #{wfId,jdbcType=INTEGER}, #{paidId,jdbcType=CLOB}, 
      #{des,jdbcType=CLOB})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduit" useGeneratedKeys="true" keyProperty="aduitId" >
    <!--@mbggenerated-->
    insert into FUN_PAID_ADUIT
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="creationTime != null" >
        CREATION_TIME,
      </if>
      <if test="extractAmount != null" >
        EXTRACT_AMOUNT,
      </if>
      <if test="aduitUid != null" >
        ADUIT_UID,
      </if>
      <if test="aduitTime != null" >
        ADUIT_TIME,
      </if>
      <if test="payStatus != null" >
        PAY_STATUS,
      </if>
      <if test="compNo != null" >
        COMP_NO,
      </if>
      <if test="archiveId != null" >
        ARCHIVE_ID,
      </if>
      <if test="uaType != null" >
        UA_TYPE,
      </if>
      <if test="accountId != null" >
        ACCOUNT_ID,
      </if>
      <if test="cashType != null" >
        CASH_TYPE,
      </if>
      <if test="wfId != null" >
        WF_ID,
      </if>
      <if test="paidId != null" >
        PAID_ID,
      </if>
      <if test="des != null" >
        DES,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="creationTime != null" >
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extractAmount != null" >
        #{extractAmount,jdbcType=DECIMAL},
      </if>
      <if test="aduitUid != null" >
        #{aduitUid,jdbcType=INTEGER},
      </if>
      <if test="aduitTime != null" >
        #{aduitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="compNo != null" >
        #{compNo,jdbcType=VARCHAR},
      </if>
      <if test="archiveId != null" >
        #{archiveId,jdbcType=VARCHAR},
      </if>
      <if test="uaType != null" >
        #{uaType,jdbcType=TINYINT},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="cashType != null" >
        #{cashType,jdbcType=TINYINT},
      </if>
      <if test="wfId != null" >
        #{wfId,jdbcType=INTEGER},
      </if>
      <if test="paidId != null" >
        #{paidId,jdbcType=CLOB},
      </if>
      <if test="des != null" >
        #{des,jdbcType=CLOB},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduitExample" resultType="java.lang.Integer" >
    <!--@mbggenerated-->
    select count(*) from FUN_PAID_ADUIT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_PAID_ADUIT
    <set >
      <if test="record.aduitId != null" >
        ADUIT_ID = #{record.aduitId,jdbcType=INTEGER},
      </if>
      <if test="record.creationTime != null" >
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.extractAmount != null" >
        EXTRACT_AMOUNT = #{record.extractAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.aduitUid != null" >
        ADUIT_UID = #{record.aduitUid,jdbcType=INTEGER},
      </if>
      <if test="record.aduitTime != null" >
        ADUIT_TIME = #{record.aduitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payStatus != null" >
        PAY_STATUS = #{record.payStatus,jdbcType=TINYINT},
      </if>
      <if test="record.compNo != null" >
        COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      </if>
      <if test="record.archiveId != null" >
        ARCHIVE_ID = #{record.archiveId,jdbcType=VARCHAR},
      </if>
      <if test="record.uaType != null" >
        UA_TYPE = #{record.uaType,jdbcType=TINYINT},
      </if>
      <if test="record.accountId != null" >
        ACCOUNT_ID = #{record.accountId,jdbcType=INTEGER},
      </if>
      <if test="record.cashType != null" >
        CASH_TYPE = #{record.cashType,jdbcType=TINYINT},
      </if>
      <if test="record.wfId != null" >
        WF_ID = #{record.wfId,jdbcType=INTEGER},
      </if>
      <if test="record.paidId != null" >
        PAID_ID = #{record.paidId,jdbcType=CLOB},
      </if>
      <if test="record.des != null" >
        DES = #{record.des,jdbcType=CLOB},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_PAID_ADUIT
    set ADUIT_ID = #{record.aduitId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      EXTRACT_AMOUNT = #{record.extractAmount,jdbcType=DECIMAL},
      ADUIT_UID = #{record.aduitUid,jdbcType=INTEGER},
      ADUIT_TIME = #{record.aduitTime,jdbcType=TIMESTAMP},
      PAY_STATUS = #{record.payStatus,jdbcType=TINYINT},
      COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      ARCHIVE_ID = #{record.archiveId,jdbcType=VARCHAR},
      UA_TYPE = #{record.uaType,jdbcType=TINYINT},
      ACCOUNT_ID = #{record.accountId,jdbcType=INTEGER},
      CASH_TYPE = #{record.cashType,jdbcType=TINYINT},
      WF_ID = #{record.wfId,jdbcType=INTEGER},
      PAID_ID = #{record.paidId,jdbcType=CLOB},
      DES = #{record.des,jdbcType=CLOB}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_PAID_ADUIT
    set ADUIT_ID = #{record.aduitId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      EXTRACT_AMOUNT = #{record.extractAmount,jdbcType=DECIMAL},
      ADUIT_UID = #{record.aduitUid,jdbcType=INTEGER},
      ADUIT_TIME = #{record.aduitTime,jdbcType=TIMESTAMP},
      PAY_STATUS = #{record.payStatus,jdbcType=TINYINT},
      COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      ARCHIVE_ID = #{record.archiveId,jdbcType=VARCHAR},
      UA_TYPE = #{record.uaType,jdbcType=TINYINT},
      ACCOUNT_ID = #{record.accountId,jdbcType=INTEGER},
      CASH_TYPE = #{record.cashType,jdbcType=TINYINT},
      WF_ID = #{record.wfId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduit" >
    <!--@mbggenerated-->
    update FUN_PAID_ADUIT
    <set >
      <if test="creationTime != null" >
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extractAmount != null" >
        EXTRACT_AMOUNT = #{extractAmount,jdbcType=DECIMAL},
      </if>
      <if test="aduitUid != null" >
        ADUIT_UID = #{aduitUid,jdbcType=INTEGER},
      </if>
      <if test="aduitTime != null" >
        ADUIT_TIME = #{aduitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        PAY_STATUS = #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="compNo != null" >
        COMP_NO = #{compNo,jdbcType=VARCHAR},
      </if>
      <if test="archiveId != null" >
        ARCHIVE_ID = #{archiveId,jdbcType=VARCHAR},
      </if>
      <if test="uaType != null" >
        UA_TYPE = #{uaType,jdbcType=TINYINT},
      </if>
      <if test="accountId != null" >
        ACCOUNT_ID = #{accountId,jdbcType=INTEGER},
      </if>
      <if test="cashType != null" >
        CASH_TYPE = #{cashType,jdbcType=TINYINT},
      </if>
      <if test="wfId != null" >
        WF_ID = #{wfId,jdbcType=INTEGER},
      </if>
      <if test="paidId != null" >
        PAID_ID = #{paidId,jdbcType=CLOB},
      </if>
      <if test="des != null" >
        DES = #{des,jdbcType=CLOB},
      </if>
    </set>
    where ADUIT_ID = #{aduitId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduit" >
    <!--@mbggenerated-->
    update FUN_PAID_ADUIT
    set CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      EXTRACT_AMOUNT = #{extractAmount,jdbcType=DECIMAL},
      ADUIT_UID = #{aduitUid,jdbcType=INTEGER},
      ADUIT_TIME = #{aduitTime,jdbcType=TIMESTAMP},
      PAY_STATUS = #{payStatus,jdbcType=TINYINT},
      COMP_NO = #{compNo,jdbcType=VARCHAR},
      ARCHIVE_ID = #{archiveId,jdbcType=VARCHAR},
      UA_TYPE = #{uaType,jdbcType=TINYINT},
      ACCOUNT_ID = #{accountId,jdbcType=INTEGER},
      CASH_TYPE = #{cashType,jdbcType=TINYINT},
      WF_ID = #{wfId,jdbcType=INTEGER},
      PAID_ID = #{paidId,jdbcType=CLOB},
      DES = #{des,jdbcType=CLOB}
    where ADUIT_ID = #{aduitId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.admindb.po.AdminFunPaidAduit" >
    <!--@mbggenerated-->
    update FUN_PAID_ADUIT
    set CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      EXTRACT_AMOUNT = #{extractAmount,jdbcType=DECIMAL},
      ADUIT_UID = #{aduitUid,jdbcType=INTEGER},
      ADUIT_TIME = #{aduitTime,jdbcType=TIMESTAMP},
      PAY_STATUS = #{payStatus,jdbcType=TINYINT},
      COMP_NO = #{compNo,jdbcType=VARCHAR},
      ARCHIVE_ID = #{archiveId,jdbcType=VARCHAR},
      UA_TYPE = #{uaType,jdbcType=TINYINT},
      ACCOUNT_ID = #{accountId,jdbcType=INTEGER},
      CASH_TYPE = #{cashType,jdbcType=TINYINT},
      WF_ID = #{wfId,jdbcType=INTEGER}
    where ADUIT_ID = #{aduitId,jdbcType=INTEGER}
  </update>
  
  <select id="getAduitRecordList" resultType="java.util.Map">
     select ADUIT_ID as aduitId,CREATION_TIME AS applyTime,EXTRACT_AMOUNT AS actualAmount,PAY_STATUS as payStatus,UA_TYPE as uaType,DES as des
     from FUN_PAID_ADUIT
     where UA_TYPE = #{param.accountType}
      <if test="null != param.startTime and '' != param.startTime">
        <![CDATA[ and CREATION_TIME >= #{param.startTime}]]>
      </if>
      <if test="null != param.endTime and '' != param.endTime">
        <![CDATA[and CREATION_TIME <= #{param.endTime}]]>
      </if>
    <choose>
      <when test="param.accountType = 1">
        and ARCHIVE_ID = #{param.archiveId}
      </when>
      <otherwise>
        and COMP_NO = #{param.compNo}
      </otherwise>
    </choose>
  </select>
</mapper>