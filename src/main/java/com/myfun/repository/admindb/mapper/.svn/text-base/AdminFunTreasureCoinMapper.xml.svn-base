<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.myfun.repository.admindb.dao.AdminFunTreasureCoinMapper" >
  <resultMap id="BaseResultMap" type="com.myfun.repository.admindb.po.AdminFunTreasureCoin" >
    <!--@mbggenerated-->
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="CITY_ID" property="cityId" jdbcType="INTEGER" />
    <result column="ARCHIVE_ID" property="archiveId" jdbcType="INTEGER" />
    <result column="COIN" property="coin" jdbcType="INTEGER" />
    <result column="COIN_BEFORE" property="coinBefore" jdbcType="INTEGER" />
    <result column="COIN_AFTER" property="coinAfter" jdbcType="INTEGER" />
    <result column="COIN_SOURCE" property="coinSource" jdbcType="INTEGER" />
    <result column="COIN_TYPE" property="coinType" jdbcType="INTEGER" />
    <result column="COIN_DESC" property="coinDesc" jdbcType="VARCHAR" />
    <result column="CREATION_TIME" property="creationTime" jdbcType="TIMESTAMP" />
    <result column="SOURCE_ID" property="sourceId" jdbcType="INTEGER" />
    <result column="SOURCE_TYPE" property="sourceType" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--@mbggenerated-->
    ID, CITY_ID, ARCHIVE_ID, COIN, COIN_BEFORE, COIN_AFTER, COIN_SOURCE, COIN_TYPE, COIN_DESC, 
    CREATION_TIME, SOURCE_ID, SOURCE_TYPE
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoinExample" >
    <!--@mbggenerated-->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_TREASURE_COIN
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_TREASURE_COIN
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    delete from FUN_TREASURE_COIN
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoinExample" >
    <!--@mbggenerated-->
    delete from FUN_TREASURE_COIN
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoin" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_TREASURE_COIN (CITY_ID, ARCHIVE_ID, COIN, 
      COIN_BEFORE, COIN_AFTER, COIN_SOURCE, 
      COIN_TYPE, COIN_DESC, CREATION_TIME, 
      SOURCE_ID, SOURCE_TYPE)
    values (#{cityId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, #{coin,jdbcType=INTEGER}, 
      #{coinBefore,jdbcType=INTEGER}, #{coinAfter,jdbcType=INTEGER}, #{coinSource,jdbcType=INTEGER}, 
      #{coinType,jdbcType=INTEGER}, #{coinDesc,jdbcType=VARCHAR}, #{creationTime,jdbcType=TIMESTAMP}, 
      #{sourceId,jdbcType=INTEGER}, #{sourceType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoin" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_TREASURE_COIN
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="cityId != null" >
        CITY_ID,
      </if>
      <if test="archiveId != null" >
        ARCHIVE_ID,
      </if>
      <if test="coin != null" >
        COIN,
      </if>
      <if test="coinBefore != null" >
        COIN_BEFORE,
      </if>
      <if test="coinAfter != null" >
        COIN_AFTER,
      </if>
      <if test="coinSource != null" >
        COIN_SOURCE,
      </if>
      <if test="coinType != null" >
        COIN_TYPE,
      </if>
      <if test="coinDesc != null" >
        COIN_DESC,
      </if>
      <if test="creationTime != null" >
        CREATION_TIME,
      </if>
      <if test="sourceId != null" >
        SOURCE_ID,
      </if>
      <if test="sourceType != null" >
        SOURCE_TYPE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="cityId != null" >
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null" >
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="coin != null" >
        #{coin,jdbcType=INTEGER},
      </if>
      <if test="coinBefore != null" >
        #{coinBefore,jdbcType=INTEGER},
      </if>
      <if test="coinAfter != null" >
        #{coinAfter,jdbcType=INTEGER},
      </if>
      <if test="coinSource != null" >
        #{coinSource,jdbcType=INTEGER},
      </if>
      <if test="coinType != null" >
        #{coinType,jdbcType=INTEGER},
      </if>
      <if test="coinDesc != null" >
        #{coinDesc,jdbcType=VARCHAR},
      </if>
      <if test="creationTime != null" >
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sourceId != null" >
        #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        #{sourceType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoinExample" resultType="java.lang.Integer" >
    <!--@mbggenerated-->
    select count(*) from FUN_TREASURE_COIN
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_TREASURE_COIN
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null" >
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null" >
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.coin != null" >
        COIN = #{record.coin,jdbcType=INTEGER},
      </if>
      <if test="record.coinBefore != null" >
        COIN_BEFORE = #{record.coinBefore,jdbcType=INTEGER},
      </if>
      <if test="record.coinAfter != null" >
        COIN_AFTER = #{record.coinAfter,jdbcType=INTEGER},
      </if>
      <if test="record.coinSource != null" >
        COIN_SOURCE = #{record.coinSource,jdbcType=INTEGER},
      </if>
      <if test="record.coinType != null" >
        COIN_TYPE = #{record.coinType,jdbcType=INTEGER},
      </if>
      <if test="record.coinDesc != null" >
        COIN_DESC = #{record.coinDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.creationTime != null" >
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.sourceId != null" >
        SOURCE_ID = #{record.sourceId,jdbcType=INTEGER},
      </if>
      <if test="record.sourceType != null" >
        SOURCE_TYPE = #{record.sourceType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_TREASURE_COIN
    set ID = #{record.id,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      COIN = #{record.coin,jdbcType=INTEGER},
      COIN_BEFORE = #{record.coinBefore,jdbcType=INTEGER},
      COIN_AFTER = #{record.coinAfter,jdbcType=INTEGER},
      COIN_SOURCE = #{record.coinSource,jdbcType=INTEGER},
      COIN_TYPE = #{record.coinType,jdbcType=INTEGER},
      COIN_DESC = #{record.coinDesc,jdbcType=VARCHAR},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      SOURCE_ID = #{record.sourceId,jdbcType=INTEGER},
      SOURCE_TYPE = #{record.sourceType,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoin" >
    <!--@mbggenerated-->
    update FUN_TREASURE_COIN
    <set >
      <if test="cityId != null" >
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null" >
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="coin != null" >
        COIN = #{coin,jdbcType=INTEGER},
      </if>
      <if test="coinBefore != null" >
        COIN_BEFORE = #{coinBefore,jdbcType=INTEGER},
      </if>
      <if test="coinAfter != null" >
        COIN_AFTER = #{coinAfter,jdbcType=INTEGER},
      </if>
      <if test="coinSource != null" >
        COIN_SOURCE = #{coinSource,jdbcType=INTEGER},
      </if>
      <if test="coinType != null" >
        COIN_TYPE = #{coinType,jdbcType=INTEGER},
      </if>
      <if test="coinDesc != null" >
        COIN_DESC = #{coinDesc,jdbcType=VARCHAR},
      </if>
      <if test="creationTime != null" >
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sourceId != null" >
        SOURCE_ID = #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        SOURCE_TYPE = #{sourceType,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.admindb.po.AdminFunTreasureCoin" >
    <!--@mbggenerated-->
    update FUN_TREASURE_COIN
    set CITY_ID = #{cityId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      COIN = #{coin,jdbcType=INTEGER},
      COIN_BEFORE = #{coinBefore,jdbcType=INTEGER},
      COIN_AFTER = #{coinAfter,jdbcType=INTEGER},
      COIN_SOURCE = #{coinSource,jdbcType=INTEGER},
      COIN_TYPE = #{coinType,jdbcType=INTEGER},
      COIN_DESC = #{coinDesc,jdbcType=VARCHAR},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      SOURCE_ID = #{sourceId,jdbcType=INTEGER},
      SOURCE_TYPE = #{sourceType,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>