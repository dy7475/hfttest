<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.admindb.dao.AdminFunPaidMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.admindb.po.AdminFunPaid">
    <!--@mbggenerated-->
    <id column="PAID_ID" jdbcType="INTEGER" property="paidId" />
    <id column="UA_ID" jdbcType="INTEGER" property="uaId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CITY_ID" jdbcType="SMALLINT" property="cityId" />
    <result column="PAID_CATIGORY" jdbcType="VARCHAR" property="paidCatigory" />
    <result column="PAID_TYPE" jdbcType="VARCHAR" property="paidType" />
    <result column="CARDNO" jdbcType="VARCHAR" property="cardno" />
    <result column="ORDERNO" jdbcType="VARCHAR" property="orderno" />
    <result column="AMOUNT" jdbcType="DOUBLE" property="amount" />
    <result column="PADI_TIME" jdbcType="TIMESTAMP" property="padiTime" />
    <result column="DEAL_ID" jdbcType="INTEGER" property="dealId" />
    <result column="STATUS" jdbcType="INTEGER" property="status" />
    <result column="OLD_TIME" jdbcType="TIMESTAMP" property="oldTime" />
    <result column="DESC" jdbcType="VARCHAR" property="desc" />
    <result column="AMOUNT_BEFORE" jdbcType="DOUBLE" property="amountBefore" />
    <result column="AMOUNT_AFTER" jdbcType="DOUBLE" property="amountAfter" />
    <result column="CRM_COMP_ID" jdbcType="INTEGER" property="crmCompId" />
    <result column="PAID_SOURCE" jdbcType="TINYINT" property="paidSource" />
    <result column="REAL_WEIXIN" jdbcType="TINYINT" property="realWeixin" />
    <result column="AMOUNT_QUAN" jdbcType="DOUBLE" property="amountQuan" />
    <result column="AMOUNT_COIN" jdbcType="DOUBLE" property="amountCoin" />
    <result column="PT_ID" jdbcType="INTEGER" property="ptId" />
    <result column="HAS_RECEIPT" jdbcType="TINYINT" property="hasReceipt" />
    <result column="BUY_AFTER" jdbcType="DOUBLE" property="buyAfter" />
    <result column="SERVICE_START_TIME" jdbcType="TIMESTAMP" property="serviceStartTime" />
    <result column="SERVICE_END_TIME" jdbcType="TIMESTAMP" property="serviceEndTime" />
    <result column="TRANSACTION_ID" jdbcType="VARCHAR" property="transactionId" />
    <result column="AMOUNT_SHARE_MONEY" jdbcType="DOUBLE" property="amountShareMoney" />
    <result column="AMOUNT_CASH_MONEY" jdbcType="DOUBLE" property="amountCashMoney" />
    <result column="AMOUNT_PAYMENT" jdbcType="DOUBLE" property="amountPayment" />
    <result column="SUB_PAID_TYPE" jdbcType="VARCHAR" property="subPaidType" />
    <result column="AMOUNT_PAY_TYPE" jdbcType="VARCHAR" property="amountPayType" />
    <result column="AMOUNT_SHARE_MONEY_AFTER" jdbcType="DOUBLE" property="amountShareMoneyAfter" />
    <result column="AMOUNT_CASH_MONEY_AFTER" jdbcType="DOUBLE" property="amountCashMoneyAfter" />
    <result column="TRUE_BAIL_MONEY" jdbcType="DOUBLE" property="trueBailMoney" />
    <result column="COMP_CASH_MONEY" jdbcType="DOUBLE" property="compCashMoney" />
    <result column="COMP_COIN_MONEY" jdbcType="DOUBLE" property="compCoinMoney" />
    <result column="TRUE_BAIL_MONEY_AFTER" jdbcType="DOUBLE" property="trueBailMoneyAfter" />
    <result column="COMP_CASH_MONEY_AFTER" jdbcType="DOUBLE" property="compCashMoneyAfter" />
    <result column="COMP_COIN_MONEY_AFTER" jdbcType="DOUBLE" property="compCoinMoneyAfter" />
    <result column="ACTUAL_MONEY" jdbcType="DOUBLE" property="actualMoney" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="JSON" jdbcType="VARCHAR" property="json" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    PAID_ID, UA_ID, ARCHIVE_ID, CITY_ID, PAID_CATIGORY, PAID_TYPE, CARDNO, ORDERNO, AMOUNT, 
    PADI_TIME, DEAL_ID, [STATUS], OLD_TIME, [DESC], AMOUNT_BEFORE, AMOUNT_AFTER, CRM_COMP_ID, 
    PAID_SOURCE, REAL_WEIXIN, AMOUNT_QUAN, AMOUNT_COIN, PT_ID, HAS_RECEIPT, BUY_AFTER, 
    SERVICE_START_TIME, SERVICE_END_TIME, TRANSACTION_ID, AMOUNT_SHARE_MONEY, AMOUNT_CASH_MONEY, 
    AMOUNT_PAYMENT, SUB_PAID_TYPE, AMOUNT_PAY_TYPE, AMOUNT_SHARE_MONEY_AFTER, AMOUNT_CASH_MONEY_AFTER, 
    TRUE_BAIL_MONEY, COMP_CASH_MONEY, COMP_COIN_MONEY, TRUE_BAIL_MONEY_AFTER, COMP_CASH_MONEY_AFTER, 
    COMP_COIN_MONEY_AFTER, ACTUAL_MONEY, DEPT_ID, JSON
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.admindb.po.AdminFunPaidExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_PAID
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_PAID
    where PAID_ID = #{paidId,jdbcType=INTEGER}
      and UA_ID = #{uaId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    <!--@mbggenerated-->
    delete from FUN_PAID
    where PAID_ID = #{paidId,jdbcType=INTEGER}
      and UA_ID = #{uaId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.admindb.po.AdminFunPaidExample">
    <!--@mbggenerated-->
    delete from FUN_PAID
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="paidId" parameterType="com.myfun.repository.admindb.po.AdminFunPaid" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_PAID (UA_ID, ARCHIVE_ID, CITY_ID, 
      PAID_CATIGORY, PAID_TYPE, CARDNO, 
      ORDERNO, AMOUNT, PADI_TIME, 
      DEAL_ID, [STATUS], OLD_TIME, 
      [DESC], AMOUNT_BEFORE, AMOUNT_AFTER, 
      CRM_COMP_ID, PAID_SOURCE, REAL_WEIXIN, 
      AMOUNT_QUAN, AMOUNT_COIN, PT_ID, 
      HAS_RECEIPT, BUY_AFTER, SERVICE_START_TIME, 
      SERVICE_END_TIME, TRANSACTION_ID, AMOUNT_SHARE_MONEY, 
      AMOUNT_CASH_MONEY, AMOUNT_PAYMENT, SUB_PAID_TYPE, 
      AMOUNT_PAY_TYPE, AMOUNT_SHARE_MONEY_AFTER, AMOUNT_CASH_MONEY_AFTER, 
      TRUE_BAIL_MONEY, COMP_CASH_MONEY, COMP_COIN_MONEY, 
      TRUE_BAIL_MONEY_AFTER, COMP_CASH_MONEY_AFTER, COMP_COIN_MONEY_AFTER, 
      ACTUAL_MONEY, DEPT_ID, JSON
      )
    values (#{uaId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, #{cityId,jdbcType=SMALLINT}, 
      #{paidCatigory,jdbcType=VARCHAR}, #{paidType,jdbcType=VARCHAR}, #{cardno,jdbcType=VARCHAR}, 
      #{orderno,jdbcType=VARCHAR}, #{amount,jdbcType=DOUBLE}, #{padiTime,jdbcType=TIMESTAMP}, 
      #{dealId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{oldTime,jdbcType=TIMESTAMP}, 
      #{desc,jdbcType=VARCHAR}, #{amountBefore,jdbcType=DOUBLE}, #{amountAfter,jdbcType=DOUBLE}, 
      #{crmCompId,jdbcType=INTEGER}, #{paidSource,jdbcType=TINYINT}, #{realWeixin,jdbcType=TINYINT}, 
      #{amountQuan,jdbcType=DOUBLE}, #{amountCoin,jdbcType=DOUBLE}, #{ptId,jdbcType=INTEGER}, 
      #{hasReceipt,jdbcType=TINYINT}, #{buyAfter,jdbcType=DOUBLE}, #{serviceStartTime,jdbcType=TIMESTAMP}, 
      #{serviceEndTime,jdbcType=TIMESTAMP}, #{transactionId,jdbcType=VARCHAR}, #{amountShareMoney,jdbcType=DOUBLE}, 
      #{amountCashMoney,jdbcType=DOUBLE}, #{amountPayment,jdbcType=DOUBLE}, #{subPaidType,jdbcType=VARCHAR}, 
      #{amountPayType,jdbcType=VARCHAR}, #{amountShareMoneyAfter,jdbcType=DOUBLE}, #{amountCashMoneyAfter,jdbcType=DOUBLE}, 
      #{trueBailMoney,jdbcType=DOUBLE}, #{compCashMoney,jdbcType=DOUBLE}, #{compCoinMoney,jdbcType=DOUBLE}, 
      #{trueBailMoneyAfter,jdbcType=DOUBLE}, #{compCashMoneyAfter,jdbcType=DOUBLE}, #{compCoinMoneyAfter,jdbcType=DOUBLE}, 
      #{actualMoney,jdbcType=DOUBLE}, #{deptId,jdbcType=INTEGER}, #{json,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="paidId" parameterType="com.myfun.repository.admindb.po.AdminFunPaid" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_PAID
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uaId != null">
        UA_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="paidCatigory != null">
        PAID_CATIGORY,
      </if>
      <if test="paidType != null">
        PAID_TYPE,
      </if>
      <if test="cardno != null">
        CARDNO,
      </if>
      <if test="orderno != null">
        ORDERNO,
      </if>
      <if test="amount != null">
        AMOUNT,
      </if>
      <if test="padiTime != null">
        PADI_TIME,
      </if>
      <if test="dealId != null">
        DEAL_ID,
      </if>
      <if test="status != null">
        [STATUS],
      </if>
      <if test="oldTime != null">
        OLD_TIME,
      </if>
      <if test="desc != null">
        [DESC],
      </if>
      <if test="amountBefore != null">
        AMOUNT_BEFORE,
      </if>
      <if test="amountAfter != null">
        AMOUNT_AFTER,
      </if>
      <if test="crmCompId != null">
        CRM_COMP_ID,
      </if>
      <if test="paidSource != null">
        PAID_SOURCE,
      </if>
      <if test="realWeixin != null">
        REAL_WEIXIN,
      </if>
      <if test="amountQuan != null">
        AMOUNT_QUAN,
      </if>
      <if test="amountCoin != null">
        AMOUNT_COIN,
      </if>
      <if test="ptId != null">
        PT_ID,
      </if>
      <if test="hasReceipt != null">
        HAS_RECEIPT,
      </if>
      <if test="buyAfter != null">
        BUY_AFTER,
      </if>
      <if test="serviceStartTime != null">
        SERVICE_START_TIME,
      </if>
      <if test="serviceEndTime != null">
        SERVICE_END_TIME,
      </if>
      <if test="transactionId != null">
        TRANSACTION_ID,
      </if>
      <if test="amountShareMoney != null">
        AMOUNT_SHARE_MONEY,
      </if>
      <if test="amountCashMoney != null">
        AMOUNT_CASH_MONEY,
      </if>
      <if test="amountPayment != null">
        AMOUNT_PAYMENT,
      </if>
      <if test="subPaidType != null">
        SUB_PAID_TYPE,
      </if>
      <if test="amountPayType != null">
        AMOUNT_PAY_TYPE,
      </if>
      <if test="amountShareMoneyAfter != null">
        AMOUNT_SHARE_MONEY_AFTER,
      </if>
      <if test="amountCashMoneyAfter != null">
        AMOUNT_CASH_MONEY_AFTER,
      </if>
      <if test="trueBailMoney != null">
        TRUE_BAIL_MONEY,
      </if>
      <if test="compCashMoney != null">
        COMP_CASH_MONEY,
      </if>
      <if test="compCoinMoney != null">
        COMP_COIN_MONEY,
      </if>
      <if test="trueBailMoneyAfter != null">
        TRUE_BAIL_MONEY_AFTER,
      </if>
      <if test="compCashMoneyAfter != null">
        COMP_CASH_MONEY_AFTER,
      </if>
      <if test="compCoinMoneyAfter != null">
        COMP_COIN_MONEY_AFTER,
      </if>
      <if test="actualMoney != null">
        ACTUAL_MONEY,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="json != null">
        JSON,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uaId != null">
        #{uaId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="paidCatigory != null">
        #{paidCatigory,jdbcType=VARCHAR},
      </if>
      <if test="paidType != null">
        #{paidType,jdbcType=VARCHAR},
      </if>
      <if test="cardno != null">
        #{cardno,jdbcType=VARCHAR},
      </if>
      <if test="orderno != null">
        #{orderno,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="padiTime != null">
        #{padiTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealId != null">
        #{dealId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="oldTime != null">
        #{oldTime,jdbcType=TIMESTAMP},
      </if>
      <if test="desc != null">
        #{desc,jdbcType=VARCHAR},
      </if>
      <if test="amountBefore != null">
        #{amountBefore,jdbcType=DOUBLE},
      </if>
      <if test="amountAfter != null">
        #{amountAfter,jdbcType=DOUBLE},
      </if>
      <if test="crmCompId != null">
        #{crmCompId,jdbcType=INTEGER},
      </if>
      <if test="paidSource != null">
        #{paidSource,jdbcType=TINYINT},
      </if>
      <if test="realWeixin != null">
        #{realWeixin,jdbcType=TINYINT},
      </if>
      <if test="amountQuan != null">
        #{amountQuan,jdbcType=DOUBLE},
      </if>
      <if test="amountCoin != null">
        #{amountCoin,jdbcType=DOUBLE},
      </if>
      <if test="ptId != null">
        #{ptId,jdbcType=INTEGER},
      </if>
      <if test="hasReceipt != null">
        #{hasReceipt,jdbcType=TINYINT},
      </if>
      <if test="buyAfter != null">
        #{buyAfter,jdbcType=DOUBLE},
      </if>
      <if test="serviceStartTime != null">
        #{serviceStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceEndTime != null">
        #{serviceEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transactionId != null">
        #{transactionId,jdbcType=VARCHAR},
      </if>
      <if test="amountShareMoney != null">
        #{amountShareMoney,jdbcType=DOUBLE},
      </if>
      <if test="amountCashMoney != null">
        #{amountCashMoney,jdbcType=DOUBLE},
      </if>
      <if test="amountPayment != null">
        #{amountPayment,jdbcType=DOUBLE},
      </if>
      <if test="subPaidType != null">
        #{subPaidType,jdbcType=VARCHAR},
      </if>
      <if test="amountPayType != null">
        #{amountPayType,jdbcType=VARCHAR},
      </if>
      <if test="amountShareMoneyAfter != null">
        #{amountShareMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="amountCashMoneyAfter != null">
        #{amountCashMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="trueBailMoney != null">
        #{trueBailMoney,jdbcType=DOUBLE},
      </if>
      <if test="compCashMoney != null">
        #{compCashMoney,jdbcType=DOUBLE},
      </if>
      <if test="compCoinMoney != null">
        #{compCoinMoney,jdbcType=DOUBLE},
      </if>
      <if test="trueBailMoneyAfter != null">
        #{trueBailMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="compCashMoneyAfter != null">
        #{compCashMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="compCoinMoneyAfter != null">
        #{compCoinMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="actualMoney != null">
        #{actualMoney,jdbcType=DOUBLE},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="json != null">
        #{json,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.admindb.po.AdminFunPaidExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_PAID
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_PAID
    <set>
      <if test="record.paidId != null">
        PAID_ID = #{record.paidId,jdbcType=INTEGER},
      </if>
      <if test="record.uaId != null">
        UA_ID = #{record.uaId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=SMALLINT},
      </if>
      <if test="record.paidCatigory != null">
        PAID_CATIGORY = #{record.paidCatigory,jdbcType=VARCHAR},
      </if>
      <if test="record.paidType != null">
        PAID_TYPE = #{record.paidType,jdbcType=VARCHAR},
      </if>
      <if test="record.cardno != null">
        CARDNO = #{record.cardno,jdbcType=VARCHAR},
      </if>
      <if test="record.orderno != null">
        ORDERNO = #{record.orderno,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        AMOUNT = #{record.amount,jdbcType=DOUBLE},
      </if>
      <if test="record.padiTime != null">
        PADI_TIME = #{record.padiTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dealId != null">
        DEAL_ID = #{record.dealId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        [STATUS] = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.oldTime != null">
        OLD_TIME = #{record.oldTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.desc != null">
        [DESC] = #{record.desc,jdbcType=VARCHAR},
      </if>
      <if test="record.amountBefore != null">
        AMOUNT_BEFORE = #{record.amountBefore,jdbcType=DOUBLE},
      </if>
      <if test="record.amountAfter != null">
        AMOUNT_AFTER = #{record.amountAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.crmCompId != null">
        CRM_COMP_ID = #{record.crmCompId,jdbcType=INTEGER},
      </if>
      <if test="record.paidSource != null">
        PAID_SOURCE = #{record.paidSource,jdbcType=TINYINT},
      </if>
      <if test="record.realWeixin != null">
        REAL_WEIXIN = #{record.realWeixin,jdbcType=TINYINT},
      </if>
      <if test="record.amountQuan != null">
        AMOUNT_QUAN = #{record.amountQuan,jdbcType=DOUBLE},
      </if>
      <if test="record.amountCoin != null">
        AMOUNT_COIN = #{record.amountCoin,jdbcType=DOUBLE},
      </if>
      <if test="record.ptId != null">
        PT_ID = #{record.ptId,jdbcType=INTEGER},
      </if>
      <if test="record.hasReceipt != null">
        HAS_RECEIPT = #{record.hasReceipt,jdbcType=TINYINT},
      </if>
      <if test="record.buyAfter != null">
        BUY_AFTER = #{record.buyAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.serviceStartTime != null">
        SERVICE_START_TIME = #{record.serviceStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.serviceEndTime != null">
        SERVICE_END_TIME = #{record.serviceEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.transactionId != null">
        TRANSACTION_ID = #{record.transactionId,jdbcType=VARCHAR},
      </if>
      <if test="record.amountShareMoney != null">
        AMOUNT_SHARE_MONEY = #{record.amountShareMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.amountCashMoney != null">
        AMOUNT_CASH_MONEY = #{record.amountCashMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.amountPayment != null">
        AMOUNT_PAYMENT = #{record.amountPayment,jdbcType=DOUBLE},
      </if>
      <if test="record.subPaidType != null">
        SUB_PAID_TYPE = #{record.subPaidType,jdbcType=VARCHAR},
      </if>
      <if test="record.amountPayType != null">
        AMOUNT_PAY_TYPE = #{record.amountPayType,jdbcType=VARCHAR},
      </if>
      <if test="record.amountShareMoneyAfter != null">
        AMOUNT_SHARE_MONEY_AFTER = #{record.amountShareMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.amountCashMoneyAfter != null">
        AMOUNT_CASH_MONEY_AFTER = #{record.amountCashMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.trueBailMoney != null">
        TRUE_BAIL_MONEY = #{record.trueBailMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.compCashMoney != null">
        COMP_CASH_MONEY = #{record.compCashMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.compCoinMoney != null">
        COMP_COIN_MONEY = #{record.compCoinMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.trueBailMoneyAfter != null">
        TRUE_BAIL_MONEY_AFTER = #{record.trueBailMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.compCashMoneyAfter != null">
        COMP_CASH_MONEY_AFTER = #{record.compCashMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.compCoinMoneyAfter != null">
        COMP_COIN_MONEY_AFTER = #{record.compCoinMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="record.actualMoney != null">
        ACTUAL_MONEY = #{record.actualMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.json != null">
        JSON = #{record.json,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_PAID
    set PAID_ID = #{record.paidId,jdbcType=INTEGER},
      UA_ID = #{record.uaId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=SMALLINT},
      PAID_CATIGORY = #{record.paidCatigory,jdbcType=VARCHAR},
      PAID_TYPE = #{record.paidType,jdbcType=VARCHAR},
      CARDNO = #{record.cardno,jdbcType=VARCHAR},
      ORDERNO = #{record.orderno,jdbcType=VARCHAR},
      AMOUNT = #{record.amount,jdbcType=DOUBLE},
      PADI_TIME = #{record.padiTime,jdbcType=TIMESTAMP},
      DEAL_ID = #{record.dealId,jdbcType=INTEGER},
      [STATUS] = #{record.status,jdbcType=INTEGER},
      OLD_TIME = #{record.oldTime,jdbcType=TIMESTAMP},
      [DESC] = #{record.desc,jdbcType=VARCHAR},
      AMOUNT_BEFORE = #{record.amountBefore,jdbcType=DOUBLE},
      AMOUNT_AFTER = #{record.amountAfter,jdbcType=DOUBLE},
      CRM_COMP_ID = #{record.crmCompId,jdbcType=INTEGER},
      PAID_SOURCE = #{record.paidSource,jdbcType=TINYINT},
      REAL_WEIXIN = #{record.realWeixin,jdbcType=TINYINT},
      AMOUNT_QUAN = #{record.amountQuan,jdbcType=DOUBLE},
      AMOUNT_COIN = #{record.amountCoin,jdbcType=DOUBLE},
      PT_ID = #{record.ptId,jdbcType=INTEGER},
      HAS_RECEIPT = #{record.hasReceipt,jdbcType=TINYINT},
      BUY_AFTER = #{record.buyAfter,jdbcType=DOUBLE},
      SERVICE_START_TIME = #{record.serviceStartTime,jdbcType=TIMESTAMP},
      SERVICE_END_TIME = #{record.serviceEndTime,jdbcType=TIMESTAMP},
      TRANSACTION_ID = #{record.transactionId,jdbcType=VARCHAR},
      AMOUNT_SHARE_MONEY = #{record.amountShareMoney,jdbcType=DOUBLE},
      AMOUNT_CASH_MONEY = #{record.amountCashMoney,jdbcType=DOUBLE},
      AMOUNT_PAYMENT = #{record.amountPayment,jdbcType=DOUBLE},
      SUB_PAID_TYPE = #{record.subPaidType,jdbcType=VARCHAR},
      AMOUNT_PAY_TYPE = #{record.amountPayType,jdbcType=VARCHAR},
      AMOUNT_SHARE_MONEY_AFTER = #{record.amountShareMoneyAfter,jdbcType=DOUBLE},
      AMOUNT_CASH_MONEY_AFTER = #{record.amountCashMoneyAfter,jdbcType=DOUBLE},
      TRUE_BAIL_MONEY = #{record.trueBailMoney,jdbcType=DOUBLE},
      COMP_CASH_MONEY = #{record.compCashMoney,jdbcType=DOUBLE},
      COMP_COIN_MONEY = #{record.compCoinMoney,jdbcType=DOUBLE},
      TRUE_BAIL_MONEY_AFTER = #{record.trueBailMoneyAfter,jdbcType=DOUBLE},
      COMP_CASH_MONEY_AFTER = #{record.compCashMoneyAfter,jdbcType=DOUBLE},
      COMP_COIN_MONEY_AFTER = #{record.compCoinMoneyAfter,jdbcType=DOUBLE},
      ACTUAL_MONEY = #{record.actualMoney,jdbcType=DOUBLE},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      JSON = #{record.json,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.admindb.po.AdminFunPaid">
    <!--@mbggenerated-->
    update FUN_PAID
    <set>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="paidCatigory != null">
        PAID_CATIGORY = #{paidCatigory,jdbcType=VARCHAR},
      </if>
      <if test="paidType != null">
        PAID_TYPE = #{paidType,jdbcType=VARCHAR},
      </if>
      <if test="cardno != null">
        CARDNO = #{cardno,jdbcType=VARCHAR},
      </if>
      <if test="orderno != null">
        ORDERNO = #{orderno,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        AMOUNT = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="padiTime != null">
        PADI_TIME = #{padiTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealId != null">
        DEAL_ID = #{dealId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        [STATUS] = #{status,jdbcType=INTEGER},
      </if>
      <if test="oldTime != null">
        OLD_TIME = #{oldTime,jdbcType=TIMESTAMP},
      </if>
      <if test="desc != null">
        [DESC] = #{desc,jdbcType=VARCHAR},
      </if>
      <if test="amountBefore != null">
        AMOUNT_BEFORE = #{amountBefore,jdbcType=DOUBLE},
      </if>
      <if test="amountAfter != null">
        AMOUNT_AFTER = #{amountAfter,jdbcType=DOUBLE},
      </if>
      <if test="crmCompId != null">
        CRM_COMP_ID = #{crmCompId,jdbcType=INTEGER},
      </if>
      <if test="paidSource != null">
        PAID_SOURCE = #{paidSource,jdbcType=TINYINT},
      </if>
      <if test="realWeixin != null">
        REAL_WEIXIN = #{realWeixin,jdbcType=TINYINT},
      </if>
      <if test="amountQuan != null">
        AMOUNT_QUAN = #{amountQuan,jdbcType=DOUBLE},
      </if>
      <if test="amountCoin != null">
        AMOUNT_COIN = #{amountCoin,jdbcType=DOUBLE},
      </if>
      <if test="ptId != null">
        PT_ID = #{ptId,jdbcType=INTEGER},
      </if>
      <if test="hasReceipt != null">
        HAS_RECEIPT = #{hasReceipt,jdbcType=TINYINT},
      </if>
      <if test="buyAfter != null">
        BUY_AFTER = #{buyAfter,jdbcType=DOUBLE},
      </if>
      <if test="serviceStartTime != null">
        SERVICE_START_TIME = #{serviceStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceEndTime != null">
        SERVICE_END_TIME = #{serviceEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transactionId != null">
        TRANSACTION_ID = #{transactionId,jdbcType=VARCHAR},
      </if>
      <if test="amountShareMoney != null">
        AMOUNT_SHARE_MONEY = #{amountShareMoney,jdbcType=DOUBLE},
      </if>
      <if test="amountCashMoney != null">
        AMOUNT_CASH_MONEY = #{amountCashMoney,jdbcType=DOUBLE},
      </if>
      <if test="amountPayment != null">
        AMOUNT_PAYMENT = #{amountPayment,jdbcType=DOUBLE},
      </if>
      <if test="subPaidType != null">
        SUB_PAID_TYPE = #{subPaidType,jdbcType=VARCHAR},
      </if>
      <if test="amountPayType != null">
        AMOUNT_PAY_TYPE = #{amountPayType,jdbcType=VARCHAR},
      </if>
      <if test="amountShareMoneyAfter != null">
        AMOUNT_SHARE_MONEY_AFTER = #{amountShareMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="amountCashMoneyAfter != null">
        AMOUNT_CASH_MONEY_AFTER = #{amountCashMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="trueBailMoney != null">
        TRUE_BAIL_MONEY = #{trueBailMoney,jdbcType=DOUBLE},
      </if>
      <if test="compCashMoney != null">
        COMP_CASH_MONEY = #{compCashMoney,jdbcType=DOUBLE},
      </if>
      <if test="compCoinMoney != null">
        COMP_COIN_MONEY = #{compCoinMoney,jdbcType=DOUBLE},
      </if>
      <if test="trueBailMoneyAfter != null">
        TRUE_BAIL_MONEY_AFTER = #{trueBailMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="compCashMoneyAfter != null">
        COMP_CASH_MONEY_AFTER = #{compCashMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="compCoinMoneyAfter != null">
        COMP_COIN_MONEY_AFTER = #{compCoinMoneyAfter,jdbcType=DOUBLE},
      </if>
      <if test="actualMoney != null">
        ACTUAL_MONEY = #{actualMoney,jdbcType=DOUBLE},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="json != null">
        JSON = #{json,jdbcType=VARCHAR},
      </if>
    </set>
    where PAID_ID = #{paidId,jdbcType=INTEGER}
      and UA_ID = #{uaId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.admindb.po.AdminFunPaid">
    <!--@mbggenerated-->
    update FUN_PAID
    set ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=SMALLINT},
      PAID_CATIGORY = #{paidCatigory,jdbcType=VARCHAR},
      PAID_TYPE = #{paidType,jdbcType=VARCHAR},
      CARDNO = #{cardno,jdbcType=VARCHAR},
      ORDERNO = #{orderno,jdbcType=VARCHAR},
      AMOUNT = #{amount,jdbcType=DOUBLE},
      PADI_TIME = #{padiTime,jdbcType=TIMESTAMP},
      DEAL_ID = #{dealId,jdbcType=INTEGER},
      [STATUS] = #{status,jdbcType=INTEGER},
      OLD_TIME = #{oldTime,jdbcType=TIMESTAMP},
      [DESC] = #{desc,jdbcType=VARCHAR},
      AMOUNT_BEFORE = #{amountBefore,jdbcType=DOUBLE},
      AMOUNT_AFTER = #{amountAfter,jdbcType=DOUBLE},
      CRM_COMP_ID = #{crmCompId,jdbcType=INTEGER},
      PAID_SOURCE = #{paidSource,jdbcType=TINYINT},
      REAL_WEIXIN = #{realWeixin,jdbcType=TINYINT},
      AMOUNT_QUAN = #{amountQuan,jdbcType=DOUBLE},
      AMOUNT_COIN = #{amountCoin,jdbcType=DOUBLE},
      PT_ID = #{ptId,jdbcType=INTEGER},
      HAS_RECEIPT = #{hasReceipt,jdbcType=TINYINT},
      BUY_AFTER = #{buyAfter,jdbcType=DOUBLE},
      SERVICE_START_TIME = #{serviceStartTime,jdbcType=TIMESTAMP},
      SERVICE_END_TIME = #{serviceEndTime,jdbcType=TIMESTAMP},
      TRANSACTION_ID = #{transactionId,jdbcType=VARCHAR},
      AMOUNT_SHARE_MONEY = #{amountShareMoney,jdbcType=DOUBLE},
      AMOUNT_CASH_MONEY = #{amountCashMoney,jdbcType=DOUBLE},
      AMOUNT_PAYMENT = #{amountPayment,jdbcType=DOUBLE},
      SUB_PAID_TYPE = #{subPaidType,jdbcType=VARCHAR},
      AMOUNT_PAY_TYPE = #{amountPayType,jdbcType=VARCHAR},
      AMOUNT_SHARE_MONEY_AFTER = #{amountShareMoneyAfter,jdbcType=DOUBLE},
      AMOUNT_CASH_MONEY_AFTER = #{amountCashMoneyAfter,jdbcType=DOUBLE},
      TRUE_BAIL_MONEY = #{trueBailMoney,jdbcType=DOUBLE},
      COMP_CASH_MONEY = #{compCashMoney,jdbcType=DOUBLE},
      COMP_COIN_MONEY = #{compCoinMoney,jdbcType=DOUBLE},
      TRUE_BAIL_MONEY_AFTER = #{trueBailMoneyAfter,jdbcType=DOUBLE},
      COMP_CASH_MONEY_AFTER = #{compCashMoneyAfter,jdbcType=DOUBLE},
      COMP_COIN_MONEY_AFTER = #{compCoinMoneyAfter,jdbcType=DOUBLE},
      ACTUAL_MONEY = #{actualMoney,jdbcType=DOUBLE},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      JSON = #{json,jdbcType=VARCHAR}
    where PAID_ID = #{paidId,jdbcType=INTEGER}
      and UA_ID = #{uaId,jdbcType=INTEGER}
  </update>
    
   <resultMap extends="BaseResultMap" id="DtoBaseResultMap" type="com.myfun.repository.admindb.dto.AdminFunPaidDto">
    <result column="INVOICE_ID" jdbcType="INTEGER" property="invoiceId" />
    <result column="PT_TYPE" jdbcType="INTEGER" property="ptType" />
    <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
    <result column="INVOICE_STATUS" jdbcType="TINYINT" property="invoiceStatus" />
    <result column="INVOICE_TYPE" jdbcType="TINYINT" property="invoiceType" />
    <result column="INVOICE_HEADER" jdbcType="VARCHAR" property="invoiceHeader" />
    <result column="CREATION_TIME" jdbcType="VARCHAR" property="creationTime" />
    <result column="CONSUMPTION_AMOUNT" jdbcType="NUMERIC" property="amount" />
    <result column="ORDER_FIELD" jdbcType="INTEGER" property="orderField" />
  </resultMap>

  <resultMap extends="BaseResultMap" id="BaseResultMapVo" type="com.myfun.erpWeb.usercenter.vo.AdminFunPaidVo">
  
  </resultMap>
  <resultMap extends="BaseResultMap" id="extResultMap" type="com.myfun.repository.admindb.dto.AdminFunPaidDto">
	    <result column="cityName" jdbcType="VARCHAR" property="cityName" />
	    <result column="userName" jdbcType="VARCHAR" property="userName" />
	    <result column="userMobile" jdbcType="VARCHAR" property="userMobile" />
  </resultMap>
  
  <resultMap id="paidCountMap" type="com.myfun.repository.admindb.dao.AdminPaidCountDto">
   <!-- <result column="cityName" jdbcType="VARCHAR" property="cityName" /> -->
	    <result column="PAID_CATIGORY" jdbcType="VARCHAR" property="paidCatigory" />
	    <result column="PAID_TYPE" jdbcType="VARCHAR" property="paidType" />
	    <result column="SUM_AMOUNT" jdbcType="VARCHAR" property="sumAmount" />
  </resultMap>
  <select id="getAdminFunPaidList" parameterType="com.myfun.repository.admindb.param.AdminFunPaidParam" resultMap="extResultMap">
  	SELECT FUN_PAID.PAID_ID, FUN_PAID.UA_ID, FUN_PAID.ARCHIVE_ID, FUN_PAID.CITY_ID, FUN_PAID.PAID_CATIGORY, FUN_PAID.PAID_TYPE, FUN_PAID.CARDNO,
    FUN_PAID.ORDERNO, FUN_PAID.AMOUNT, FUN_PAID.PADI_TIME, FUN_PAID.DEAL_ID, FUN_PAID.STATUS, FUN_PAID.OLD_TIME, FUN_PAID.[DESC],
    FUN_PAID.AMOUNT_BEFORE, FUN_PAID.AMOUNT_AFTER, FUN_PAID.CRM_COMP_ID,
    FUN_PAID.PAID_SOURCE, FUN_PAID.REAL_WEIXIN, FUN_PAID.AMOUNT_QUAN, FUN_PAID.AMOUNT_COIN, FUN_PAID.PT_ID, FUN_PAID.HAS_RECEIPT, FUN_PAID.BUY_AFTER,
    FUN_PAID.SERVICE_START_TIME, FUN_PAID.SERVICE_END_TIME, FUN_PAID.TRANSACTION_ID, FUN_PAID.AMOUNT_SHARE_MONEY, FUN_PAID.AMOUNT_CASH_MONEY,
    FUN_PAID.AMOUNT_PAYMENT, FUN_PAID.SUB_PAID_TYPE, FUN_PAID.AMOUNT_PAY_TYPE, FUN_PAID.AMOUNT_SHARE_MONEY_AFTER, FUN_PAID.AMOUNT_CASH_MONEY_AFTER,
    FUN_PAID.TRUE_BAIL_MONEY, FUN_PAID.COMP_CASH_MONEY, FUN_PAID.COMP_COIN_MONEY, FUN_PAID.TRUE_BAIL_MONEY_AFTER, FUN_PAID.COMP_CASH_MONEY_AFTER,
    FUN_PAID.COMP_COIN_MONEY_AFTER, FUN_CITY.CITY_NAME as cityName,FUN_ARCHIVE.USER_NAME userName,FUN_ARCHIVE.USER_MOBILE userMobile
  	FROM FUN_PAID
  	left join FUN_CITY    ON FUN_CITY.CITY_ID = FUN_PAID.CITY_ID
  	left join FUN_ARCHIVE ON FUN_ARCHIVE.ARCHIVE_ID = FUN_PAID.ARCHIVE_ID
  	<where>
  		<if test="null != paidCatigory">
  			and PAID_CATIGORY = #{paidCatigory}
  		</if>
  		<if test="null != paidType and '' != paidType ">
  			<choose>
	  			<when test="'PHONECARD' == paidType">
	  				and PAID_TYPE = #{paidType} and STATUS = 1
	  			</when>
	  			<when test="'INCOME' == paidType">
	  				<![CDATA[and PAID_TYPE = #{paidType} and PAID_TYPE <> "CARD" ]]>
	  			</when>
	  			<otherwise>
	  				and PAID_TYPE = #{paidType} 
	  			</otherwise>
	  		</choose>
  		</if>
  		<choose>
  			<when test="null != userMobile">
  				and FUN_PAID.ARCHIVE_ID in (SELECT ARCHIVE_ID FROM FUN_ARCHIVE WHERE USER_MOBILE = #{userMobile})
  			</when>
  			<otherwise>
  				<choose>
  					<when test="null != cityId">
  						and CITY_ID = #{CITY_ID}
  					</when>
  					<when test="specialCondition == 1">
  						and CITY_ID in (SELECT CITY_ID FROM CRM_REGION_CITY WHERE COMP_ID = #{crmCompId})
  					</when>
  				</choose>
  			</otherwise>
  		</choose>
  		<if test="null != sAmount and ''!= sAmount">
  			<![CDATA[ AND AMOUNT >= #{sAmount} ]]>
  		</if>
  		<if test="null != eAmount and ''!= eAmount">
  			<![CDATA[ AND AMOUNT <= #{eAmount} ]]>
  		</if>
  		<if test="null != sTime and ''!= sTime">
  			<![CDATA[ AND PADI_TIME >= #{sTime} ]]>
  		</if>
  		<if test="null != eTime and ''!= eTime">
  			<![CDATA[ AND PADI_TIME <= #{eTime} ]]>
  		</if>
  		<if test="specialCondition == 1">
			<choose>
				<when test="null != isDistribute and isDistribute &gt;= 0">
					and CRM_COMP_ID = #{crmCompId}
				</when>
				<otherwise>
					and CRM_COMP_ID is null
				</otherwise>
			</choose>  			
  		</if>
  		AND AMOUNT &gt; '0'
  	</where>
  	ORDER BY PADI_TIME DESC
  </select>
  <select id="getCrmPaidAmountAcount" parameterType="com.myfun.repository.admindb.param.AdminFunPaidParam" resultType="java.math.BigDecimal">
    SELECT sum(AMOUNT)
  	FROM FUN_PAID
  	<where>
  		<if test="null != paidCatigory">
  			<![CDATA[  and PAID_CATIGORY = #{paidCatigory} and AMOUNT > 0 ]]>
  		</if>
  		<if test="null != paidType and '' != paidType ">
  			<choose>
	  			<when test="'PHONECARD' == paidType">
	  				and PAID_TYPE = #{paidType} and STATUS = 1
	  			</when>
	  			<otherwise>
	  				and PAID_TYPE = #{paidType} 
	  			</otherwise>
	  		</choose>
  		</if>
  		<choose>
  			<when test="null != userMobile">
  				and FUN_PAID.ARCHIVE_ID in (SELECT ARCHIVE_ID FROM FUN_ARCHIVE WHERE USER_MOBILE = #{userMobile})
  			</when>
  			<otherwise>
  				<choose>
  					<when test="null != cityId">
  						and CITY_ID = #{CITY_ID}
  					</when>
  					<when test="specialCondition == 1">
  						and CITY_ID in (SELECT CITY_ID FROM CRM_REGION_CITY WHERE COMP_ID = #{crmCompId})
  					</when>
  				</choose>
  			</otherwise>
  		</choose>
  		<if test="null != sAmount and ''!= sAmount">
  			<![CDATA[ AND AMOUNT >= #{sAmount} ]]>
  		</if>
  		<if test="null != eAmount and ''!= eAmount">
  			<![CDATA[ AND AMOUNT <= #{eAmount} ]]>
  		</if>
  		<if test="null != sTime and ''!= sTime">
  			<![CDATA[ AND PADI_TIME >= #{sTime} ]]>
  		</if>
  		<if test="null != eTime and ''!= eTime">
  			<![CDATA[ AND PADI_TIME <= #{eTime} ]]>
  		</if>
  		<if test="specialCondition == 1">
			<choose>
				<when test="null != isDistribute and isDistribute &gt;= 0">
					and CRM_COMP_ID = #{crmCompId}
				</when>
				<otherwise>
					and CRM_COMP_ID is null
				</otherwise>
			</choose>  			
  		</if>
  	</where>
  </select>
  <select id="getActualSales" parameterType="com.myfun.repository.admindb.param.AdminCrmAcountsParam" resultType="java.lang.Float">
  	select ISNULL(SUM(AMOUNT), 0) from FUN_PAID
  	where PAID_CATIGORY='PAY'
  	and PAID_TYPE <![CDATA[ <>  ]]> '3'
  	and PAID_TYPE <![CDATA[ <>  ]]> '5'
  	<if test="startTime != null and startTime != ''">
  		and PADI_TIME <![CDATA[ >=  ]]> #{startTime}
  	</if>
  	<if test="endTime != null and endTime != ''">
  		and PADI_TIME <![CDATA[ <=  ]]> #{endTime}
  	</if>
  </select>
  <insert id="updateByCondition" parameterType="com.myfun.repository.admindb.param.AdminCrmPresentParam">
  	insert into FUN_PAID (UA_ID, ARCHIVE_ID, CITY_ID, PAID_CATIGORY, PAID_TYPE, CARDNO, AMOUNT, PADI_TIME, OLD_TIME, [DESC]) 
  	SELECT UA_ID, #{archiveId}, CITY_ID, '1', '1', 'SYSTEM', convert(int, #{month}) * 30, GETDATE(),
	#{preEnd}, #{msgContent} FROM FUN_ARCHIVE 
	WHERE ARCHIVE_ID = #{archiveId} AND USER_EDITION = 2
  </insert>
  
  <select id="sumPaid" resultMap="paidCountMap">
  	SELECT PAID_CATIGORY, PAID_TYPE, isnull(SUM(AMOUNT), 0) AS SUM_AMOUNT FROM FUN_PAID
  	where 1 = 1
  	<choose> 
  		<when test="cityId != null and cityId != ''"> 
			AND CITY_ID = #{cityId}
		</when> 
		<when test="flag =='no'"> 
			AND CITY_ID IN (SELECT CITY_ID FROM CRM_REGION_CITY WHERE COMP_ID = #{crmCompId} )
		</when> 
	</choose> 
	<if test="time1 != null and time1 != ''">
		AND PADI_TIME  <![CDATA[ >=  ]]> #{time1}
	</if>
	<if test="time2 != null and time2 != ''">
		AND PADI_TIME  <![CDATA[ <=  ]]> #{time2}
	</if>
	<if test="runFlag != null and runFlag != '' and runFlag == '1'">
	AND CRM_COMP_ID = #{crmCompId}
	</if>
	<if test="runFlag != null and runFlag != ''  and runFlag == '0'">
		AND CRM_COMP_ID IS NULL 
	</if>
	GROUP BY PAID_CATIGORY, PAID_TYPE
  </select>
  
  <select id="selectByTypeAndOther" resultMap="extResultMap">
  	select  PAID_ID, UA_ID, ARCHIVE_ID, CITY_ID, PAID_CATIGORY, PAID_TYPE, CARDNO, ORDERNO, AMOUNT,
    PADI_TIME, DEAL_ID, [STATUS], OLD_TIME, [DESC], AMOUNT_BEFORE, AMOUNT_AFTER, CRM_COMP_ID,
    PAID_SOURCE, REAL_WEIXIN, AMOUNT_QUAN, AMOUNT_COIN, PT_ID, HAS_RECEIPT, BUY_AFTER,
    SERVICE_START_TIME, SERVICE_END_TIME, TRANSACTION_ID, AMOUNT_SHARE_MONEY, AMOUNT_CASH_MONEY,
    AMOUNT_PAYMENT, SUB_PAID_TYPE, AMOUNT_PAY_TYPE, AMOUNT_SHARE_MONEY_AFTER, AMOUNT_CASH_MONEY_AFTER,
    TRUE_BAIL_MONEY, COMP_CASH_MONEY, COMP_COIN_MONEY, TRUE_BAIL_MONEY_AFTER, COMP_CASH_MONEY_AFTER,
    COMP_COIN_MONEY_AFTER, (SELECT USER_NAME FROM FUN_ARCHIVE WHERE FUN_ARCHIVE.ARCHIVE_ID = FUN_PAID.ARCHIVE_ID ) as userName,
  	(SELECT CITY_NAME FROM FUN_CITY WHERE FUN_CITY.CITY_ID = FUN_PAID.CITY_ID ) as cityName,
  	(SELECT USER_MOBILE FROM FUN_ARCHIVE WHERE FUN_ARCHIVE.ARCHIVE_ID = FUN_PAID.ARCHIVE_ID ) as userMobile
  	 from FUN_PAID where 1 = 1
  	<if test="faaType != null and faaType != ''">
  		and PAID_TYPE = #{faaType}
  	</if>
  	<if test="faaType != null and faaType != '' and faaType == 'PHONECARD'">
  		and STATUS = 1
  	</if>
  	<choose> 
  		<when test="adminPaidCountParam.flag != null and adminPaidCountParam.flag != '' and adminPaidCountParam.flag == '1'"> 
			AND CITY_ID = #{cityId}
		</when> 
		<when test="adminPaidCountParam.flag != null and adminPaidCountParam.flag != '' and adminPaidCountParam.flag == '0'"> 
			AND CITY_ID in (SELECT CITY_ID FROM CRM_REGION_CITY WHERE COMP_ID = #{crmCompId})
		</when> 
	</choose> 
  	<if test="adminPaidCountParam.time1 != null and adminPaidCountParam.time1 != ''">
  			AND PADI_TIME  <![CDATA[ >=  ]]> #{adminPaidCountParam.time1}
  	</if>
  	<if test="adminPaidCountParam.time2 != null and adminPaidCountParam.time2 != ''">
  			AND PADI_TIME  <![CDATA[ <=  ]]> #{adminPaidCountParam.time2}
  	</if>
  	<if test="paidSource!= null and paidSource != ''">
  			AND PAID_SOURCE = #{paidSource}
  	</if>
  	<if test="adminPaidCountParam.runFlag != null and adminPaidCountParam.runFlag != '' and adminPaidCountParam.runFlag =='1'">
  		CRM_COMP_ID = #{adminPaidCountParam.crmCompId}
  	</if>
  	<if test="adminPaidCountParam.runFlag != null and adminPaidCountParam.runFlag != '' and adminPaidCountParam.runFlag =='0'">
  		CRM_COMP_ID is null
  	</if>
  	order by PADI_TIME DESC
  </select>
  
  <select id="getFunPaidByArchiveId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List" />
  	from FUN_PAID
  	where ARCHIVE_ID =#{archiveId}
  	ORDER BY PADI_TIME DESC
  </select>
  <select id="selectByCondition">
  	select 
  	<include refid="Base_Column_List" />
  	from FUN_PAID
  	where 1=1
  	<if test="cardno != null">
      and CARDNO = #{cardno,jdbcType=VARCHAR},
    </if>
    <if test="paidType != null">
      AND PAID_TYPE = #{paidType,jdbcType=VARCHAR},
    </if>
    <if test="uaId != null">
      AND UA_ID = #{uaId}
    </if>
  </select>
  <select id="getPaidRecord" parameterType="com.myfun.repository.admindb.po.AdminFunPaid" resultMap="BaseResultMap">
  	select  top 1 
  	<include refid="Base_Column_List" />
  	from FUN_PAID
  	where 1=1
  	<if test="paidCatigory != null">
      and PAID_CATIGORY = #{paidCatigory,jdbcType=VARCHAR},
    </if>
    <if test="paidType != null">
      AND PAID_TYPE like '%#{paidType,jdbcType=VARCHAR}%',
    </if>
    <if test="uaId != null">
      AND UA_ID = #{uaId}
    </if>
    order by PAID_ID desc
  </select>
  <select id="getFunPaidByArchiveIdAndPaidType" parameterType="java.util.Map">
  	select <include refid="Base_Column_List" /> from FUN_PAID
  	where ARCHIVE_ID = #{archiveId}
  	and PAID_TYPE in (#{paidType1}, #{paidType2})
  </select>
  <select id="updateCardNo" parameterType="com.myfun.repository.admindb.po.AdminFunPaid">
  	update FUN_PAID
  	set CARDNO = #{cardno}
  	where ARCHIVE_ID = #{archiveId}
  	and USER_ICCODE <![CDATA[ <>  ]]> #{cardno}
  </select>
   
	<select id="getInvoiceHasWritedList" resultMap="DtoBaseResultMap">
		SELECT DISTINCT
			fi.INVOICE_ID as invoiceId,
			CASE
		WHEN fi.INVOICE_STATUS = 1 THEN
			100
		ELSE
			1000
		END  AS orderField,
		fi.INVOICE_TYPE AS invoiceType,
		fi.INVOICE_HEADER AS invoiceHeader,
		fi.CREATION_TIME AS creationTime,
		fi.INVOICE_STATUS AS invoiceStatus,
		fi.CONSUMPTION_AMOUNT AS amount
		FROM
			hft_admindb.dbo.FUN_PAID fp
		LEFT JOIN hft_admindb.dbo.CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id
		AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN hft_admindb.dbo.FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID
		AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE fi ON fr.INVOICE_ID = fi.INVOICE_ID
		WHERE
			fp.REAL_WEIXIN != '1'
		AND fi.ARCHIVE_ID = #{param.archiveId}
		AND fi.INVOICE_ID IS NOT NULL
		AND fi.INVOICE_STATUS != '6'
		ORDER BY
		CASE WHEN fi.INVOICE_STATUS = 1 THEN 100 ELSE 1000 END,
		fi.CREATION_TIME DESC 
	</select>
	
	<select id="getManagerInvoiceHasWritedList" resultMap="DtoBaseResultMap">
		SELECT DISTINCT
			fi.INVOICE_ID,
			CASE
		WHEN fi.INVOICE_STATUS = 1 THEN
			100
		ELSE
			1000
		END AS ORDER_FIELD,
		fi.INVOICE_TYPE,
		fi.INVOICE_HEADER,
		fi.CREATION_TIME,
		fi.INVOICE_STATUS,
		fi.CONSUMPTION_AMOUNT AS AMOUNT
		FROM hft_admindb.dbo.FUN_PAID fp
		LEFT JOIN hft_admindb.dbo.CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN hft_admindb.dbo.FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE fi ON fr.INVOICE_ID = fi.INVOICE_ID
		WHERE
		fp.REAL_WEIXIN != '1'
		AND (
			fp.ARCHIVE_ID IN (
				SELECT
					archive_Id
				FROM
					fun_users
				WHERE
					user_writeoff = 0
		
				AND archive_id != '8'
			)
			AND fp.PAID_TYPE IN (
				'O2O',
				'UPGRADE_SRV',
				'PAY_WEIXIN',
				'BUYDEPT'
			)
			OR (
				fp.ARCHIVE_ID = '8'
				AND fp.PAID_TYPE IN (
					'O2O',
					'UPGRADE_SRV',
					'PAY_WEIXIN',
					'BUYDEPT',
					'SRV'
				)
			)
		)
		AND fi.INVOICE_ID IS NOT NULL
		AND fi.INVOICE_STATUS != '6'
		ORDER BY
		CASE WHEN fi.INVOICE_STATUS = 1 THEN 100
		ELSE 1000 END, fi.CREATION_TIME DESC 
	</select>
	
	<select id="getDetailPaidList" resultMap="DtoBaseResultMap">
		SELECT
			fp.PAID_TYPE,
			fp.PADI_TIME,
			fp.PAID_ID,
			fp.AMOUNT,
			fd.DEPT_NAME
		FROM
			FUN_PAID fp
		LEFT JOIN CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id
		LEFT JOIN FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID
		WHERE
			fr.INVOICE_ID = #{invoiceId}
	</select>
	
	<select id="getTrueHousePiadList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_PAID
		WHERE
		ARCHIVE_ID = #{archiveId}
		AND PAID_TYPE IN ('CASH_TRUEHOUSE_MONEY', 'TRUEHOUSE_DEPOSIT_MONEY', 'TRUEHOUSE_DEDUCT_MONEY')
		ORDER BY PADI_TIME DESC
	</select>

  <select id="getShareMoneyPaidList" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_PAID
    where ARCHIVE_ID =#{archiveId}
    AND PAID_TYPE IN ('YOU_GET_VIEW_FEE','YOU_SHARE_TRUE_HOUSE','YOU_RETURN_TRUE_HOUSE','YOU_WITHDRAWALS_WEIXIN','YOU_PAY_VIEW_FEE','YOU_GET_BUYOUT_WUYE','YOU_PAY_BUYOUT_WUYE','YOU_WITHDRAWALS_ACCOUNT')
    ORDER BY PAID_ID DESC
  </select>

  <select id="getFunPaidRecordList" resultType="java.util.Map">
      select PL.PAID_ID AS cdId,ISNULL(PA.PAY_STATUS,0) AS isExtract,PL.PADI_TIME AS contactTime,
             PL.AMOUNT as amount,PL.[DESC] AS des,#{param.accountType}  AS accountType
      from  FUN_PAID PL LEFT JOIN FUN_PAID_ADUIT PA ON PL.PAID_ID = PA.PAID_ID
      where PAID_CATIGORY = 'INCOME' and PAID_TYPE in ('YOU_GET_VIEW_FEE','YOU_SHARE_TRUE_HOUSE','YOU_RETURN_VIEW_FEE', 'CITYSHARE_RETURN_VIEWFEE', 'CITYSHARE_GET_VIEWFEE')
      <if test="null != param.startTime and '' != param.startTime">
        <![CDATA[ and PADI_TIME >= #{param.startTime}]]>
      </if>
      <if test="null != param.endTime and '' != param.endTime">
        <![CDATA[and PADI_TIME <= #{param.endTime}]]>
      </if>
      <if test="param.isExtract != null and param.isExtract != ''">
        <if test="param.isExtract = 0">
          and PAY_STATUS is null
        </if>
      </if>
    <choose>
      <when test="param.accountType = 1">
         and UA_ID = #{param.uaId}
      </when>
      <otherwise>
         and UA_ID = #{param.compUaId}
      </otherwise>
    </choose>
    order by PADI_TIME desc
  </select>

  <select id="getCashMoneyRecord" resultType="java.util.Map">
    select PADI_TIME as padiTime,PAID_ID as paidId,AMOUNT as amount,[DESC] as [desc],PAID_CATIGORY as paidCatigory,[STATUS] as [status]
    from FUN_PAID
    where UA_ID = #{param.uaId} and CITY_ID = #{param.cityId} and PAID_CATIGORY = #{param.incomePay}
    <if test="null != param.startTime and '' !=  param.startTime">
      <![CDATA[ and PADI_TIME >= #{param.startTime}]]>
    </if>
    <if test="null !=  param.endTime and '' !=  param.endTime">
      <![CDATA[and PADI_TIME <= #{param.endTime}]]>
    </if>
    and PAID_TYPE in ('CASH_RECHARGE','YOU_GET_VIEW_FEE', 'YOU_SHARE_TRUE_HOUSE', 'YOU_GET_BUYOUT_WUYE',
    'YOU_RETURN_VIEW_FEE', 'YOU_RETURN_TRUE_HOUSE', 'LUCKY_MONEY_PAY', 'TRANS_DIDI_MONEY', 'DIDI_BAIL',
    'DIDI_PAY', 'BROKER_BALANCE_CASH', 'RETURN_MONEY', 'BUY_OTHER_VIP', 'COIN',
    'BROKER_BALANCE_TAXATION','RECHARGE_BALANCE', 'YOUYOU_DAIKAN_REWARD', 'YOUYOU_DEAL_REWARD', 'YOUYOU_BROKERAGE_CASHMONEY','NETBANK_BALANCE')
    order by  PADI_TIME DESC
  </select>

	<select id="getPaidList" resultMap="BaseResultMapVo">
		SELECT 
		<include refid="Base_Column_List" />
		FROM FUN_PAID
		WHERE REAL_WEIXIN != 1
		<!-- 收入还是支出 INCOME=收入 PAY=支出  GIFT=赠送 -->
		<if test="null != param.paidCatigory and param.paidCatigory != ''">
			<choose>
				<when test="'INCOME' == param.paidCatigory">
					AND (PAID_CATIGORY = 'INCOME' OR PAID_CATIGORY = 'GIFT')
				</when>
				<otherwise>
					AND PAID_CATIGORY = #{param.paidCatigory}
				</otherwise>
			</choose>
		</if>
		<!-- 支付类型 -->
		<if test="null != param.paidType and param.paidType != ''">
			<choose>
				<when test="'OTHER' == param.paidType">
					AND PAID_TYPE NOT IN ('VOIP','BIDDING','HOUSE_BIDDING','TRUEHOUSE_LIGHT','SRV_QUAN','CLEAR4PAST')
				</when>
				<otherwise>
					AND PAID_TYPE = #{param.paidType}
				</otherwise>
			</choose>
		</if>
		<!-- 排除优家消费记录 -->
		AND PAID_TYPE NOT IN
		('YOU_GET_VIEW_FEE','YOU_RETURN_VIEW_FEE','YOU_SHARE_TRUE_HOUSE','YOU_RETURN_TRUE_HOUSE'
		,'YOU_WITHDRAWALS_WEIXIN','YOU_PAY_VIEW_FEE','YOU_GET_BUYOUT_WUYE','YOU_PAY_BUYOUT_WUYE','YOU_WITHDRAWALS_ACCOUNT','NETBANK_BALANCE')
		<!-- 支付方式 -->
		<if test="null != param.paidMode and param.paidMode != ''">
			<choose>
					<!-- 其他 -->
				<when test="0 == param.paidMode">
					AND AMOUNT_COIN &lt;= 0 AND AMOUNT_QUAN &lt;= 0
				</when>
					<!-- 好房币 -->
				<when test="1 == param.paidMode">
					AND AMOUNT_COIN &gt;0
				</when>
					<!-- 优惠券 -->
				<when test="2 == param.paidMode">
					AND AMOUNT_QUAN &gt;0
				</when>
			</choose>
		</if>
		<!-- 时间范围 -->
		<if test="null != param.paidTimeGreater and param.paidTimeGreater != ''">
			AND PADI_TIME &gt;= #{param.paidTimeGreater}
		</if>
		<if test="null != param.paidTimeLess and param.paidTimeLess != ''">
			AND PADI_TIME &lt;= #{param.paidTimeLess}
		</if>
		<choose>
			<when test="'GENERAL_MANAGER' == param.selfUserPosition">
				<choose>
					<when test="1 == param.paidAccount">
						and (UA_ID = #{param.selfUaId})
					</when>
					<when test="2 == param.paidAccount">
						and UA_ID = #{param.selfCompUaId} 
					</when>
					<otherwise>
						and (UA_ID = #{param.selfUaId})
						OR UA_ID = #{param.selfCompUaId} 
					</otherwise>
				</choose>
			</when>
			<otherwise>
				AND PAID_TYPE != 'VOIP' AND (UA_ID = #{param.selfUaId} OR ARCHIVE_ID = #{param.selfArchiveId})
			</otherwise>
		</choose>
		ORDER BY PAID_ID DESC
	</select>
	
	<select id="getCashRecordList" resultMap="BaseResultMapVo">
	SELECT
	PADI_TIME, PAID_ID,AMOUNT, [DESC] , PAID_CATIGORY, [STATUS], PAID_TYPE
	FROM FUN_PAID
	WHERE
	<!-- 个人 -->
	<if test="1 == param.uaType">
		UA_ID = #{param.selfUaId}
		AND PAID_TYPE
		IN ('CASH_RECHARGE' ,'YOU_GET_VIEW_FEE' ,'YOU_SHARE_TRUE_HOUSE' ,'YOU_GET_BUYOUT_WUYE' ,'YOU_RETURN_VIEW_FEE' ,'YOU_RETURN_TRUE_HOUSE' ,'LUCKY_MONEY_PAY' ,'TRANS_DIDI_MONEY' ,'DIDI_BAIL' ,'DIDI_PAY' 
		,'BROKER_BALANCE_CASH' ,'RETURN_MONEY' ,'BUY_OTHER_VIP' ,'COIN' ,'BROKER_BALANCE_TAXATION' ,'RECHARGE_BALANCE' ,'YOUYOU_DAIKAN_REWARD' ,'YOUYOU_DEAL_REWARD' ,'YOUYOU_BROKERAGE_CASHMONEY' ,'NETBANK_BALANCE' ,'BUYDEPT','VOIP')
	</if>
	<!-- 公司 -->
	<if test="2 == param.uaType">
		UA_ID = #{param.selfCompUaId}
		AND PAID_TYPE IN ('CASH_RECHARGE' ,'YOU_GET_VIEW_FEE' ,'YOU_SHARE_TRUE_HOUSE' ,'YOU_GET_BUYOUT_WUYE' ,'YOU_RETURN_VIEW_FEE' ,'YOU_RETURN_TRUE_HOUSE' ,'LUCKY_MONEY_PAY' ,'TRANS_DIDI_MONEY'
		,'DIDI_BAIL' ,'DIDI_PAY' ,'BROKER_BALANCE_CASH' ,'RETURN_MONEY' ,'BUY_OTHER_VIP' ,'COIN' ,'BROKER_BALANCE_TAXATION' ,'RECHARGE_BALANCE' ,'YOUYOU_DAIKAN_REWARD' ,'YOUYOU_DEAL_REWARD' ,'YOUYOU_BROKERAGE_CASHMONEY' ,'NETBANK_BALANCE','BUYDEPT','VOIP')
		<if test="0 == param.isGeneralManager">
			AND ARCHIVE_ID = #{param.selfArchiveId}
		</if>		
	</if>
	<if test="null != param.startTime and param.startTime != ''">
		AND PADI_TIME &gt;= #{param.startTime}
	</if>
	<if test="null != param.endTime and param.endTime != ''">
		AND PADI_TIME &lt;= #{param.endTime}
	</if>
		 ORDER BY PAID_ID DESC
	</select>

	<select id="getHfCoinRecordList" resultMap="BaseResultMapVo">
		SELECT <include refid="Base_Column_List" /> FROM FUN_PAID
		WHERE
		<!-- 个人 -->
		<if test="1 == param.uaType">
			UA_ID = #{param.selfUaId}
			AND PAID_TYPE IN ('DEDUCT_QUAN_TRUE_SHARE_HOUSE', 'GIFT_QUAN_TRUE_SHARE_HOUSE', 'GIFT_COMP_QUAN', 'NEW_BIDDING_REFUND'
			,'BIDDING_REFUND', 'VIP_QUAN', 'YOUYOU_ROB_ORDER', 'SRV_QUAN', 'VIREIN_COIN', 'COIN_REG_GIFT', 'PHONECARD_COIN', 'COIN_COIN', 'COIN'
			,'BIDDING', 'HOUSE_BIDDING', 'NEW_BUILD_BIDDING','WORKCOUNT_BEAN_USER_SUB','WORKCOUNT_BEAN_USER_ADD','ZHIYE','VOIP', 'SOSO_VIEW_PAY','WORKCOUNT_BEAN_USER_RETURN'
			,'HOUSE_COOPERATION','RETURN_HOUSE_COOPERATION','GAIN_COOPERATION')
		</if>
		<!-- 公司 -->
		<if test="2 == param.uaType">
			UA_ID = #{param.selfCompUaId} AND REAL_WEIXIN != '1'
			AND PAID_TYPE IN ('SHARE_TRUEHOUSE_GiVE_BEANS','DEDUCT_QUAN_TRUE_SHARE_HOUSE', 'GIFT_QUAN_TRUE_SHARE_HOUSE', 'GIFT_COMP_QUAN', 'NEW_BIDDING_REFUND'
			,'BIDDING_REFUND', 'VIP_QUAN', 'YOUYOU_ROB_ORDER', 'SRV_QUAN', 'VIREIN_COIN', 'COIN_REG_GIFT', 'PHONECARD_COIN', 'COIN_COIN', 'COIN'
			,'BIDDING', 'HOUSE_BIDDING', 'NEW_BUILD_BIDDING','WORKCOUNT_BEAN_COMP_ADD','WORKCOUNT_BEAN_COMP_SUB','ZHIYE','VOIP', 'SOSO_VIEW_PAY','YYHF_QD_PAY','WORKCOUNT_BEAN_USER_RETURN'
			,'HOUSE_COOPERATION','RETURN_HOUSE_COOPERATION','GAIN_COOPERATION')
			<if test="0 == param.isGeneralManager">
				AND ARCHIVE_ID = #{param.selfArchiveId}
			</if>
		</if>
		<if test="null != param.startTime and param.startTime != ''">
			AND PADI_TIME &gt;= #{param.startTime}
		</if>
		<if test="null != param.endTime and param.endTime != ''">
			AND PADI_TIME &lt;= #{param.endTime}
		</if>
		 ORDER BY PAID_ID DESC
	</select>
	
	<select id="getTrueHouseLightRecordList" resultMap="BaseResultMapVo">
		SELECT <include refid="Base_Column_List" /> FROM FUN_PAID
		WHERE PAID_TYPE IN ('TRUEHOUSE_DEPOSIT_MONEY', 'BROKER_TRUE_HOUSE_CASH', 'CASH_TRUEHOUSE_MONEY')
		<!-- 个人 -->
		<if test="1 == param.uaType">
			 AND ( UA_ID = #{param.selfUaId})
		</if>
		<!-- 公司 -->
		<if test="2 == param.uaType">
			AND UA_ID = #{param.selfCompUaId}
		</if>
		<if test="null != param.startTime and param.startTime != ''">
			AND PADI_TIME &gt;= #{param.startTime}
		</if>
		<if test="null != param.endTime and param.endTime != ''">
			AND PADI_TIME &lt;= #{param.endTime}
		</if>
		 ORDER BY PAID_ID DESC
	</select>
	
	<select id="getBrokerInvitePrizeRecordList" resultMap="BaseResultMapVo">
		SELECT <include refid="Base_Column_List" /> FROM FUN_PAID
		WHERE PAID_TYPE IN ('BROKER_RIGHT_PRIZE', 'BROKER_INVITE_PRIZE', 'BROKER_RECOM_PRIZE','BROKER_GETSHARE_TAXATION','BROKER_GETSHARE_MONEY', 'BROKER_GETSHARE_TAXATION','BROKER_GETSHARE_MONEY')
		<!-- 个人 -->
		<if test="1 == param.uaType">
			AND ( UA_ID = #{param.selfUaId} OR ARCHIVE_ID = #{param.selfArchiveId} 
			<if test="null != param.isGeneralManager and 1 == param.isGeneralManager">
				OR UA_ID = #{param.selfCompUaId}
			</if>
			)
		</if>
		<!-- 公司 -->
		<if test="2 == param.uaType">
			AND UA_ID = #{param.selfCompUaId}
		</if>
		<if test="null != param.startTime and param.startTime != ''">
			AND PADI_TIME &gt;= #{param.startTime}
		</if>
		<if test="null != param.endTime and param.endTime != ''">
			AND PADI_TIME &lt;= #{param.endTime}
		</if>
		 ORDER BY PAID_ID DESC
	</select>
	
	<select id="getO2ORecordList" resultMap="BaseResultMapVo">
	  SELECT A.PAID_ID, A.UA_ID, A.ARCHIVE_ID, A.CITY_ID, A.PAID_CATIGORY, A.PAID_TYPE, A.CARDNO, A.ORDERNO, A.AMOUNT,
      A.PADI_TIME, A.DEAL_ID, A.[STATUS], A.OLD_TIME, A.[DESC], A.AMOUNT_BEFORE, A.AMOUNT_AFTER, A.CRM_COMP_ID,
      A.PAID_SOURCE, A.REAL_WEIXIN, A.AMOUNT_QUAN, A.AMOUNT_COIN, A.PT_ID, A.HAS_RECEIPT, A.BUY_AFTER,
      A.SERVICE_START_TIME, A.SERVICE_END_TIME, A.TRANSACTION_ID, A.AMOUNT_SHARE_MONEY, A.AMOUNT_CASH_MONEY,
      A.AMOUNT_PAYMENT, A.SUB_PAID_TYPE, A.AMOUNT_PAY_TYPE, A.AMOUNT_SHARE_MONEY_AFTER, A.AMOUNT_CASH_MONEY_AFTER,
      A.TRUE_BAIL_MONEY, A.COMP_CASH_MONEY, A.COMP_COIN_MONEY, A.TRUE_BAIL_MONEY_AFTER, A.COMP_CASH_MONEY_AFTER,
      A.COMP_COIN_MONEY_AFTER FROM FUN_PAID A
		<if test="0 == param.isGeneralManager and 2 == param.uaType">
			JOIN CRM_PAYMENT_TASKS B ON A.PT_ID = B.PT_ID
		</if>
		WHERE A.CITY_ID = #{param.selfCityId} AND A.PAID_TYPE = 'O2O' AND A.UA_ID = #{param.selfCompUaId}
		<if test="0 == param.isGeneralManager and 2 == param.uaType">
			AND B.DEPT_ID = #{param.selfAdminDeptId} AND B.PT_TYPE = 13 AND B.IS_CLEAR = 1
		</if>
		<if test="null != param.startTime and param.startTime != ''">
			AND A.PADI_TIME &gt;= #{param.startTime}
		</if>
		<if test="null != param.endTime and param.endTime != ''">
			AND A.PADI_TIME &lt;= #{param.endTime}
		</if>
		ORDER BY PAID_ID DESC
	</select>
	
	<select id="getSRVRecordList" resultMap="BaseResultMapVo">
		SELECT <include refid="Base_Column_List" /> FROM FUN_PAID
		WHERE PAID_TYPE IN ('SRV', 'SRV_SUPER' ,'SRV_COIN' )
		AND ( UA_ID = #{param.selfUaId})
		ORDER BY PAID_ID DESC
	</select>

	<select id="getPaidDetailList" resultMap="DtoBaseResultMap">
		SELECT
		A.PAID_TYPE,A.PADI_TIME,A.PAID_ID,A.AMOUNT,C.DEPT_NAME FROM 
		FUN_PAID A
		left join CRM_PAYMENT_TASKS B on B.pt_id=A.pt_id
		left join FUN_DEPTS C on B.DEPT_ID = C.DEPT_ID
		left join FUN_PAID_INVOICERELATIVE D on A.PAID_ID = D.PAID_ID
		where D.INVOICE_ID = #{invoiceId}
	</select>
	
	<select id="getDeptAndVipcountByPaid" resultType="java.util.Map">
		SELECT 
			SUM(IIF(PAID_TYPE!='SRV',1,0)) AS deptcount, 
			SUM(IIF(PAID_TYPE='SRV',1,0)) AS vipcount 
		FROM 
			FUN_PAID 
		WHERE 
			PAID_ID IN
			<foreach close=")" collection="paidIdList" item="paidId" open="(" separator=",">
             	#{paidId}
           	</foreach>
	</select>
	
	<select id="getAmountByPaidId" resultType="java.lang.Double">
		SELECT 
			SUM(AMOUNT) AS AMOUNT 
		FROM 
			FUN_PAID 
		WHERE 
			PAID_ID 
		IN 
			<foreach close=")" collection="paidIdList" item="paidId" open="(" separator=",">
             	#{paidId}
           	</foreach>
	</select>
	
	<select id="getInvoiceList" resultMap="DtoBaseResultMap">
		SELECT
		<choose>
			<when test="2 == invoiceType">
				DISTINCT E.INVOICE_ID,CASE WHEN E.INVOICE_STATUS=1 THEN 100 ELSE 1000 END as ORDER_FIELD,E.INVOICE_TYPE,E.INVOICE_HEADER,E.CREATION_TIME,E.INVOICE_STATUS,E.CONSUMPTION_AMOUNT as AMOUNT
			</when>
			<otherwise>
				DISTINCT A.HAS_RECEIPT,A.PADI_TIME,A.PAID_ID,C.DEPT_CNAME as DEPT_NAME,E.INVOICE_ID,B.PT_TYPE,A.ARCHIVE_ID,A.AMOUNT,A.PAID_TYPE
			</otherwise>
		</choose>
		FROM hft_admindb.dbo.FUN_PAID A 
		left join hft_admindb.dbo.CRM_PAYMENT_TASKS B 
		on B.pt_id=A.pt_id AND A.AMOUNT&gt;0 
		left join hft_admindb.dbo.FUN_DEPTS C ON B.DEPT_ID = C.DEPT_ID 
		left join hft_admindb.dbo.FUN_PAID_INVOICERELATIVE D ON A.PAID_ID = D.PAID_ID AND A.AMOUNT&gt;0 
		left JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE E on D.INVOICE_ID = E.INVOICE_ID 
		<where>
			<choose>
				<when test="2 == invoiceType">
					<choose>
						<when test="generalManagerFlag">
							<include refid="getConditionManager" />
						</when>
						<otherwise>
							AND E.ARCHIVE_ID = #{shardArchiveId}
						</otherwise>
					</choose>
					AND E.INVOICE_ID IS NOT NULL AND E.INVOICE_STATUS != 6
				</when>
				<otherwise>
					<choose>
						<when test="generalManagerFlag">
							<include refid="getConditionManager" />
						</when>
						<otherwise>
							AND A.ARCHIVE_ID = #{shardArchiveId} AND A.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV')
						</otherwise>
					</choose>
					AND ((E.INVOICE_ID IS NULL OR E.INVOICE_STATUS = 6) OR (E.INVOICE_ID &gt;0 AND A.HAS_RECEIPT = 1 AND E.INVOICE_TYPE = 2))
					<if test="null != padiTimeStart">
						AND A.PADI_TIME &gt;= #{padiTimeStart}
					</if>
				</otherwise>
			</choose>
		</where>
		<choose>
			<when test="2 == invoiceType">
				ORDER BY CASE WHEN E.INVOICE_STATUS=1 THEN 100 ELSE 1000 END ,E.CREATION_TIME DESC
			</when>
			<otherwise>
				ORDER BY A.PADI_TIME DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="getInvoiceNotWritedListForGeneral" resultType="com.myfun.erpWeb.usercenter.vo.InvoiceNotWritedVo">
		SELECT DISTINCT
			fp.HAS_RECEIPT AS hasReceipt,
			fp.PADI_TIME AS padiTime,
			fp.PAID_ID AS paidId,
			fd.DEPT_CNAME AS deptName,
			fi.INVOICE_ID AS invoiceId,
			cpt.PT_TYPE AS ptType,
			fp.ARCHIVE_ID AS archiveId,
			fp.AMOUNT AS amount,
			fp.PAID_TYPE AS paidType,
			fd.DEPT_ID AS deptId
		FROM
			hft_admindb.dbo.FUN_PAID fp
		JOIN hft_admindb.dbo.CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN hft_admindb.dbo.FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE fi ON fr.INVOICE_ID = fi.INVOICE_ID
		WHERE
		fp.REAL_WEIXIN != '1'
		AND fp.PADI_TIME &gt;= #{param.dateData}
		AND (fp.ARCHIVE_ID IN (SELECT ARCHIVE_ID FROM FUN_USERS WHERE CITY_ID = #{shardCityId} AND USER_WRITEOFF = 0 AND COMP_ID = #{param.compId} AND ARCHIVE_ID != #{param.archiveId})
		AND fp.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','DEPT_RENT') OR (fp.ARCHIVE_ID = #{param.archiveId} AND fp.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV','DEPT_RENT')))
		AND (((fi.INVOICE_ID IS NULL OR fi.INVOICE_STATUS = '6')) OR ((fi.INVOICE_ID &gt; '0' AND fp.HAS_RECEIPT = '1' AND fi.INVOICE_TYPE = '2' )))
		ORDER BY
			fp.PADI_TIME DESC
	</select>
	
	<select id="getInvoiceNotWritedListForUser" resultType="com.myfun.erpWeb.usercenter.vo.InvoiceNotWritedVo">
		SELECT DISTINCT
            fp.HAS_RECEIPT AS hasReceipt,
			fp.PADI_TIME AS padiTime,
			fp.PAID_ID AS paidId,
			fd.DEPT_CNAME AS deptName,
			fi.INVOICE_ID AS invoiceId,
			cpt.PT_TYPE AS ptType,
			fp.ARCHIVE_ID AS archiveId,
			fp.AMOUNT AS amount,
			fp.PAID_TYPE AS paidType,
			fd.DEPT_ID AS deptId
		FROM hft_admindb.dbo.FUN_PAID fp
		JOIN hft_admindb.dbo.CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN hft_admindb.dbo.FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE fi ON fr.INVOICE_ID = fi.INVOICE_ID
		WHERE
			fp.REAL_WEIXIN != '1'
		AND fp.PADI_TIME  &gt;= #{param.dateData}
		AND fp.ARCHIVE_ID = #{param.archiveId}
		AND fp.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV')
		AND (((fi.INVOICE_ID IS NULL OR fi.INVOICE_STATUS = '6')) OR ((fi.INVOICE_ID &gt; '0' AND fp.HAS_RECEIPT = '1' AND fi.INVOICE_TYPE = '2')))
		ORDER BY
			fp.PADI_TIME DESC 
	</select>
	
	<sql id="getConditionManager">
		(( A.ARCHIVE_ID IN (SELECT ARCHIVE_ID FROM FUN_USERS F WHERE F.CITY_ID = #{cityId} AND F.USER_WRITEOFF = 0 AND F.COMP_ID = #{compId} AND F.ARCHIVE_ID != #{shardArchiveId})
		AND A.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT', 'DEPT_RENT'))
		OR (A.ARCHIVE_ID = #{shardArchiveId} and A.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV', 'DEPT_RENT')))
	</sql>

  <select id="getOnlinePayPaidCount" resultMap="BaseResultMap">
 		select * from FUN_PAID
 		where UA_ID = #{uaId} and PAID_TYPE IN ('ONLINE_PAY_INCOME') and PAID_CATIGORY = 'INCOME'
 		<if test="null != timeStart and '' != timeStart">
            and PADI_TIME &gt;= #{timeStart}
        </if>
        <if test="null != timeEnd and '' != timeEnd">
          and PADI_TIME &lt;= #{timeEnd}
        </if>
 	</select>

  <select id="sumBeanGot" resultType="java.lang.Float">
    SELECT isnull(SUM(AMOUNT), 0) FROM FUN_PAID
    where
    UA_ID = #{uaId} and PAID_TYPE = 'WORKCOUNT_BEAN_USER_ADD' AND PADI_TIME &gt;= #{filterTime}
  </select>

  <select id="getAllHaofangAmount" resultMap="paidCountMap">
    select ISNULL(SUM(AMOUNT_QUAN + AMOUNT_COIN), 0) SUM_AMOUNT from FUN_PAID
    where UA_ID = #{uaId}
    and PAID_CATIGORY = 'PAY'
    and (AMOUNT_COIN &gt; 0 or AMOUNT_QUAN &gt; 0 and PADI_TIME &gt;= #{filterTime}
    or PAID_TYPE in ('VOIP_QUAN', 'ZHIYE', 'BIN_BUY_INFO', 'BINBUYINFO', 'BUY_LIVE_GIFT', 'CION_CASHDATA',
    'HOUSE_BIDDING', 'Like_FROM', 'NEW_BUILD_BIDDING', 'REWARD_FROM', 'TELECAST', 'TRUEHOUSE',
    'TRUEHOUSE_LIGHT', 'VIREOUT_COIN', 'VOIP', 'VOIP_QUAN', 'WATCH_ZHIYE', 'YOUJIA_INTEGRAL_HOUSE',
    'YYHF_QD_PAY', 'COIN', 'DVALID_COIN', 'YOUYOU_FIVE_STAR', 'SRV_QUAN', 'YOUYOU_ROB_ORDER',
    'VIP_QUAN', 'SHARE_GIFT_QUAN', 'BROKER_INVITE_PRIZE_BEAN', 'BROKER_RECOM_PRIZE_BEAN','SHARE_TRUEHOUSE_GiVE_BEANS','WORKCOUNT_BEAN_USER_SUB'
    <if test="isUseUaId">
      ,'WORKCOUNT_BEAN_COMP_SUB','WORKCOUNT_BEAN_COMP_ADD'
    </if>
    ))
  </select>
</mapper>