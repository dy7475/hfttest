<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.agencydb.dao.AgencyAmountHistoryMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.agencydb.po.AgencyAmountHistory">
    <!--@mbggenerated-->
    <id column="DETAIL_ID" jdbcType="INTEGER" property="detailId" />
    <result column="APPLY_TIME" jdbcType="TIMESTAMP" property="applyTime" />
    <result column="EXTRACT_NO" jdbcType="VARCHAR" property="extractNo" />
    <result column="EXTRACT_AMOUNT" jdbcType="NUMERIC" property="extractAmount" />
    <result column="RECEIVE_TYPE" jdbcType="TINYINT" property="receiveType" />
    <result column="NEED_INVOICE" jdbcType="TINYINT" property="needInvoice" />
    <result column="FEE_PAID" jdbcType="NUMERIC" property="feePaid" />
    <result column="ACTUAL_AMOUNT" jdbcType="NUMERIC" property="actualAmount" />
    <result column="PAY_TIME" jdbcType="TIMESTAMP" property="payTime" />
    <result column="PAY_STATUS" jdbcType="TINYINT" property="payStatus" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
    <result column="CRM_USER_ID" jdbcType="INTEGER" property="crmUserId" />
    <result column="COMP_FLAG" jdbcType="TINYINT" property="compFlag" />
    <result column="IS_RECHARGE" jdbcType="TINYINT" property="isRecharge" />
    <result column="ACCOUNT_ID" jdbcType="INTEGER" property="accountId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="VOUCHER_ADDR" jdbcType="VARCHAR" property="voucherAddr" />
  </resultMap>
  <resultMap type="com.myfun.repository.agencydb.dto.AgencyAmountHistoryDto" id="extResultMap" extends="BaseResultMap">
  
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    DETAIL_ID, APPLY_TIME, EXTRACT_NO, EXTRACT_AMOUNT, RECEIVE_TYPE, NEED_INVOICE, FEE_PAID, 
    ACTUAL_AMOUNT, PAY_TIME, PAY_STATUS, ARCHIVE_ID, USER_NAME, USER_MOBILE, CRM_USER_ID, 
    COMP_FLAG, IS_RECHARGE, ACCOUNT_ID, CITY_ID, VOUCHER_ADDR
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from AGENCY_AMOUNT_HISTORY
    where DETAIL_ID = #{detailId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from AGENCY_AMOUNT_HISTORY
    where DETAIL_ID = #{detailId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.agencydb.po.AgencyAmountHistory">
    <!--@mbggenerated-->
    <selectKey keyProperty="detailId" order="BEFORE" resultType="java.lang.Integer">
      SELECT MAX(DETAIL_ID)+1 FROM AGENCY_AMOUNT_HISTORY
    </selectKey>
    insert into AGENCY_AMOUNT_HISTORY (DETAIL_ID, APPLY_TIME, EXTRACT_NO, 
      EXTRACT_AMOUNT, RECEIVE_TYPE, NEED_INVOICE, 
      FEE_PAID, ACTUAL_AMOUNT, PAY_TIME, 
      PAY_STATUS, ARCHIVE_ID, USER_NAME, 
      USER_MOBILE, CRM_USER_ID, COMP_FLAG, 
      IS_RECHARGE, ACCOUNT_ID, CITY_ID, 
      VOUCHER_ADDR)
    values (#{detailId,jdbcType=INTEGER}, #{applyTime,jdbcType=TIMESTAMP}, #{extractNo,jdbcType=VARCHAR}, 
      #{extractAmount,jdbcType=NUMERIC}, #{receiveType,jdbcType=TINYINT}, #{needInvoice,jdbcType=TINYINT}, 
      #{feePaid,jdbcType=NUMERIC}, #{actualAmount,jdbcType=NUMERIC}, #{payTime,jdbcType=TIMESTAMP}, 
      #{payStatus,jdbcType=TINYINT}, #{archiveId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, 
      #{userMobile,jdbcType=VARCHAR}, #{crmUserId,jdbcType=INTEGER}, #{compFlag,jdbcType=TINYINT}, 
      #{isRecharge,jdbcType=TINYINT}, #{accountId,jdbcType=INTEGER}, #{cityId,jdbcType=INTEGER}, 
      #{voucherAddr,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.agencydb.po.AgencyAmountHistory">
    <!--@mbggenerated-->
    <selectKey keyProperty="detailId" order="BEFORE" resultType="java.lang.Integer">
      SELECT MAX(DETAIL_ID)+1 FROM AGENCY_AMOUNT_HISTORY
    </selectKey>
    insert into AGENCY_AMOUNT_HISTORY
    <trim prefix="(" suffix=")" suffixOverrides=",">
      DETAIL_ID,
      <if test="applyTime != null">
        APPLY_TIME,
      </if>
      <if test="extractNo != null">
        EXTRACT_NO,
      </if>
      <if test="extractAmount != null">
        EXTRACT_AMOUNT,
      </if>
      <if test="receiveType != null">
        RECEIVE_TYPE,
      </if>
      <if test="needInvoice != null">
        NEED_INVOICE,
      </if>
      <if test="feePaid != null">
        FEE_PAID,
      </if>
      <if test="actualAmount != null">
        ACTUAL_AMOUNT,
      </if>
      <if test="payTime != null">
        PAY_TIME,
      </if>
      <if test="payStatus != null">
        PAY_STATUS,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="userMobile != null">
        USER_MOBILE,
      </if>
      <if test="crmUserId != null">
        CRM_USER_ID,
      </if>
      <if test="compFlag != null">
        COMP_FLAG,
      </if>
      <if test="isRecharge != null">
        IS_RECHARGE,
      </if>
      <if test="accountId != null">
        ACCOUNT_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="voucherAddr != null">
        VOUCHER_ADDR,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{detailId,jdbcType=INTEGER},
      <if test="applyTime != null">
        #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extractNo != null">
        #{extractNo,jdbcType=VARCHAR},
      </if>
      <if test="extractAmount != null">
        #{extractAmount,jdbcType=NUMERIC},
      </if>
      <if test="receiveType != null">
        #{receiveType,jdbcType=TINYINT},
      </if>
      <if test="needInvoice != null">
        #{needInvoice,jdbcType=TINYINT},
      </if>
      <if test="feePaid != null">
        #{feePaid,jdbcType=NUMERIC},
      </if>
      <if test="actualAmount != null">
        #{actualAmount,jdbcType=NUMERIC},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userMobile != null">
        #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="crmUserId != null">
        #{crmUserId,jdbcType=INTEGER},
      </if>
      <if test="compFlag != null">
        #{compFlag,jdbcType=TINYINT},
      </if>
      <if test="isRecharge != null">
        #{isRecharge,jdbcType=TINYINT},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="voucherAddr != null">
        #{voucherAddr,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.agencydb.po.AgencyAmountHistory">
    <!--@mbggenerated-->
    update AGENCY_AMOUNT_HISTORY
    <set>
      <if test="applyTime != null">
        APPLY_TIME = #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extractNo != null">
        EXTRACT_NO = #{extractNo,jdbcType=VARCHAR},
      </if>
      <if test="extractAmount != null">
        EXTRACT_AMOUNT = #{extractAmount,jdbcType=NUMERIC},
      </if>
      <if test="receiveType != null">
        RECEIVE_TYPE = #{receiveType,jdbcType=TINYINT},
      </if>
      <if test="needInvoice != null">
        NEED_INVOICE = #{needInvoice,jdbcType=TINYINT},
      </if>
      <if test="feePaid != null">
        FEE_PAID = #{feePaid,jdbcType=NUMERIC},
      </if>
      <if test="actualAmount != null">
        ACTUAL_AMOUNT = #{actualAmount,jdbcType=NUMERIC},
      </if>
      <if test="payTime != null">
        PAY_TIME = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null">
        PAY_STATUS = #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userMobile != null">
        USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="crmUserId != null">
        CRM_USER_ID = #{crmUserId,jdbcType=INTEGER},
      </if>
      <if test="compFlag != null">
        COMP_FLAG = #{compFlag,jdbcType=TINYINT},
      </if>
      <if test="isRecharge != null">
        IS_RECHARGE = #{isRecharge,jdbcType=TINYINT},
      </if>
      <if test="accountId != null">
        ACCOUNT_ID = #{accountId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="voucherAddr != null">
        VOUCHER_ADDR = #{voucherAddr,jdbcType=VARCHAR},
      </if>
    </set>
    where DETAIL_ID = #{detailId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.agencydb.po.AgencyAmountHistory">
    <!--@mbggenerated-->
    update AGENCY_AMOUNT_HISTORY
    set APPLY_TIME = #{applyTime,jdbcType=TIMESTAMP},
      EXTRACT_NO = #{extractNo,jdbcType=VARCHAR},
      EXTRACT_AMOUNT = #{extractAmount,jdbcType=NUMERIC},
      RECEIVE_TYPE = #{receiveType,jdbcType=TINYINT},
      NEED_INVOICE = #{needInvoice,jdbcType=TINYINT},
      FEE_PAID = #{feePaid,jdbcType=NUMERIC},
      ACTUAL_AMOUNT = #{actualAmount,jdbcType=NUMERIC},
      PAY_TIME = #{payTime,jdbcType=TIMESTAMP},
      PAY_STATUS = #{payStatus,jdbcType=TINYINT},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      CRM_USER_ID = #{crmUserId,jdbcType=INTEGER},
      COMP_FLAG = #{compFlag,jdbcType=TINYINT},
      IS_RECHARGE = #{isRecharge,jdbcType=TINYINT},
      ACCOUNT_ID = #{accountId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      VOUCHER_ADDR = #{voucherAddr,jdbcType=VARCHAR}
    where DETAIL_ID = #{detailId,jdbcType=INTEGER}
  </update>
  
  <!-- buniess -->
  <select id="getCashList" resultMap="BaseResultMap" parameterType="com.myfun.repository.agencydb.param.AgencyAmountHistoryparam">
  	select <include refid="Base_Column_List" /> from AGENCY_AMOUNT_HISTORY
  	where 1 = 1 
  	<if test="cityId != null and cityId != ''">
  		and CITY_ID = #{cityId}
  	</if>
  	<if test="userMobile != null and userMobile != ''">
  		and USER_MOBILE like '%${userMobile}%'
  	</if>
	<if test="userName != null and userName != ''">
		and USER_NAME like '%${userName}%'
  	</if>
  	<if test="isPecharge != null and isPecharge != ''">
		and IS_RECHARGE = #{isPecharge}
  	</if>
  	<if test="payStatus != null and payStatus != ''">
		and PAY_STATUS = #{payStatus}
  	</if>
  	order by DETAIL_ID desc
  </select>
  
  <select id="getCashHistory"  resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" /> from AGENCY_AMOUNT_HISTORY
  	where ARCHIVE_ID = #{archiveId}
  	and COMP_FLAG = #{compFlag}
  </select>
  <select id="getDistAmountHistory" parameterType="java.util.Map" resultMap="extResultMap">
  	select <include refid="Base_Column_List" /> from AGENCY_AMOUNT_HISTORY
  </select>

  <select id="getAmountHistoryList" resultType="java.util.Map">
  	select A.APPLY_TIME as applyTime,A.PAY_TIME as payTime,A.DES as des,A.ACTUAL_AMOUNT as actualAmount,A.PAY_STATUS as payStatus,A.COMP_FLAG as compFlag
  	from AGENCY_AMOUNT_HISTORY A
  	where A.CITY_ID = #{param.cityId}
    <if test="null != param.startTime and '' != param.startTime">
      <![CDATA[ and APPLY_TIME >= #{param.startTime}]]>
    </if>
    <if test="null != param.endTime and '' != param.endTime">
      <![CDATA[and APPLY_TIME <= #{param.endTime}]]>
    </if>
    <choose>
      <when test="param.accountType = 1">
        and A.ARCHIVE_ID = #{param.archiveId} and A.COMP_FLAG = 0
      </when>
      <otherwise>
        and  A.ARCHIVE_ID = #{param.compId} and A.COMP_FLAG = 1
      </otherwise>
    </choose>
    order by A.DETAIL_ID
  </select>

</mapper>