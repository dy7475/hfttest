<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.reportdb.dao.ReportFunStatisticTotleMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.reportdb.po.ReportFunStatisticTotle">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="CASE_TYPE" jdbcType="INTEGER" property="caseType" />
    <result column="MERGE_KEY" jdbcType="VARCHAR" property="mergeKey" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="TOTAL_COUNT" jdbcType="INTEGER" property="totalCount" />
    <result column="DJ_COUNT" jdbcType="INTEGER" property="djCount" />
    <result column="ZYX_COUNT" jdbcType="INTEGER" property="zyxCount" />
    <result column="SSZR_COUNT" jdbcType="INTEGER" property="sszrCount" />
    <result column="ZP_COUNT" jdbcType="INTEGER" property="zpCount" />
    <result column="FP_COUNT" jdbcType="INTEGER" property="fpCount" />
    <result column="XG_COUNT" jdbcType="INTEGER" property="xgCount" />
    <result column="ZTBG_COUNT" jdbcType="INTEGER" property="ztbgCount" />
    <result column="WT_COUNT" jdbcType="INTEGER" property="wtCount" />
    <result column="GJ_COUNT" jdbcType="INTEGER" property="gjCount" />
    <result column="FK_COUNT" jdbcType="INTEGER" property="fkCount" />
    <result column="YSTJ_COUNT" jdbcType="INTEGER" property="ystjCount" />
    <result column="YJ_COUNT" jdbcType="INTEGER" property="yjCount" />
    <result column="TPSC_COUNT" jdbcType="INTEGER" property="tpscCount" />
    <result column="SPSC_COUNT" jdbcType="INTEGER" property="spscCount" />
    <result column="CKDH_COUNT" jdbcType="INTEGER" property="ckdhCount" />
    <result column="IPCALL_COUNT" jdbcType="INTEGER" property="ipcallCount" />
    <result column="WLFB_COUNT" jdbcType="INTEGER" property="wlfbCount" />
    <result column="WLSX_COUNT" jdbcType="INTEGER" property="wlsxCount" />
    <result column="DK_COUNT" jdbcType="INTEGER" property="dkCount" />
    <result column="CJ_COUNT" jdbcType="INTEGER" property="cjCount" />
    <result column="SX_COUNT" jdbcType="INTEGER" property="sxCount" />
    <result column="SPDK_COUNT" jdbcType="INTEGER" property="spdkCount" />
    <result column="KFDP_COUNT" jdbcType="INTEGER" property="kfdpCount" />
    <result column="PYQ_COUNT" jdbcType="INTEGER" property="pyqCount" />
    <result column="VR_COUNT" jdbcType="INTEGER" property="vrCount" />
    <result column="DKUP_COUNT" jdbcType="INTEGER" property="dkupCount" />
    <result column="DKDOWN_COUNT" jdbcType="INTEGER" property="dkdownCount" />
    <result column="ZFY_COUNT" jdbcType="INTEGER" property="zfyCount" />
    <result column="ZX_COUNT" jdbcType="INTEGER" property="zxCount" />
    <result column="QFTG_COUNT" jdbcType="INTEGER" property="qftgCount" />
    <result column="XQZJ_COUNT" jdbcType="INTEGER" property="xqzjCount" />
    <result column="FYTG_COUNT" jdbcType="INTEGER" property="fytgCount" />
    <result column="FY_COUNT" jdbcType="INTEGER" property="fyCount" />
    <result column="WD_COUNT" jdbcType="INTEGER" property="wdCount" />
    <result column="FDK_COUNT" jdbcType="INTEGER" property="fdkCount" />
    <result column="IPDGJ_COUNT" jdbcType="INTEGER" property="ipdgjCount" />
    <result column="IPZGJ_COUNT" jdbcType="INTEGER" property="ipzgjCount" />
    <result column="DHDGJ_COUNT" jdbcType="INTEGER" property="dhdgjCount" />
    <result column="DHZGJ_COUNT" jdbcType="INTEGER" property="dhzgjCount" />
    <result column="DGJ_COUNT" jdbcType="INTEGER" property="dgjCount" />
    <result column="XSWT_COUNT" jdbcType="INTEGER" property="xswtCount" />
    <result column="DJWT_COUNT" jdbcType="INTEGER" property="djwtCount" />
    <result column="BZWT_COUNT" jdbcType="INTEGER" property="bzwtCount" />
    <result column="PTWT_COUNT" jdbcType="INTEGER" property="ptwtCount" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, CITY_ID, CASE_TYPE, 
    MERGE_KEY, CREATE_TIME, TOTAL_COUNT, DJ_COUNT, ZYX_COUNT, SSZR_COUNT, ZP_COUNT, FP_COUNT, 
    XG_COUNT, ZTBG_COUNT, WT_COUNT, GJ_COUNT, FK_COUNT, YSTJ_COUNT, YJ_COUNT, TPSC_COUNT, 
    SPSC_COUNT, CKDH_COUNT, IPCALL_COUNT, WLFB_COUNT, WLSX_COUNT, DK_COUNT, CJ_COUNT, 
    SX_COUNT, SPDK_COUNT, KFDP_COUNT, PYQ_COUNT, VR_COUNT, DKUP_COUNT, DKDOWN_COUNT, 
    ZFY_COUNT, ZX_COUNT, QFTG_COUNT, XQZJ_COUNT, FYTG_COUNT, FY_COUNT, WD_COUNT, FDK_COUNT, 
    IPDGJ_COUNT, IPZGJ_COUNT, DHDGJ_COUNT, DHZGJ_COUNT, DGJ_COUNT, XSWT_COUNT, DJWT_COUNT, 
    BZWT_COUNT, PTWT_COUNT
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotleExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_STATISTIC_TOTLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_STATISTIC_TOTLE
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbggenerated-->
    delete from FUN_STATISTIC_TOTLE
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotleExample">
    <!--@mbggenerated-->
    delete from FUN_STATISTIC_TOTLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotle" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_STATISTIC_TOTLE (COMP_ID, AREA_ID, REG_ID, 
      DEPT_ID, GR_ID, USER_ID, 
      ARCHIVE_ID, CITY_ID, CASE_TYPE, 
      MERGE_KEY, CREATE_TIME, TOTAL_COUNT, 
      DJ_COUNT, ZYX_COUNT, SSZR_COUNT, 
      ZP_COUNT, FP_COUNT, XG_COUNT, 
      ZTBG_COUNT, WT_COUNT, GJ_COUNT, 
      FK_COUNT, YSTJ_COUNT, YJ_COUNT, 
      TPSC_COUNT, SPSC_COUNT, CKDH_COUNT, 
      IPCALL_COUNT, WLFB_COUNT, WLSX_COUNT, 
      DK_COUNT, CJ_COUNT, SX_COUNT, 
      SPDK_COUNT, KFDP_COUNT, PYQ_COUNT, 
      VR_COUNT, DKUP_COUNT, DKDOWN_COUNT, 
      ZFY_COUNT, ZX_COUNT, QFTG_COUNT, 
      XQZJ_COUNT, FYTG_COUNT, FY_COUNT, 
      WD_COUNT, FDK_COUNT, IPDGJ_COUNT, 
      IPZGJ_COUNT, DHDGJ_COUNT, DHZGJ_COUNT, 
      DGJ_COUNT, XSWT_COUNT, DJWT_COUNT, 
      BZWT_COUNT, PTWT_COUNT)
    values (#{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, 
      #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{archiveId,jdbcType=INTEGER}, #{cityId,jdbcType=INTEGER}, #{caseType,jdbcType=INTEGER}, 
      #{mergeKey,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{totalCount,jdbcType=INTEGER}, 
      #{djCount,jdbcType=INTEGER}, #{zyxCount,jdbcType=INTEGER}, #{sszrCount,jdbcType=INTEGER}, 
      #{zpCount,jdbcType=INTEGER}, #{fpCount,jdbcType=INTEGER}, #{xgCount,jdbcType=INTEGER}, 
      #{ztbgCount,jdbcType=INTEGER}, #{wtCount,jdbcType=INTEGER}, #{gjCount,jdbcType=INTEGER}, 
      #{fkCount,jdbcType=INTEGER}, #{ystjCount,jdbcType=INTEGER}, #{yjCount,jdbcType=INTEGER}, 
      #{tpscCount,jdbcType=INTEGER}, #{spscCount,jdbcType=INTEGER}, #{ckdhCount,jdbcType=INTEGER}, 
      #{ipcallCount,jdbcType=INTEGER}, #{wlfbCount,jdbcType=INTEGER}, #{wlsxCount,jdbcType=INTEGER}, 
      #{dkCount,jdbcType=INTEGER}, #{cjCount,jdbcType=INTEGER}, #{sxCount,jdbcType=INTEGER}, 
      #{spdkCount,jdbcType=INTEGER}, #{kfdpCount,jdbcType=INTEGER}, #{pyqCount,jdbcType=INTEGER}, 
      #{vrCount,jdbcType=INTEGER}, #{dkupCount,jdbcType=INTEGER}, #{dkdownCount,jdbcType=INTEGER}, 
      #{zfyCount,jdbcType=INTEGER}, #{zxCount,jdbcType=INTEGER}, #{qftgCount,jdbcType=INTEGER}, 
      #{xqzjCount,jdbcType=INTEGER}, #{fytgCount,jdbcType=INTEGER}, #{fyCount,jdbcType=INTEGER}, 
      #{wdCount,jdbcType=INTEGER}, #{fdkCount,jdbcType=INTEGER}, #{ipdgjCount,jdbcType=INTEGER}, 
      #{ipzgjCount,jdbcType=INTEGER}, #{dhdgjCount,jdbcType=INTEGER}, #{dhzgjCount,jdbcType=INTEGER}, 
      #{dgjCount,jdbcType=INTEGER}, #{xswtCount,jdbcType=INTEGER}, #{djwtCount,jdbcType=INTEGER}, 
      #{bzwtCount,jdbcType=INTEGER}, #{ptwtCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotle" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_STATISTIC_TOTLE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="mergeKey != null">
        MERGE_KEY,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="totalCount != null">
        TOTAL_COUNT,
      </if>
      <if test="djCount != null">
        DJ_COUNT,
      </if>
      <if test="zyxCount != null">
        ZYX_COUNT,
      </if>
      <if test="sszrCount != null">
        SSZR_COUNT,
      </if>
      <if test="zpCount != null">
        ZP_COUNT,
      </if>
      <if test="fpCount != null">
        FP_COUNT,
      </if>
      <if test="xgCount != null">
        XG_COUNT,
      </if>
      <if test="ztbgCount != null">
        ZTBG_COUNT,
      </if>
      <if test="wtCount != null">
        WT_COUNT,
      </if>
      <if test="gjCount != null">
        GJ_COUNT,
      </if>
      <if test="fkCount != null">
        FK_COUNT,
      </if>
      <if test="ystjCount != null">
        YSTJ_COUNT,
      </if>
      <if test="yjCount != null">
        YJ_COUNT,
      </if>
      <if test="tpscCount != null">
        TPSC_COUNT,
      </if>
      <if test="spscCount != null">
        SPSC_COUNT,
      </if>
      <if test="ckdhCount != null">
        CKDH_COUNT,
      </if>
      <if test="ipcallCount != null">
        IPCALL_COUNT,
      </if>
      <if test="wlfbCount != null">
        WLFB_COUNT,
      </if>
      <if test="wlsxCount != null">
        WLSX_COUNT,
      </if>
      <if test="dkCount != null">
        DK_COUNT,
      </if>
      <if test="cjCount != null">
        CJ_COUNT,
      </if>
      <if test="sxCount != null">
        SX_COUNT,
      </if>
      <if test="spdkCount != null">
        SPDK_COUNT,
      </if>
      <if test="kfdpCount != null">
        KFDP_COUNT,
      </if>
      <if test="pyqCount != null">
        PYQ_COUNT,
      </if>
      <if test="vrCount != null">
        VR_COUNT,
      </if>
      <if test="dkupCount != null">
        DKUP_COUNT,
      </if>
      <if test="dkdownCount != null">
        DKDOWN_COUNT,
      </if>
      <if test="zfyCount != null">
        ZFY_COUNT,
      </if>
      <if test="zxCount != null">
        ZX_COUNT,
      </if>
      <if test="qftgCount != null">
        QFTG_COUNT,
      </if>
      <if test="xqzjCount != null">
        XQZJ_COUNT,
      </if>
      <if test="fytgCount != null">
        FYTG_COUNT,
      </if>
      <if test="fyCount != null">
        FY_COUNT,
      </if>
      <if test="wdCount != null">
        WD_COUNT,
      </if>
      <if test="fdkCount != null">
        FDK_COUNT,
      </if>
      <if test="ipdgjCount != null">
        IPDGJ_COUNT,
      </if>
      <if test="ipzgjCount != null">
        IPZGJ_COUNT,
      </if>
      <if test="dhdgjCount != null">
        DHDGJ_COUNT,
      </if>
      <if test="dhzgjCount != null">
        DHZGJ_COUNT,
      </if>
      <if test="dgjCount != null">
        DGJ_COUNT,
      </if>
      <if test="xswtCount != null">
        XSWT_COUNT,
      </if>
      <if test="djwtCount != null">
        DJWT_COUNT,
      </if>
      <if test="bzwtCount != null">
        BZWT_COUNT,
      </if>
      <if test="ptwtCount != null">
        PTWT_COUNT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=INTEGER},
      </if>
      <if test="mergeKey != null">
        #{mergeKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalCount != null">
        #{totalCount,jdbcType=INTEGER},
      </if>
      <if test="djCount != null">
        #{djCount,jdbcType=INTEGER},
      </if>
      <if test="zyxCount != null">
        #{zyxCount,jdbcType=INTEGER},
      </if>
      <if test="sszrCount != null">
        #{sszrCount,jdbcType=INTEGER},
      </if>
      <if test="zpCount != null">
        #{zpCount,jdbcType=INTEGER},
      </if>
      <if test="fpCount != null">
        #{fpCount,jdbcType=INTEGER},
      </if>
      <if test="xgCount != null">
        #{xgCount,jdbcType=INTEGER},
      </if>
      <if test="ztbgCount != null">
        #{ztbgCount,jdbcType=INTEGER},
      </if>
      <if test="wtCount != null">
        #{wtCount,jdbcType=INTEGER},
      </if>
      <if test="gjCount != null">
        #{gjCount,jdbcType=INTEGER},
      </if>
      <if test="fkCount != null">
        #{fkCount,jdbcType=INTEGER},
      </if>
      <if test="ystjCount != null">
        #{ystjCount,jdbcType=INTEGER},
      </if>
      <if test="yjCount != null">
        #{yjCount,jdbcType=INTEGER},
      </if>
      <if test="tpscCount != null">
        #{tpscCount,jdbcType=INTEGER},
      </if>
      <if test="spscCount != null">
        #{spscCount,jdbcType=INTEGER},
      </if>
      <if test="ckdhCount != null">
        #{ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="ipcallCount != null">
        #{ipcallCount,jdbcType=INTEGER},
      </if>
      <if test="wlfbCount != null">
        #{wlfbCount,jdbcType=INTEGER},
      </if>
      <if test="wlsxCount != null">
        #{wlsxCount,jdbcType=INTEGER},
      </if>
      <if test="dkCount != null">
        #{dkCount,jdbcType=INTEGER},
      </if>
      <if test="cjCount != null">
        #{cjCount,jdbcType=INTEGER},
      </if>
      <if test="sxCount != null">
        #{sxCount,jdbcType=INTEGER},
      </if>
      <if test="spdkCount != null">
        #{spdkCount,jdbcType=INTEGER},
      </if>
      <if test="kfdpCount != null">
        #{kfdpCount,jdbcType=INTEGER},
      </if>
      <if test="pyqCount != null">
        #{pyqCount,jdbcType=INTEGER},
      </if>
      <if test="vrCount != null">
        #{vrCount,jdbcType=INTEGER},
      </if>
      <if test="dkupCount != null">
        #{dkupCount,jdbcType=INTEGER},
      </if>
      <if test="dkdownCount != null">
        #{dkdownCount,jdbcType=INTEGER},
      </if>
      <if test="zfyCount != null">
        #{zfyCount,jdbcType=INTEGER},
      </if>
      <if test="zxCount != null">
        #{zxCount,jdbcType=INTEGER},
      </if>
      <if test="qftgCount != null">
        #{qftgCount,jdbcType=INTEGER},
      </if>
      <if test="xqzjCount != null">
        #{xqzjCount,jdbcType=INTEGER},
      </if>
      <if test="fytgCount != null">
        #{fytgCount,jdbcType=INTEGER},
      </if>
      <if test="fyCount != null">
        #{fyCount,jdbcType=INTEGER},
      </if>
      <if test="wdCount != null">
        #{wdCount,jdbcType=INTEGER},
      </if>
      <if test="fdkCount != null">
        #{fdkCount,jdbcType=INTEGER},
      </if>
      <if test="ipdgjCount != null">
        #{ipdgjCount,jdbcType=INTEGER},
      </if>
      <if test="ipzgjCount != null">
        #{ipzgjCount,jdbcType=INTEGER},
      </if>
      <if test="dhdgjCount != null">
        #{dhdgjCount,jdbcType=INTEGER},
      </if>
      <if test="dhzgjCount != null">
        #{dhzgjCount,jdbcType=INTEGER},
      </if>
      <if test="dgjCount != null">
        #{dgjCount,jdbcType=INTEGER},
      </if>
      <if test="xswtCount != null">
        #{xswtCount,jdbcType=INTEGER},
      </if>
      <if test="djwtCount != null">
        #{djwtCount,jdbcType=INTEGER},
      </if>
      <if test="bzwtCount != null">
        #{bzwtCount,jdbcType=INTEGER},
      </if>
      <if test="ptwtCount != null">
        #{ptwtCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotleExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_STATISTIC_TOTLE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_STATISTIC_TOTLE
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.caseType != null">
        CASE_TYPE = #{record.caseType,jdbcType=INTEGER},
      </if>
      <if test="record.mergeKey != null">
        MERGE_KEY = #{record.mergeKey,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.totalCount != null">
        TOTAL_COUNT = #{record.totalCount,jdbcType=INTEGER},
      </if>
      <if test="record.djCount != null">
        DJ_COUNT = #{record.djCount,jdbcType=INTEGER},
      </if>
      <if test="record.zyxCount != null">
        ZYX_COUNT = #{record.zyxCount,jdbcType=INTEGER},
      </if>
      <if test="record.sszrCount != null">
        SSZR_COUNT = #{record.sszrCount,jdbcType=INTEGER},
      </if>
      <if test="record.zpCount != null">
        ZP_COUNT = #{record.zpCount,jdbcType=INTEGER},
      </if>
      <if test="record.fpCount != null">
        FP_COUNT = #{record.fpCount,jdbcType=INTEGER},
      </if>
      <if test="record.xgCount != null">
        XG_COUNT = #{record.xgCount,jdbcType=INTEGER},
      </if>
      <if test="record.ztbgCount != null">
        ZTBG_COUNT = #{record.ztbgCount,jdbcType=INTEGER},
      </if>
      <if test="record.wtCount != null">
        WT_COUNT = #{record.wtCount,jdbcType=INTEGER},
      </if>
      <if test="record.gjCount != null">
        GJ_COUNT = #{record.gjCount,jdbcType=INTEGER},
      </if>
      <if test="record.fkCount != null">
        FK_COUNT = #{record.fkCount,jdbcType=INTEGER},
      </if>
      <if test="record.ystjCount != null">
        YSTJ_COUNT = #{record.ystjCount,jdbcType=INTEGER},
      </if>
      <if test="record.yjCount != null">
        YJ_COUNT = #{record.yjCount,jdbcType=INTEGER},
      </if>
      <if test="record.tpscCount != null">
        TPSC_COUNT = #{record.tpscCount,jdbcType=INTEGER},
      </if>
      <if test="record.spscCount != null">
        SPSC_COUNT = #{record.spscCount,jdbcType=INTEGER},
      </if>
      <if test="record.ckdhCount != null">
        CKDH_COUNT = #{record.ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="record.ipcallCount != null">
        IPCALL_COUNT = #{record.ipcallCount,jdbcType=INTEGER},
      </if>
      <if test="record.wlfbCount != null">
        WLFB_COUNT = #{record.wlfbCount,jdbcType=INTEGER},
      </if>
      <if test="record.wlsxCount != null">
        WLSX_COUNT = #{record.wlsxCount,jdbcType=INTEGER},
      </if>
      <if test="record.dkCount != null">
        DK_COUNT = #{record.dkCount,jdbcType=INTEGER},
      </if>
      <if test="record.cjCount != null">
        CJ_COUNT = #{record.cjCount,jdbcType=INTEGER},
      </if>
      <if test="record.sxCount != null">
        SX_COUNT = #{record.sxCount,jdbcType=INTEGER},
      </if>
      <if test="record.spdkCount != null">
        SPDK_COUNT = #{record.spdkCount,jdbcType=INTEGER},
      </if>
      <if test="record.kfdpCount != null">
        KFDP_COUNT = #{record.kfdpCount,jdbcType=INTEGER},
      </if>
      <if test="record.pyqCount != null">
        PYQ_COUNT = #{record.pyqCount,jdbcType=INTEGER},
      </if>
      <if test="record.vrCount != null">
        VR_COUNT = #{record.vrCount,jdbcType=INTEGER},
      </if>
      <if test="record.dkupCount != null">
        DKUP_COUNT = #{record.dkupCount,jdbcType=INTEGER},
      </if>
      <if test="record.dkdownCount != null">
        DKDOWN_COUNT = #{record.dkdownCount,jdbcType=INTEGER},
      </if>
      <if test="record.zfyCount != null">
        ZFY_COUNT = #{record.zfyCount,jdbcType=INTEGER},
      </if>
      <if test="record.zxCount != null">
        ZX_COUNT = #{record.zxCount,jdbcType=INTEGER},
      </if>
      <if test="record.qftgCount != null">
        QFTG_COUNT = #{record.qftgCount,jdbcType=INTEGER},
      </if>
      <if test="record.xqzjCount != null">
        XQZJ_COUNT = #{record.xqzjCount,jdbcType=INTEGER},
      </if>
      <if test="record.fytgCount != null">
        FYTG_COUNT = #{record.fytgCount,jdbcType=INTEGER},
      </if>
      <if test="record.fyCount != null">
        FY_COUNT = #{record.fyCount,jdbcType=INTEGER},
      </if>
      <if test="record.wdCount != null">
        WD_COUNT = #{record.wdCount,jdbcType=INTEGER},
      </if>
      <if test="record.fdkCount != null">
        FDK_COUNT = #{record.fdkCount,jdbcType=INTEGER},
      </if>
      <if test="record.ipdgjCount != null">
        IPDGJ_COUNT = #{record.ipdgjCount,jdbcType=INTEGER},
      </if>
      <if test="record.ipzgjCount != null">
        IPZGJ_COUNT = #{record.ipzgjCount,jdbcType=INTEGER},
      </if>
      <if test="record.dhdgjCount != null">
        DHDGJ_COUNT = #{record.dhdgjCount,jdbcType=INTEGER},
      </if>
      <if test="record.dhzgjCount != null">
        DHZGJ_COUNT = #{record.dhzgjCount,jdbcType=INTEGER},
      </if>
      <if test="record.dgjCount != null">
        DGJ_COUNT = #{record.dgjCount,jdbcType=INTEGER},
      </if>
      <if test="record.xswtCount != null">
        XSWT_COUNT = #{record.xswtCount,jdbcType=INTEGER},
      </if>
      <if test="record.djwtCount != null">
        DJWT_COUNT = #{record.djwtCount,jdbcType=INTEGER},
      </if>
      <if test="record.bzwtCount != null">
        BZWT_COUNT = #{record.bzwtCount,jdbcType=INTEGER},
      </if>
      <if test="record.ptwtCount != null">
        PTWT_COUNT = #{record.ptwtCount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_STATISTIC_TOTLE
    set ID = #{record.id,jdbcType=BIGINT},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      CASE_TYPE = #{record.caseType,jdbcType=INTEGER},
      MERGE_KEY = #{record.mergeKey,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      TOTAL_COUNT = #{record.totalCount,jdbcType=INTEGER},
      DJ_COUNT = #{record.djCount,jdbcType=INTEGER},
      ZYX_COUNT = #{record.zyxCount,jdbcType=INTEGER},
      SSZR_COUNT = #{record.sszrCount,jdbcType=INTEGER},
      ZP_COUNT = #{record.zpCount,jdbcType=INTEGER},
      FP_COUNT = #{record.fpCount,jdbcType=INTEGER},
      XG_COUNT = #{record.xgCount,jdbcType=INTEGER},
      ZTBG_COUNT = #{record.ztbgCount,jdbcType=INTEGER},
      WT_COUNT = #{record.wtCount,jdbcType=INTEGER},
      GJ_COUNT = #{record.gjCount,jdbcType=INTEGER},
      FK_COUNT = #{record.fkCount,jdbcType=INTEGER},
      YSTJ_COUNT = #{record.ystjCount,jdbcType=INTEGER},
      YJ_COUNT = #{record.yjCount,jdbcType=INTEGER},
      TPSC_COUNT = #{record.tpscCount,jdbcType=INTEGER},
      SPSC_COUNT = #{record.spscCount,jdbcType=INTEGER},
      CKDH_COUNT = #{record.ckdhCount,jdbcType=INTEGER},
      IPCALL_COUNT = #{record.ipcallCount,jdbcType=INTEGER},
      WLFB_COUNT = #{record.wlfbCount,jdbcType=INTEGER},
      WLSX_COUNT = #{record.wlsxCount,jdbcType=INTEGER},
      DK_COUNT = #{record.dkCount,jdbcType=INTEGER},
      CJ_COUNT = #{record.cjCount,jdbcType=INTEGER},
      SX_COUNT = #{record.sxCount,jdbcType=INTEGER},
      SPDK_COUNT = #{record.spdkCount,jdbcType=INTEGER},
      KFDP_COUNT = #{record.kfdpCount,jdbcType=INTEGER},
      PYQ_COUNT = #{record.pyqCount,jdbcType=INTEGER},
      VR_COUNT = #{record.vrCount,jdbcType=INTEGER},
      DKUP_COUNT = #{record.dkupCount,jdbcType=INTEGER},
      DKDOWN_COUNT = #{record.dkdownCount,jdbcType=INTEGER},
      ZFY_COUNT = #{record.zfyCount,jdbcType=INTEGER},
      ZX_COUNT = #{record.zxCount,jdbcType=INTEGER},
      QFTG_COUNT = #{record.qftgCount,jdbcType=INTEGER},
      XQZJ_COUNT = #{record.xqzjCount,jdbcType=INTEGER},
      FYTG_COUNT = #{record.fytgCount,jdbcType=INTEGER},
      FY_COUNT = #{record.fyCount,jdbcType=INTEGER},
      WD_COUNT = #{record.wdCount,jdbcType=INTEGER},
      FDK_COUNT = #{record.fdkCount,jdbcType=INTEGER},
      IPDGJ_COUNT = #{record.ipdgjCount,jdbcType=INTEGER},
      IPZGJ_COUNT = #{record.ipzgjCount,jdbcType=INTEGER},
      DHDGJ_COUNT = #{record.dhdgjCount,jdbcType=INTEGER},
      DHZGJ_COUNT = #{record.dhzgjCount,jdbcType=INTEGER},
      DGJ_COUNT = #{record.dgjCount,jdbcType=INTEGER},
      XSWT_COUNT = #{record.xswtCount,jdbcType=INTEGER},
      DJWT_COUNT = #{record.djwtCount,jdbcType=INTEGER},
      BZWT_COUNT = #{record.bzwtCount,jdbcType=INTEGER},
      PTWT_COUNT = #{record.ptwtCount,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotle">
    <!--@mbggenerated-->
    update FUN_STATISTIC_TOTLE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=INTEGER},
      </if>
      <if test="mergeKey != null">
        MERGE_KEY = #{mergeKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalCount != null">
        TOTAL_COUNT = #{totalCount,jdbcType=INTEGER},
      </if>
      <if test="djCount != null">
        DJ_COUNT = #{djCount,jdbcType=INTEGER},
      </if>
      <if test="zyxCount != null">
        ZYX_COUNT = #{zyxCount,jdbcType=INTEGER},
      </if>
      <if test="sszrCount != null">
        SSZR_COUNT = #{sszrCount,jdbcType=INTEGER},
      </if>
      <if test="zpCount != null">
        ZP_COUNT = #{zpCount,jdbcType=INTEGER},
      </if>
      <if test="fpCount != null">
        FP_COUNT = #{fpCount,jdbcType=INTEGER},
      </if>
      <if test="xgCount != null">
        XG_COUNT = #{xgCount,jdbcType=INTEGER},
      </if>
      <if test="ztbgCount != null">
        ZTBG_COUNT = #{ztbgCount,jdbcType=INTEGER},
      </if>
      <if test="wtCount != null">
        WT_COUNT = #{wtCount,jdbcType=INTEGER},
      </if>
      <if test="gjCount != null">
        GJ_COUNT = #{gjCount,jdbcType=INTEGER},
      </if>
      <if test="fkCount != null">
        FK_COUNT = #{fkCount,jdbcType=INTEGER},
      </if>
      <if test="ystjCount != null">
        YSTJ_COUNT = #{ystjCount,jdbcType=INTEGER},
      </if>
      <if test="yjCount != null">
        YJ_COUNT = #{yjCount,jdbcType=INTEGER},
      </if>
      <if test="tpscCount != null">
        TPSC_COUNT = #{tpscCount,jdbcType=INTEGER},
      </if>
      <if test="spscCount != null">
        SPSC_COUNT = #{spscCount,jdbcType=INTEGER},
      </if>
      <if test="ckdhCount != null">
        CKDH_COUNT = #{ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="ipcallCount != null">
        IPCALL_COUNT = #{ipcallCount,jdbcType=INTEGER},
      </if>
      <if test="wlfbCount != null">
        WLFB_COUNT = #{wlfbCount,jdbcType=INTEGER},
      </if>
      <if test="wlsxCount != null">
        WLSX_COUNT = #{wlsxCount,jdbcType=INTEGER},
      </if>
      <if test="dkCount != null">
        DK_COUNT = #{dkCount,jdbcType=INTEGER},
      </if>
      <if test="cjCount != null">
        CJ_COUNT = #{cjCount,jdbcType=INTEGER},
      </if>
      <if test="sxCount != null">
        SX_COUNT = #{sxCount,jdbcType=INTEGER},
      </if>
      <if test="spdkCount != null">
        SPDK_COUNT = #{spdkCount,jdbcType=INTEGER},
      </if>
      <if test="kfdpCount != null">
        KFDP_COUNT = #{kfdpCount,jdbcType=INTEGER},
      </if>
      <if test="pyqCount != null">
        PYQ_COUNT = #{pyqCount,jdbcType=INTEGER},
      </if>
      <if test="vrCount != null">
        VR_COUNT = #{vrCount,jdbcType=INTEGER},
      </if>
      <if test="dkupCount != null">
        DKUP_COUNT = #{dkupCount,jdbcType=INTEGER},
      </if>
      <if test="dkdownCount != null">
        DKDOWN_COUNT = #{dkdownCount,jdbcType=INTEGER},
      </if>
      <if test="zfyCount != null">
        ZFY_COUNT = #{zfyCount,jdbcType=INTEGER},
      </if>
      <if test="zxCount != null">
        ZX_COUNT = #{zxCount,jdbcType=INTEGER},
      </if>
      <if test="qftgCount != null">
        QFTG_COUNT = #{qftgCount,jdbcType=INTEGER},
      </if>
      <if test="xqzjCount != null">
        XQZJ_COUNT = #{xqzjCount,jdbcType=INTEGER},
      </if>
      <if test="fytgCount != null">
        FYTG_COUNT = #{fytgCount,jdbcType=INTEGER},
      </if>
      <if test="fyCount != null">
        FY_COUNT = #{fyCount,jdbcType=INTEGER},
      </if>
      <if test="wdCount != null">
        WD_COUNT = #{wdCount,jdbcType=INTEGER},
      </if>
      <if test="fdkCount != null">
        FDK_COUNT = #{fdkCount,jdbcType=INTEGER},
      </if>
      <if test="ipdgjCount != null">
        IPDGJ_COUNT = #{ipdgjCount,jdbcType=INTEGER},
      </if>
      <if test="ipzgjCount != null">
        IPZGJ_COUNT = #{ipzgjCount,jdbcType=INTEGER},
      </if>
      <if test="dhdgjCount != null">
        DHDGJ_COUNT = #{dhdgjCount,jdbcType=INTEGER},
      </if>
      <if test="dhzgjCount != null">
        DHZGJ_COUNT = #{dhzgjCount,jdbcType=INTEGER},
      </if>
      <if test="dgjCount != null">
        DGJ_COUNT = #{dgjCount,jdbcType=INTEGER},
      </if>
      <if test="xswtCount != null">
        XSWT_COUNT = #{xswtCount,jdbcType=INTEGER},
      </if>
      <if test="djwtCount != null">
        DJWT_COUNT = #{djwtCount,jdbcType=INTEGER},
      </if>
      <if test="bzwtCount != null">
        BZWT_COUNT = #{bzwtCount,jdbcType=INTEGER},
      </if>
      <if test="ptwtCount != null">
        PTWT_COUNT = #{ptwtCount,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.reportdb.po.ReportFunStatisticTotle">
    <!--@mbggenerated-->
    update FUN_STATISTIC_TOTLE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      CASE_TYPE = #{caseType,jdbcType=INTEGER},
      MERGE_KEY = #{mergeKey,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      TOTAL_COUNT = #{totalCount,jdbcType=INTEGER},
      DJ_COUNT = #{djCount,jdbcType=INTEGER},
      ZYX_COUNT = #{zyxCount,jdbcType=INTEGER},
      SSZR_COUNT = #{sszrCount,jdbcType=INTEGER},
      ZP_COUNT = #{zpCount,jdbcType=INTEGER},
      FP_COUNT = #{fpCount,jdbcType=INTEGER},
      XG_COUNT = #{xgCount,jdbcType=INTEGER},
      ZTBG_COUNT = #{ztbgCount,jdbcType=INTEGER},
      WT_COUNT = #{wtCount,jdbcType=INTEGER},
      GJ_COUNT = #{gjCount,jdbcType=INTEGER},
      FK_COUNT = #{fkCount,jdbcType=INTEGER},
      YSTJ_COUNT = #{ystjCount,jdbcType=INTEGER},
      YJ_COUNT = #{yjCount,jdbcType=INTEGER},
      TPSC_COUNT = #{tpscCount,jdbcType=INTEGER},
      SPSC_COUNT = #{spscCount,jdbcType=INTEGER},
      CKDH_COUNT = #{ckdhCount,jdbcType=INTEGER},
      IPCALL_COUNT = #{ipcallCount,jdbcType=INTEGER},
      WLFB_COUNT = #{wlfbCount,jdbcType=INTEGER},
      WLSX_COUNT = #{wlsxCount,jdbcType=INTEGER},
      DK_COUNT = #{dkCount,jdbcType=INTEGER},
      CJ_COUNT = #{cjCount,jdbcType=INTEGER},
      SX_COUNT = #{sxCount,jdbcType=INTEGER},
      SPDK_COUNT = #{spdkCount,jdbcType=INTEGER},
      KFDP_COUNT = #{kfdpCount,jdbcType=INTEGER},
      PYQ_COUNT = #{pyqCount,jdbcType=INTEGER},
      VR_COUNT = #{vrCount,jdbcType=INTEGER},
      DKUP_COUNT = #{dkupCount,jdbcType=INTEGER},
      DKDOWN_COUNT = #{dkdownCount,jdbcType=INTEGER},
      ZFY_COUNT = #{zfyCount,jdbcType=INTEGER},
      ZX_COUNT = #{zxCount,jdbcType=INTEGER},
      QFTG_COUNT = #{qftgCount,jdbcType=INTEGER},
      XQZJ_COUNT = #{xqzjCount,jdbcType=INTEGER},
      FYTG_COUNT = #{fytgCount,jdbcType=INTEGER},
      FY_COUNT = #{fyCount,jdbcType=INTEGER},
      WD_COUNT = #{wdCount,jdbcType=INTEGER},
      FDK_COUNT = #{fdkCount,jdbcType=INTEGER},
      IPDGJ_COUNT = #{ipdgjCount,jdbcType=INTEGER},
      IPZGJ_COUNT = #{ipzgjCount,jdbcType=INTEGER},
      DHDGJ_COUNT = #{dhdgjCount,jdbcType=INTEGER},
      DHZGJ_COUNT = #{dhzgjCount,jdbcType=INTEGER},
      DGJ_COUNT = #{dgjCount,jdbcType=INTEGER},
      XSWT_COUNT = #{xswtCount,jdbcType=INTEGER},
      DJWT_COUNT = #{djwtCount,jdbcType=INTEGER},
      BZWT_COUNT = #{bzwtCount,jdbcType=INTEGER},
      PTWT_COUNT = #{ptwtCount,jdbcType=INTEGER}
    where ID = #{id,jdbcType=BIGINT}
  </update>
  
  <resultMap extends="BaseResultMap" id="BaseResultRateDto" type="com.myfun.repository.erpdb.dto.ErpFunStatisticRateDto">
    <result column="DATE_COUNT" property="dateCount" />
    <result column="SIGN_COUNT" property="signCount" />
    <result column="DK_RATE" property="dkRate" />
    <result column="FK_RATE" property="fkRate" />
    <result column="CJ_RATE" property="cjRate" />
    <result column="SIGN_RATE" property="signRate" />
    <result column="RANGE" property="range" />
    <result column="houseDjCount" property="houseDjCountTotal" />
    <result column="custDjCount" property="custDjCountTotal" />
    <result column="fkCount" property="fkCountTotal" />
    <result column="dkCount" property="dkCountTotal" />
  </resultMap>

	<resultMap type="com.myfun.repository.reportdb.dto.ReportFunStatisticTotleDto" id="reportResultMapDto" extends="BaseResultMap">
		<result column="HOUSE_ADD_COUNT" property="houseAddCount" />
		<result column="CUST_ADD_COUNT" property="custAddCount" />
		<result column="FANKAN_COUNT" property="fankanCount" />
		<result column="DAIKAN_COUNT" property="daikanCount" />
	</resultMap>
	<select id="getWorkCountForDataView" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT 
		<if test="param.columnSql != null and '' != param.columnSql">${param.columnSql} as range,</if>
		sum(IPDGJ_COUNT) as ipdgjCount, sum(IPZGJ_COUNT) as ipzgjCount,
		sum(IPCALL_COUNT)-sum(IPDGJ_COUNT) as ipwgjCount,
		sum(DHDGJ_COUNT) as dhdgjCount, sum(DHZGJ_COUNT) as dhzgjCount,
		sum(CKDH_COUNT)-sum(DHDGJ_COUNT) as dhwgjCount,
		sum(IPCALL_COUNT) as ipcallCount, sum(CKDH_COUNT) as ckdhCount,
		sum(IPDGJ_COUNT)+sum(IPZGJ_COUNT)+sum(DHDGJ_COUNT)+sum(DHZGJ_COUNT)+
		sum(IPCALL_COUNT)+sum(CKDH_COUNT) as totalCount
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId} AND CITY_ID = #{param.cityId}
		AND ${param.serchRange} = #{param.serchRangeId}
		<if test="param.userId != null and param.userId != ''">AND USER_ID = #{param.userId}</if>
		AND CREATE_TIME &gt;= #{param.startTime} AND CREATE_TIME &lt;= #{param.endTime}
		<if test="param.caseTypeArr != null">
			AND CASE_TYPE IN
			<foreach close=")" collection="param.caseTypeArr" item="item" open="(" separator=",">#{item}</foreach>
		</if>
		<if test="param.groupSql != null and '' != param.groupSql">GROUP BY ${param.groupSql}</if>
		ORDER BY totalCount DESC
	</select>

	<select id="getWorkCountStatistics" resultType="java.util.Map">
		SET DATEFIRST 1;
      SELECT
      <if test="param.columnSql != null and '' != param.columnSql">${param.columnSql} as range,</if>
		SUM (IIF(CASE_TYPE = 1,DJ_COUNT,0)) AS saleDjCount,
		SUM (IIF(CASE_TYPE = 2,DJ_COUNT,0)) AS leaseDjCount,
		SUM (IIF(CASE_TYPE = 3,DJ_COUNT,0)) AS buyDjCount,
		SUM (IIF(CASE_TYPE = 4,DJ_COUNT,0)) AS rentDjCount,
		sum(IIF(CASE_TYPE = 1 or CASE_TYPE = 2,GJ_COUNT,0)) as houseGjCount,
		sum(IIF(CASE_TYPE = 3 or CASE_TYPE = 4,GJ_COUNT,0)) as custGjCount,
		sum(IIF(CASE_TYPE = 1 or CASE_TYPE = 2,MT_COUNT,0)) as fymtCount,
		sum(IIF(CASE_TYPE = 3 or CASE_TYPE = 4,MT_COUNT,0)) as kymtCount,
		sum(XSWT_COUNT) as xswtCount, sum(DJWT_COUNT) as djwtCount,
		sum(BZWT_COUNT) as bzwtCount, sum(PTWT_COUNT) as ptwtCount,
		sum(DK_COUNT) as dkCount, sum(ZYX_COUNT) as zyxCount,sum(SSZR_COUNT) as sszrCount,
		sum(ZP_COUNT) as zpCount,sum(FP_COUNT) as fpCount,sum(XG_COUNT) as xgCount,
		sum(ZTBG_COUNT) as ztbgCount,sum(WT_COUNT) as wtCount,sum(IPCALL_COUNT) as ipcallCount,
		sum(FK_COUNT) as fkCount,sum(YSTJ_COUNT) as ystjCount,sum(YJ_COUNT) as yjCount,
		sum(TPSC_COUNT) as tpscCount,sum(SPSC_COUNT) as spscCount,sum(CKDH_COUNT) as ckdhCount,
		sum(KFDP_COUNT) as kfdpCount,sum(PYQ_COUNT) as pyqCount,sum(VR_COUNT) as vrCount,
		sum(SPDK_COUNT) as spdkCount,sum(ZFY_COUNT) as zfyCount,sum(FDK_COUNT) as fdkCount,
		sum(ZX_COUNT) as zxCount,sum(QFTG_COUNT) as qftgCount,sum(DZHF_COUNT) as dzhfCount,
        sum(KYYK_COUNT) as kyykCount,sum(PK_COUNT) as pkCount,
		sum(DJ_COUNT)+sum(GJ_COUNT)+sum(DK_COUNT)
		+sum(ZYX_COUNT)+sum(SSZR_COUNT)+sum(ZP_COUNT)+sum(FP_COUNT)+sum(XG_COUNT)+sum(ZTBG_COUNT)+sum(WT_COUNT)
		+sum(FK_COUNT)+sum(YSTJ_COUNT)+sum(YJ_COUNT)+sum(TPSC_COUNT)+sum(SPSC_COUNT)+sum(CKDH_COUNT)
		+sum(KFDP_COUNT)+sum(PYQ_COUNT)+sum(VR_COUNT)+sum(SPDK_COUNT)+sum(IPCALL_COUNT)
		+sum(ZFY_COUNT)+sum(ZX_COUNT)+sum(QFTG_COUNT)+sum(FDK_COUNT)+sum(DZHF_COUNT)
        +sum(KYYK_COUNT)+sum(PK_COUNT)+sum(MT_COUNT)
        as totalCount
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId} AND CITY_ID = #{param.cityId}
		AND ${param.serchRange} = #{param.serchRangeId}
		<if test="param.userId != null and param.userId != ''">AND USER_ID = #{param.userId}</if>
		AND CREATE_TIME &gt;= #{param.startTime} AND CREATE_TIME &lt;= #{param.endTime}
		<if test="param.caseTypeArr != null">
			AND CASE_TYPE IN
			<foreach close=")" collection="param.caseTypeArr" item="item" open="(" separator=",">#{item}</foreach>
		</if>
		<if test="param.groupSql != null and '' != param.groupSql">GROUP BY ${param.groupSql}</if>
		ORDER BY totalCount DESC
	</select>
	
	<sql id="getWorkCountRankingCoulmnSql">
		<if test="param.dimension == 'AREA'">AREA_ID areaId</if>
		<if test="param.dimension == 'REG'">AREA_ID areaId,REG_ID regId</if>
		<if test="param.dimension == 'DEPT'">AREA_ID areaId,REG_ID regId,DEPT_ID deptId</if>
		<if test="param.dimension == 'GROUP'">AREA_ID areaId,REG_ID regId,DEPT_ID deptId,GR_ID grId</if>
		<if test="param.dimension == 'USER'">AREA_ID areaId,REG_ID regId,DEPT_ID deptId,GR_ID grId,USER_ID userId</if>
	</sql>
	
	<sql id="getWorkCountRankingGroupSql">
		<if test="param.dimension == 'AREA'">AREA_ID</if>
		<if test="param.dimension == 'REG'">AREA_ID,REG_ID</if>
		<if test="param.dimension == 'DEPT'">AREA_ID,REG_ID,DEPT_ID</if>
		<if test="param.dimension == 'GROUP'">AREA_ID,REG_ID,DEPT_ID,GR_ID</if>
		<if test="param.dimension == 'USER'">AREA_ID,REG_ID,DEPT_ID,GR_ID,USER_ID</if>
	</sql>
	
	<select id="getWorkCountRanking" resultType="java.util.Map">
		select top ${param.topCount}
		sum(iif(case_type=${param.houseType},DJ_COUNT,0)) houseDjCount,sum(iif(case_type=${param.custType},DJ_COUNT,0)) custDjCount,
		sum(iif(case_type=${param.houseType},GJ_COUNT,0)) houseGjCount,sum(iif(case_type=${param.custType},GJ_COUNT,0)) custGjCount,
		sum(iif(case_type=${param.houseType},FK_COUNT,0)) fkCount,sum(iif(case_type=${param.houseType},DK_COUNT,0)) dkCount,
		sum(YSTJ_COUNT) ystjCount,
		<include refid="getWorkCountRankingCoulmnSql" />
		from FUN_STATISTIC_TOTLE where comp_id= #{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		AND CASE_TYPE in(${param.houseType},${param.custType})
		group by
		<include refid="getWorkCountRankingGroupSql" />
		order by sum(DJ_COUNT)+sum(GJ_COUNT)+sum(YSTJ_COUNT)+sum(DK_COUNT)+sum(FK_COUNT)
		<choose>
			<when test="param.orderBy == 'DESC'">DESC</when>
			<otherwise>ASC</otherwise>
		</choose>
	</select>
	
	<select id="getTotalWorkCount" resultType="java.lang.Integer">
		select
		sum(DJ_COUNT)+sum(ZYX_COUNT)+sum(SSZR_COUNT)+sum(ZP_COUNT)+sum(FP_COUNT)+sum(XG_COUNT)
		+sum(ZTBG_COUNT)+sum(WT_COUNT)+sum(GJ_COUNT)+sum(FK_COUNT)+sum(YSTJ_COUNT)+sum(YJ_COUNT)
		+sum(TPSC_COUNT)+sum(SPSC_COUNT)+sum(CKDH_COUNT)+sum(IPCALL_COUNT)+sum(WLFB_COUNT)
		+sum(WLSX_COUNT)+sum(DK_COUNT)+sum(CJ_COUNT)+sum(SX_COUNT)+sum(SPDK_COUNT)+sum(KFDP_COUNT)
		+sum(PYQ_COUNT)+sum(VR_COUNT)+sum(ZFY_COUNT)+sum(ZX_COUNT)+sum(QFTG_COUNT)
		as counts
		from FUN_STATISTIC_TOTLE where comp_id= #{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		AND CASE_TYPE in(${param.houseType},${param.custType})
	</select>
	
	<select id="getHouseAddTotalData" resultType="java.util.Map">
		select count(1) total,${param.houseCaseType} as caseType 
		from ${param.houseTableName}
		<where>
			and COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			<if test="param.regionIdsArr != null">
				AND ${param.caseReg} in
				<foreach close=")" collection="param.regionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			</if>
			<if test="param.sectionIdsArr != null">
				AND SECTION_ID in
				<foreach close=")" collection="param.sectionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			</if>
			and CREATION_TIME BETWEEN #{param.startTime} and #{param.endTime}
			and ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		</where>
		ORDER BY caseType ASC
	</select>
	
	<select id="getCustAddTotalData" resultType="java.util.Map">
		select count(1) total,${param.custCaseType} as caseType 
		from ${param.custTableName} a 
		<if test="param.regionIdsArr != null">
			LEFT JOIN FUN_CUST_DEMAND_SPLIT_1 b ON b.CITY_ID= #{shardCityId} and b.CASE_ID = A.${param.custId} and b.CASE_TYPE=#{param.custCaseType}
		</if>
		<if test="param.sectionIdsArr != null">
			LEFT JOIN FUN_CUST_DEMAND_SPLIT_2 c ON c.CITY_ID= #{shardCityId} and c.CASE_ID = A.${param.custId} and c.CASE_TYPE=#{param.custCaseType}
		</if>
		<where>
			a.COMP_ID = #{param.compId} AND a.CITY_ID = #{shardCityId}
			<if test="param.regionIdsArr != null">
				AND b.SOURCE_ID in
				<foreach close=")" collection="param.regionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			</if>
			<if test="param.sectionIdsArr != null">
				AND c.SOURCE_ID in
				<foreach close=")" collection="param.sectionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			</if>
			and a.CREATION_TIME BETWEEN #{param.startTime} and #{param.endTime}
			and a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		</where> 
		ORDER BY caseType ASC
	</select>

	<select id="getHouseCustAddRank" resultType="java.util.Map">
		SELECT top 15
		SUM (iif (a.case_type=#{param.houseCaseType}, 1, 0)) AS houseCount,
		SUM (iif (a.case_type=#{param.custCaseType}, 1, 0)) AS custCount,
		count (1) AS totalCount,
		<choose>
			<when test="param.order != null and 1 == param.order">a.USER_ID userId</when>
			<otherwise>a.DEPT_ID deptId</otherwise>
		</choose>
		FROM
		FUN_STATISTIC_DETAIL_1 a
		left join ${param.houseTableName} b on b.${param.houseId}=a.case_id and a.case_type=#{param.houseCaseType} and b.CITY_ID=a.CITY_ID
		left join ${param.custTableName} c on c.${param.custId}=a.case_id and a.case_type=#{param.custCaseType} and c.CITY_ID=a.CITY_ID
		<if test="param.regionIdsArr != null">
			left join FUN_CUST_DEMAND_SPLIT_1 d on c.${param.custId}=d.case_id and d.case_type=#{param.custCaseType} and c.CITY_ID=d.CITY_ID
		</if>
		<if test="param.sectionIdsArr != null">
			left join FUN_CUST_DEMAND_SPLIT_2 e on c.${param.custId}=e.case_id and e.case_type=#{param.custCaseType} and c.CITY_ID=e.CITY_ID
		</if>
		WHERE
		a.COMP_ID = #{param.compId}
		AND a.CITY_ID = #{shardCityId}
		<if test="param.regionIdsArr != null">
			AND (${param.caseReg} in
			<foreach close=")" collection="param.regionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			OR d.SOURCE_ID IN 
			<foreach close=")" collection="param.regionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			)
		</if>
		<if test="param.sectionIdsArr != null">
			AND(b.SECTION_ID in
			<foreach close=")" collection="param.sectionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			OR e.SOURCE_ID IN 
			<foreach close=")" collection="param.sectionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
			)
		</if>
		AND a.CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		<if test="param.serchRange != null and '' != param.serchRange and param.serchRangeId != null and '' != param.serchRangeId">
		AND a.${param.serchRange}=#{param.serchRangeId}
		</if>
		and a.case_type in ( #{param.houseCaseType},#{param.custCaseType})
		GROUP BY
		<choose>
			<when test="param.order != null and 1 == param.order">a.USER_ID</when>
			<otherwise>a.DEPT_ID</otherwise>
		</choose>
		order by totalCount desc
	</select>

	<select id="countTodayExplrthAndLook" resultType="java.util.Map">
		SELECT
		SUM (iif(CASE_TYPE = '1' or CASE_TYPE = '2', DK_COUNT, 0)) AS LOOK_COUNT,
		SUM (iif(CASE_TYPE = '1'or CASE_TYPE = '2', FK_COUNT, 0)) AS EXPLRTH_COUNT
		FROM FUN_STATISTIC_TOTLE 
		where COMP_ID = #{compId} AND CITY_ID = #{shardCityId} and USER_ID = #{userId} 
		and CREATE_TIME &gt;=#{startTime} and CREATE_TIME &lt;=#{endTime}
	</select>
	
	<select id="getTrueHouseCountOffMarketing" resultType="java.util.Map">
		SELECT SUM (iif(CASE_TYPE=1,ZFY_COUNT,0)) as saleTrueHouseCount,
		SUM (iif(CASE_TYPE=2,ZFY_COUNT,0)) as leaseTrueHouseCount
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">AND AREA_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">AND REG_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">AND DEPT_ID = #{param.serchRangeId}</if>
		<if test="param.deptId != null">AND DEPT_ID = #{param.deptId}</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">AND GR_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">AND USER_ID = #{param.serchRangeId}</if>
		<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime} </if>
		<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime} </if>
		AND CASE_TYPE IN (1, 2)
	</select>
	
	<select id="getTrueHouseDkCount" resultType="java.util.Map">
		SET DATEFIRST 1;
		select
			${param.erpFunStatisticTotlProfitequeryColumn} as dateCount,
			sum(ZFY_COUNT) as trueHouseCount,
			sum(DK_COUNT) as dkCount
		from FUN_STATISTIC_TOTLE
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
		<if test="param.serchRange != null and 'AREA'== param.serchRange"> AND AREA_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange"> AND REG_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange"> AND DEPT_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">AND GR_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange"> AND USER_ID = #{param.archiveId}</if>
		<if test="param.caseType != null and 101==param.caseType">AND CASE_TYPE=1</if>
		<if test="param.caseType != null and 102==param.caseType">AND CASE_TYPE=2</if>
		and CREATE_TIME &gt;= #{param.startTime} and CREATE_TIME &lt;= #{param.endTime}
		group by
		${param.erpFunStatisticTotlProfitequeryColumn}
	</select>
	
	<select id="getBasicDetails" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
		sum(iif(CASE_TYPE in (1,2),DJ_COUNT,0)) AS houseDjCount, 
		sum(iif(CASE_TYPE in (3,4),DJ_COUNT,0)) AS custDjCount, 
		SUM (iif (CASE_TYPE IN (1, 2),FK_COUNT,0)) AS fkCount,
		SUM (iif (CASE_TYPE IN (1, 2),DK_COUNT,0)) AS dkCount,
		${param.admindbRptTrackqueryColumn} AS weekTime
		FROM FUN_STATISTIC_TOTLE 
		WHERE CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;=  #{param.endTime}
		AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange == 'AREA'">
			AND AREA_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'REG'">
			AND REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'DEPT'">
			AND DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'GROUP'">
			AND GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'USER'">
			AND USER_ID = #{param.serchRangeId}
		</if>
		GROUP BY
		${param.admindbRptTrackqueryColumn}
	</select>
	
	<update id="addWorkCount" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
		merge into FUN_STATISTIC_TOTLE aim using
		(select #{caseType} as CASE_TYPE,#{userId} as USER_ID,#{grId} as GR_ID,#{deptId} as DEPT_ID,
		#{regId} as REG_ID,#{areaId} as AREA_ID,#{compId} as COMP_ID,#{cityId} as CITY_ID,
		#{createTime} as CREATE_TIME, 1 as ${countFieldName}) src
		on aim.CITY_ID = src.CITY_ID and aim.CASE_TYPE = src.CASE_TYPE 
		and aim.CREATE_TIME = src.CREATE_TIME and aim.USER_ID = src.USER_ID
		when not matched then insert(CASE_TYPE, USER_ID, GR_ID, DEPT_ID, REG_ID, 
		AREA_ID, COMP_ID, CITY_ID, CREATE_TIME,${countFieldName}) 
		values(src.CASE_TYPE,SRC.USER_ID,src.GR_ID,src.DEPT_ID,src.REG_ID,src.AREA_ID,
		src.COMP_ID,src.CITY_ID,src.CREATE_TIME,src.${countFieldName})
		when matched then UPDATE set ${countFieldName} = aim.${countFieldName} + 1;
	</update>
	
	<select id="getFlowAnalysisStockDataForSale" resultType="java.util.Map">
		select sum(DJ_COUNT) incrementForSale,
		(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForSale ,CASE_TYPE caseType from FUN_STATISTIC_TOTLE
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and CASE_TYPE = 1
		group by CASE_TYPE
	</select>
	
	<select id="getFlowAnalysisStockDataForBuy" resultType="java.util.Map">
		select sum(DJ_COUNT) incrementForBuy,
		(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForBuy ,CASE_TYPE caseType 
		from FUN_STATISTIC_TOTLE
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and CASE_TYPE = 2
		group by CASE_TYPE
	</select>
	
	<select id="getFlowAnalysisStockDataForLease" resultType="java.util.Map">
		select sum(DJ_COUNT) incrementForLease,
		(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForLease ,CASE_TYPE caseType 
		from FUN_STATISTIC_TOTLE
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and CASE_TYPE = 3
		group by CASE_TYPE
	</select>
	
	<select id="getFlowAnalysisStockDataForRent" resultType="java.util.Map">
		select sum(DJ_COUNT) incrementForRent,
		(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForRent ,CASE_TYPE caseType 
		from FUN_STATISTIC_TOTLE
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and CASE_TYPE = 4
		group by CASE_TYPE
	</select>

	<select id="getDaiKanRateCount" resultMap="BaseResultRateDto">
		SET DATEFIRST 1; 
		create table #T_DJ_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,DJ_COUNT int)
		create table #T_DK_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,DK_COUNT int)

		insert #T_DJ_COUNT(CASE_ID,CASE_TYPE,CREATE_TIME,DJ_COUNT)
		SELECT CASE_ID,iif(CASE_TYPE=3, 1, 2),CONVERT(varchar(100), CREATE_TIME, 23) as CREATE_TIME, COUNT(1) AS DJ_COUNT
		FROM FUN_STATISTIC_DETAIL_1 
		WHERE 
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
			<if test="param.userId != null and '' != param.userId">AND USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND ${param.serchRange}_ID = #{param.serchRangeId}</if>
			<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime}</if>
			<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime}</if>
			<if test="param.caseType != null and param.caseType == 101">AND CASE_TYPE = 3</if>
			<if test="param.caseType != null and param.caseType == 102">AND CASE_TYPE = 4</if>
			<if test="param.caseType == null or '' == param.caseType">AND CASE_TYPE IN (3, 4)</if>
		GROUP BY CONVERT(varchar(100), CREATE_TIME, 23),CASE_TYPE,CASE_ID

		insert #T_DK_COUNT(CASE_ID,CASE_TYPE,CREATE_TIME,DK_COUNT)
		SELECT 
			b.TRACK_ID,iif(b.CASE_TYPE=1, 1, 2),CONVERT(varchar(100), b.CREATE_TIME, 23) as CREATE_TIME, COUNT (1) AS DK_COUNT
			FROM  FUN_STATISTIC_DETAIL_19 b
			WHERE b.COMP_ID = #{param.compId} AND b.CITY_ID = #{shardCityId}
			<if test="param.userId != null and '' != param.userId">AND b.USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND b.${param.serchRange}_ID = #{param.serchRangeId}</if>
			<if test="param.startTime != null and '' != param.startTime">AND b.CREATE_TIME &gt;= #{param.startTime} AND b.CASE_CREATE_TIME  &gt;= #{param.startTime}</if>
			<if test="param.endTime != null and '' != param.endTime">AND b.CREATE_TIME &lt;= #{param.endTime} AND b.CASE_CREATE_TIME &lt;= #{param.endTime}</if> 
			<choose>
				<when test="param.caseType != null and 101 == param.caseType">
					AND b.CASE_TYPE = 1
				</when>
				<when test="param.caseType != null and 102 == param.caseType">
					AND b.CASE_TYPE = 2
				</when>
				<otherwise>
					AND b.CASE_TYPE IN (1, 2)
				</otherwise>
			</choose>
			GROUP BY 
		CONVERT(varchar(100), b.CREATE_TIME, 23),b.TRACK_ID,b.CASE_TYPE
		CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DJ_COUNT(CASE_ID ASC,  CASE_TYPE ASC)
		CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DK_COUNT(  CASE_ID ASC,CASE_TYPE ASC)
	
		SELECT ${param.dateColumn} as DATE_COUNT, 
		( ISNULL( sum(iif (b.DK_COUNT &gt;= 0, b.DK_COUNT, 0)), 0.0 ) + 0.0 ) / iif ( ISNULL( sum(iif (a.DJ_COUNT &gt;= 0, a.DJ_COUNT, 0)), 0 ) = 0, 1.0, sum(iif (a.DJ_COUNT &gt;= 0, a.DJ_COUNT, 0)) ) AS DK_RATE 
		FROM #T_DJ_COUNT a 
		LEFT JOIN #T_DK_COUNT b on a.CASE_ID = b.CASE_ID and a.CASE_TYPE=b.CASE_TYPE and ${param.dateColumn} = ${param.dateColumnB}
		GROUP BY
		${param.dateColumn}
		ORDER BY DATE_COUNT DESC
		drop table #T_DJ_COUNT
		drop table #T_DK_COUNT
	</select>
	
	<select id="getFunKanRateCount" resultMap="BaseResultRateDto">
		SET DATEFIRST 1; 
		create table #T_DJ_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,DJ_COUNT int)
		create table #T_FK_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,FK_COUNT int)
	
		insert #T_DJ_COUNT (CREATE_TIME,CASE_ID,CASE_TYPE,DJ_COUNT)
		SELECT CONVERT(varchar(100), CREATE_TIME, 23) as CREATE_TIME,CASE_ID,CASE_TYPE, COUNT(1) AS DJ_COUNT 
		FROM FUN_STATISTIC_DETAIL_1 
		WHERE 
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
			<if test="param.userId != null and '' != param.userId">AND USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND ${param.serchRange}_ID = #{param.serchRangeId}</if>
			<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime}</if>
			<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime}</if>
			<if test="param.caseType != null and param.caseType == 101">AND CASE_TYPE = 1</if>
			<if test="param.caseType != null and param.caseType == 102">AND CASE_TYPE = 2</if>
			<if test="param.caseType == null or '' == param.caseType">AND CASE_TYPE IN (1, 2)</if>
		GROUP BY CONVERT(varchar(100), CREATE_TIME, 23),CASE_TYPE,CASE_ID
		insert #T_FK_COUNT(CASE_ID,CASE_TYPE,CREATE_TIME,FK_COUNT)
				SELECT 
			<!-- <if test="param.dateColumnB != null and '' != param.dateColumnB">${param.dateColumnB}</if>
			AS DATE_COUNT,  -->
			b.CASE_ID,b.CASE_TYPE,CONVERT(varchar(100), b.CREATE_TIME, 23) as CREATE_TIME,count(1) as FK_COUNT
			FROM FUN_STATISTIC_DETAIL_10 b 
			WHERE 
			b.CITY_ID = #{shardCityId} AND b.COMP_ID = #{param.compId} 
			<if test="param.userId != null and '' != param.userId">AND b.USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND b.${param.serchRange}_ID = #{param.serchRangeId}
			</if> 
			<if test="param.startTime != null and '' != param.startTime">AND b.CREATE_TIME &gt;= #{param.startTime} AND b.CASE_CREATE_TIME  &gt;= #{param.startTime}</if>
			<if test="param.endTime != null and '' != param.endTime">AND b.CREATE_TIME &lt;= #{param.endTime} AND b.CASE_CREATE_TIME &lt;= #{param.endTime}</if> 
			GROUP BY 
			b.CASE_ID, b.CASE_TYPE,CONVERT(varchar(100), b.CREATE_TIME, 23)
			
			CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DJ_COUNT(CASE_ID ASC,  CASE_TYPE ASC)
			CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_FK_COUNT(  CASE_ID ASC,CASE_TYPE ASC)
		
		
	SELECT ${param.dateColumn} as DATE_COUNT, 
		( ISNULL( sum(iif (b.FK_COUNT &gt;= 0,b.FK_COUNT, 0)), 0.0 ) + 0.0 ) / iif ( ISNULL( sum(iif (a.DJ_COUNT &gt;= 0, a.DJ_COUNT, 0)), 0 ) = 0, 1.0, sum(iif (a.DJ_COUNT &gt;= 0, a.DJ_COUNT, 0)) ) AS FK_RATE 
		FROM #T_DJ_COUNT a LEFT JOIN #T_FK_COUNT b on a.CASE_ID = b.CASE_ID and a.CASE_TYPE=b.CASE_TYPE and ${param.dateColumn} = ${param.dateColumnB}
		GROUP BY ${param.dateColumn}
		ORDER BY DATE_COUNT DESC
		drop table #T_DJ_COUNT
		drop table #T_FK_COUNT
	</select>
	<select id="getSignRateCountNoDeal" resultMap="BaseResultRateDto">
		SET DATEFIRST 1; 
		SELECT 
		<if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn}</if>
		AS DATE_COUNT, SUM(a.DK_COUNT) DK_COUNT 
		from FUN_STATISTIC_TOTLE a
		where a.COMP_ID = #{param.compId} AND a.CITY_ID = #{shardCityId} 
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND a.${param.serchRange}_ID = #{param.serchRangeId}</if> 
		<if test="param.startTime != null and '' != param.startTime">AND a.CREATE_TIME &gt;= #{param.startTime} </if>
		<if test="param.endTime != null and '' != param.endTime">AND a.CREATE_TIME &lt;= #{param.endTime} </if> 
		group by 
		<if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn}</if>
		<!-- with T_DKAN_COUNT as( 
			SELECT 
			<if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn}</if>
			AS DATE_COUNT, SUM(DK_COUNT) DK_COUNT 
			from FUN_STATISTIC_TOTLE 
			where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND ${param.serchRange}_ID = #{param.serchRangeId}</if> 
			<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime} </if>
			<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime} </if> 
			group by 
			<if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn}</if>
		),
		T_SIGN_COUNT as(
			SELECT 
			<if test="param.signDateColumnNoDeal != null and '' != param.signDateColumnNoDeal">${param.signDateColumnNoDeal}</if>
			AS DATE_COUNT, COUNT (1) AS SIGN_COUNT 
			FROM HOUSE_INNERDEAL_ANALYSIS A
			WHERE A.COMP_ID = #{param.compId}
			AND A.DEAL_ID IS NULL
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND A.${param.serchRange}_ID = #{param.serchRangeId}</if>  
			AND A.CREATE_TIME &gt;= #{param.startTime} AND A.CREATE_TIME &lt;= #{param.endTime}
			GROUP BY 
			<if test="param.signDateColumnNoDeal != null and '' != param.signDateColumnNoDeal">${param.signDateColumnNoDeal}</if>
		)
		select a.SIGN_COUNT,b.DK_COUNT, a.DATE_COUNT ,
		(iif (ISNULL(a.SIGN_COUNT,0.0) > 0, a.SIGN_COUNT, 0)+0.0)/iif(ISNULL(b.DK_COUNT,0) > 0, b.DK_COUNT, 1.0) as SIGN_RATE
		from T_SIGN_COUNT a 
		left join T_DKAN_COUNT b on a.DATE_COUNT=b.DATE_COUNT -->
	</select>

	<select id="getSignRateCountHasDeal" resultMap="BaseResultRateDto">
		SET DATEFIRST 1; 
		<!-- with T_DKAN_COUNT as( 
			SELECT 
			<if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn} AS DATE_COUNT,</if>
			SUM(DK_COUNT) DK_COUNT from FUN_STATISTIC_TOTLE 
			where COMP_ID = #{param.compId} 
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND ${param.serchRange}_ID = #{param.serchRangeId}</if> 
			<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime} </if>
			<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime}</if> 
			<if test="param.dateColumn != null and '' != param.dateColumn">group by ${param.dateColumn}</if>
		),
		T_SIGN_COUNT as(
			SELECT 
			<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">${param.signDateColumnHasDeal}</if>
			AS DATE_COUNT, 
			sum(iif(B.SIGN_USER_ID>0,1,0)) AS SIGN_COUNT 
			FROM
			FUN_DEAL B 
			LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3 
			WHERE B.COMP_ID = #{param.compId} 
			AND B.SIGN_DATE &gt;= #{param.startTime}
			AND B.SIGN_DATE &lt;= #{param.endTime}
			AND B.DEAL_ID>0
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND C.${param.serchRange}_ID = #{param.serchRangeId}</if>  
			GROUP BY 
			<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">${param.signDateColumnHasDeal}</if>
		)select a.SIGN_COUNT,b.DK_COUNT,
		(iif (ISNULL(a.SIGN_COUNT,0.0) > 0, a.SIGN_COUNT, 0)+0.0)/iif(ISNULL(b.DK_COUNT,0) > 0, b.DK_COUNT, 1.0) as SIGN_RATE,
		a.DATE_COUNT from T_SIGN_COUNT a left join T_DKAN_COUNT b on 
		a.DATE_COUNT=b.DATE_COUNT -->
		
		SELECT 
		<if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn} AS DATE_COUNT,</if>
		SUM(DK_COUNT) DK_COUNT from FUN_STATISTIC_TOTLE a
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND ${param.serchRange}_ID = #{param.serchRangeId}</if> 
		<if test="param.caseType != null and 101 == param.caseType">
		AND CASE_TYPE = 1 
		</if>
		<if test="param.caseType != null and 102 == param.caseType">
		AND CASE_TYPE = 2 
		</if>
		<if test="param.caseType == null or '' == param.caseType">
		AND CASE_TYPE IN (1,2) 
		</if>
		<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime} </if>
		<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime}</if> 
		<if test="param.dateColumn != null and '' != param.dateColumn">group by ${param.dateColumn}</if>
	</select>

	<select id="getDaiKanRateCountReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		create table #T_DJ_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,DJ_COUNT int ,RANGE varchar(150))
		create table #T_DK_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,DK_COUNT int,,RANGE varchar(150))
		insert #T_DJ_COUNT(CREATE_TIME,CASE_ID,CASE_TYPE,DJ_COUNT,RANGE)
SELECT CONVERT(varchar(100), CREATE_TIME, 23) as CREATE_TIME,CASE_ID,CASE_TYPE,COUNT(1) AS DJ_COUNT,
<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
			as RANGE
			FROM FUN_STATISTIC_DETAIL_1
			WHERE COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			<if test="param.userId != null and '' != param.userId ">AND USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			AND CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;= #{param.endTime}
			<if test="param.caseType != null and 101 == param.caseType">AND CASE_TYPE = 3</if>
			<if test="param.caseType != null and 102 == param.caseType">AND CASE_TYPE = 4</if>
			<if test="param.caseType == null or '' == param.caseType">AND CASE_TYPE IN (3, 4)</if>
			GROUP BY
			<!-- <if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn}</if>
			, -->CASE_TYPE,CASE_ID,CONVERT(varchar(100),CREATE_TIME, 23),
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">REG_ID</if>
					<if test="param.dimension == 'DEPT'">REG_ID,DEPT_ID</if>
					<if test="param.dimension == 'GROUP'">REG_ID,DEPT_ID,GR_ID</if>
					<if test="param.dimension == 'USER'">REG_ID,DEPT_ID,GR_ID,USER_ID</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">AREA_ID,REG_ID</if>
					<if test="param.dimension == 'DEPT'">AREA_ID,REG_ID,DEPT_ID</if>
					<if test="param.dimension == 'GROUP'">AREA_ID,REG_ID,DEPT_ID,GR_ID</if>
					<if test="param.dimension == 'USER'">AREA_ID,REG_ID,DEPT_ID,GR_ID,USER_ID</if>
				</otherwise>
			</choose>
		insert #T_DK_COUNT(CASE_ID,CASE_TYPE,CREATE_TIME,DK_COUNT,RANGE)
		SELECT b.CASE_ID,b.CASE_TYPE,CONVERT(varchar(100), b.CREATE_TIME, 23) as CREATE_TIME, COUNT (1) AS DK_COUNT,
		<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
		FROM FUN_STATISTIC_DETAIL_19 b 	WHERE b.COMP_ID = #{param.compId} AND b.CITY_ID = #{shardCityId}
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND b.${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			<choose>
				<when test="param.caseType != null and 101 == param.caseType">AND b.CASE_TYPE = 1</when>
				<when test="param.caseType != null and 102 == param.caseType">AND b.CASE_TYPE = 2</when>
				<otherwise>AND b.CASE_TYPE IN (1, 2)</otherwise>
			</choose>
			AND b.CREATE_TIME &gt;= #{param.startTime}
			AND b.CREATE_TIME &lt;= #{param.endTime}
			GROUP BY
			b.CASE_ID,b.CASE_TYPE,<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>,CONVERT(varchar(100), b.CREATE_TIME, 23)
		CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DJ_COUNT(CASE_ID ASC,  CASE_TYPE ASC,RANGE ASC)
		CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DK_COUNT(  CASE_ID ASC,CASE_TYPE ASC,RANGE ASC)	
		SELECT ${param.dateColumn} as dateCount, a.RANGE as range,
		sum(b.DK_COUNT) as djdkCount,
		sum(a.DJ_COUNT) AS custdjCount
		FROM #T_DJ_COUNT a LEFT JOIN #T_DK_COUNT b on a.CASE_ID = b.CASE_ID
		and a.CASE_TYPE=b.CASE_TYPE and ${param.dateColumn} = ${param.dateColumnB} and
		a.RANGE=b.RANGE
		GROUP BY ${param.dateColumn},a.RANGE,a.CITY_ID ORDER BY DATE_COUNT DESC
		drop table #T_DJ_COUNT
		drop table #T_DK_COUNT
	</select>
	
	<select id="getFunKanRateCountReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		create table #T_DJ_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,DJ_COUNT int ,RANGE varchar(150))
		create table #T_FK_COUNT(CREATE_TIME datetime,CASE_ID int,CASE_TYPE int,FK_COUNT int,RANGE varchar(150))
		insert #T_DJ_COUNT(CREATE_TIME,CASE_ID,CASE_TYPE,CITY_ID,DJ_COUNT,RANGE)
		SELECT
			CONVERT(varchar(100), CREATE_TIME, 23) as CREATE_TIME, CASE_ID, CASE_TYPE, COUNT (1) AS DJ_COUNT,
			<!-- <if test="param.dateColumn != null and '' != param.dateColumn">${param.dateColumn}</if>
			AS DATE_COUNT, -->
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
			AS RANGE
			FROM FUN_STATISTIC_DETAIL_1
			WHERE COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			<if test="param.userId != null and '' != param.userId ">AND USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND ${param.serchRange}_ID = #{param.serchRangeId}</if>
			AND CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;= #{param.endTime}
			<if test="param.caseType != null and 101 == param.caseType">AND CASE_TYPE = 1</if>
			<if test="param.caseType != null and 102 == param.caseType">AND CASE_TYPE = 2</if>
			<if test="param.caseType == null or '' == param.caseType">AND CASE_TYPE IN (1, 2)</if>
			GROUP BY
			CONVERT(varchar(100), CREATE_TIME, 23),CASE_ID,CASE_TYPE
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">REG_ID</if>
					<if test="param.dimension == 'DEPT'">REG_ID,DEPT_ID</if>
					<if test="param.dimension == 'GROUP'">REG_ID,DEPT_ID,GR_ID</if>
					<if test="param.dimension == 'USER'">REG_ID,DEPT_ID,GR_ID,USER_ID</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">AREA_ID,REG_ID</if>
					<if test="param.dimension == 'DEPT'">AREA_ID,REG_ID,DEPT_ID</if>
					<if test="param.dimension == 'GROUP'">AREA_ID,REG_ID,DEPT_ID,GR_ID</if>
					<if test="param.dimension == 'USER'">AREA_ID,REG_ID,DEPT_ID,GR_ID,USER_ID</if>
				</otherwise>
			</choose>
		insert #T_FK_COUNT(CASE_ID,CASE_TYPE,CREATE_TIME,FK_COUNT,RANGE)
			SELECT
			b.CASE_ID,b.CASE_TYPE,
			CONVERT(varchar(100), b.CREATE_TIME, 23) AS CREATE_TIME,
			COUNT (1) AS FK_COUNT,
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
			FROM  FUN_STATISTIC_DETAIL_10 b 
			WHERE b.COMP_ID = #{param.compId} AND b.CITY_ID = #{shardCityId}
			<if test="param.userId != null and '' != param.userId ">AND b.USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">AND b.${param.serchRange}_ID = #{param.serchRangeId}</if>
			<if test="param.caseType != null and 101 == param.caseType">AND b.CASE_TYPE = 1</if>
			<if test="param.caseType != null and 102 == param.caseType">AND b.CASE_TYPE = 2</if>
			<if test="param.caseType == null or '' == param.caseType">AND b.CASE_TYPE IN (1, 2)</if>
			AND b.CREATE_TIME &gt;= #{param.startTime}
			AND b.CREATE_TIME &lt;= #{param.endTime}
			AND b.CASE_CREATE_TIME &gt;= #{param.startTime}
			AND b.CASE_CREATE_TIME &lt;= #{param.endTime}
			GROUP BY
		<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
			CONVERT(varchar(100), b.CREATE_TIME, 23)
		CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DJ_COUNT(CASE_ID ASC,  CASE_TYPE ASC,RANGE ASC)
		CREATE NONCLUSTERED INDEX [INX_CASE_ID] ON #T_DK_COUNT(  CASE_ID ASC,CASE_TYPE ASC,RANGE ASC)	
		SELECT 
		${param.dateColumn} as dateCount, a.RANGE as range,
		sum(b.FK_COUNT) as djfkCount, sum(a.DJ_COUNT) AS housedjCount
		FROM #T_DJ_COUNT a 
		LEFT JOIN #T_FK_COUNT b on ${param.dateColumn} = ${param.dateColumnB} and a.RANGE=b.RANGE
		GROUP BY 
		${param.dateColumn},a.RANGE,a.CITY_ID
		ORDER BY dateCount DESC
		drop table #T_DJ_COUNT
		drop table #T_FK_COUNT
	</select>
	
	<select id="getSignRateCountReportNoDeal" resultMap="BaseResultRateDto">
		SET DATEFIRST 1; 
		SELECT 
		<if test="param.signDateColumnNoDeal != null and '' != param.signDateColumnNoDeal">
		${param.signDateColumnNoDeal}
		</if>
		AS dateCount, 
		<if test="param.dimension != null and '' != param.dimension">
		A.${param.dimension}_ID as range,
		</if>
		<choose>
			<when test="param.caseType != null and 101 == param.caseType">
				sum(iif(A.CASE_TYPE in(1,3)),1,0)))
			</when>
			<when test="param.caseType != null and 102 == param.caseType">
				sum(iif(A.CASE_TYPE in(2,4)),1,0)))
			</when>
			<otherwise>
				count(1)
			</otherwise>
		</choose>
		AS signCount
		FROM <!-- TODO-暂没找到地方调用 -->
		HOUSE_INNERDEAL_ANALYSIS A WHERE 
		A.CREATE_TIME &gt;= #{param.startTime} AND A.CREATE_TIME &lt;= #{param.endTime}
		AND A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId} 
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
		AND A.${param.serchRange}_ID = #{param.serchRangeId} 
		</if>
		AND A.DEAL_ID IS NULL
		GROUP BY 
		<if test="param.signDateColumnNoDeal!= null and '' != param.signDateColumnNoDeal">
		${param.signDateColumnNoDeal}
		</if>
		<if test="param.dimension != null and '' != param.dimension">
		,A.${param.dimension}_ID
		</if>
	</select>
	<select id="getSignRateCountReportHasDeal" resultMap="BaseResultRateDto">
		SET DATEFIRST 1; 
		with T_DKAN_COUNT as( SELECT 
		<if test="param.dateColumn != null and '' != param.dateColumn">
		${param.dateColumn}
		</if>
		AS DATE_COUNT,
		<if test="param.dimension != null and '' != param.dimension">
		${param.dimension}_ID as RANGE,
		</if>
		SUM(DK_COUNT) DK_COUNT 
		from 
		FUN_STATISTIC_TOTLE 
		where 
		COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
		AND ${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;= #{param.endTime}
		group by 
		<if test="param.dateColumn != null and '' != param.dateColumn">
		${param.dateColumn}
		</if>
		<if test="param.dimension != null and '' != param.dimension">
		,${param.dimension}_ID
		</if>
		),T_SIGN_COUNT as( SELECT 
		<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">
		${param.signDateColumnHasDeal}
		</if>
		AS DATE_COUNT, 
		<if test="param.dimension != null and '' != param.dimension">
		A.${param.dimension}_ID as RANGE,
		</if>
		COUNT(distinct B.DEAL_ID) as SIGN_COUNT
		FROM 
		FUN_DEAL B <!-- TODO-暂没找到地方调用 -->
		LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3  
		WHERE 
		B.SIGN_DATE &gt;= #{param.startTime} AND B.SIGN_DATE &lt;= #{param.endTime}
		AND B.COMP_ID = #{param.compId} AND B.CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND C.${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		<if test="param.caseType!= null and 101 == param.caseType">
			AND B.DEAL_TYPE = 101
		</if>
		<if test="param.caseType!= null and 102 == param.caseType">
			AND B.DEAL_TYPE = 102
		</if>p
		AND B.DEAL_ID&gt;0
		GROUP BY 
		<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">
		${param.signDateColumnHasDeal}
		</if>
		<if test="param.dimension != null and '' != param.dimension">
		,A.${param.dimension}_ID
		</if>
		)select a.SIGN_COUNT as signCount,b.DK_COUNT as dkCount,a.RANGE as range,
		(iif(ISNULL(a.SIGN_COUNT,0)&gt;0,a.SIGN_COUNT,0)+0.0)/iif(ISNULL(b.DK_COUNT,0)=0,1.0,b.DK_COUNT) as signRate,
		a.DATE_COUNT as dateCount from T_SIGN_COUNT a left join T_DKAN_COUNT b on a.RANGE = b.RANGE and a.DATE_COUNT=b.DATE_COUNT
	</select>

	<select id="getConversionRatioAnalysisOffDkan" resultType="java.util.Map">
		SELECT
		TOP 15 SUM(${param.countType}) as counts,
		<choose>
			<when test="param.dimension == 'DEPT'">DEPT_ID deptId</when>
			<otherwise>DEPT_ID deptId,USER_ID userId</otherwise>
		</choose>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime}</if>
		<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime}</if>
		AND CASE_TYPE IN
		<foreach close=")" collection="param.caseTypeArr" item="val" open="(" separator=",">#{val}</foreach>
		GROUP BY
		<choose>
			<when test="param.dimension == 'DEPT'">DEPT_ID</when>
			<otherwise>DEPT_ID,USER_ID</otherwise>
		</choose>
		having SUM (${param.countType}) &gt; 0
		order by counts desc
	</select>

	<select id="getDkContrastOffRatioAnalysis" resultType="java.util.Map">
		SELECT TOP 4 SUM (DK_COUNT) as dkCount,
	 	DEPT_ID as deptId
		FROM
			FUN_STATISTIC_TOTLE
		WHERE
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND AREA_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND USER_ID = #{param.serchRangeId}
		</if>
		<if test="param.startTime != null and '' != param.startTime">
		AND CREATE_TIME &gt;= #{param.startTime} 
		</if>
		<if test="param.endTime != null and '' != param.endTime">
		AND CREATE_TIME &lt;= #{param.endTime} 
		</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND CASE_TYPE = 2
		</if>
		<if test="param.caseType == null">
			AND CASE_TYPE IN (1, 2)
		</if>
		GROUP BY
			DEPT_ID
		HAVING SUM (DK_COUNT)&gt;0	
		ORDER BY dkCount desc
	</select>
	<select id="getTotalDkContrastOffRatioAnalysis" resultType="java.util.Map">
		SELECT  SUM (DK_COUNT) as totalCount
		FROM
			FUN_STATISTIC_TOTLE
		WHERE
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND AREA_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND USER_ID = #{param.serchRangeId}
		</if>
		<if test="param.startTime != null and '' != param.startTime">
		AND CREATE_TIME &gt;= #{param.startTime} 
		</if>
		<if test="param.endTime != null and '' != param.endTime">
		AND CREATE_TIME &lt;= #{param.endTime} 
		</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND CASE_TYPE = 2
		</if>
		<if test="param.caseType == null">
			AND CASE_TYPE IN (1, 2)
		</if>
	</select>

	<select id="getFkContrastOffRatioAnalysis" resultType="java.util.Map">
		SELECT TOP 4 SUM(FK_COUNT) as fkCount,
	 	DEPT_ID as deptId
		FROM
			FUN_STATISTIC_TOTLE
		WHERE
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND AREA_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND USER_ID = #{param.serchRangeId}
		</if>
		<if test="param.startTime != null and '' != param.startTime">
			AND CREATE_TIME &gt;= #{param.startTime} 
		</if>
		<if test="param.endTime != null and '' != param.endTime">
			AND CREATE_TIME &lt;= #{param.endTime} 
		</if>
		<if test="param.caseType != null and param.caseType == 101">
			AND CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and param.caseType == 102">
			AND CASE_TYPE = 2
		</if>
		<if test="param.caseType == null">
			AND CASE_TYPE IN (1, 2)
		</if>
		GROUP BY
			DEPT_ID
		having SUM(FK_COUNT)&gt;0
		ORDER BY fkCount desc
	</select>
	<select id="getTotalFkContrastOffRatioAnalysis" resultType="java.util.Map">
		SELECT  SUM (FK_COUNT) as totalCount
		FROM
			FUN_STATISTIC_TOTLE
		WHERE
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND AREA_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND USER_ID = #{param.serchRangeId}
		</if>
		<if test="param.startTime != null and '' != param.startTime">
			AND CREATE_TIME &gt;= #{param.startTime} 
		</if>
		<if test="param.endTime != null and '' != param.endTime">
			AND CREATE_TIME &lt;= #{param.endTime} 
		</if>
		<if test="param.caseType != null and 101 == param.caseType">
			AND CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and 102 == param.caseType">
			AND CASE_TYPE = 2
		</if>
		<if test="param.caseType == null">
			AND CASE_TYPE IN (1, 2)
		</if>
	</select>

	<select id="getCjContrastOffRatioAnalysis" resultType="java.util.Map">
		<if test="param.deptType != null and 1==param.deptType ">
		select B.SIGN_USER_DEPT_ID as deptId,COUNT(distinct B.DEAL_ID) AS cjCount
		FROM<!-- TODO-暂没找到地方调用-->
			FUN_DEAL B LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3
		WHERE
				B.COMP_ID = #{param.compId} AND B.CITY_ID = #{shardCityId}
			<if test="param.serchRange != null and 'AREA'== param.serchRange">
				AND C.AREA_ID = #{param.serchRangeId} 
			</if>
			<if test="param.serchRange != null and 'REG'== param.serchRange">
				AND C.REG_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'DEPT'== param.serchRange">
				AND C.DEPT_ID = #{param.serchRangeId}
			</if>
			<if test="param.deptId != null">
				AND C.DEPT_ID = #{param.deptId}
			</if>
			<if test="param.serchRange != null and 'GROUP'== param.serchRange">
				AND C.GR_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'USER'== param.serchRange">
				AND C.ARCHIVE_ID = #{param.archiveId}
			</if>
			<if test="param.caseType != null and 101==param.caseType">
				AND B.DEAL_TYPE = 101
			</if>
			<if test="param.caseType != null and 102==param.caseType">
				AND B.DEAL_TYPE = 102
			</if>
			AND B.SIGN_DATE &gt;= #{param.startTime}
			AND B.SIGN_DATE &lt;= #{param.endTime}
		group by B.SIGN_USER_DEPT_ID order by cjCount desc
		</if>
		<if test="param.deptType == null">
		select A.DEPT_ID deptId,count(1) as cjCount from HOUSE_INNERDEAL_ANALYSIS A<!-- TODO-暂没找到地方调用 -->
			where A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId}
			AND A.DEAL_ID IS NULL
			<if test="param.serchRange != null and 'AREA'== param.serchRange">
				AND A.AREA_ID = #{param.serchRangeId} 
			</if>
			<if test="param.serchRange != null and 'REG'== param.serchRange">
				AND A.REG_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'DEPT'== param.serchRange">
				AND A.DEPT_ID = #{param.serchRangeId}
			</if>
			<if test="param.deptId != null">
				AND A.DEPT_ID = #{param.deptId}
			</if>
			<if test="param.serchRange != null and 'GROUP'== param.serchRange">
				AND A.GR_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'USER'== param.serchRange">
				AND A.ARCHIVE_ID = #{param.archiveId}
			</if>
			<if test="param.caseType != null and 101==param.caseType">
				AND A.CASE_TYPE IN(1,3)
			</if>
			<if test="param.caseType != null and 102==param.caseType">
				AND A.CASE_TYPE IN(2,4)
			</if>
			AND A.CREATE_TIME &gt;= #{param.startTime}
			AND A.CREATE_TIME &lt;= #{param.endTime}
		group by A.DEPT_ID order by cjCount desc
		</if>
	</select>
	<select id="getTotalCjContrastOffRatioAnalysis" resultType="java.util.Map">
		<if test="param.deptType != null and 1==param.deptType ">
			select COUNT(distinct B.DEAL_ID) AS cjCount
			FROM<!-- TODO-暂没找到地方调用 -->
				HOUSE_INNERDEAL_ANALYSIS A LEFT JOIN FUN_DEAL　B ON A.DEAL_ID = B.DEAL_ID LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3
			WHERE
				A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId}
			<if test="param.serchRange != null and 'AREA'== param.serchRange">
				AND C.AREA_ID = #{param.serchRangeId} 
			</if>
			<if test="param.serchRange != null and 'REG'== param.serchRange">
				AND C.REG_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'DEPT'== param.serchRange">
				AND C.DEPT_ID = #{param.serchRangeId}
			</if>
			<if test="param.deptId != null">
				AND C.DEPT_ID = #{param.deptId}
			</if>
			<if test="param.serchRange != null and 'GROUP'== param.serchRange">
				AND C.GR_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'USER'== param.serchRange">
				AND C.ARCHIVE_ID = #{param.archiveId}
			</if>
			<if test="param.caseType != null and 101==param.caseType">
				AND B.DEAL_TYPE = 101
			</if>
			<if test="param.caseType != null and 102==param.caseType">
				AND B.DEAL_TYPE = 102
			</if>
			AND B.SIGN_DATE &gt;= #{param.startTime}
			AND B.SIGN_DATE &lt;= #{param.endTime}
		</if>
		<if test="param.deptType == null">
		select count(1) as cjCount from HOUSE_INNERDEAL_ANALYSIS A<!-- TODO-暂没找到地方调用 -->
			where A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId}
			AND A.DEAL_ID IS NULL
			<if test="param.serchRange != null and 'AREA'== param.serchRange">
				AND A.AREA_ID = #{param.serchRangeId} 
			</if>
			<if test="param.serchRange != null and 'REG'== param.serchRange">
				AND A.REG_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'DEPT'== param.serchRange">
				AND A.DEPT_ID = #{param.serchRangeId}
			</if>
			<if test="param.deptId != null">
				AND A.DEPT_ID = #{param.deptId}
			</if>
			<if test="param.serchRange != null and 'GROUP'== param.serchRange">
				AND A.GR_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange != null and 'USER'== param.serchRange">
				AND A.ARCHIVE_ID = #{param.archiveId}
			</if>
			<if test="param.caseType != null and 101==param.caseType">
				AND A.CASE_TYPE IN(1,3)
			</if>
			<if test="param.caseType != null and 102==param.caseType">
				AND A.CASE_TYPE IN(2,4)
			</if>
			AND A.CREATE_TIME &gt;= #{param.startTime}
			AND A.CREATE_TIME &lt;= #{param.endTime}
		</if>
	</select>

	<select id="getSignRateCountHasDealReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
			<if test="param.signDateColumnB != null and '' != param.signDateColumnB">
				(${param.signDateColumnB}) AS dateCount,
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(C.REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(C.REG_ID,'_',C.DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">C.AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(C.AREA_ID,'_',C.REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</otherwise>
			</choose>
			as range,
			SUM (iif(B.SIGN_USER_ID &gt; 0,1,0)) AS signCount
			FROM  FUN_DEAL B <!-- TODO-暂没找到地方调用 -->
			LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID
			AND B.SIGN_USER_ID = C.USER_ID
			AND B.DEAL_AUDIT_STATUS != 3
			AND C.RELATE_TYPE = 3
			WHERE
			B.COMP_ID = #{param.compId} AND B.CITY_ID = #{shardCityId}
			AND B.SIGN_DATE &gt;= #{param.startTime}
			AND B.SIGN_DATE &lt;= #{param.endTime}
			AND B.DEAL_ID &gt; 0
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND C.${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			GROUP BY
			<if test="param.signDateColumnB != null and '' != param.signDateColumnB">
				(${param.signDateColumnB}),
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(C.REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(C.REG_ID,'_',C.DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">C.AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(C.AREA_ID,'_',C.REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</otherwise>
			</choose>
	</select>
	
	<select id="getSignDaiKanCountReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
			<if test="param.dateColumn != null and '' != param.dateColumn">
				(${param.dateColumn}) AS dateCount,
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose> as range,
			SUM (DK_COUNT) signDkCount
			FROM
			FUN_STATISTIC_TOTLE
			WHERE
			COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			<if test="param.userId != null and '' != param.userId ">AND USER_ID = #{param.userId}</if>
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			AND CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;= #{param.endTime}
			<if test="param.caseType != null and 101==param.caseType">
				AND CASE_TYPE=3
			</if>
			<if test="param.caseType != null and 102==param.caseType">
				AND CASE_TYPE=4
			</if>
			<if test="param.caseType == null">
				AND CASE_TYPE IN (3,4)
			</if>
			GROUP BY
			<if test="param.dateColumn != null and '' != param.dateColumn">
				(${param.dateColumn}),
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test="param.dimension == 'REG'">CONCAT(REG_ID,'')</if>
					<if test="param.dimension == 'DEPT'">CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test="param.dimension == 'AREA'">AREA_ID</if>
					<if test="param.dimension == 'REG'">CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test="param.dimension == 'DEPT'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test="param.dimension == 'GROUP'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test="param.dimension == 'USER'">CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
			
	</select>
	
	<select id="getSignRateCountNoDealReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
		<if test="param.dateColumnA != null and '' != param.dateColumnA">
			(${param.dateColumnA}) AS dateCount,
		</if>
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test="param.dimension == 'REG'">CONCAT(A.REG_ID,'')</if>
				<if test="param.dimension == 'DEPT'">CONCAT(A.REG_ID,'_',A.DEPT_ID)</if>
				<if test="param.dimension == 'GROUP'">CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
				<if test="param.dimension == 'USER'">CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
			</when>
			<otherwise>
				<if test="param.dimension == 'AREA'">A.AREA_ID</if>
				<if test="param.dimension == 'REG'">CONCAT(A.AREA_ID,'_',A.REG_ID)</if>
				<if test="param.dimension == 'DEPT'">CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID)</if>
				<if test="param.dimension == 'GROUP'">CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
				<if test="param.dimension == 'USER'">CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
			</otherwise>
		</choose>
		as range,
		COUNT (1) AS signCount
		FROM HOUSE_INNERDEAL_ANALYSIS A<!-- TODO-暂没找到地方调用 -->
		WHERE
		A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId}
		AND A.DEAL_ID IS NULL
		<if test="param.userId != null and '' != param.userId">AND A.USER_ID = #{param.userId}</if>
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND A.${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND A.CREATE_TIME &gt;= #{param.startTime}
		AND A.CREATE_TIME &lt;= #{param.endTime}
		GROUP BY
		<if test="param.dateColumnA != null and '' != param.dateColumnA">
			(${param.dateColumnA}),
		</if>
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test="param.dimension == 'REG'">CONCAT(A.REG_ID,'')</if>
				<if test="param.dimension == 'DEPT'">CONCAT(A.REG_ID,'_',A.DEPT_ID)</if>
				<if test="param.dimension == 'GROUP'">CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
				<if test="param.dimension == 'USER'">CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
			</when>
			<otherwise>
				<if test="param.dimension == 'AREA'">A.AREA_ID</if>
				<if test="param.dimension == 'REG'">CONCAT(A.AREA_ID,'_',A.REG_ID)</if>
				<if test="param.dimension == 'DEPT'">CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID)</if>
				<if test="param.dimension == 'GROUP'">CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
				<if test="param.dimension == 'USER'">CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
			</otherwise>
		</choose>
	</select>
	
	<select id="PerformanceMarketingAnalysis" resultType="java.util.Map">
		select 
			sum(iif(CREATE_TIME &gt;= #{param.startWeekTime},XQZJ_COUNT,0)) as xqzjWeekCount,
			SUM(XQZJ_COUNT) as xqzjMonthCount,
			sum(iif(CREATE_TIME &gt;= #{param.startWeekTime} AND CASE_TYPE in (1,3),FYTG_COUNT,0)) as saleHouseTgMonthCount,
			sum(iif(CREATE_TIME &gt;= #{param.startWeekTime} AND CASE_TYPE in (2,4),FYTG_COUNT,0)) as leaseHouseTgCount,
			sum(iif(CREATE_TIME &gt;= #{param.startWeekTime} AND CASE_TYPE in (1,3),QFTG_COUNT,0)) as saleReleaseHouseCount,
			sum(iif(CREATE_TIME &gt;= #{param.startWeekTime} AND CASE_TYPE in (2,4),QFTG_COUNT,0)) as leaseReleaseHouseCount,
			sum(iif(CREATE_TIME &gt;= #{param.startWeekTime} AND CASE_TYPE in (1,3),ZFY_COUNT,0)) as saleTrueHouseCount,
			sum(iif(CASE_TYPE in (2,4),ZFY_COUNT,0)) as leaseTrueHouseCount
		from FUN_STATISTIC_TOTLE
		where CREATE_TIME &gt;=#{param.startMonthTime} and CITY_ID = #{shardCityId} and COMP_ID = #{param.compId}
	</select>
	
	<select id="getOperationsAndProfitCountOffChart" resultType="java.util.Map">
		SET DATEFIRST 1;
		select 
			${param.column} as dateCount,
			sum(XQZJ_COUNT) as xqzjCount, 
			sum(FYTG_COUNT) as houseTgCount,
			sum(QFTG_COUNT) as housePublishCount,
			sum(DK_COUNT) as dkCount,
			${param.column} as countDate,
			<if test="param.queryDimensionColumn != null">
			${param.queryDimensionColumn} AS range,
			</if> 
			sum(ZFY_COUNT) as trueHouseCount 
		from FUN_STATISTIC_TOTLE 
		where CITY_ID = #{param.cityId} 
			<if test="param.caseType ==101">
			and CASE_TYPE = 1
			</if>
			<if test="param.caseType ==102">
			and CASE_TYPE = 2
			</if>
			and COMP_ID = #{param.compId}
			<if test="param.serchRange == 'AREA'">
				and AREA_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange == 'REG'">
				and REG_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange == 'DEPT'">
				and DEPT_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange == 'GROUP'">
				and GR_ID = #{param.serchRangeId}
			</if>
			<if test="param.serchRange == 'USER'">
				and USER_ID = #{param.serchRangeId}
			</if>
			and CREATE_TIME &gt;= #{param.startTime} and CREATE_TIME &lt;=#{param.endTime} 
		group by ${param.column}
		<if test="param.queryDimensionColumn != null">
		, ${param.queryDimensionColumn}
		</if> 
	</select>
	<select id="getTotalWorkCountRanking" resultType="java.util.Map">
		select 
		top 15
		sum(DJ_COUNT+ZYX_COUNT+SSZR_COUNT+ZP_COUNT+FP_COUNT+XG_COUNT+ZTBG_COUNT+WT_COUNT+GJ_COUNT+FK_COUNT+YSTJ_COUNT+YJ_COUNT+TPSC_COUNT+SPSC_COUNT+CKDH_COUNT+IPCALL_COUNT+WLFB_COUNT+WLSX_COUNT+DK_COUNT+CJ_COUNT+SX_COUNT+SPDK_COUNT+KFDP_COUNT+PYQ_COUNT+VR_COUNT+DKUP_COUNT+DKDOWN_COUNT+ZFY_COUNT+ZX_COUNT+QFTG_COUNT+XQZJ_COUNT+FYTG_COUNT) as workCount,
		<if test="param.dimension!=null and param.dimension == 'USER'">
			USER_ID as userId
		</if>
		<if test="param.dimension!=null and param.dimension == 'DEPT'">
			DEPT_ID as deptId
		</if>
		from FUN_STATISTIC_TOTLE
		where CITY_ID = #{param.cityId} 
		and COMP_ID = #{param.compId}
		<if test="param.serchRangeId !=null">
			and ${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;=  #{param.endTime}
		
		group by 
		<if test="param.dimension!=null and param.dimension == 'USER'">
			USER_ID
		</if>
		<if test="param.dimension!=null and param.dimension == 'DEPT'">
			DEPT_ID
		</if>
		having 	sum(DJ_COUNT+ZYX_COUNT+SSZR_COUNT+ZP_COUNT+FP_COUNT+XG_COUNT+ZTBG_COUNT+WT_COUNT+GJ_COUNT+FK_COUNT+YSTJ_COUNT+YJ_COUNT+TPSC_COUNT+SPSC_COUNT+CKDH_COUNT+IPCALL_COUNT+WLFB_COUNT+WLSX_COUNT+DK_COUNT+CJ_COUNT+SX_COUNT+SPDK_COUNT+KFDP_COUNT+PYQ_COUNT+VR_COUNT+DKUP_COUNT+DKDOWN_COUNT+ZFY_COUNT+ZX_COUNT+QFTG_COUNT+XQZJ_COUNT+FYTG_COUNT)&gt;0
		order by workCount desc
	</select>
	<select id="getDetails" resultType="java.util.Map">
		SELECT
		sum(iif(CASE_TYPE in (1,2),DJ_COUNT,0)) AS houseDjCount, 
		sum(iif(CASE_TYPE in (3,4),DJ_COUNT,0)) AS custDjCount, 
		SUM (iif (CASE_TYPE IN (1, 2),FK_COUNT,0)) AS fkCount,
		SUM (iif (CASE_TYPE IN (1, 2),DK_COUNT,0)) AS dkCount,
		FROM FUN_STATISTIC_TOTLE 
		WHERE CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;=  #{param.endTime}
		AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		<if test="param.serchRange == 'AREA'">
			AND AREA_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'REG'">
			AND REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'DEPT'">
			AND DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'GROUP'">
			AND GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'USER'">
			AND USER_ID = #{param.serchRangeId}
		</if>
		GROUP BY
		${param.admindbRptTrackqueryColumn}
	</select>
	<select id="getStatisticTotle" resultType="java.util.Map">
	SELECT
		USER_ID AS userId,
		sum(iif(CASE_TYPE in (1,2),DJ_COUNT,0)) AS houseDjCount, 
		sum(iif(CASE_TYPE in (3,4),DJ_COUNT,0)) AS custDjCount, 
		SUM (iif (CASE_TYPE IN (1, 2),FK_COUNT,0)) AS fkCount,
		SUM (iif (CASE_TYPE IN (1, 2),DK_COUNT,0)) AS dkCount
		FROM FUN_STATISTIC_TOTLE 
		WHERE CREATE_TIME &gt;= #{param.startTime} AND USER_ID&gt;0
		AND CREATE_TIME &lt;=  #{param.endTime}
		AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} 
		AND USER_ID IN
			<foreach close=")" collection="userIdList" index="index" item="list" open="(" separator=","> 
			#{list}
		</foreach>
		GROUP BY USER_ID
	</select>
	<select id="getProfitPerCapitaWorkCountOffRangeList" resultType="java.util.Map">
	SELECT
		sum(iif(CASE_TYPE in (1,2),DJ_COUNT,0)) AS houseDjCount, 
		sum(iif(CASE_TYPE in (3,4),DJ_COUNT,0)) AS custDjCount, 
		SUM(iif (CASE_TYPE IN (1, 2),FK_COUNT,0)) AS fkCount,
		SUM(iif (CASE_TYPE IN (1, 2),DK_COUNT,0)) AS dkCount
		FROM FUN_STATISTIC_TOTLE 
		WHERE CREATE_TIME &gt;= #{startTime} AND USER_ID&gt;0
		AND CREATE_TIME &lt;=  #{endTime}
		AND COMP_ID = #{compId} AND CITY_ID = #{shardCityId} 
		AND ${rangeColumn} IN
		<foreach close=")" collection="rangeList" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
		
	</select>
	
	<select id="getUcenterWorkCount" resultType="java.util.Map">
		SELECT
		<choose>
			<when test="rangeType == 2">AREA_ID </when>
			<when test="rangeType == 3">REG_ID </when>
			<when test="rangeType == 4">DEPT_ID </when>
			<when test="rangeType == 5">GR_ID </when>
			<when test="rangeType == 6">USER_ID </when>
		</choose> as rangeId,
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column}
		</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND CREATE_TIME &gt;= #{startTime}
		AND
		<choose>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="manageRangIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
		GROUP BY
		<choose>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
	</select>
	
	<select id="getUcenterWorkCountRank" resultType="java.util.Map">
		SELECT TOP 50 
		<choose>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose> as rangeId,
		<choose>
			<when test="rangeType == 5">DEPT_ID as deptId,</when>
		</choose>
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column} as count
		</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
		AND CREATE_TIME &gt;= #{startTime}
		AND
		<choose>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
		<if test="null != deptId and deptId != ''">
		and DEPT_ID = #{deptId}
		</if>
		GROUP BY
		<choose>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">DEPT_ID,GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		HAVING 
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column} &gt;0
		</foreach>
		ORDER BY count DESC
	</select>
	
	<select id="getManageDaiKanRank" resultType="java.util.Map">
		SELECT TOP 10 USER_ID userId, SUM(${countColumn}) counts
		FROM FUN_STATISTIC_TOTLE
		WHERE CITY_ID = #{cityId} AND COMP_ID=#{compId} AND CREATE_TIME &gt;= #{startTime}
		AND
		<choose>
			<when test="manageLevel == 1">COMP_ID</when>
			<when test="manageLevel == 2">AREA_ID</when>
			<when test="manageLevel == 3">REG_ID</when>
			<when test="manageLevel == 4">DEPT_ID</when>
			<when test="manageLevel == 5">GR_ID</when>
			<when test="manageLevel == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="manageRangIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
		GROUP BY USER_ID
		ORDER BY SUM(${countColumn}) DESC
	</select>
	
	<select id="getStatistic" resultMap="BaseResultRateDto">
		SELECT
			sum(iif(CASE_TYPE in (1,2),DJ_COUNT,0)) AS houseDjCountTotal, 
			sum(iif(CASE_TYPE in (3,4),DJ_COUNT,0)) AS custDjCountTotal, 
			SUM (iif (CASE_TYPE IN (1, 2),FK_COUNT,0)) AS fkCountTotal,
			SUM (iif (CASE_TYPE IN (1, 2),DK_COUNT,0)) AS dkCountTotal
		FROM FUN_STATISTIC_TOTLE 
		WHERE CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;=  #{param.endTime}
			AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} and USER_ID  = #{param.userId}
	</select>

	<select id="getModelDataList" resultType="java.util.Map">
		SELECT
		${param.range}
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} AND CREATE_TIME &gt;= #{param.dateTime}
		GROUP BY ${param.groupBy} ORDER BY SUM(IIF(CASE_TYPE=#{param.caseType1} OR CASE_TYPE=#{param.caseType2},DJ_COUNT,0))
		DESC OFFSET 0 ROW FETCH NEXT 3 ROWS ONLY
	</select>

	<select id="getAddDataList" resultType="java.util.Map">
		SELECT
		sum(DJ_COUNT) djCount,CASE_TYPE caseType,${param.range}
		FROM FUN_STATISTIC_TOTLE
		WHERE ( COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId} AND CREATE_TIME &gt;=#{param.dateTime} )
		AND ${param.groupBy} IN
		<foreach close=")" collection="param.rangeIds" item="rangeItemm" open="(" separator=",">
			#{rangeItemm}
		</foreach>
		AND CASE_TYPE IN (#{param.caseType1} ,#{param.caseType2} )
		GROUP BY ${param.groupBy},CASE_TYPE
	</select>

	<select id="getCurrentUserDataList" resultType="java.util.Map">
		SELECT
		SUM(IIF(CASE_TYPE=1,DJ_COUNT,0)) AS saleCount,SUM(IIF(CASE_TYPE=2,DJ_COUNT,0))
		AS leaseCount,SUM(IIF(CASE_TYPE=3,DJ_COUNT,0)) AS buyCount,
		SUM(IIF(CASE_TYPE=4,DJ_COUNT,0)) AS rentCount
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId} AND CREATE_TIME &gt;= #{dateTime} AND ${realRange} = #{rangeId}
	</select>
	
	<select id="getWorkCountList" resultType="com.myfun.repository.erpdb.dto.ErpFunStatisticTotleDto">
		select CONVERT(varchar(10), CREATE_TIME, 120) AS CORE_TIME,
		sum(DJ_COUNT)*10+sum(CJ_COUNT)*1+sum(TPSC_COUNT)*0+sum(SPSC_COUNT)*25+sum(FK_COUNT)*5+sum(DK_COUNT)*20+
		sum(CKDH_COUNT)*1+sum(YSTJ_COUNT)*10+sum(GJ_COUNT)*1 AS TOTAL_SCORE
		from FUN_STATISTIC_TOTLE
		where COMP_ID = #{compId} AND CITY_ID = #{shardCityId} AND CREATE_TIME &gt;= #{dateTimeStr}
		and USER_ID  = #{userId}
		group by USER_ID,CONVERT(varchar(10), CREATE_TIME, 120)
		order by USER_ID
	</select>
	
	
	<select id="getUcenterWorkCountReport" resultType="java.util.Map">
		SELECT USER_ID as userId,
        <if test="param.dateType==1">
          SUM(iif(case_type in (1,2), DGJ_COUNT, 0)) gjHouseCount,
          SUM(iif(case_type in (3,4), DGJ_COUNT, 0)) gjCustomerCount,
          SUM(VR_COUNT) vrCount,
          SUM(SPSC_COUNT) spCount,
          SUM(QFTG_COUNT) houseFafaCount,
          sum(PYQ_COUNT) pyqCount,
          sum(TPSC_COUNT) tpscCount,
          sum(CKDH_COUNT) ckdhCount
        </if>
        <if test="param.dateType==2">
          SUM(iif(case_type in (1,2), DJ_COUNT, 0)) houseAdd,
          SUM(iif(case_type in (3,4), DJ_COUNT, 0)) customerAdd,
          SUM(FK_COUNT) fkCount,
          SUM(FDK_COUNT) dkCount,
          SUM(KFDP_COUNT) kkCount,
          sum(YSTJ_COUNT) ysCount,
          SUM(CJ_COUNT) signDealCount,
          SUM(WT_COUNT)+SUM(XSWT_COUNT)+SUM(DJWT_COUNT)+SUM(BZWT_COUNT)+SUM(PTWT_COUNT) wtCount
        </if>
        from FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId}  and CITY_ID = #{param.cityId}
		<if test="null != param.areaId">
			and area_id = #{param.areaId}
		</if>
		<if test="null != param.regId">
			and REG_ID = #{param.regId}
		</if>
		<if test="param.deptId!=null">
			and DEPT_ID = #{param.deptId}
		</if>
		<if test="null != param.grId">
			and GR_ID = #{param.grId}
		</if>

        <if test="param.startTime != null and param.startTime != ''">
          AND CREATE_TIME &gt;= #{param.startTime}
        </if>
        <if test="param.endTime != null and param.endTime != ''">
          AND CREATE_TIME &lt;= #{param.endTime}
        </if>
        <if test="param.userIds != null and param.userIds.size>0">
          and USER_ID in
          <foreach collection="param.userIds" separator="," open="(" close=")" item="userId">
            #{userId}
          </foreach>
        </if>
		GROUP BY USER_ID
        ORDER BY USER_ID
	</select>
	
	<select id="getSpecifyWorkCountList" resultMap="reportResultMapDto">
		SELECT
		USER_ID,sum(DJ_COUNT) as DJ_COUNT,sum(CJ_COUNT) as CJ_COUNT,sum(TPSC_COUNT) as TPSC_COUNT,sum(SPSC_COUNT) as SPSC_COUNT,
		sum(FK_COUNT) as FK_COUNT,sum(FK_COUNT) as FK_COUNT,sum(CKDH_COUNT) as CKDH_COUNT,sum(YSTJ_COUNT) as YSTJ_COUNT,sum(GJ_COUNT) as GJ_COUNT
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId} AND CREATE_TIME = #{dateTime}
		GROUP BY USER_ID
		ORDER BY USER_ID
	</select>
	
	<select id="getSalaryWorkCountInfoByUserIds" resultMap="reportResultMapDto">
		select USER_ID,SUM(iif(CASE_TYPE =1 or CASE_TYPE =2,DJ_COUNT,0)) as HOUSE_ADD_COUNT,SUM(iif(CASE_TYPE =3 or CASE_TYPE =4,DJ_COUNT,0)) as CUST_ADD_COUNT,
		SUM(iif(CASE_TYPE=1 or CASE_TYPE=2,FK_COUNT,0)) as FANKAN_COUNT,SUM(iif(CASE_TYPE=1 or CASE_TYPE=2,DK_COUNT,0)) as DAIKAN_COUNT
		from FUN_STATISTIC_TOTLE
		where COMP_ID = #{compId} AND CITY_ID = #{shardCityId} and CREATE_TIME &gt;= #{startDate} and CREATE_TIME &lt; #{endDate}
		and USER_ID in
		<foreach collection="userIds" separator="," item="userId" open="(" close=")">
			#{userId}
		</foreach>
	</select>
 	<select id="getUcenterWorkCountMap" resultType="java.util.LinkedHashMap">
		SELECT
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID </when>
			<when test="rangeType == 3">REG_ID </when>
			<when test="rangeType == 4">DEPT_ID </when>
			<when test="rangeType == 5">GR_ID </when>
			<when test="rangeType == 6">USER_ID </when>
		</choose> as rangeId,
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column}
		</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
		AND CREATE_TIME &gt;= #{startTime} 
		<if test="endTime != null and endTime != ''">
			AND CREATE_TIME &lt;= #{endTime}
		</if>
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND USER_ID</when>
		</choose>
		<if test="rangeType != 1">
			IN
			<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
		<if test="separationConfig">
          <choose>
            <when test="partnerIdRange &lt; 0"> AND PARTNER_ID = -1 </when>
            <when test="partnerIdRange == 0"> AND PARTNER_ID in(-1,0) </when>
            <when test="partnerIdRange &gt; 0"> AND PARTNER_ID = #{partnerIdRange} </when>
          </choose>
        </if>
		GROUP BY
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
	</select>
  <select id="getUcenterWorkCountMapForOrg" resultType="java.util.LinkedHashMap">
    SELECT
    <foreach close="" collection="workColumns" item="column" open="" separator=",">
      ${column}
    </foreach>
    FROM FUN_STATISTIC_TOTLE
    WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
    AND CREATE_TIME &gt;= #{startTime}
    <if test="whereCause != null and whereCause != ''">
      AND ${whereCause}
    </if>
    <if test="endTime != null and endTime != ''">
      AND CREATE_TIME &lt;= #{endTime}
    </if>
    <if test="separationConfig">
      <choose>
        <when test="partnerIdRange &lt; 0"> AND PARTNER_ID = -1 </when>
        <when test="partnerIdRange == 0"> AND PARTNER_ID in(-1,0) </when>
        <when test="partnerIdRange &gt; 0"> AND PARTNER_ID = #{partnerIdRange} </when>
      </choose>
    </if>
  </select>
	<select id="getAppUcenterWorkCountRank" resultType="java.util.Map">
		SELECT TOP 50
		<choose>
			<when test="rangeType == 1">COMP_ID as rangeId,</when>
			<when test="rangeType == 2">AREA_ID as rangeId,</when>
			<when test="rangeType == 3">REG_ID as rangeId, AREA_ID,</when>
			<when test="rangeType == 4">DEPT_ID as rangeId, REG_ID,</when>
			<when test="rangeType == 5">GR_ID as rangeId,</when>
			<when test="rangeType == 6">USER_ID as rangeId,</when>
		</choose> 
		<if test="rangeType == 6">
			CONCAT(DEPT_ID, '_', GR_ID ) AS GR_ID,
			CONCAT(DEPT_ID, '_', GR_ID, '_', USER_ID ) AS DEPT_GR_USER,
		</if>
		ISNULL(${workColumn},0) as count
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
		AND CREATE_TIME &gt;= #{startTime} and CREATE_TIME &lt;= #{endTime}
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
        <if test="partnerIds != null and partnerIds.size >0 ">
            and PARTNER_ID in
            <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
                #{id}
            </foreach>
        </if>
		GROUP BY
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID, AREA_ID</when>
			<when test="rangeType == 4">DEPT_ID, REG_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID, CONCAT(DEPT_ID, '_', GR_ID ),CONCAT(DEPT_ID, '_', GR_ID, '_', USER_ID )</when>
		</choose>
		ORDER BY count DESC
	</select>
	
	<select id="getAppUcenterWorkCountRankByGrIds" resultType="java.util.Map">
		SELECT TOP 50
		GR_ID as rangeId, CONCAT(DEPT_ID, '_', GR_ID) AS GR_ID, CONCAT(DEPT_ID, '_', GR_ID, '_',USER_ID ) AS DEPT_GR_USER,
		ISNULL(${workColumn},0) as count
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
		AND CREATE_TIME &gt;= #{startTime} and CREATE_TIME &lt;= #{endTime}
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		GR_ID IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
        <if test="partnerIds != null and partnerIds.size >0 ">
            and PARTNER_ID in
            <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
                #{id}
            </foreach>
        </if>
		GROUP BY GR_ID , CONCAT(DEPT_ID, '_', GR_ID), CONCAT(DEPT_ID, '_', GR_ID, '_',USER_ID )
		ORDER BY count DESC
	</select>
 
 <select id="getLookTypeAppUcenterWorkCountRankByGrIds" resultType="java.util.Map">
		SELECT TOP 50
		GR_ID as rangeId, CONCAT(DEPT_ID, '_', GR_ID) AS GR_ID, CONCAT(DEPT_ID, '_', GR_ID, '_',USER_ID ) AS DEPT_GR_USER,
		ISNULL(${workColumn},0) as count
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
		AND CREATE_TIME &gt;= #{startTime} and CREATE_TIME &lt;= #{endTime}
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
         <if test="partnerIds != null and partnerIds.size >0 ">
             and PARTNER_ID in
             <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
                 #{id}
             </foreach>
         </if>
		GROUP BY GR_ID , CONCAT(DEPT_ID, '_', GR_ID), CONCAT(DEPT_ID, '_', GR_ID, '_',USER_ID )
		ORDER BY count DESC
	</select>
 
 <select id="getAppWorkCountAverageStatistic" resultType="java.util.LinkedHashMap">
		SELECT
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column}
		</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND CREATE_TIME &gt;= #{startTime}
		<choose>
			 <when test="rangeType == 5">
               <if test="deptId != null">
                 and DEPT_ID=#{deptId}
               </if>
             </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		= #{rangeId}
	</select>
	
	<!-- 掌通运营情况汇总表 -->
 <select id="getAppWorkCountAchieveStatisticsSummaryRank" resultType="java.util.Map">
		SELECT
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column}
		</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND CREATE_TIME &gt;= #{startTime}
		<choose>
			 <when test="rangeType == 5">
               <if test="deptId != null">
                 and DEPT_ID=#{deptId}
               </if>
             </when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		in
			<foreach collection="rangeIds" close=")" open="(" index="index" item="rangeId" separator=",">
				#{rangeId}
			</foreach>
		</if>
       <if test="separationConfig">
         <choose>
           <when test="partnerIdRange &lt; 0"> AND PARTNER_ID = -1 </when>
           <when test="partnerIdRange == 0"> AND PARTNER_ID in(-1,0) </when>
           <when test="partnerIdRange &gt; 0"> AND PARTNER_ID = #{partnerIdRange} </when>
         </choose>
       </if>
	</select>
  <select id="getAppWorkCountAchieveStatisticsSummaryRankForOrg" resultType="java.util.Map">
    SELECT
    <foreach close="" collection="workColumns" item="column" open="" separator=",">
      ${column}
    </foreach>
    FROM FUN_STATISTIC_TOTLE
    WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
    AND CREATE_TIME &gt;= #{startTime}
    <if test="null != endTime and endTime != ''">
      AND CREATE_TIME &lt; #{endTime}
    </if>
    <if test="whereCause != null and whereCause != ''">
      AND ${whereCause}
    </if>
    <if test="separationConfig">
      <choose>
        <when test="partnerIdRange &lt; 0"> AND PARTNER_ID = -1 </when>
        <when test="partnerIdRange == 0"> AND PARTNER_ID in(-1,0) </when>
        <when test="partnerIdRange &gt; 0"> AND PARTNER_ID = #{partnerIdRange} </when>
      </choose>
    </if>
  </select>
	<!-- 网站运营情况汇总表 -->
	<select id="getWebWorkCountAchieveStatisticsSummaryRank" resultType="java.util.Map">
		SELECT
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column}
		</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND CREATE_TIME &gt;= #{startTime}
		<!-- 下面的条件基本上不会进了 -->
		<choose>
			 <when test="rangeType == 5">
               <if test="deptId != null">
                 and DEPT_ID=#{deptId}
               </if>
             </when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		IN
			<foreach collection="rangeIds" close=")" open="(" index="index" item="rangeId" separator=",">
				#{rangeId}
			</foreach>
		</if>
	</select>
	
	<!-- 掌通运营情况排行榜-->
	 <select id="getAppWorkCountAchieveStatisticsChooseRank" resultType="java.util.Map">
		SELECT
		<foreach close="" collection="workColumns" item="column" open="" separator=",">
			${column}
		</foreach>
		<if test="lookType == 2">
			,AREA_ID
		</if>
		<if test="lookType == 3">
			,REG_ID
		</if>
		<if test="lookType == 4">
			,DEPT_ID
		</if>
		<if test="lookType == 5">
			,GR_ID,CONCAT(DEPT_ID, '_', GR_ID) AS DEPT_GR
		</if>
		<if test="lookType == 6">
			,USER_ID
		</if>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND CREATE_TIME &gt;= #{startTime} AND CREATE_TIME &lt;= #{endTime}
		<if test="rangeType == 2 or rangeType == 3 or rangeType == 4">
			<choose>
				<when test="rangeType == 2">AND AREA_ID</when>
				<when test="rangeType == 3">AND REG_ID</when>
				<when test="rangeType == 4">AND DEPT_ID</when>
			</choose>
			in
			<foreach collection="rangeIds" close=")" open="(" index="index" item="rangeId" separator=",">
				#{rangeId}
			</foreach>
		</if>
		<choose>
			<when test="isFjdFlag">
				<if test="rangeType == 6">
					AND USER_ID IN 
					<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
						#{rangeId}
					</foreach>
				</if>
			</when>
			<otherwise>
				<if test="rangeType == 5 or rangeType == 6">
					and DEPT_ID = #{selfDeptId}
				</if>
			</otherwise>
		</choose>
		GROUP BY
		<if test="lookType == 2">
			AREA_ID
		</if>
		<if test="lookType == 3">
			REG_ID
		</if>
		<if test="lookType == 4">
			DEPT_ID
		</if>
		<if test="lookType == 5">
			GR_ID , CONCAT(DEPT_ID, '_', GR_ID)
		</if>
		<if test="lookType == 6">
			USER_ID
		</if>
		ORDER BY
		<if test="2 == assessmentType"> houseAdd</if>
		<if test="3 == assessmentType"> customerAdd</if>
		<if test="4 == assessmentType"> dkCount</if>
		<if test="5 == assessmentType"> ystjCount</if>
		<if test="6 == assessmentType"> fkCount</if>
		DESC
	</select>

  <select id="getAppWorkCountAchieveStatisticsChooseRankForOrg" resultType="java.util.Map">
    SELECT
    <foreach close="" collection="workColumns" item="column" open="" separator=",">
      ${column}
    </foreach>
    ,(case when ${groupByColumn} is null then 0 else ${groupByColumn} end) as rangeId
    FROM FUN_STATISTIC_TOTLE
    WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
    AND CREATE_TIME &gt;= #{startTime} AND CREATE_TIME &lt;= #{endTime}
    <if test="whereCause != null and whereCause != ''">
      AND ${whereCause}
    </if>
    <if test="partnerIds != null and partnerIds.size >0 ">
      and PARTNER_ID in
      <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
        #{id}
      </foreach>
    </if>
    GROUP BY
    ${groupByColumn}
    ORDER BY num  DESC
  </select>
	<select id="getStatisticsRankCountTotal" resultType="java.util.Map">
		SELECT
			<foreach close="" collection="workColumns" item="column" open="" separator=",">
				${column}
			</foreach>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND CREATE_TIME &gt;= #{startTime}
		<if test="null != endTime and endTime != ''">
			AND CREATE_TIME &lt;= #{endTime}
		</if>
		<choose>
			<when test="lookType == 2"> AND AREA_ID</when>
			<when test="lookType == 3"> AND REG_ID</when>
			<when test="lookType == 4"> AND DEPT_ID</when>
			<when test="lookType == 5"> AND GR_ID</when>
			<when test="lookType == 6"> AND USER_ID</when>
		</choose> = #{lookTypeId}
		<if test="lookType == 5">
			AND DEPT_ID = 
			<choose>
				<when test="deptId != null">#{deptId}</when>
				<otherwise>#{selfDeptId}</otherwise>
			</choose>
		</if>
      <if test="separationConfig">
        <choose>
          <when test="partnerIdRange &lt; 0"> AND PARTNER_ID = -1 </when>
          <when test="partnerIdRange == 0"> AND PARTNER_ID in(-1,0) </when>
          <when test="partnerIdRange &gt; 0"> AND PARTNER_ID = #{partnerIdRange} </when>
        </choose>
      </if>
	</select>
	
	<select id="getAppUcenterWorkCountRankByType" resultType="java.util.Map">
		SELECT TOP 50
			ISNULL(${workColumn},0) as count
		<if test="lookType == 2">
			,AREA_ID
		</if>
		<if test="lookType == 3">
			,REG_ID, AREA_ID
		</if>
		<if test="lookType == 4">
			,DEPT_ID, REG_ID
		</if>
		<if test="lookType == 5">
			,DEPT_ID,GR_ID rangId, CONCAT(DEPT_ID, '_', GR_ID ) AS GR_ID
		</if>
		<if test="lookType == 6">
			,USER_ID
		</if>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
		AND CREATE_TIME &gt;= #{startTime} and CREATE_TIME &lt;= #{endTime}
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
        <if test="partnerIds != null and partnerIds.size >0 ">
            and PARTNER_ID in
            <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
                #{id}
            </foreach>
        </if>
		GROUP BY
		<if test="lookType == 2">
			AREA_ID
		</if>
		<if test="lookType == 3">
			REG_ID , AREA_ID
		</if>
		<if test="lookType == 4">
			DEPT_ID, REG_ID
		</if>
		<if test="lookType == 5">
			DEPT_ID,GR_ID ,CONCAT(DEPT_ID, '_', GR_ID )
		</if>
		<if test="lookType == 6">
			USER_ID
		</if>
		ORDER BY count DESC
	</select>

  <select id="getAppUcenterWorkCountRankByTypeForOrg" resultType="java.util.Map">
    SELECT TOP 50
    ISNULL(${workColumn},0) as count,
    ${groupByColumn} as rangeId
    FROM FUN_STATISTIC_TOTLE
    WHERE COMP_ID = #{compId} AND CITY_ID = #{cityId}
    AND CREATE_TIME &gt;= #{startTime} and CREATE_TIME &lt;= #{endTime}
    <if test="partnerIds != null and partnerIds.size >0 ">
      and PARTNER_ID in
      <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
        #{id}
      </foreach>
    </if>
    <if test="whereCause != null and whereCause != ''">
      AND ${whereCause}
    </if>
    GROUP BY
    ${groupByColumn}
    ORDER BY count DESC
  </select>
  <select id="getSalaryWorkCountInfoByUserIds2" resultMap="reportResultMapDto">
    select USER_ID,SUM(iif(CASE_TYPE =1 or CASE_TYPE =2,DJ_COUNT,0)) as HOUSE_ADD_COUNT,SUM(iif(CASE_TYPE =3 or CASE_TYPE =4,DJ_COUNT,0)) as CUST_ADD_COUNT,
    SUM(iif(CASE_TYPE=1 or CASE_TYPE=2,FK_COUNT,0)) as FANKAN_COUNT,SUM(iif(CASE_TYPE=1 or CASE_TYPE=2,DK_COUNT,0)) as DAIKAN_COUNT
    from FUN_STATISTIC_TOTLE
    where  ${rangeColumn} = #{range}
     and  COMP_ID = #{compId}  and CREATE_TIME &gt;= #{startDate} and CREATE_TIME &lt; #{endDate}
  </select>
</mapper>