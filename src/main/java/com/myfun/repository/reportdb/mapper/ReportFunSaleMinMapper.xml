<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.reportdb.dao.ReportFunSaleMinMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.reportdb.po.ReportFunSaleMin">
    <!--@mbggenerated-->
    <id column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <id column="SALE_ID" jdbcType="INTEGER" property="saleId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CREATION_TIME" jdbcType="VARCHAR" property="creationTime" />
    <result column="LAST_SYNC_TIME" jdbcType="VARCHAR" property="lastSyncTime" />
    <result column="SALE_STATUS" jdbcType="INTEGER" property="saleStatus" />
    <result column="SALE_ROOM" jdbcType="TINYINT" property="saleRoom" />
    <result column="SECTION_ID" jdbcType="INTEGER" property="sectionId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="SALE_REG" jdbcType="INTEGER" property="saleReg" />
    <result column="SALE_USEAGE" jdbcType="TINYINT" property="saleUseage" />
    <result column="SALE_TYPE" jdbcType="TINYINT" property="saleType" />
    <result column="UNIT_FLOOR" jdbcType="VARCHAR" property="unitFloor" />
    <result column="SALE_KEY" jdbcType="BIT" property="saleKey" />
    <result column="SALE_EXPLRTH" jdbcType="BIT" property="saleExplrth" />
    <result column="TRUE_FLAG" jdbcType="TINYINT" property="trueFlag" />
    <result column="SALE_MAP" jdbcType="INTEGER" property="saleMap" />
    <result column="VIDEO_NUM" jdbcType="INTEGER" property="videoNum" />
    <result column="PANORAMA_MAP" jdbcType="INTEGER" property="panoramaMap" />
    <result column="HAS_FUNKAN" jdbcType="TINYINT" property="hasFunkan" />
    <result column="SALE_AREA" jdbcType="NUMERIC" property="saleArea" />
    <result column="SALE_TOTAL_PRICE" jdbcType="NUMERIC" property="saleTotalPrice" />
    <result column="SALE_SOURCE" jdbcType="TINYINT" property="saleSource" />
    <result column="HAVE_TAG_FLAG" jdbcType="TINYINT" property="haveTagFlag" />
    <result column="HAVE_LAYOUT_FLAG" jdbcType="TINYINT" property="haveLayoutFlag" />
    <result column="SALE_CONSIGN" jdbcType="TINYINT" property="saleConsign" />
    <result column="REPEAT_FLAG" jdbcType="TINYINT" property="repeatFlag" />
    <result column="SALE_PUBLISH" jdbcType="BIT" property="salePublish" />
    <result column="SALE_LEVEL" jdbcType="TINYINT" property="saleLevel" />
    <result column="PLATE_TYPE" jdbcType="TINYINT" property="plateType" />
    <result column="CITY_SHARE_FLAG" jdbcType="TINYINT" property="cityShareFlag" />
    <result column="LAST_DKAN_TIME" jdbcType="TIMESTAMP" property="lastDkanTime" />
    <result column="USER_LEVEL" jdbcType="INTEGER" property="userLevel" />
    <result column="TISSUE_LINE" jdbcType="VARCHAR" property="tissueLine" />
    <result column="PARTNER_ID" jdbcType="INTEGER" property="partnerId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    CITY_ID, SALE_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, 
    CREATION_TIME, LAST_SYNC_TIME, SALE_STATUS, SALE_ROOM, SECTION_ID, BUILD_ID, SALE_REG, 
    SALE_USEAGE, SALE_TYPE, UNIT_FLOOR, SALE_KEY, SALE_EXPLRTH, TRUE_FLAG, SALE_MAP, 
    VIDEO_NUM, PANORAMA_MAP, HAS_FUNKAN, SALE_AREA, SALE_TOTAL_PRICE, SALE_SOURCE, HAVE_TAG_FLAG, 
    HAVE_LAYOUT_FLAG, SALE_CONSIGN, REPEAT_FLAG, SALE_PUBLISH, SALE_LEVEL, PLATE_TYPE, 
    CITY_SHARE_FLAG, LAST_DKAN_TIME, USER_LEVEL, TISSUE_LINE, PARTNER_ID
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMinExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_SALE_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_SALE_MIN
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and SALE_ID = #{saleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    <!--@mbggenerated-->
    delete from FUN_SALE_MIN
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and SALE_ID = #{saleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMinExample">
    <!--@mbggenerated-->
    delete from FUN_SALE_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMin">
    <!--@mbggenerated-->
    insert into FUN_SALE_MIN (CITY_ID, SALE_ID, COMP_ID, 
      AREA_ID, REG_ID, DEPT_ID, 
      GR_ID, USER_ID, ARCHIVE_ID, 
      CREATION_TIME, LAST_SYNC_TIME, SALE_STATUS, 
      SALE_ROOM, SECTION_ID, BUILD_ID, 
      SALE_REG, SALE_USEAGE, SALE_TYPE, 
      UNIT_FLOOR, SALE_KEY, SALE_EXPLRTH, 
      TRUE_FLAG, SALE_MAP, VIDEO_NUM, 
      PANORAMA_MAP, HAS_FUNKAN, SALE_AREA, 
      SALE_TOTAL_PRICE, SALE_SOURCE, HAVE_TAG_FLAG, 
      HAVE_LAYOUT_FLAG, SALE_CONSIGN, REPEAT_FLAG, 
      SALE_PUBLISH, SALE_LEVEL, PLATE_TYPE, 
      CITY_SHARE_FLAG, LAST_DKAN_TIME, USER_LEVEL, 
      TISSUE_LINE, PARTNER_ID)
    values (#{cityId,jdbcType=INTEGER}, #{saleId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, 
      #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, 
      #{creationTime,jdbcType=VARCHAR}, #{lastSyncTime,jdbcType=VARCHAR}, #{saleStatus,jdbcType=INTEGER}, 
      #{saleRoom,jdbcType=TINYINT}, #{sectionId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, 
      #{saleReg,jdbcType=INTEGER}, #{saleUseage,jdbcType=TINYINT}, #{saleType,jdbcType=TINYINT}, 
      #{unitFloor,jdbcType=VARCHAR}, #{saleKey,jdbcType=BIT}, #{saleExplrth,jdbcType=BIT}, 
      #{trueFlag,jdbcType=TINYINT}, #{saleMap,jdbcType=INTEGER}, #{videoNum,jdbcType=INTEGER}, 
      #{panoramaMap,jdbcType=INTEGER}, #{hasFunkan,jdbcType=TINYINT}, #{saleArea,jdbcType=NUMERIC}, 
      #{saleTotalPrice,jdbcType=NUMERIC}, #{saleSource,jdbcType=TINYINT}, #{haveTagFlag,jdbcType=TINYINT}, 
      #{haveLayoutFlag,jdbcType=TINYINT}, #{saleConsign,jdbcType=TINYINT}, #{repeatFlag,jdbcType=TINYINT}, 
      #{salePublish,jdbcType=BIT}, #{saleLevel,jdbcType=TINYINT}, #{plateType,jdbcType=TINYINT}, 
      #{cityShareFlag,jdbcType=TINYINT}, #{lastDkanTime,jdbcType=TIMESTAMP}, #{userLevel,jdbcType=INTEGER}, 
      #{tissueLine,jdbcType=VARCHAR}, #{partnerId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMin">
    <!--@mbggenerated-->
    insert into FUN_SALE_MIN
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="saleId != null">
        SALE_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="lastSyncTime != null">
        LAST_SYNC_TIME,
      </if>
      <if test="saleStatus != null">
        SALE_STATUS,
      </if>
      <if test="saleRoom != null">
        SALE_ROOM,
      </if>
      <if test="sectionId != null">
        SECTION_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="saleReg != null">
        SALE_REG,
      </if>
      <if test="saleUseage != null">
        SALE_USEAGE,
      </if>
      <if test="saleType != null">
        SALE_TYPE,
      </if>
      <if test="unitFloor != null">
        UNIT_FLOOR,
      </if>
      <if test="saleKey != null">
        SALE_KEY,
      </if>
      <if test="saleExplrth != null">
        SALE_EXPLRTH,
      </if>
      <if test="trueFlag != null">
        TRUE_FLAG,
      </if>
      <if test="saleMap != null">
        SALE_MAP,
      </if>
      <if test="videoNum != null">
        VIDEO_NUM,
      </if>
      <if test="panoramaMap != null">
        PANORAMA_MAP,
      </if>
      <if test="hasFunkan != null">
        HAS_FUNKAN,
      </if>
      <if test="saleArea != null">
        SALE_AREA,
      </if>
      <if test="saleTotalPrice != null">
        SALE_TOTAL_PRICE,
      </if>
      <if test="saleSource != null">
        SALE_SOURCE,
      </if>
      <if test="haveTagFlag != null">
        HAVE_TAG_FLAG,
      </if>
      <if test="haveLayoutFlag != null">
        HAVE_LAYOUT_FLAG,
      </if>
      <if test="saleConsign != null">
        SALE_CONSIGN,
      </if>
      <if test="repeatFlag != null">
        REPEAT_FLAG,
      </if>
      <if test="salePublish != null">
        SALE_PUBLISH,
      </if>
      <if test="saleLevel != null">
        SALE_LEVEL,
      </if>
      <if test="plateType != null">
        PLATE_TYPE,
      </if>
      <if test="cityShareFlag != null">
        CITY_SHARE_FLAG,
      </if>
      <if test="lastDkanTime != null">
        LAST_DKAN_TIME,
      </if>
      <if test="userLevel != null">
        USER_LEVEL,
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE,
      </if>
      <if test="partnerId != null">
        PARTNER_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="saleId != null">
        #{saleId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTime != null">
        #{lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="saleStatus != null">
        #{saleStatus,jdbcType=INTEGER},
      </if>
      <if test="saleRoom != null">
        #{saleRoom,jdbcType=TINYINT},
      </if>
      <if test="sectionId != null">
        #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="saleReg != null">
        #{saleReg,jdbcType=INTEGER},
      </if>
      <if test="saleUseage != null">
        #{saleUseage,jdbcType=TINYINT},
      </if>
      <if test="saleType != null">
        #{saleType,jdbcType=TINYINT},
      </if>
      <if test="unitFloor != null">
        #{unitFloor,jdbcType=VARCHAR},
      </if>
      <if test="saleKey != null">
        #{saleKey,jdbcType=BIT},
      </if>
      <if test="saleExplrth != null">
        #{saleExplrth,jdbcType=BIT},
      </if>
      <if test="trueFlag != null">
        #{trueFlag,jdbcType=TINYINT},
      </if>
      <if test="saleMap != null">
        #{saleMap,jdbcType=INTEGER},
      </if>
      <if test="videoNum != null">
        #{videoNum,jdbcType=INTEGER},
      </if>
      <if test="panoramaMap != null">
        #{panoramaMap,jdbcType=INTEGER},
      </if>
      <if test="hasFunkan != null">
        #{hasFunkan,jdbcType=TINYINT},
      </if>
      <if test="saleArea != null">
        #{saleArea,jdbcType=NUMERIC},
      </if>
      <if test="saleTotalPrice != null">
        #{saleTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="saleSource != null">
        #{saleSource,jdbcType=TINYINT},
      </if>
      <if test="haveTagFlag != null">
        #{haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="haveLayoutFlag != null">
        #{haveLayoutFlag,jdbcType=TINYINT},
      </if>
      <if test="saleConsign != null">
        #{saleConsign,jdbcType=TINYINT},
      </if>
      <if test="repeatFlag != null">
        #{repeatFlag,jdbcType=TINYINT},
      </if>
      <if test="salePublish != null">
        #{salePublish,jdbcType=BIT},
      </if>
      <if test="saleLevel != null">
        #{saleLevel,jdbcType=TINYINT},
      </if>
      <if test="plateType != null">
        #{plateType,jdbcType=TINYINT},
      </if>
      <if test="cityShareFlag != null">
        #{cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="lastDkanTime != null">
        #{lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userLevel != null">
        #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        #{partnerId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMinExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_SALE_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_SALE_MIN
    <set>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.saleId != null">
        SALE_ID = #{record.saleId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=VARCHAR},
      </if>
      <if test="record.lastSyncTime != null">
        LAST_SYNC_TIME = #{record.lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="record.saleStatus != null">
        SALE_STATUS = #{record.saleStatus,jdbcType=INTEGER},
      </if>
      <if test="record.saleRoom != null">
        SALE_ROOM = #{record.saleRoom,jdbcType=TINYINT},
      </if>
      <if test="record.sectionId != null">
        SECTION_ID = #{record.sectionId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.saleReg != null">
        SALE_REG = #{record.saleReg,jdbcType=INTEGER},
      </if>
      <if test="record.saleUseage != null">
        SALE_USEAGE = #{record.saleUseage,jdbcType=TINYINT},
      </if>
      <if test="record.saleType != null">
        SALE_TYPE = #{record.saleType,jdbcType=TINYINT},
      </if>
      <if test="record.unitFloor != null">
        UNIT_FLOOR = #{record.unitFloor,jdbcType=VARCHAR},
      </if>
      <if test="record.saleKey != null">
        SALE_KEY = #{record.saleKey,jdbcType=BIT},
      </if>
      <if test="record.saleExplrth != null">
        SALE_EXPLRTH = #{record.saleExplrth,jdbcType=BIT},
      </if>
      <if test="record.trueFlag != null">
        TRUE_FLAG = #{record.trueFlag,jdbcType=TINYINT},
      </if>
      <if test="record.saleMap != null">
        SALE_MAP = #{record.saleMap,jdbcType=INTEGER},
      </if>
      <if test="record.videoNum != null">
        VIDEO_NUM = #{record.videoNum,jdbcType=INTEGER},
      </if>
      <if test="record.panoramaMap != null">
        PANORAMA_MAP = #{record.panoramaMap,jdbcType=INTEGER},
      </if>
      <if test="record.hasFunkan != null">
        HAS_FUNKAN = #{record.hasFunkan,jdbcType=TINYINT},
      </if>
      <if test="record.saleArea != null">
        SALE_AREA = #{record.saleArea,jdbcType=NUMERIC},
      </if>
      <if test="record.saleTotalPrice != null">
        SALE_TOTAL_PRICE = #{record.saleTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.saleSource != null">
        SALE_SOURCE = #{record.saleSource,jdbcType=TINYINT},
      </if>
      <if test="record.haveTagFlag != null">
        HAVE_TAG_FLAG = #{record.haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="record.haveLayoutFlag != null">
        HAVE_LAYOUT_FLAG = #{record.haveLayoutFlag,jdbcType=TINYINT},
      </if>
      <if test="record.saleConsign != null">
        SALE_CONSIGN = #{record.saleConsign,jdbcType=TINYINT},
      </if>
      <if test="record.repeatFlag != null">
        REPEAT_FLAG = #{record.repeatFlag,jdbcType=TINYINT},
      </if>
      <if test="record.salePublish != null">
        SALE_PUBLISH = #{record.salePublish,jdbcType=BIT},
      </if>
      <if test="record.saleLevel != null">
        SALE_LEVEL = #{record.saleLevel,jdbcType=TINYINT},
      </if>
      <if test="record.plateType != null">
        PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      </if>
      <if test="record.cityShareFlag != null">
        CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="record.lastDkanTime != null">
        LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userLevel != null">
        USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      </if>
      <if test="record.tissueLine != null">
        TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="record.partnerId != null">
        PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_SALE_MIN
    set CITY_ID = #{record.cityId,jdbcType=INTEGER},
      SALE_ID = #{record.saleId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=VARCHAR},
      LAST_SYNC_TIME = #{record.lastSyncTime,jdbcType=VARCHAR},
      SALE_STATUS = #{record.saleStatus,jdbcType=INTEGER},
      SALE_ROOM = #{record.saleRoom,jdbcType=TINYINT},
      SECTION_ID = #{record.sectionId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      SALE_REG = #{record.saleReg,jdbcType=INTEGER},
      SALE_USEAGE = #{record.saleUseage,jdbcType=TINYINT},
      SALE_TYPE = #{record.saleType,jdbcType=TINYINT},
      UNIT_FLOOR = #{record.unitFloor,jdbcType=VARCHAR},
      SALE_KEY = #{record.saleKey,jdbcType=BIT},
      SALE_EXPLRTH = #{record.saleExplrth,jdbcType=BIT},
      TRUE_FLAG = #{record.trueFlag,jdbcType=TINYINT},
      SALE_MAP = #{record.saleMap,jdbcType=INTEGER},
      VIDEO_NUM = #{record.videoNum,jdbcType=INTEGER},
      PANORAMA_MAP = #{record.panoramaMap,jdbcType=INTEGER},
      HAS_FUNKAN = #{record.hasFunkan,jdbcType=TINYINT},
      SALE_AREA = #{record.saleArea,jdbcType=NUMERIC},
      SALE_TOTAL_PRICE = #{record.saleTotalPrice,jdbcType=NUMERIC},
      SALE_SOURCE = #{record.saleSource,jdbcType=TINYINT},
      HAVE_TAG_FLAG = #{record.haveTagFlag,jdbcType=TINYINT},
      HAVE_LAYOUT_FLAG = #{record.haveLayoutFlag,jdbcType=TINYINT},
      SALE_CONSIGN = #{record.saleConsign,jdbcType=TINYINT},
      REPEAT_FLAG = #{record.repeatFlag,jdbcType=TINYINT},
      SALE_PUBLISH = #{record.salePublish,jdbcType=BIT},
      SALE_LEVEL = #{record.saleLevel,jdbcType=TINYINT},
      PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{record.partnerId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMin">
    <!--@mbggenerated-->
    update FUN_SALE_MIN
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTime != null">
        LAST_SYNC_TIME = #{lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="saleStatus != null">
        SALE_STATUS = #{saleStatus,jdbcType=INTEGER},
      </if>
      <if test="saleRoom != null">
        SALE_ROOM = #{saleRoom,jdbcType=TINYINT},
      </if>
      <if test="sectionId != null">
        SECTION_ID = #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="saleReg != null">
        SALE_REG = #{saleReg,jdbcType=INTEGER},
      </if>
      <if test="saleUseage != null">
        SALE_USEAGE = #{saleUseage,jdbcType=TINYINT},
      </if>
      <if test="saleType != null">
        SALE_TYPE = #{saleType,jdbcType=TINYINT},
      </if>
      <if test="unitFloor != null">
        UNIT_FLOOR = #{unitFloor,jdbcType=VARCHAR},
      </if>
      <if test="saleKey != null">
        SALE_KEY = #{saleKey,jdbcType=BIT},
      </if>
      <if test="saleExplrth != null">
        SALE_EXPLRTH = #{saleExplrth,jdbcType=BIT},
      </if>
      <if test="trueFlag != null">
        TRUE_FLAG = #{trueFlag,jdbcType=TINYINT},
      </if>
      <if test="saleMap != null">
        SALE_MAP = #{saleMap,jdbcType=INTEGER},
      </if>
      <if test="videoNum != null">
        VIDEO_NUM = #{videoNum,jdbcType=INTEGER},
      </if>
      <if test="panoramaMap != null">
        PANORAMA_MAP = #{panoramaMap,jdbcType=INTEGER},
      </if>
      <if test="hasFunkan != null">
        HAS_FUNKAN = #{hasFunkan,jdbcType=TINYINT},
      </if>
      <if test="saleArea != null">
        SALE_AREA = #{saleArea,jdbcType=NUMERIC},
      </if>
      <if test="saleTotalPrice != null">
        SALE_TOTAL_PRICE = #{saleTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="saleSource != null">
        SALE_SOURCE = #{saleSource,jdbcType=TINYINT},
      </if>
      <if test="haveTagFlag != null">
        HAVE_TAG_FLAG = #{haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="haveLayoutFlag != null">
        HAVE_LAYOUT_FLAG = #{haveLayoutFlag,jdbcType=TINYINT},
      </if>
      <if test="saleConsign != null">
        SALE_CONSIGN = #{saleConsign,jdbcType=TINYINT},
      </if>
      <if test="repeatFlag != null">
        REPEAT_FLAG = #{repeatFlag,jdbcType=TINYINT},
      </if>
      <if test="salePublish != null">
        SALE_PUBLISH = #{salePublish,jdbcType=BIT},
      </if>
      <if test="saleLevel != null">
        SALE_LEVEL = #{saleLevel,jdbcType=TINYINT},
      </if>
      <if test="plateType != null">
        PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      </if>
      <if test="cityShareFlag != null">
        CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="lastDkanTime != null">
        LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userLevel != null">
        USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      </if>
    </set>
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and SALE_ID = #{saleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.reportdb.po.ReportFunSaleMin">
    <!--@mbggenerated-->
    update FUN_SALE_MIN
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{creationTime,jdbcType=VARCHAR},
      LAST_SYNC_TIME = #{lastSyncTime,jdbcType=VARCHAR},
      SALE_STATUS = #{saleStatus,jdbcType=INTEGER},
      SALE_ROOM = #{saleRoom,jdbcType=TINYINT},
      SECTION_ID = #{sectionId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      SALE_REG = #{saleReg,jdbcType=INTEGER},
      SALE_USEAGE = #{saleUseage,jdbcType=TINYINT},
      SALE_TYPE = #{saleType,jdbcType=TINYINT},
      UNIT_FLOOR = #{unitFloor,jdbcType=VARCHAR},
      SALE_KEY = #{saleKey,jdbcType=BIT},
      SALE_EXPLRTH = #{saleExplrth,jdbcType=BIT},
      TRUE_FLAG = #{trueFlag,jdbcType=TINYINT},
      SALE_MAP = #{saleMap,jdbcType=INTEGER},
      VIDEO_NUM = #{videoNum,jdbcType=INTEGER},
      PANORAMA_MAP = #{panoramaMap,jdbcType=INTEGER},
      HAS_FUNKAN = #{hasFunkan,jdbcType=TINYINT},
      SALE_AREA = #{saleArea,jdbcType=NUMERIC},
      SALE_TOTAL_PRICE = #{saleTotalPrice,jdbcType=NUMERIC},
      SALE_SOURCE = #{saleSource,jdbcType=TINYINT},
      HAVE_TAG_FLAG = #{haveTagFlag,jdbcType=TINYINT},
      HAVE_LAYOUT_FLAG = #{haveLayoutFlag,jdbcType=TINYINT},
      SALE_CONSIGN = #{saleConsign,jdbcType=TINYINT},
      REPEAT_FLAG = #{repeatFlag,jdbcType=TINYINT},
      SALE_PUBLISH = #{salePublish,jdbcType=BIT},
      SALE_LEVEL = #{saleLevel,jdbcType=TINYINT},
      PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{partnerId,jdbcType=INTEGER}
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and SALE_ID = #{saleId,jdbcType=INTEGER}
  </update>
  
  <select id="getFlowAnalysisCountList" resultType="java.util.Map">
    select SALE_STATUS AS caseStatus,COUNT(1) AS statusCount,DATEPART(MONTH,CREATION_TIME) AS monthofyear
    from FUN_SALE_MIN
    <where>
      AND COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
      AND CREATION_TIME &gt;= #{startTime}
      AND CREATION_TIME &lt;= #{endTime}
      <if test="null != areaId">
		AND AREA_ID = #{areaId}
      </if>
      <if test="null != regId">
		AND REG_ID = #{regId}
      </if>
      <if test="null != deptId">
		AND DEPT_ID = #{deptId}
      </if>
      <if test="null != userId">
		AND USER_ID = #{userId}
      </if>
    </where>
    GROUP BY SALE_STATUS,DATEPART(MONTH, CREATION_TIME) 
    ORDER BY SALE_STATUS ASC,DATEPART(MONTH, CREATION_TIME) ASC
    </select>
    
    <select id="getHouseBottomInfoForStatus" resultType="java.util.Map">
    select 	COUNT (*) AS counts,
	SUM (IIF(SALE_KEY = '1', 1, 0)) AS keyCount,
	SUM (IIF(SALE_EXPLRTH = 1, 1, 0)) AS explrthCount,
	SUM (IIF(SALE_PUBLISH = '1', 1, 0)) AS publishCount,
	SUM (IIF(TRUE_FLAG = '1', 1, 0)) AS trueCount,
	SUM (IIF(SALE_MAP &gt; '0', 1, 0)) AS photoCount,
	SUM (IIF(VIDEO_NUM &gt; '0', 1, 0)) AS voidoCount,
	SUM (IIF(PANORAMA_MAP &gt; '0', 1, 0)) AS panoramaCount,
	SUM (IIF(SALE_STATUS = '4', 1, 0)) AS scheduleCount
    from FUN_SALE_MIN
    <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    </select>
    
    <select id="getHouseBottomInfoForSourceConsign" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SALE_CONSIGN as houseConsign
    from FUN_SALE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SALE_CONSIGN 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForSourceLevel" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SALE_LEVEL as houseLevel
    from FUN_SALE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SALE_LEVEL
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForSourceFitment" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SALE_FITMENT as houseFitment
    from FUN_SALE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SALE_FITMENT 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForRegionRound" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SALE_ROUND as houseRound
    from FUN_SALE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SALE_ROUND 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForRegionSection" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SECTION_ID as sectionId
    from FUN_SALE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SECTION_ID 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForUseage" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SALE_USEAGE as houseUseage,
	SALE_TYPE as houseType
    from FUN_SALE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlSaleStatusIn">
		AND SALE_STATUS IN
		<foreach close=")" collection="param.sqlSaleStatusIn" index="index" item="saleStatus" open="(" separator=",">
    	#{saleStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SALE_USEAGE,SALE_TYPE 
    ORDER BY SALE_USEAGE,counts desc
    </select>
    
    <select id="getHouseCustStatusData" resultType="java.util.Map">
		select 
		sum(iif(CREATION_TIME &gt;= #{weekTime},1,0)) as xzHouseWeek,
		sum(1) as xzHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=4,1,0)) as ydHouseWeek,
		sum(iif(SALE_STATUS=4,1,0)) as ydHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=2,1,0)) as fpHouseWeek,
		sum(iif(SALE_STATUS=2,1,0)) as fpHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=5,1,0)) as ncjHouseWeek,
		sum(iif(SALE_STATUS=5,1,0)) as ncjHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=6,1,0)) as wcjHouseWeek,
		sum(iif(SALE_STATUS=6,1,0)) as wcjHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=7,1,0)) as zxhouseWeek,
		sum(iif(SALE_STATUS=7,1,0)) as zxhouseMonth
		from FUN_SALE_MIN 
		where CREATION_TIME &gt;= #{monthTime} and COMP_ID = #{compId} 
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		AND CITY_ID = #{shardCityId}
    </select>
    
    <select id="countAvailableHouse" resultType="java.lang.Integer">
		select count(1) as houseCount
		from FUN_SALE_MIN
		where SALE_STATUS &lt;= 4 and COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
	</select>
	
	<select id="countByBuildIds" resultType="java.util.Map">
		select top 15 count(1) buildHouseCount,BUILD_ID buildId 
		from FUN_SALE_MIN
		where BUILD_ID IN
		<foreach close=")" collection="param.buildIds" index="index" item="buildId" open="(" separator=",">
			#{buildId}
		</foreach>
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		GROUP BY BUILD_ID
	</select>
	
	<select id="countBySectionIds" resultType="java.util.Map">
		select top 15 count(1) sectionHouseCount, SECTION_ID sectionId from
		FUN_SALE_MIN
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		
		GROUP BY SECTION_ID
		order by sectionHouseCount desc
	</select>
	
	<select id="getStoreDataAnalysis" resultType="java.util.Map">
		SELECT
		<if test="param.topCount">TOP ${param.topCount}</if>
		COUNT(1) AS counts,
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionColumnSql} AS dim
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" /> AS dim
			</otherwise>
		</choose>
		FROM FUN_SALE_MIN
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.regionId != null and param.regionId != ''">AND SALE_REG = #{param.regionId}</if><!-- 行政区域 -->
		<if test="param.sectionId != null and param.sectionId != ''">AND SECTION_ID = #{param.sectionId}</if><!-- 商圈 -->
		<if test="param.userId != null and param.userId != ''">AND USER_ID = #{param.userId}</if>
		GROUP BY 
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionGroupSql}
			</when>
			<when test="param.queryDim == 'SECTION'"><!-- 商圈 -->
				SALE_REG,SECTION_ID
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" />
			</otherwise>
		</choose>
		having COUNT(1) &gt; 0
		ORDER BY COUNT(1) DESC
	</select>
	
	<select id="getStoreDataCount" resultType="java.lang.Integer">
		select count(1) from FUN_SALE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
	</select>
	
	<select id="getStoreDataDaiKan" resultType="java.util.Map">
		select sum(iif(SALE_EXPLRTH is null or SALE_EXPLRTH=0,1,0)) notFk,sum(iif(SALE_EXPLRTH=1,1,0)) isFk
		from FUN_SALE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.regionId != null and param.regionId != ''">AND SALE_REG = #{param.regionId}</if><!-- 行政区域 -->
		<if test="param.sectionId != null and param.sectionId != ''">AND SECTION_ID = #{param.sectionId}</if><!-- 商圈 -->
	</select>
	
	<select id="getStoreDataRanking" resultType="java.util.Map">
		with t1 as (
			select count(1) counts,
			<choose>
				<when test="param.rankType == 1">user_id</when>
				<otherwise>dept_id</otherwise>
			</choose>
			as rankId from FUN_SALE_MIN 
			WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
			<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
			<choose>
				<when test="param.rankType == 1">
					and user_id &gt; 0 group by user_id
				</when>
				<otherwise>group by dept_id</otherwise>
			</choose>
		),t2 as (
			select count(1) counts,
			<choose>
				<when test="param.rankType == 1">user_id</when>
				<otherwise>dept_id</otherwise>
			</choose>
			as rankId from FUN_BUY_CUSTOMER_MIN 
			WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
			<if test="param.statusType == 1">AND BUY_CUST_STATUS &lt;= 4</if><!-- 有效 -->
			<choose>
				<when test="param.rankType == 1">
					and user_id &gt; 0 group by user_id
				</when>
				<otherwise>group by dept_id</otherwise>
			</choose>
		)
		select top 15 t1.counts house,t2.counts cust,t1.rankId,t1.counts + t2.counts as totalCounts
		from t1 join t2 on t1.rankId=t2.rankId
		where t1.counts + t2.counts &gt; 0 
		order by t1.counts + t2.counts desc
	</select>
	
	<select id="getStoreDataAnalysisByPrice" resultType="java.util.Map">
		select 
		count(1) counts,${param.housePriceSql} byName,
		<include refid="getStoreDataAnalysisSql" /> as dim
		from FUN_SALE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.queryDim == 'ROOM'">AND SALE_ROOM is not null</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">AND SALE_REG is not null</if><!-- 行政区 -->
		GROUP BY ${param.housePriceSql},
		<include refid="getStoreDataAnalysisSql" />
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysisByArea" resultType="java.util.Map">
		select 
		count(1) counts,${param.houseAreaSql} byName,
		<include refid="getStoreDataAnalysisSql" /> as dim
		from FUN_SALE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.queryDim == 'ROOM'">AND SALE_ROOM is not null</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">AND SALE_REG is not null</if><!-- 行政区 -->
		GROUP BY ${param.houseAreaSql},
		<include refid="getStoreDataAnalysisSql" />
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysisByRoom" resultType="java.util.Map">
		select 
		count(1) counts,SALE_ROOM byName,
		<include refid="getStoreDataAnalysisSql" /> as dim
		from FUN_SALE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.queryDim == 'ROOM'">AND SALE_ROOM is not null</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">AND SALE_REG is not null</if><!-- 行政区 -->
		GROUP BY SALE_ROOM,
		<include refid="getStoreDataAnalysisSql" />
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysisByUseage" resultType="java.util.Map">
		select top 10 count(1) counts,SALE_TYPE byName
		from FUN_SALE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		and SALE_USEAGE=1
		and SALE_TYPE in 
		<foreach close=")" collection="param.idSet" item="item" open="(" separator=",">
			#{item}
		</foreach>
		<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.useage == 1">AND SALE_USEAGE = 1</if><!-- 住宅 -->
		<if test="param.useage == 2">AND SALE_USEAGE = 3</if><!-- 商铺 -->
		<if test="param.useage == 3">AND SALE_USEAGE = 4</if><!-- 写字 -->
		group by SALE_TYPE
		order by count(1) desc
	</select>
	
	<select id="getHouseCustBasicStatus" resultType="java.util.Map">
		select COUNT (1) AS totalCounts,
		SUM (IIF(SALE_KEY = '1', 1, 0)) AS keyCount,
		SUM (IIF(SALE_EXPLRTH = 1, 1, 0)) AS explrthCount,
		SUM (IIF(TRUE_FLAG = '1', 1, 0)) AS trueCount,
		SUM (IIF(SALE_MAP &gt; '0', 1, 0)) AS photoCount,
		SUM (IIF(VIDEO_NUM &gt; '0', 1, 0)) AS voidoCount,
		SUM (IIF(PANORAMA_MAP &gt; '0', 1, 0)) AS panoramaCount
		from FUN_SALE_MIN
		<where>
			AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
			<if test="param.statusType == 1">AND SALE_STATUS &lt;= 4</if><!-- 有效 -->
		</where>
	</select>
	
	<select id="getHouseBuyingPowerData" resultType="java.util.Map">
		SELECT count(1) house,${caseWhenSql} as price
		FROM FUN_SALE_MIN
		WHERE COMP_ID = #{compId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		 AND CITY_ID = #{shardCityId} AND SALE_STATUS &lt;= 4
		GROUP BY ${caseWhenSql}
		ORDER BY count(1) desc
	</select>
	
	<select id="getCaseList" resultType="java.util.Map">
		select
		<choose>
			<when test="param.caseType == 1">
				sale_id caseId,sale_id saleId,comp_id compId,city_id cityId,gr_id grId,reg_id regId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,creator_uid creatorUid,sale_no saleNo,lock lock,sale_subject saleSubject,build_id buildId,build_name buildName,build_code buildCode,sale_reg saleReg,region_name regionName,section_id sectionId,section_name sectionName,sale_round saleRound,trade_addr tradeAddr,sale_room saleRoom,sale_hall saleHall,sale_wei saleWei,sale_yang saleYang,sale_type saleType,sale_floor saleFloor,sale_floors saleFloors,sale_fitment saleFitment,sale_direct saleDirect,sale_year saleYear,sale_useage saleUseage,shop_usage shopUsage,sale_street saleStreet,sale_area saleArea,sale_total_price saleTotalPrice,sale_unit_price saleUnitPrice,sale_source saleSource,sale_key saleKey,sale_key_num saleKeyNum,sale_explrth saleExplrth,sale_cooperate saleCooperate,sale_publish salePublish,sale_map saleMap,sale_level saleLevel,plate_type plateType,sale_status saleStatus,track_time trackTime,track_time2 trackTime2,action_time actionTime,from_soso fromSoso,repeat_flag repeatFlag,share_flag shareFlag,complaint_flag complaintFlag,red_flag redFlag,orange_flag orangeFlag,public_time publicTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,private_time privateTime,from_public fromPublic,thumb_url thumbUrl,update_time updateTime,sale_cert_time saleCertTime,publish_sites publishSites,area_id areaId,video_num videoNum,sale_innerarea saleInnerarea,sendtotencent sendtotencent,house_source_way houseSourceWay,true_flag trueFlag,you_share_flag youShareFlag,you_share_time youShareTime,you_buy_count youBuyCount,owner_sex ownerSex,you_share_id youShareId,thumbpic_ver thumbpicVer,private_user_id privateUserId,addr_md5 addrMd5,panorama_map panoramaMap,video_review_flag videoReviewFlag,youjia_statistic_flag youjiaStatisticFlag,ads_flag adsFlag,sync_time syncTime,compete_end_time competeEndTime,compete_price competePrice,you_share_money_state youShareMoneyState,proxy_url proxyUrl,sendto_weidian sendtoWeidian,sendto_youyou sendtoYouyou,check_code_url checkCodeUrl,upload_proxy_user uploadProxyUser,city_share_flag cityShareFlag,file_system_type fileSystemType,check_code_fun checkCodeFun,qz_code_fun qzCodeFun,ownership_type ownershipType,effective_date effectiveDate,funmanager_salestatus funmanagerSalestatus
				<!-- sale_id caseId,sale_id saleId,sale_useage saleUseage,plate_type plateType,sale_status saleStatus,sale_level saleLevel,sale_key saleKey,sale_map saleMap,build_name buildName,sale_useage saleUseage,sale_floor saleFloor,sale_floors saleFloors,sale_room saleRoom,sale_hall saleHall,sale_wei saleWei,sale_innerarea saleInnerarea,sale_area saleArea,sale_total_price saleTotalPrice,sale_unit_price saleUnitPrice -->
				from FUN_SALE_MIN_MIN
				where sale_id in
			</when>
			<when test="param.caseType == 2">
				lease_id caseId,lease_id leaseId,comp_id compId,city_id cityId,gr_id grId,reg_id regId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,lease_no leaseNo,lease_subject leaseSubject,lock lock,build_id buildId,build_name buildName,build_code buildCode,lease_reg leaseReg,region_name regionName,section_id sectionId,section_name sectionName,lease_round leaseRound,trade_addr tradeAddr,plate_type plateType,lease_room leaseRoom,lease_hall leaseHall,lease_wei leaseWei,lease_yang leaseYang,lease_type leaseType,lease_floor leaseFloor,lease_floors leaseFloors,lease_fitment leaseFitment,lease_direct leaseDirect,lease_year leaseYear,lease_useage leaseUseage,lease_street leaseStreet,lease_area leaseArea,lease_total_price leaseTotalPrice,price_unit priceUnit,lease_source leaseSource,lease_level leaseLevel,lease_key leaseKey,key_time keyTime,lease_explrth leaseExplrth,lease_consign leaseConsign,lease_cooperate leaseCooperate,complaint_flag complaintFlag,lease_publish leasePublish,lease_map leaseMap,lease_status leaseStatus,track_time trackTime,track_time2 trackTime2,action_time actionTime,from_soso fromSoso,repeat_flag repeatFlag,friend_house friendHouse,red_flag redFlag,orange_flag orangeFlag,public_count publicCount,public_time publicTime,due_time dueTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,private_time privateTime,from_public fromPublic,thumb_url thumbUrl,update_time updateTime,lease_cert_time leaseCertTime,publish_sites publishSites,area_id areaId,video_num videoNum,creator_uid creatorUid,lease_innerarea leaseInnerarea,sendtotencent sendtotencent,house_source_way houseSourceWay,true_flag trueFlag,you_share_flag youShareFlag,you_share_time youShareTime,you_buy_count youBuyCount,owner_sex ownerSex,you_share_id youShareId,thumbpic_ver thumbpicVer,private_user_id privateUserId,lease_room_type leaseRoomType,lease_room_classic leaseRoomClassic,flat_share_sex flatShareSex,addr_md5 addrMd5,panorama_map panoramaMap,video_review_flag videoReviewFlag,youjia_statistic_flag youjiaStatisticFlag,ads_flag adsFlag,sync_time syncTime,compete_end_time competeEndTime,compete_price competePrice,you_share_money_state youShareMoneyState,sendto_weidian sendtoWeidian,sendto_youyou sendtoYouyou,proxy_url proxyUrl,upload_proxy_user uploadProxyUser,city_share_flag cityShareFlag,check_code_fun checkCodeFun,ownership_type ownershipType,qz_code_fun qzCodeFun,effective_date effectiveDate,funmanager_salestatus funmanagerSalestatus
				<!-- lease_id caseId,lease_id leaseId,lease_useage leaseUseage,plate_type plateType,lease_status leaseStatus,lease_level leaseLevel,lease_key leaseKey,lease_map leaseMap,build_name buildName,lease_useage leaseUseage,lease_floor leaseFloor,lease_floors leaseFloors,lease_room leaseRoom,lease_hall leaseHall,lease_wei leaseWei,lease_innerarea leaseInnerarea,lease_area leaseArea,lease_total_price leaseTotalPrice -->
				from FUN_LEASE_MIN
				where LEASE_ID in
			</when>
			<when test="param.caseType == 3">
				buy_cust_id caseId,buy_cust_id buyCustId,city_id cityId,gr_id grId,reg_id regId,comp_id compId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,buy_cust_no buyCustNo,buy_cust_name buyCustName,buy_cust_sex buyCustSex,buy_cust_age buyCustAge,buy_cust_career buyCustCareer,buy_ability buyAbility,cust_level custLevel,plate_type plateType,buy_cust_source buyCustSource,buy_cust_level buyCustLevel,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,section_id sectionId,section_name sectionName,build_id buildId,build_name buildName,house_round houseRound,house_type houseType,house_useage houseUseage,house_fitment houseFitment,house_direct houseDirect,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,house_price_low housePriceLow,house_price_high housePriceHigh,house_area_low houseAreaLow,house_area_high houseAreaHigh,house_year_low houseYearLow,house_year_high houseYearHigh,house_look houseLook,cust_request custRequest,buy_cust_status buyCustStatus,track_time trackTime,repeat_flag repeatFlag,red_flag redFlag,orange_flag orangeFlag,public_count publicCount,public_time publicTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,action_time actionTime,private_time privateTime,from_public fromPublic,cooperate_flag cooperateFlag,update_time updateTime,friend_house friendHouse,cooperate_time cooperateTime,area_id areaId,private_user_id privateUserId,sync_time syncTime,you_share_flag youShareFlag,you_share_time youShareTime,you_share_id youShareId,you_buy_count youBuyCount,city_share_flag cityShareFlag
				<!-- buy_cust_id caseId,track_time trackTime,user_id userId,house_area_high houseAreaHigh,house_area_low houseAreaLow,house_price_high housePriceHigh,house_price_low housePriceLow,comp_id compId,dept_id deptId,buy_ability buyAbility,buy_cust_age buyCustAge,buy_cust_career buyCustCareer,buy_cust_status buyCustStatus,buy_cust_level buyCustLevel,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,cust_level custLevel,plate_type plateType,buy_cust_source buyCustSource,commend_time commendTime,secrecy_time secrecyTime,red_flag redFlag,action_time actionTime,public_count publicCount,public_time publicTime,from_public fromPublic,private_time privateTime,orange_flag orangeFlag,repeat_flag repeatFlag,house_useage houseUseage,house_type houseType,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,section_id sectionId,section_name sectionName,house_fitment houseFitment,buy_cust_sex buyCustSex,buy_cust_name buyCustName,build_name buildName,house_round houseRound -->
				from FUN_BUY_CUSTOMER_MIN
				where BUY_CUST_ID in
			</when>
			<when test="param.caseType == 4">
				rent_cust_id caseId,rent_cust_id rentCustId,comp_id compId,city_id cityId,gr_id grId,reg_id regId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,rent_cust_no rentCustNo,rent_cust_name rentCustName,rent_cust_sex rentCustSex,rent_cust_age rentCustAge,rent_cust_career rentCustCareer,rent_lifebound rentLifebound,rent_ability rentAbility,cust_level custLevel,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,build_id buildId,build_name buildName,section_id sectionId,section_name sectionName,house_round houseRound,house_type houseType,house_useage houseUseage,house_fitment houseFitment,house_direct houseDirect,plate_type plateType,rent_cust_source rentCustSource,rent_cust_level rentCustLevel,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,house_price_low housePriceLow,house_price_high housePriceHigh,house_area_low houseAreaLow,house_area_high houseAreaHigh,house_year_low houseYearLow,house_year_high houseYearHigh,house_look houseLook,cust_request custRequest,rent_cust_status rentCustStatus,track_time trackTime,action_time actionTime,repeat_flag repeatFlag,red_flag redFlag,orange_flag orangeFlag,public_count publicCount,public_time publicTime,due_time dueTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,private_time privateTime,from_public fromPublic,cooperate_flag cooperateFlag,update_time updateTime,friend_house friendHouse,cooperate_time cooperateTime,area_id areaId,private_user_id privateUserId,sync_time syncTime,you_share_flag youShareFlag,you_share_time youShareTime,you_share_id youShareId,you_buy_count youBuyCount,city_share_flag cityShareFlag
				<!-- rent_cust_id caseId,track_time trackTime,user_id userId,house_area_high houseAreaHigh,house_area_low houseAreaLow,house_price_high housePriceHigh,house_price_low housePriceLow,comp_id compId,dept_id deptId,rent_ability rentAbility,rent_cust_age rentCustAge,rent_cust_career rentCustCareer,rent_cust_status rentCustStatus,rent_cust_level rentCustLevel,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,cust_level custLevel,plate_type plateType,rent_cust_source rentCustSource,commend_time commendTime,secrecy_time secrecyTime,red_flag redFlag,action_time actionTime,public_count publicCount,public_time publicTime,from_public fromPublic,private_time privateTime,orange_flag orangeFlag,repeat_flag repeatFlag,house_useage houseUseage,house_type houseType,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,section_id sectionId,section_name sectionName,house_fitment houseFitment,rent_cust_sex rentCustSex,rent_cust_name rentCustName,build_name buildName,house_round houseRound -->
				from FUN_RENT_CUSTOMER_MIN
				where RENT_CUST_ID in
			</when>
		</choose>
		(
			select CASE_ID from FUN_STATISTIC_DETAIL
			where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange} = #{param.serchRangeId}
			<if test="param.areaId != null and param.areaId != ''">and AREA_ID = #{param.areaId}</if>
			<if test="param.regId != null and param.regId != ''">and SALE_REG = #{param.regId}</if>
			<if test="param.deptId != null and param.deptId != ''">and DEPT_ID = #{param.deptId}</if>
			<if test="param.grId != null and param.grId != ''">and GR_ID = #{param.grId}</if>
			<if test="param.userId != null and param.userId != ''">and USER_ID = #{param.userId}</if>
			<if test="param.caseType != null and param.caseType != ''">and CASE_TYPE = #{param.caseType}</if>
			<if test="param.statisticType != null and param.statisticType != ''">and STATISTIC_TYPE = #{param.statisticType}</if>
			<if test="param.trackId != null and param.trackId != ''">and TRACK_ID = #{param.trackId}</if>
			<if test="param.startTime != null and param.startTime != ''">and CREATE_TIME &gt;= #{param.startTime}</if>
			<if test="param.endTime != null and param.endTime != ''">and CREATE_TIME &lt;= #{param.endTime}</if>
		)
		order by 
		<choose>
			<when test="param.caseType == 1">SALE_ID</when>
			<when test="param.caseType == 2">LEASE_ID</when>
			<when test="param.caseType == 3">BUY_CUST_ID</when>
			<when test="param.caseType == 4">RENT_CUST_ID</when>
		</choose>
		DESC
	</select>
	
	<sql id="chooseWhenTimeSql">
		<choose>
			<when test="param.dateCountType == 0">
				convert(nvarchar(10),A.CREATION_TIME,120)
			</when>
			<when test="param.dateCountType == 1">
				(CONVERT (VARCHAR (10),iif (CONVERT (VARCHAR (10),A.CREATION_TIME,120) &gt;= '${param.startTime}' AND CONVERT (VARCHAR (10),A.CREATION_TIME,120) &lt;=DATEADD( WEEK,1,DATEADD(DAY, 1 - DATEPART(WEEKDAY, '${param.startTime}' )-1,'${param.startTime}' )),'${param.startTime}' ,DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, A.CREATION_TIME), A.CREATION_TIME)),120) + '-' + iif (CONVERT (VARCHAR (10),A.CREATION_TIME,120) &gt;= CONVERT (VARCHAR (10),DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, '${param.endTime}' ),'${param.endTime}' ),120),CONVERT (VARCHAR (10),'${param.endTime}',120) ,CONVERT (VARCHAR (10),DATEADD(WEEK,1,DATEADD(DAY,1 - DATEPART(WEEKDAY, A.CREATION_TIME)-1,A.CREATION_TIME )),120)))
			</when>
			<when test="param.dateCountType == 2">
				convert(nvarchar(7),A.CREATION_TIME,120)
			</when>
		</choose>
	</sql>
	
	<select id="getHouseAddCountData" resultType="com.myfun.repository.erpdb.dto.HouseCustAddCountDto">
		SET DATEFIRST 1;
		SELECT
		<choose>
			<when test="param.queryDim == 'REG'">
				count(1) num,ISNULL(${param.caseReg}, 0) regId,
			</when>
			<when test="param.queryDim == 'ROOM'">
				count(1) num,ISNULL(a.${param.room},0) room,
			</when>
			<when test="param.queryDim == 'USEAGE'">
				count(1) num,a.${param.caseUsage} as useage,
			</when>
			<when test="param.queryDim == 'SOURCE'">
				count(1) num,a.${param.caseSource} as source,
			</when>
			<when test="param.queryDim == 'SECTION'">
				count(1) num,a.SECTION_ID as section,
			</when>
			<when test="param.queryDim == 'PRICE'">
				count(1) num,(${param.priceUnit}) price,
			</when>
			<when test="param.queryDim == 'AREA'">
				count(1) num,(${param.areaUnit}) area,
			</when>
		</choose>
		<include refid="chooseWhenTimeSql" /> as date
		FROM ${param.tableName} a
		<!-- <if test="param.queryDim == 'REG'">
			LEFT JOIN FUN_REG b ON b.SALE_REG = a.${param.caseReg}
		</if> -->
		WHERE A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId}
		AND A.${param.serchRange} = #{param.serchRangeId}
		AND A.CREATION_TIME &gt;= #{param.startTime}
		AND A.CREATION_TIME &lt;= #{param.endTime}
		<if test="param.regionIdsArr != null">
			AND a.${param.caseReg} in
			<foreach close=")" collection="param.regionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
		</if>
		<if test="param.sectionIdsArr != null">
			AND a.SECTION_ID in
			<foreach close=")" collection="param.sectionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
		</if>
		GROUP BY
		<include refid="chooseWhenTimeSql" />,
		<choose>
			<when test="param.queryDim == 'REG'">ISNULL(${param.caseReg},0)</when>
			<when test="param.queryDim == 'ROOM'">ISNULL(a.${param.room},0)</when>
			<when test="param.queryDim == 'USEAGE'">a.${param.caseUsage}</when>
			<when test="param.queryDim == 'SOURCE'">a.${param.caseSource}</when>
			<when test="param.queryDim == 'SECTION'">a.SECTION_ID</when>
			<when test="param.queryDim == 'PRICE'">(${param.priceUnit})</when>
			<when test="param.queryDim == 'AREA'">(${param.areaUnit})</when>
		</choose>
	</select>

	<select id="getCustAddCountData" resultType="com.myfun.repository.erpdb.dto.HouseCustAddCountDto">
		SET DATEFIRST 1;
		SELECT
		<choose>
			<when test="param.queryDim == 'ROOM'">
				count(1) num,a.HOUSE_ROOM_1 as room,
			</when>
			<when test="param.queryDim == 'REG'">
				count(1) num,b.SOURCE_ID as regId,
			</when>
			<when test="param.queryDim == 'USEAGE'">
				count(1) num,b.SOURCE_ID as useage,
			</when>
			<when test="param.queryDim == 'SECTION'">
				count(1) num,c.SOURCE_ID as section,
			</when>
			<when test="param.queryDim == 'PRICE'">
				count(1) num,(${param.priceUnit}) price,
			</when>
			<when test="param.queryDim == 'AREA'">
				count(1) num,(${param.areaUnit}) area,
			</when>
		</choose>
		<include refid="chooseWhenTimeSql" /> as date
		FROM ${param.tableName} a
		<choose>
			<when test="param.queryDim == 'REG'">
				LEFT JOIN FUN_CUST_DEMAND_SPLIT_1 b ON b.CITY_ID= #{shardCityId} AND b.CASE_ID = A.${param.primaryId} and b.CASE_TYPE=#{param.caseType}
			</when>
			<when test="param.queryDim == 'USEAGE'">
				LEFT join FUN_CUST_DEMAND_SPLIT_4 b on b.CITY_ID= #{shardCityId} and b.CASE_ID = A.${param.primaryId} and b.CASE_TYPE=#{param.caseType}
			</when>
			<when test="param.queryDim == 'SECTION'">
				LEFT JOIN FUN_CUST_DEMAND_SPLIT_1 b ON b.CITY_ID= #{shardCityId} and b.CASE_ID = A.${param.primaryId} and b.CASE_TYPE=#{param.caseType}
				LEFT JOIN FUN_CUST_DEMAND_SPLIT_2 c ON c.CITY_ID= #{shardCityId} and c.CASE_ID = A.${param.primaryId} and c.CASE_TYPE=#{param.caseType}
			</when>
		</choose>
		<if test="param.regionIdsArr != null">
			LEFT JOIN FUN_CUST_DEMAND_SPLIT_1 reg ON reg.CITY_ID=#{shardCityId} and reg.CASE_ID = A.${param.primaryId} and reg.CASE_TYPE=#{param.caseType}
		</if>
		<if test="param.sectionIdsArr != null">
			LEFT JOIN FUN_CUST_DEMAND_SPLIT_2 section ON section.CITY_ID=#{shardCityId} and section.CASE_ID = A.${param.primaryId} and section.CASE_TYPE=#{param.caseType}
		</if>
		WHERE A.COMP_ID = #{param.compId} AND A.CITY_ID = #{shardCityId}
		AND A.${param.serchRange} = #{param.serchRangeId}
		AND A.CREATION_TIME &gt;= #{param.startTime}
		AND A.CREATION_TIME &lt;= #{param.endTime}
		<if test="param.regionIdsArr != null">
			AND reg.SOURCE_ID in 
			<foreach close=")" collection="param.regionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
		</if>
		<if test="param.sectionIdsArr != null">
			AND section.SOURCE_ID in 
			<foreach close=")" collection="param.sectionIdsArr" item="item" open="(" separator=",">#{item}</foreach>
		</if>
		GROUP BY 
		<include refid="chooseWhenTimeSql" />,
		<choose>
			<when test="param.queryDim == 'SECTION'">c.SOURCE_ID</when>
			<when test="param.queryDim == 'PRICE'">(${param.priceUnit})</when>
			<when test="param.queryDim == 'AREA'">(${param.areaUnit})</when>
			<when test="param.queryDim == 'ROOM'">a.HOUSE_ROOM_1</when>
			<when test="param.queryDim == 'REG'">b.SOURCE_ID</when>
			<when test="param.queryDim == 'USEAGE'">b.SOURCE_ID</when>
		</choose>
	</select>
	<sql id="getStoreDataAnalysisQueryDimSql">
		<if test="param.queryDim == 'STATUS'">SALE_STATUS</if><!-- 状态 -->
		<if test="param.queryDim == 'PRICE'">${param.housePriceSql}</if><!-- 价格 -->
		<if test="param.queryDim == 'AREA'">${param.houseAreaSql}</if><!-- 面积 -->
		<if test="param.queryDim == 'ROOM'">SALE_ROOM</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">SALE_REG</if><!-- 行政区 -->
		<if test="param.queryDim == 'SECTION'">CONCAT(SALE_REG,'_',SECTION_ID)</if><!-- 商圈 -->
		<if test="param.queryDim == 'USEAGE'">SALE_USEAGE</if><!-- 用途 -->
	</sql>
	<sql id="getStoreDataAnalysisSql">
		<if test="param.queryDim == 'PRICE'">${param.housePriceSql}</if><!-- 价格 -->
		<if test="param.queryDim == 'AREA'">${param.houseAreaSql}</if><!-- 面积 -->
		<if test="param.queryDim == 'ROOM'">SALE_ROOM</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">SALE_REG</if><!-- 行政区 -->
	</sql>
	
	
	
	<select id="getAppHouseCustStatusData" resultType="java.util.Map">
		select 
		ISNULL(sum(iif(CREATION_TIME &gt;= #{nowTime} and SALE_STATUS=5,1,0)),0) as ncjHouseNow,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=5,1,0)),0) as ncjHouseWeek,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{monthTime} and SALE_STATUS=5,1,0)),0) as ncjHouseMonth,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{nowTime} and SALE_STATUS=6,1,0)),0) as wcjHouseNow,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{weekTime} and SALE_STATUS=6,1,0)),0) as wcjHouseWeek,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{monthTime} and SALE_STATUS=6,1,0)),0) as wcjHouseMonth
		from FUN_SALE_MIN 
		where COMP_ID = #{compId} 
		<choose>
			<when test="rangeType == 5">
				<if test="deptId != null">
					and DEPT_ID=#{deptId}
				</if>
			</when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		in
			<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
		AND CITY_ID = #{shardCityId}
    </select>

	<sql id="chooseWhenTimeSqlForWeb">
		<choose>
			<when test="param.dateCountType == 0">
				convert(nvarchar(10),CREATION_TIME,120)
			</when>
			<when test="param.dateCountType == 1">
				(CONVERT (VARCHAR (10),iif (CONVERT (VARCHAR (10),CREATION_TIME,120) &gt;= '${param.startTime}' AND CONVERT (VARCHAR (10),CREATION_TIME,120) &lt;=DATEADD( WEEK,1,DATEADD(DAY, 1 - DATEPART(WEEKDAY, '${param.startTime}' )-1,'${param.startTime}' )),'${param.startTime}' ,DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, CREATION_TIME), CREATION_TIME)),120) + '-' + iif (CONVERT (VARCHAR (10),CREATION_TIME,120) &gt;= CONVERT (VARCHAR (10),DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, '${param.endTime}' ),'${param.endTime}' ),120),CONVERT (VARCHAR (10),'${param.endTime}',120) ,CONVERT (VARCHAR (10),DATEADD(WEEK,1,DATEADD(DAY,1 - DATEPART(WEEKDAY, CREATION_TIME)-1,CREATION_TIME )),120)))
			</when>
			<when test="param.dateCountType == 2">
				convert(nvarchar(7),CREATION_TIME,120)
			</when>
		</choose>
	</sql>
	<select id="getCompSaleCountByDate" resultType="java.util.Map">
		SELECT <include refid="chooseWhenTimeSqlForWeb" /> as date , ISNULL(COUNT(1),0) data
		from  FUN_SALE_MIN
		WHERE  COMP_ID =#{param.compId} AND CITY_ID = #{param.cityId}
		AND CREATION_TIME &gt;= #{param.startTime} AND CREATION_TIME &lt;= #{param.endTime}
		GROUP BY <include refid="chooseWhenTimeSqlForWeb" />
	</select>

  <update id="updatePartnerId">
    UPDATE FUN_SALE_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} AND DEPT_ID = #{deptId};
    UPDATE FUN_LEASE_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} AND DEPT_ID = #{deptId};
    UPDATE FUN_RENT_CUSTOMER_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} AND DEPT_ID = #{deptId};
    UPDATE FUN_BUY_CUSTOMER_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} AND DEPT_ID = #{deptId};
  </update>

  <update id="updateOrgPartnerId">
    UPDATE FUN_SALE_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} and TISSUE_LINE like concat('%',#{orgPath},'%');
    UPDATE FUN_LEASE_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} and TISSUE_LINE like concat('%',#{orgPath},'%');
    UPDATE FUN_RENT_CUSTOMER_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} and TISSUE_LINE like concat('%',#{orgPath},'%');
    UPDATE FUN_BUY_CUSTOMER_MIN SET PARTNER_ID = #{partnerId} WHERE COMP_ID=#{compId} AND CITY_ID = #{cityId} and TISSUE_LINE like concat('%',#{orgPath},'%');
  </update>
</mapper>