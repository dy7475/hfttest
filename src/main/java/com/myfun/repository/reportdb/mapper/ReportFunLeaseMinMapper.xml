<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.reportdb.dao.ReportFunLeaseMinMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.reportdb.po.ReportFunLeaseMin">
    <!--@mbggenerated-->
    <id column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <id column="LEASE_ID" jdbcType="INTEGER" property="leaseId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CREATION_TIME" jdbcType="VARCHAR" property="creationTime" />
    <result column="LAST_SYNC_TIME" jdbcType="VARCHAR" property="lastSyncTime" />
    <result column="LEASE_STATUS" jdbcType="INTEGER" property="leaseStatus" />
    <result column="LEASE_ROOM" jdbcType="TINYINT" property="leaseRoom" />
    <result column="SECTION_ID" jdbcType="INTEGER" property="sectionId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="LEASE_REG" jdbcType="INTEGER" property="leaseReg" />
    <result column="LEASE_USEAGE" jdbcType="TINYINT" property="leaseUseage" />
    <result column="LEASE_TYPE" jdbcType="TINYINT" property="leaseType" />
    <result column="UNIT_FLOOR" jdbcType="VARCHAR" property="unitFloor" />
    <result column="LEASE_KEY" jdbcType="BIT" property="leaseKey" />
    <result column="LEASE_EXPLRTH" jdbcType="BIT" property="leaseExplrth" />
    <result column="TRUE_FLAG" jdbcType="TINYINT" property="trueFlag" />
    <result column="LEASE_MAP" jdbcType="INTEGER" property="leaseMap" />
    <result column="VIDEO_NUM" jdbcType="INTEGER" property="videoNum" />
    <result column="PANORAMA_MAP" jdbcType="INTEGER" property="panoramaMap" />
    <result column="HAS_FUNKAN" jdbcType="TINYINT" property="hasFunkan" />
    <result column="LEASE_AREA" jdbcType="NUMERIC" property="leaseArea" />
    <result column="LEASE_TOTAL_PRICE" jdbcType="NUMERIC" property="leaseTotalPrice" />
    <result column="PRICE_UNIT" jdbcType="TINYINT" property="priceUnit" />
    <result column="LEASE_SOURCE" jdbcType="TINYINT" property="leaseSource" />
    <result column="HAVE_TAG_FLAG" jdbcType="TINYINT" property="haveTagFlag" />
    <result column="HAVE_LAYOUT_FLAG" jdbcType="TINYINT" property="haveLayoutFlag" />
    <result column="LEASE_CONSIGN" jdbcType="TINYINT" property="leaseConsign" />
    <result column="REPEAT_FLAG" jdbcType="TINYINT" property="repeatFlag" />
    <result column="LEASE_PUBLISH" jdbcType="BIT" property="leasePublish" />
    <result column="LEASE_LEVEL" jdbcType="TINYINT" property="leaseLevel" />
    <result column="PLATE_TYPE" jdbcType="TINYINT" property="plateType" />
    <result column="CITY_SHARE_FLAG" jdbcType="TINYINT" property="cityShareFlag" />
    <result column="LAST_DKAN_TIME" jdbcType="TIMESTAMP" property="lastDkanTime" />
    <result column="USER_LEVEL" jdbcType="INTEGER" property="userLevel" />
    <result column="TISSUE_LINE" jdbcType="VARCHAR" property="tissueLine" />
    <result column="PARTNER_ID" jdbcType="INTEGER" property="partnerId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    CITY_ID, LEASE_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, 
    CREATION_TIME, LAST_SYNC_TIME, LEASE_STATUS, LEASE_ROOM, SECTION_ID, BUILD_ID, LEASE_REG, 
    LEASE_USEAGE, LEASE_TYPE, UNIT_FLOOR, LEASE_KEY, LEASE_EXPLRTH, TRUE_FLAG, LEASE_MAP, 
    VIDEO_NUM, PANORAMA_MAP, HAS_FUNKAN, LEASE_AREA, LEASE_TOTAL_PRICE, PRICE_UNIT, LEASE_SOURCE, 
    HAVE_TAG_FLAG, HAVE_LAYOUT_FLAG, LEASE_CONSIGN, REPEAT_FLAG, LEASE_PUBLISH, LEASE_LEVEL, 
    PLATE_TYPE, CITY_SHARE_FLAG, LAST_DKAN_TIME, USER_LEVEL, TISSUE_LINE, PARTNER_ID
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMinExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_LEASE_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_LEASE_MIN
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and LEASE_ID = #{leaseId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    <!--@mbggenerated-->
    delete from FUN_LEASE_MIN
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and LEASE_ID = #{leaseId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMinExample">
    <!--@mbggenerated-->
    delete from FUN_LEASE_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMin">
    <!--@mbggenerated-->
    insert into FUN_LEASE_MIN (CITY_ID, LEASE_ID, COMP_ID, 
      AREA_ID, REG_ID, DEPT_ID, 
      GR_ID, USER_ID, ARCHIVE_ID, 
      CREATION_TIME, LAST_SYNC_TIME, LEASE_STATUS, 
      LEASE_ROOM, SECTION_ID, BUILD_ID, 
      LEASE_REG, LEASE_USEAGE, LEASE_TYPE, 
      UNIT_FLOOR, LEASE_KEY, LEASE_EXPLRTH, 
      TRUE_FLAG, LEASE_MAP, VIDEO_NUM, 
      PANORAMA_MAP, HAS_FUNKAN, LEASE_AREA, 
      LEASE_TOTAL_PRICE, PRICE_UNIT, LEASE_SOURCE, 
      HAVE_TAG_FLAG, HAVE_LAYOUT_FLAG, LEASE_CONSIGN, 
      REPEAT_FLAG, LEASE_PUBLISH, LEASE_LEVEL, 
      PLATE_TYPE, CITY_SHARE_FLAG, LAST_DKAN_TIME, 
      USER_LEVEL, TISSUE_LINE, PARTNER_ID
      )
    values (#{cityId,jdbcType=INTEGER}, #{leaseId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, 
      #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, 
      #{creationTime,jdbcType=VARCHAR}, #{lastSyncTime,jdbcType=VARCHAR}, #{leaseStatus,jdbcType=INTEGER}, 
      #{leaseRoom,jdbcType=TINYINT}, #{sectionId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, 
      #{leaseReg,jdbcType=INTEGER}, #{leaseUseage,jdbcType=TINYINT}, #{leaseType,jdbcType=TINYINT}, 
      #{unitFloor,jdbcType=VARCHAR}, #{leaseKey,jdbcType=BIT}, #{leaseExplrth,jdbcType=BIT}, 
      #{trueFlag,jdbcType=TINYINT}, #{leaseMap,jdbcType=INTEGER}, #{videoNum,jdbcType=INTEGER}, 
      #{panoramaMap,jdbcType=INTEGER}, #{hasFunkan,jdbcType=TINYINT}, #{leaseArea,jdbcType=NUMERIC}, 
      #{leaseTotalPrice,jdbcType=NUMERIC}, #{priceUnit,jdbcType=TINYINT}, #{leaseSource,jdbcType=TINYINT}, 
      #{haveTagFlag,jdbcType=TINYINT}, #{haveLayoutFlag,jdbcType=TINYINT}, #{leaseConsign,jdbcType=TINYINT}, 
      #{repeatFlag,jdbcType=TINYINT}, #{leasePublish,jdbcType=BIT}, #{leaseLevel,jdbcType=TINYINT}, 
      #{plateType,jdbcType=TINYINT}, #{cityShareFlag,jdbcType=TINYINT}, #{lastDkanTime,jdbcType=TIMESTAMP}, 
      #{userLevel,jdbcType=INTEGER}, #{tissueLine,jdbcType=VARCHAR}, #{partnerId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMin">
    <!--@mbggenerated-->
    insert into FUN_LEASE_MIN
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="leaseId != null">
        LEASE_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="lastSyncTime != null">
        LAST_SYNC_TIME,
      </if>
      <if test="leaseStatus != null">
        LEASE_STATUS,
      </if>
      <if test="leaseRoom != null">
        LEASE_ROOM,
      </if>
      <if test="sectionId != null">
        SECTION_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="leaseReg != null">
        LEASE_REG,
      </if>
      <if test="leaseUseage != null">
        LEASE_USEAGE,
      </if>
      <if test="leaseType != null">
        LEASE_TYPE,
      </if>
      <if test="unitFloor != null">
        UNIT_FLOOR,
      </if>
      <if test="leaseKey != null">
        LEASE_KEY,
      </if>
      <if test="leaseExplrth != null">
        LEASE_EXPLRTH,
      </if>
      <if test="trueFlag != null">
        TRUE_FLAG,
      </if>
      <if test="leaseMap != null">
        LEASE_MAP,
      </if>
      <if test="videoNum != null">
        VIDEO_NUM,
      </if>
      <if test="panoramaMap != null">
        PANORAMA_MAP,
      </if>
      <if test="hasFunkan != null">
        HAS_FUNKAN,
      </if>
      <if test="leaseArea != null">
        LEASE_AREA,
      </if>
      <if test="leaseTotalPrice != null">
        LEASE_TOTAL_PRICE,
      </if>
      <if test="priceUnit != null">
        PRICE_UNIT,
      </if>
      <if test="leaseSource != null">
        LEASE_SOURCE,
      </if>
      <if test="haveTagFlag != null">
        HAVE_TAG_FLAG,
      </if>
      <if test="haveLayoutFlag != null">
        HAVE_LAYOUT_FLAG,
      </if>
      <if test="leaseConsign != null">
        LEASE_CONSIGN,
      </if>
      <if test="repeatFlag != null">
        REPEAT_FLAG,
      </if>
      <if test="leasePublish != null">
        LEASE_PUBLISH,
      </if>
      <if test="leaseLevel != null">
        LEASE_LEVEL,
      </if>
      <if test="plateType != null">
        PLATE_TYPE,
      </if>
      <if test="cityShareFlag != null">
        CITY_SHARE_FLAG,
      </if>
      <if test="lastDkanTime != null">
        LAST_DKAN_TIME,
      </if>
      <if test="userLevel != null">
        USER_LEVEL,
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE,
      </if>
      <if test="partnerId != null">
        PARTNER_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="leaseId != null">
        #{leaseId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTime != null">
        #{lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="leaseStatus != null">
        #{leaseStatus,jdbcType=INTEGER},
      </if>
      <if test="leaseRoom != null">
        #{leaseRoom,jdbcType=TINYINT},
      </if>
      <if test="sectionId != null">
        #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="leaseReg != null">
        #{leaseReg,jdbcType=INTEGER},
      </if>
      <if test="leaseUseage != null">
        #{leaseUseage,jdbcType=TINYINT},
      </if>
      <if test="leaseType != null">
        #{leaseType,jdbcType=TINYINT},
      </if>
      <if test="unitFloor != null">
        #{unitFloor,jdbcType=VARCHAR},
      </if>
      <if test="leaseKey != null">
        #{leaseKey,jdbcType=BIT},
      </if>
      <if test="leaseExplrth != null">
        #{leaseExplrth,jdbcType=BIT},
      </if>
      <if test="trueFlag != null">
        #{trueFlag,jdbcType=TINYINT},
      </if>
      <if test="leaseMap != null">
        #{leaseMap,jdbcType=INTEGER},
      </if>
      <if test="videoNum != null">
        #{videoNum,jdbcType=INTEGER},
      </if>
      <if test="panoramaMap != null">
        #{panoramaMap,jdbcType=INTEGER},
      </if>
      <if test="hasFunkan != null">
        #{hasFunkan,jdbcType=TINYINT},
      </if>
      <if test="leaseArea != null">
        #{leaseArea,jdbcType=NUMERIC},
      </if>
      <if test="leaseTotalPrice != null">
        #{leaseTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="priceUnit != null">
        #{priceUnit,jdbcType=TINYINT},
      </if>
      <if test="leaseSource != null">
        #{leaseSource,jdbcType=TINYINT},
      </if>
      <if test="haveTagFlag != null">
        #{haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="haveLayoutFlag != null">
        #{haveLayoutFlag,jdbcType=TINYINT},
      </if>
      <if test="leaseConsign != null">
        #{leaseConsign,jdbcType=TINYINT},
      </if>
      <if test="repeatFlag != null">
        #{repeatFlag,jdbcType=TINYINT},
      </if>
      <if test="leasePublish != null">
        #{leasePublish,jdbcType=BIT},
      </if>
      <if test="leaseLevel != null">
        #{leaseLevel,jdbcType=TINYINT},
      </if>
      <if test="plateType != null">
        #{plateType,jdbcType=TINYINT},
      </if>
      <if test="cityShareFlag != null">
        #{cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="lastDkanTime != null">
        #{lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userLevel != null">
        #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        #{partnerId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMinExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_LEASE_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_LEASE_MIN
    <set>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.leaseId != null">
        LEASE_ID = #{record.leaseId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=VARCHAR},
      </if>
      <if test="record.lastSyncTime != null">
        LAST_SYNC_TIME = #{record.lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="record.leaseStatus != null">
        LEASE_STATUS = #{record.leaseStatus,jdbcType=INTEGER},
      </if>
      <if test="record.leaseRoom != null">
        LEASE_ROOM = #{record.leaseRoom,jdbcType=TINYINT},
      </if>
      <if test="record.sectionId != null">
        SECTION_ID = #{record.sectionId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.leaseReg != null">
        LEASE_REG = #{record.leaseReg,jdbcType=INTEGER},
      </if>
      <if test="record.leaseUseage != null">
        LEASE_USEAGE = #{record.leaseUseage,jdbcType=TINYINT},
      </if>
      <if test="record.leaseType != null">
        LEASE_TYPE = #{record.leaseType,jdbcType=TINYINT},
      </if>
      <if test="record.unitFloor != null">
        UNIT_FLOOR = #{record.unitFloor,jdbcType=VARCHAR},
      </if>
      <if test="record.leaseKey != null">
        LEASE_KEY = #{record.leaseKey,jdbcType=BIT},
      </if>
      <if test="record.leaseExplrth != null">
        LEASE_EXPLRTH = #{record.leaseExplrth,jdbcType=BIT},
      </if>
      <if test="record.trueFlag != null">
        TRUE_FLAG = #{record.trueFlag,jdbcType=TINYINT},
      </if>
      <if test="record.leaseMap != null">
        LEASE_MAP = #{record.leaseMap,jdbcType=INTEGER},
      </if>
      <if test="record.videoNum != null">
        VIDEO_NUM = #{record.videoNum,jdbcType=INTEGER},
      </if>
      <if test="record.panoramaMap != null">
        PANORAMA_MAP = #{record.panoramaMap,jdbcType=INTEGER},
      </if>
      <if test="record.hasFunkan != null">
        HAS_FUNKAN = #{record.hasFunkan,jdbcType=TINYINT},
      </if>
      <if test="record.leaseArea != null">
        LEASE_AREA = #{record.leaseArea,jdbcType=NUMERIC},
      </if>
      <if test="record.leaseTotalPrice != null">
        LEASE_TOTAL_PRICE = #{record.leaseTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.priceUnit != null">
        PRICE_UNIT = #{record.priceUnit,jdbcType=TINYINT},
      </if>
      <if test="record.leaseSource != null">
        LEASE_SOURCE = #{record.leaseSource,jdbcType=TINYINT},
      </if>
      <if test="record.haveTagFlag != null">
        HAVE_TAG_FLAG = #{record.haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="record.haveLayoutFlag != null">
        HAVE_LAYOUT_FLAG = #{record.haveLayoutFlag,jdbcType=TINYINT},
      </if>
      <if test="record.leaseConsign != null">
        LEASE_CONSIGN = #{record.leaseConsign,jdbcType=TINYINT},
      </if>
      <if test="record.repeatFlag != null">
        REPEAT_FLAG = #{record.repeatFlag,jdbcType=TINYINT},
      </if>
      <if test="record.leasePublish != null">
        LEASE_PUBLISH = #{record.leasePublish,jdbcType=BIT},
      </if>
      <if test="record.leaseLevel != null">
        LEASE_LEVEL = #{record.leaseLevel,jdbcType=TINYINT},
      </if>
      <if test="record.plateType != null">
        PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      </if>
      <if test="record.cityShareFlag != null">
        CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="record.lastDkanTime != null">
        LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userLevel != null">
        USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      </if>
      <if test="record.tissueLine != null">
        TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="record.partnerId != null">
        PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_LEASE_MIN
    set CITY_ID = #{record.cityId,jdbcType=INTEGER},
      LEASE_ID = #{record.leaseId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=VARCHAR},
      LAST_SYNC_TIME = #{record.lastSyncTime,jdbcType=VARCHAR},
      LEASE_STATUS = #{record.leaseStatus,jdbcType=INTEGER},
      LEASE_ROOM = #{record.leaseRoom,jdbcType=TINYINT},
      SECTION_ID = #{record.sectionId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      LEASE_REG = #{record.leaseReg,jdbcType=INTEGER},
      LEASE_USEAGE = #{record.leaseUseage,jdbcType=TINYINT},
      LEASE_TYPE = #{record.leaseType,jdbcType=TINYINT},
      UNIT_FLOOR = #{record.unitFloor,jdbcType=VARCHAR},
      LEASE_KEY = #{record.leaseKey,jdbcType=BIT},
      LEASE_EXPLRTH = #{record.leaseExplrth,jdbcType=BIT},
      TRUE_FLAG = #{record.trueFlag,jdbcType=TINYINT},
      LEASE_MAP = #{record.leaseMap,jdbcType=INTEGER},
      VIDEO_NUM = #{record.videoNum,jdbcType=INTEGER},
      PANORAMA_MAP = #{record.panoramaMap,jdbcType=INTEGER},
      HAS_FUNKAN = #{record.hasFunkan,jdbcType=TINYINT},
      LEASE_AREA = #{record.leaseArea,jdbcType=NUMERIC},
      LEASE_TOTAL_PRICE = #{record.leaseTotalPrice,jdbcType=NUMERIC},
      PRICE_UNIT = #{record.priceUnit,jdbcType=TINYINT},
      LEASE_SOURCE = #{record.leaseSource,jdbcType=TINYINT},
      HAVE_TAG_FLAG = #{record.haveTagFlag,jdbcType=TINYINT},
      HAVE_LAYOUT_FLAG = #{record.haveLayoutFlag,jdbcType=TINYINT},
      LEASE_CONSIGN = #{record.leaseConsign,jdbcType=TINYINT},
      REPEAT_FLAG = #{record.repeatFlag,jdbcType=TINYINT},
      LEASE_PUBLISH = #{record.leasePublish,jdbcType=BIT},
      LEASE_LEVEL = #{record.leaseLevel,jdbcType=TINYINT},
      PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{record.partnerId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMin">
    <!--@mbggenerated-->
    update FUN_LEASE_MIN
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTime != null">
        LAST_SYNC_TIME = #{lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="leaseStatus != null">
        LEASE_STATUS = #{leaseStatus,jdbcType=INTEGER},
      </if>
      <if test="leaseRoom != null">
        LEASE_ROOM = #{leaseRoom,jdbcType=TINYINT},
      </if>
      <if test="sectionId != null">
        SECTION_ID = #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="leaseReg != null">
        LEASE_REG = #{leaseReg,jdbcType=INTEGER},
      </if>
      <if test="leaseUseage != null">
        LEASE_USEAGE = #{leaseUseage,jdbcType=TINYINT},
      </if>
      <if test="leaseType != null">
        LEASE_TYPE = #{leaseType,jdbcType=TINYINT},
      </if>
      <if test="unitFloor != null">
        UNIT_FLOOR = #{unitFloor,jdbcType=VARCHAR},
      </if>
      <if test="leaseKey != null">
        LEASE_KEY = #{leaseKey,jdbcType=BIT},
      </if>
      <if test="leaseExplrth != null">
        LEASE_EXPLRTH = #{leaseExplrth,jdbcType=BIT},
      </if>
      <if test="trueFlag != null">
        TRUE_FLAG = #{trueFlag,jdbcType=TINYINT},
      </if>
      <if test="leaseMap != null">
        LEASE_MAP = #{leaseMap,jdbcType=INTEGER},
      </if>
      <if test="videoNum != null">
        VIDEO_NUM = #{videoNum,jdbcType=INTEGER},
      </if>
      <if test="panoramaMap != null">
        PANORAMA_MAP = #{panoramaMap,jdbcType=INTEGER},
      </if>
      <if test="hasFunkan != null">
        HAS_FUNKAN = #{hasFunkan,jdbcType=TINYINT},
      </if>
      <if test="leaseArea != null">
        LEASE_AREA = #{leaseArea,jdbcType=NUMERIC},
      </if>
      <if test="leaseTotalPrice != null">
        LEASE_TOTAL_PRICE = #{leaseTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="priceUnit != null">
        PRICE_UNIT = #{priceUnit,jdbcType=TINYINT},
      </if>
      <if test="leaseSource != null">
        LEASE_SOURCE = #{leaseSource,jdbcType=TINYINT},
      </if>
      <if test="haveTagFlag != null">
        HAVE_TAG_FLAG = #{haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="haveLayoutFlag != null">
        HAVE_LAYOUT_FLAG = #{haveLayoutFlag,jdbcType=TINYINT},
      </if>
      <if test="leaseConsign != null">
        LEASE_CONSIGN = #{leaseConsign,jdbcType=TINYINT},
      </if>
      <if test="repeatFlag != null">
        REPEAT_FLAG = #{repeatFlag,jdbcType=TINYINT},
      </if>
      <if test="leasePublish != null">
        LEASE_PUBLISH = #{leasePublish,jdbcType=BIT},
      </if>
      <if test="leaseLevel != null">
        LEASE_LEVEL = #{leaseLevel,jdbcType=TINYINT},
      </if>
      <if test="plateType != null">
        PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      </if>
      <if test="cityShareFlag != null">
        CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="lastDkanTime != null">
        LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userLevel != null">
        USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      </if>
    </set>
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and LEASE_ID = #{leaseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.reportdb.po.ReportFunLeaseMin">
    <!--@mbggenerated-->
    update FUN_LEASE_MIN
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{creationTime,jdbcType=VARCHAR},
      LAST_SYNC_TIME = #{lastSyncTime,jdbcType=VARCHAR},
      LEASE_STATUS = #{leaseStatus,jdbcType=INTEGER},
      LEASE_ROOM = #{leaseRoom,jdbcType=TINYINT},
      SECTION_ID = #{sectionId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      LEASE_REG = #{leaseReg,jdbcType=INTEGER},
      LEASE_USEAGE = #{leaseUseage,jdbcType=TINYINT},
      LEASE_TYPE = #{leaseType,jdbcType=TINYINT},
      UNIT_FLOOR = #{unitFloor,jdbcType=VARCHAR},
      LEASE_KEY = #{leaseKey,jdbcType=BIT},
      LEASE_EXPLRTH = #{leaseExplrth,jdbcType=BIT},
      TRUE_FLAG = #{trueFlag,jdbcType=TINYINT},
      LEASE_MAP = #{leaseMap,jdbcType=INTEGER},
      VIDEO_NUM = #{videoNum,jdbcType=INTEGER},
      PANORAMA_MAP = #{panoramaMap,jdbcType=INTEGER},
      HAS_FUNKAN = #{hasFunkan,jdbcType=TINYINT},
      LEASE_AREA = #{leaseArea,jdbcType=NUMERIC},
      LEASE_TOTAL_PRICE = #{leaseTotalPrice,jdbcType=NUMERIC},
      PRICE_UNIT = #{priceUnit,jdbcType=TINYINT},
      LEASE_SOURCE = #{leaseSource,jdbcType=TINYINT},
      HAVE_TAG_FLAG = #{haveTagFlag,jdbcType=TINYINT},
      HAVE_LAYOUT_FLAG = #{haveLayoutFlag,jdbcType=TINYINT},
      LEASE_CONSIGN = #{leaseConsign,jdbcType=TINYINT},
      REPEAT_FLAG = #{repeatFlag,jdbcType=TINYINT},
      LEASE_PUBLISH = #{leasePublish,jdbcType=BIT},
      LEASE_LEVEL = #{leaseLevel,jdbcType=TINYINT},
      PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{partnerId,jdbcType=INTEGER}
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and LEASE_ID = #{leaseId,jdbcType=INTEGER}
  </update>
  
   <select id="getFlowAnalysisCountList" resultType="java.util.Map">
    select LEASE_STATUS AS caseStatus,COUNT(1) AS statusCount,DATEPART(MONTH,CREATION_TIME) AS monthofyear
    from FUN_LEASE_MIN
    <where>
      AND COMP_ID = #{compId}
      AND CITY_ID = #{shardCityId}
      AND CREATION_TIME &gt;= #{startTime}
      AND CREATION_TIME &lt;= #{endTime}
      <if test="null != areaId">
		AND AREA_ID = #{areaId}
      </if>
      <if test="null != regId">
		AND REG_ID = #{regId}
      </if>
      <if test="null != deptId">
		AND DEPT_ID = #{deptId}
      </if>
      <if test="null != userId">
		AND USER_ID = #{userId}
      </if>
    </where>
    GROUP BY LEASE_STATUS,DATEPART(MONTH, CREATION_TIME) 
    ORDER BY LEASE_STATUS ASC,DATEPART(MONTH, CREATION_TIME) ASC
    </select>
    
     <select id="getHouseBottomInfoForStatus" resultType="java.util.Map">
	SELECT
	COUNT (*) AS counts,
	SUM (IIF(LEASE_KEY = '1', 1, 0)) AS keyCount,
	SUM (IIF(LEASE_EXPLRTH = 1, 1, 0)) AS explrthCount,
	SUM (IIF(LEASE_PUBLISH = '1', 1, 0)) AS publishCount,
	SUM (IIF(TRUE_FLAG = '1', 1, 0)) AS trueCount,
	SUM (IIF(LEASE_MAP &gt; '0', 1, 0)) AS photoCount,
	SUM (IIF(VIDEO_NUM &gt; '0', 1, 0)) AS voidoCount,
	SUM (IIF(PANORAMA_MAP &gt; '0', 1, 0)) AS panoramaCount,
	SUM (IIF(LEASE_STATUS = '4', 1, 0)) AS scheduleCount
	FROM FUN_LEASE_MIN
    <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
    </select>
    
    <select id="getHouseBottomInfoForSourceConsign" resultType="java.util.Map">
    select COUNT(*) AS counts,
	LEASE_CONSIGN as houseConsign
    from FUN_LEASE_MIN
    <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
    GROUP BY LEASE_CONSIGN 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForSourceLevel" resultType="java.util.Map">
    select COUNT(*) AS counts,
	LEASE_LEVEL as houseLevel
    from FUN_LEASE_MIN
    <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
    GROUP BY LEASE_LEVEL
    ORDER BY counts desc
    </select>
    
     <select id="getHouseBottomInfoForSourceFitment" resultType="java.util.Map">
    select COUNT(*) AS counts,
	LEASE_FITMENT as houseFitment
    from FUN_LEASE_MIN
    <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
    GROUP BY LEASE_FITMENT 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForRegionRound" resultType="java.util.Map">
    select COUNT(*) AS counts,
	LEASE_ROUND as houseRound
    from FUN_LEASE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
    GROUP BY LEASE_ROUND 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForRegionSection" resultType="java.util.Map">
    select COUNT(*) AS counts,
	SECTION_ID as sectionId
    from FUN_LEASE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
    GROUP BY SECTION_ID 
    ORDER BY counts desc
    </select>
    
    <select id="getHouseBottomInfoForUseage" resultType="java.util.Map">
    select COUNT(*) AS counts,
	LEASE_USEAGE as houseUseage,
	LEASE_TYPE as houseType
    from FUN_LEASE_MIN
     <where>
      AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
      <if test="null != param.perVerUid">
		AND USER_ID = #{param.perVerUid}
      </if>
      <if test="null != param.serchRange and '' != param.serchRange and null != param.serchRangeId">
		AND ${param.serchRange} = #{param.serchRangeId}
      </if>
      <if test="null != param.sqlLeaseStatusIn">
		AND LEASE_STATUS IN
		<foreach close=")" collection="param.sqlLeaseStatusIn" index="index" item="leaseStatus" open="(" separator=",">
    	#{leaseStatus}
		</foreach>
      </if>
    </where>
	GROUP BY LEASE_USEAGE,LEASE_TYPE
	ORDER BY LEASE_USEAGE,counts desc
	</select>
	
	<select id="getHouseCustStatusData" resultType="java.util.Map">
		select 
		sum(iif(CREATION_TIME &gt;= #{weekTime},1,0)) as xzHouseWeek,
		sum(1) as xzHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=4,1,0)) as ydHouseWeek,
		sum(iif(LEASE_STATUS=4,1,0)) as ydHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=2,1,0)) as fpHouseWeek,
		sum(iif(LEASE_STATUS=2,1,0)) as fpHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=5,1,0)) as ncjHouseWeek,
		sum(iif(LEASE_STATUS=5,1,0)) as ncjHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=6,1,0)) as wcjHouseWeek,
		sum(iif(LEASE_STATUS=6,1,0)) as wcjHouseMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=7,1,0)) as zxhouseWeek,
		sum(iif(LEASE_STATUS=7,1,0)) as zxhouseMonth
				
		from FUN_LEASE_MIN 
		where CREATION_TIME &gt;= #{monthTime} and COMP_ID = #{compId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		and CITY_ID = #{shardCityId}
	</select>
	
	<select id="countAvailableHouse" resultType="java.lang.Integer">
		select count(1) as houseCount
		from FUN_LEASE_MIN
		where LEASE_STATUS &lt;= 4 and COMP_ID = #{compId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		and CITY_ID = #{shardCityId}
	</select>
	
	<select id="countByBuildIds" resultType="java.util.Map">
		select top 15 count(1) buildHouseCount,BUILD_ID as buildId from FUN_LEASE_MIN
		where BUILD_ID IN
		<foreach close=")" collection="param.buildIds" index="index" item="buildId" open="(" separator=",">
			#{buildId}
		</foreach>
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		GROUP BY BUILD_ID
	</select>
	
	<select id="countBySectionIds" resultType="java.util.Map">
		select top 15 count(1) sectionHouseCount,SECTION_ID as sectionId from FUN_LEASE_MIN
		where COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		GROUP BY SECTION_ID
		order by count(1) desc
	</select>
	
	<select id="getStoreDataAnalysis" resultType="java.util.Map">
		SELECT
		<if test="param.topCount">TOP ${param.topCount}</if>
		COUNT(1) AS counts,
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionColumnSql} AS dim
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" /> AS dim
			</otherwise>
		</choose>
		FROM FUN_LEASE_MIN
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.regionId != null and param.regionId != ''">AND LEASE_REG = #{param.regionId}</if><!-- 行政区域 -->
		<if test="param.sectionId != null and param.sectionId != ''">AND SECTION_ID = #{param.sectionId}</if><!-- 商圈 -->
		<if test="param.userId != null and param.userId != ''">AND USER_ID = #{param.userId}</if>
		GROUP BY
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionGroupSql}
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" />
			</otherwise>
		</choose>
		having COUNT(1) &gt; 0
		ORDER BY COUNT(1) DESC
	</select>
	
	<select id="getStoreDataCount" resultType="java.lang.Integer">
		SELECT COUNT(1)
		FROM FUN_LEASE_MIN
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
	</select>
	
	<select id="getStoreDataDaiKan" resultType="java.util.Map">
		select sum(iif(LEASE_EXPLRTH is null or LEASE_EXPLRTH=0,1,0)) notFk,sum(iif(LEASE_EXPLRTH=1,1,0)) isFk
		from FUN_LEASE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.regionId != null and param.regionId != ''">AND LEASE_REG = #{param.regionId}</if><!-- 行政区域 -->
		<if test="param.sectionId != null and param.sectionId != ''">AND SECTION_ID = #{param.sectionId}</if><!-- 商圈 -->
	</select>
	
	<select id="getStoreDataRanking" resultType="java.util.Map">
		with t1 as (
			select count(1) counts,
			<choose>
				<when test="param.rankType == 1">user_id</when>
				<otherwise>dept_id</otherwise>
			</choose>
			as rankId from FUN_LEASE_MIN 
			WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
			<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
			<choose>
				<when test="param.rankType == 1">
					and user_id &gt; 0 group by user_id
				</when>
				<otherwise>group by dept_id</otherwise>
			</choose>
		),t2 as (
			select top 15 count(1) counts,
			<choose>
				<when test="param.rankType == 1">user_id</when>
				<otherwise>dept_id</otherwise>
			</choose>
			as rankId from FUN_RENT_CUSTOMER_MIN 
			WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
			<if test="param.statusType == 1">AND RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
			<choose>
				<when test="param.rankType == 1">
					and user_id &gt; 0 group by user_id
				</when>
				<otherwise>group by dept_id</otherwise>
			</choose>
		)
		select top 15 t1.counts house,t2.counts cust,t1.rankId,t1.counts + t2.counts as totalCounts
		from t1 join t2 on t1.rankId=t2.rankId
		where t1.counts + t2.counts &gt; 0 
		order by t1.counts + t2.counts desc
	</select>
	
	<select id="getStoreDataAnalysisByPrice" resultType="java.util.Map">
		select 
		count(1) counts,${param.housePriceSql} byName,
		<include refid="getStoreDataAnalysisSql" /> as dim
		from FUN_LEASE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.queryDim == 'ROOM'">AND LEASE_ROOM is not null</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">AND LEASE_REG is not null</if><!-- 行政区 -->
		GROUP BY ${param.housePriceSql},
		<include refid="getStoreDataAnalysisSql" />
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysisByArea" resultType="java.util.Map">
		select 
		count(1) counts,${param.houseAreaSql} byName,
		<include refid="getStoreDataAnalysisSql" /> as dim
		from FUN_LEASE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.queryDim == 'ROOM'">AND LEASE_ROOM is not null</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">AND LEASE_REG is not null</if><!-- 行政区 -->
		GROUP BY ${param.houseAreaSql},
		<include refid="getStoreDataAnalysisSql" />
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysisByRoom" resultType="java.util.Map">
		select 
		count(1) counts,LEASE_ROOM byName,
		<include refid="getStoreDataAnalysisSql" /> as dim
		from FUN_LEASE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.queryDim == 'ROOM'">AND LEASE_ROOM is not null</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">AND LEASE_REG is not null</if><!-- 行政区 -->
		GROUP BY LEASE_ROOM,
		<include refid="getStoreDataAnalysisSql" />
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysisByUseage" resultType="java.util.Map">
		select top 10 count(1) counts,LEASE_TYPE byName
		from FUN_LEASE_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		and UNIT_FLOOR in 
		<foreach close=")" collection="param.idSet" item="item" open="(" separator=",">
			#{item}
		</foreach>
		<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.useage == 1">AND LEASE_USEAGE = 1</if><!-- 住宅 -->
		<if test="param.useage == 2">AND LEASE_USEAGE = 3</if><!-- 商铺 -->
		<if test="param.useage == 3">AND LEASE_USEAGE = 4</if><!-- 写字 -->
		group by LEASE_TYPE
		order by count(1) desc
	</select>
	
	<select id="selectLeaseListByIds" resultMap="BaseResultMap">
		select
		<foreach collection="queryColumn" item="column" separator=",">
			${column}
		</foreach>
		FROM FUN_LEASE_MIN WHERE
		COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		AND LEASE_ID IN
		<foreach close=")" collection="queryIds" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</select>
	
	<select id="getHouseCustBasicStatus" resultType="java.util.Map">
		select COUNT (1) AS totalCounts,
		SUM (IIF(LEASE_KEY = '1', 1, 0)) AS keyCount,
		SUM (IIF(LEASE_EXPLRTH = 1, 1, 0)) AS explrthCount,
		SUM (IIF(TRUE_FLAG = '1', 1, 0)) AS trueCount,
		SUM (IIF(LEASE_MAP &gt; '0', 1, 0)) AS photoCount,
		SUM (IIF(VIDEO_NUM &gt; '0', 1, 0)) AS voidoCount,
		SUM (IIF(PANORAMA_MAP &gt; '0', 1, 0)) AS panoramaCount
		from FUN_LEASE_MIN
		<where>
			AND COMP_ID = #{param.compId} AND CITY_ID = #{shardCityId}
			AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
			<if test="param.statusType == 1">AND LEASE_STATUS &lt;= 4</if><!-- 有效 -->
		</where>
	</select>
	
	<select id="getHouseBuyingPowerData" resultType="java.util.Map">
		SELECT count(1) house,${caseWhenSql} as price
		FROM FUN_LEASE_MIN
		WHERE CITY_ID = #{shardCityId} AND COMP_ID = #{compId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		AND LEASE_STATUS &lt;= 4
		GROUP BY ${caseWhenSql}
		ORDER BY count(1) desc
	</select>
	
	<sql id="getStoreDataAnalysisQueryDimSql">
		<if test="param.queryDim == 'STATUS'">LEASE_STATUS</if><!-- 状态 -->
		<if test="param.queryDim == 'PRICE'">${param.housePriceSql}</if><!-- 价格 -->
		<if test="param.queryDim == 'AREA'">${param.houseAreaSql}</if><!-- 面积 -->
		<if test="param.queryDim == 'ROOM'">LEASE_ROOM</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">LEASE_REG</if><!-- 行政区 -->
		<if test="param.queryDim == 'SECTION'">CONCAT(LEASE_REG,'_',SECTION_ID)</if><!-- 商圈 -->
		<if test="param.queryDim == 'USEAGE'">LEASE_USEAGE</if><!-- 用途 -->
		<if test="param.queryDim == 'BELONG'">LEASE_USEAGE</if><!-- 所属TODO -->
	</sql>
	<sql id="getStoreDataAnalysisSql">
		<if test="param.queryDim == 'PRICE'">${param.housePriceSql}</if><!-- 价格 -->
		<if test="param.queryDim == 'AREA'">${param.houseAreaSql}</if><!-- 面积 -->
		<if test="param.queryDim == 'ROOM'">LEASE_ROOM</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">LEASE_REG</if><!-- 行政区 -->
	</sql>
	
	<select id="getAppHouseCustStatusData" resultType="java.util.Map">
		select 
		ISNULL(sum(iif(CREATION_TIME &gt;= #{nowTime} and LEASE_STATUS=5,1,0)),0) as ncjHouseNow,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=5,1,0)),0) as ncjHouseWeek,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{monthTime} and LEASE_STATUS=5,1,0)),0) as ncjHouseMonth,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{nowTime} and LEASE_STATUS=6,1,0)),0) as wcjHouseNow,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{weekTime} and LEASE_STATUS=6,1,0)),0) as wcjHouseWeek,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{monthTime} and LEASE_STATUS=6,1,0)),0) as wcjHouseMonth
		from FUN_LEASE_MIN 
		where COMP_ID = #{compId} 
		<choose>
			<when test="rangeType == 5">
				<if test="deptId != null">
					and DEPT_ID=#{deptId}
				</if>
			</when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		in
			<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
		AND CITY_ID = #{shardCityId}
    </select>

	<sql id="chooseWhenTimeSqlForWeb">
		<choose>
			<when test="param.dateCountType == 0">
				convert(nvarchar(10),CREATION_TIME,120)
			</when>
			<when test="param.dateCountType == 1">
				(CONVERT (VARCHAR (10),iif (CONVERT (VARCHAR (10),CREATION_TIME,120) &gt;= '${param.startTime}' AND CONVERT (VARCHAR (10),CREATION_TIME,120) &lt;=DATEADD( WEEK,1,DATEADD(DAY, 1 - DATEPART(WEEKDAY, '${param.startTime}' )-1,'${param.startTime}' )),'${param.startTime}' ,DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, CREATION_TIME), CREATION_TIME)),120) + '-' + iif (CONVERT (VARCHAR (10),CREATION_TIME,120) &gt;= CONVERT (VARCHAR (10),DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, '${param.endTime}' ),'${param.endTime}' ),120),CONVERT (VARCHAR (10),'${param.endTime}',120) ,CONVERT (VARCHAR (10),DATEADD(WEEK,1,DATEADD(DAY,1 - DATEPART(WEEKDAY, CREATION_TIME)-1,CREATION_TIME )),120)))
			</when>
			<when test="param.dateCountType == 2">
				convert(nvarchar(7),CREATION_TIME,120)
			</when>
		</choose>
	</sql>
	<select id="getCompLeaseCountByDate" resultType="java.util.Map">
		SELECT <include refid="chooseWhenTimeSqlForWeb" /> as date , ISNULL(COUNT(1),0) data
		from  FUN_LEASE_MIN
		WHERE  COMP_ID =#{param.compId} AND CITY_ID = #{param.cityId}
		AND CREATION_TIME &gt;= #{param.startTime} AND CREATION_TIME &lt;= #{param.endTime}
		GROUP BY <include refid="chooseWhenTimeSqlForWeb" />
	</select>
</mapper>