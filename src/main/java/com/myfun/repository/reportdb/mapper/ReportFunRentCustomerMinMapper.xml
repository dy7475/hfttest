<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.reportdb.dao.ReportFunRentCustomerMinMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.reportdb.po.ReportFunRentCustomerMin">
    <!--@mbggenerated-->
    <id column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <id column="RENT_CUST_ID" jdbcType="INTEGER" property="rentCustId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CREATION_TIME" jdbcType="VARCHAR" property="creationTime" />
    <result column="LAST_SYNC_TIME" jdbcType="VARCHAR" property="lastSyncTime" />
    <result column="HOUSE_ROOM" jdbcType="TINYINT" property="houseRoom" />
    <result column="HOUSE_ROOM_1" jdbcType="TINYINT" property="houseRoom1" />
    <result column="HOUSE_AREA_LOW" jdbcType="NUMERIC" property="houseAreaLow" />
    <result column="HOUSE_AREA_HIGH" jdbcType="NUMERIC" property="houseAreaHigh" />
    <result column="HOUSE_PRICE_LOW" jdbcType="NUMERIC" property="housePriceLow" />
    <result column="HOUSE_PRICE_HIGH" jdbcType="NUMERIC" property="housePriceHigh" />
    <result column="RENT_CUST_STATUS" jdbcType="TINYINT" property="rentCustStatus" />
    <result column="HOUSE_LOOK" jdbcType="BIT" property="houseLook" />
    <result column="HOUSE_REGION" jdbcType="VARCHAR" property="houseRegion" />
    <result column="SECTION_ID" jdbcType="VARCHAR" property="sectionId" />
    <result column="BUILD_ID" jdbcType="VARCHAR" property="buildId" />
    <result column="HOUSE_USEAGE" jdbcType="VARCHAR" property="houseUseage" />
    <result column="HOUSE_TYPE" jdbcType="VARCHAR" property="houseType" />
    <result column="RENT_CUST_SOURCE" jdbcType="TINYINT" property="rentCustSource" />
    <result column="HAVE_TAG_FLAG" jdbcType="TINYINT" property="haveTagFlag" />
    <result column="PLATE_TYPE" jdbcType="TINYINT" property="plateType" />
    <result column="USER_LEVEL" jdbcType="INTEGER" property="userLevel" />
    <result column="TISSUE_LINE" jdbcType="VARCHAR" property="tissueLine" />
    <result column="PARTNER_ID" jdbcType="INTEGER" property="partnerId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    CITY_ID, RENT_CUST_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, 
    CREATION_TIME, LAST_SYNC_TIME, HOUSE_ROOM, HOUSE_ROOM_1, HOUSE_AREA_LOW, HOUSE_AREA_HIGH, 
    HOUSE_PRICE_LOW, HOUSE_PRICE_HIGH, RENT_CUST_STATUS, HOUSE_LOOK, HOUSE_REGION, SECTION_ID, 
    BUILD_ID, HOUSE_USEAGE, HOUSE_TYPE, RENT_CUST_SOURCE, HAVE_TAG_FLAG, PLATE_TYPE, 
    USER_LEVEL, TISSUE_LINE, PARTNER_ID
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMinExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_RENT_CUSTOMER_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_RENT_CUSTOMER_MIN
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    <!--@mbggenerated-->
    delete from FUN_RENT_CUSTOMER_MIN
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMinExample">
    <!--@mbggenerated-->
    delete from FUN_RENT_CUSTOMER_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMin">
    <!--@mbggenerated-->
    insert into FUN_RENT_CUSTOMER_MIN (CITY_ID, RENT_CUST_ID, COMP_ID, 
      AREA_ID, REG_ID, DEPT_ID, 
      GR_ID, USER_ID, ARCHIVE_ID, 
      CREATION_TIME, LAST_SYNC_TIME, HOUSE_ROOM, 
      HOUSE_ROOM_1, HOUSE_AREA_LOW, HOUSE_AREA_HIGH, 
      HOUSE_PRICE_LOW, HOUSE_PRICE_HIGH, RENT_CUST_STATUS, 
      HOUSE_LOOK, HOUSE_REGION, SECTION_ID, 
      BUILD_ID, HOUSE_USEAGE, HOUSE_TYPE, 
      RENT_CUST_SOURCE, HAVE_TAG_FLAG, PLATE_TYPE, 
      USER_LEVEL, TISSUE_LINE, PARTNER_ID
      )
    values (#{cityId,jdbcType=INTEGER}, #{rentCustId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, 
      #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, 
      #{creationTime,jdbcType=VARCHAR}, #{lastSyncTime,jdbcType=VARCHAR}, #{houseRoom,jdbcType=TINYINT}, 
      #{houseRoom1,jdbcType=TINYINT}, #{houseAreaLow,jdbcType=NUMERIC}, #{houseAreaHigh,jdbcType=NUMERIC}, 
      #{housePriceLow,jdbcType=NUMERIC}, #{housePriceHigh,jdbcType=NUMERIC}, #{rentCustStatus,jdbcType=TINYINT}, 
      #{houseLook,jdbcType=BIT}, #{houseRegion,jdbcType=VARCHAR}, #{sectionId,jdbcType=VARCHAR}, 
      #{buildId,jdbcType=VARCHAR}, #{houseUseage,jdbcType=VARCHAR}, #{houseType,jdbcType=VARCHAR}, 
      #{rentCustSource,jdbcType=TINYINT}, #{haveTagFlag,jdbcType=TINYINT}, #{plateType,jdbcType=TINYINT}, 
      #{userLevel,jdbcType=INTEGER}, #{tissueLine,jdbcType=VARCHAR}, #{partnerId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMin">
    <!--@mbggenerated-->
    insert into FUN_RENT_CUSTOMER_MIN
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="rentCustId != null">
        RENT_CUST_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="lastSyncTime != null">
        LAST_SYNC_TIME,
      </if>
      <if test="houseRoom != null">
        HOUSE_ROOM,
      </if>
      <if test="houseRoom1 != null">
        HOUSE_ROOM_1,
      </if>
      <if test="houseAreaLow != null">
        HOUSE_AREA_LOW,
      </if>
      <if test="houseAreaHigh != null">
        HOUSE_AREA_HIGH,
      </if>
      <if test="housePriceLow != null">
        HOUSE_PRICE_LOW,
      </if>
      <if test="housePriceHigh != null">
        HOUSE_PRICE_HIGH,
      </if>
      <if test="rentCustStatus != null">
        RENT_CUST_STATUS,
      </if>
      <if test="houseLook != null">
        HOUSE_LOOK,
      </if>
      <if test="houseRegion != null">
        HOUSE_REGION,
      </if>
      <if test="sectionId != null">
        SECTION_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="houseUseage != null">
        HOUSE_USEAGE,
      </if>
      <if test="houseType != null">
        HOUSE_TYPE,
      </if>
      <if test="rentCustSource != null">
        RENT_CUST_SOURCE,
      </if>
      <if test="haveTagFlag != null">
        HAVE_TAG_FLAG,
      </if>
      <if test="plateType != null">
        PLATE_TYPE,
      </if>
      <if test="userLevel != null">
        USER_LEVEL,
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE,
      </if>
      <if test="partnerId != null">
        PARTNER_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="rentCustId != null">
        #{rentCustId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTime != null">
        #{lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="houseRoom != null">
        #{houseRoom,jdbcType=TINYINT},
      </if>
      <if test="houseRoom1 != null">
        #{houseRoom1,jdbcType=TINYINT},
      </if>
      <if test="houseAreaLow != null">
        #{houseAreaLow,jdbcType=NUMERIC},
      </if>
      <if test="houseAreaHigh != null">
        #{houseAreaHigh,jdbcType=NUMERIC},
      </if>
      <if test="housePriceLow != null">
        #{housePriceLow,jdbcType=NUMERIC},
      </if>
      <if test="housePriceHigh != null">
        #{housePriceHigh,jdbcType=NUMERIC},
      </if>
      <if test="rentCustStatus != null">
        #{rentCustStatus,jdbcType=TINYINT},
      </if>
      <if test="houseLook != null">
        #{houseLook,jdbcType=BIT},
      </if>
      <if test="houseRegion != null">
        #{houseRegion,jdbcType=VARCHAR},
      </if>
      <if test="sectionId != null">
        #{sectionId,jdbcType=VARCHAR},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=VARCHAR},
      </if>
      <if test="houseUseage != null">
        #{houseUseage,jdbcType=VARCHAR},
      </if>
      <if test="houseType != null">
        #{houseType,jdbcType=VARCHAR},
      </if>
      <if test="rentCustSource != null">
        #{rentCustSource,jdbcType=TINYINT},
      </if>
      <if test="haveTagFlag != null">
        #{haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="plateType != null">
        #{plateType,jdbcType=TINYINT},
      </if>
      <if test="userLevel != null">
        #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        #{partnerId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMinExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_RENT_CUSTOMER_MIN
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER_MIN
    <set>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.rentCustId != null">
        RENT_CUST_ID = #{record.rentCustId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=VARCHAR},
      </if>
      <if test="record.lastSyncTime != null">
        LAST_SYNC_TIME = #{record.lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="record.houseRoom != null">
        HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      </if>
      <if test="record.houseRoom1 != null">
        HOUSE_ROOM_1 = #{record.houseRoom1,jdbcType=TINYINT},
      </if>
      <if test="record.houseAreaLow != null">
        HOUSE_AREA_LOW = #{record.houseAreaLow,jdbcType=NUMERIC},
      </if>
      <if test="record.houseAreaHigh != null">
        HOUSE_AREA_HIGH = #{record.houseAreaHigh,jdbcType=NUMERIC},
      </if>
      <if test="record.housePriceLow != null">
        HOUSE_PRICE_LOW = #{record.housePriceLow,jdbcType=NUMERIC},
      </if>
      <if test="record.housePriceHigh != null">
        HOUSE_PRICE_HIGH = #{record.housePriceHigh,jdbcType=NUMERIC},
      </if>
      <if test="record.rentCustStatus != null">
        RENT_CUST_STATUS = #{record.rentCustStatus,jdbcType=TINYINT},
      </if>
      <if test="record.houseLook != null">
        HOUSE_LOOK = #{record.houseLook,jdbcType=BIT},
      </if>
      <if test="record.houseRegion != null">
        HOUSE_REGION = #{record.houseRegion,jdbcType=VARCHAR},
      </if>
      <if test="record.sectionId != null">
        SECTION_ID = #{record.sectionId,jdbcType=VARCHAR},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=VARCHAR},
      </if>
      <if test="record.houseUseage != null">
        HOUSE_USEAGE = #{record.houseUseage,jdbcType=VARCHAR},
      </if>
      <if test="record.houseType != null">
        HOUSE_TYPE = #{record.houseType,jdbcType=VARCHAR},
      </if>
      <if test="record.rentCustSource != null">
        RENT_CUST_SOURCE = #{record.rentCustSource,jdbcType=TINYINT},
      </if>
      <if test="record.haveTagFlag != null">
        HAVE_TAG_FLAG = #{record.haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="record.plateType != null">
        PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      </if>
      <if test="record.userLevel != null">
        USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      </if>
      <if test="record.tissueLine != null">
        TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="record.partnerId != null">
        PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER_MIN
    set CITY_ID = #{record.cityId,jdbcType=INTEGER},
      RENT_CUST_ID = #{record.rentCustId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=VARCHAR},
      LAST_SYNC_TIME = #{record.lastSyncTime,jdbcType=VARCHAR},
      HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      HOUSE_ROOM_1 = #{record.houseRoom1,jdbcType=TINYINT},
      HOUSE_AREA_LOW = #{record.houseAreaLow,jdbcType=NUMERIC},
      HOUSE_AREA_HIGH = #{record.houseAreaHigh,jdbcType=NUMERIC},
      HOUSE_PRICE_LOW = #{record.housePriceLow,jdbcType=NUMERIC},
      HOUSE_PRICE_HIGH = #{record.housePriceHigh,jdbcType=NUMERIC},
      RENT_CUST_STATUS = #{record.rentCustStatus,jdbcType=TINYINT},
      HOUSE_LOOK = #{record.houseLook,jdbcType=BIT},
      HOUSE_REGION = #{record.houseRegion,jdbcType=VARCHAR},
      SECTION_ID = #{record.sectionId,jdbcType=VARCHAR},
      BUILD_ID = #{record.buildId,jdbcType=VARCHAR},
      HOUSE_USEAGE = #{record.houseUseage,jdbcType=VARCHAR},
      HOUSE_TYPE = #{record.houseType,jdbcType=VARCHAR},
      RENT_CUST_SOURCE = #{record.rentCustSource,jdbcType=TINYINT},
      HAVE_TAG_FLAG = #{record.haveTagFlag,jdbcType=TINYINT},
      PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{record.partnerId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMin">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER_MIN
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTime != null">
        LAST_SYNC_TIME = #{lastSyncTime,jdbcType=VARCHAR},
      </if>
      <if test="houseRoom != null">
        HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      </if>
      <if test="houseRoom1 != null">
        HOUSE_ROOM_1 = #{houseRoom1,jdbcType=TINYINT},
      </if>
      <if test="houseAreaLow != null">
        HOUSE_AREA_LOW = #{houseAreaLow,jdbcType=NUMERIC},
      </if>
      <if test="houseAreaHigh != null">
        HOUSE_AREA_HIGH = #{houseAreaHigh,jdbcType=NUMERIC},
      </if>
      <if test="housePriceLow != null">
        HOUSE_PRICE_LOW = #{housePriceLow,jdbcType=NUMERIC},
      </if>
      <if test="housePriceHigh != null">
        HOUSE_PRICE_HIGH = #{housePriceHigh,jdbcType=NUMERIC},
      </if>
      <if test="rentCustStatus != null">
        RENT_CUST_STATUS = #{rentCustStatus,jdbcType=TINYINT},
      </if>
      <if test="houseLook != null">
        HOUSE_LOOK = #{houseLook,jdbcType=BIT},
      </if>
      <if test="houseRegion != null">
        HOUSE_REGION = #{houseRegion,jdbcType=VARCHAR},
      </if>
      <if test="sectionId != null">
        SECTION_ID = #{sectionId,jdbcType=VARCHAR},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=VARCHAR},
      </if>
      <if test="houseUseage != null">
        HOUSE_USEAGE = #{houseUseage,jdbcType=VARCHAR},
      </if>
      <if test="houseType != null">
        HOUSE_TYPE = #{houseType,jdbcType=VARCHAR},
      </if>
      <if test="rentCustSource != null">
        RENT_CUST_SOURCE = #{rentCustSource,jdbcType=TINYINT},
      </if>
      <if test="haveTagFlag != null">
        HAVE_TAG_FLAG = #{haveTagFlag,jdbcType=TINYINT},
      </if>
      <if test="plateType != null">
        PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      </if>
      <if test="userLevel != null">
        USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      </if>
    </set>
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.reportdb.po.ReportFunRentCustomerMin">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER_MIN
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{creationTime,jdbcType=VARCHAR},
      LAST_SYNC_TIME = #{lastSyncTime,jdbcType=VARCHAR},
      HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      HOUSE_ROOM_1 = #{houseRoom1,jdbcType=TINYINT},
      HOUSE_AREA_LOW = #{houseAreaLow,jdbcType=NUMERIC},
      HOUSE_AREA_HIGH = #{houseAreaHigh,jdbcType=NUMERIC},
      HOUSE_PRICE_LOW = #{housePriceLow,jdbcType=NUMERIC},
      HOUSE_PRICE_HIGH = #{housePriceHigh,jdbcType=NUMERIC},
      RENT_CUST_STATUS = #{rentCustStatus,jdbcType=TINYINT},
      HOUSE_LOOK = #{houseLook,jdbcType=BIT},
      HOUSE_REGION = #{houseRegion,jdbcType=VARCHAR},
      SECTION_ID = #{sectionId,jdbcType=VARCHAR},
      BUILD_ID = #{buildId,jdbcType=VARCHAR},
      HOUSE_USEAGE = #{houseUseage,jdbcType=VARCHAR},
      HOUSE_TYPE = #{houseType,jdbcType=VARCHAR},
      RENT_CUST_SOURCE = #{rentCustSource,jdbcType=TINYINT},
      HAVE_TAG_FLAG = #{haveTagFlag,jdbcType=TINYINT},
      PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{partnerId,jdbcType=INTEGER}
    where CITY_ID = #{cityId,jdbcType=INTEGER}
      and RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </update>
  
  <select id="getFlowAnalysisCountList" resultType="java.util.Map">
    select RENT_CUST_STATUS AS caseStatus,COUNT(1) AS statusCount,DATEPART(MONTH,CREATION_TIME) AS monthofyear
    from FUN_RENT_CUSTOMER_MIN
    <where>
      AND COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
      AND CREATION_TIME &gt;= #{startTime}
      AND CREATION_TIME &lt;= #{endTime}
      <if test="null != areaId">
		AND AREA_ID = #{areaId}
      </if>
      <if test="null != regId">
		AND REG_ID = #{regId}
      </if>
      <if test="null != deptId">
		AND DEPT_ID = #{deptId}
      </if>
      <if test="null != userId">
		AND USER_ID = #{userId}
      </if>
    </where>
    GROUP BY RENT_CUST_STATUS,DATEPART(MONTH, CREATION_TIME) 
    ORDER BY RENT_CUST_STATUS ASC,DATEPART(MONTH, CREATION_TIME) ASC
    </select>
    
    <select id="getHouseCustStatusData" resultType="java.util.Map">
		select 
		sum(iif(CREATION_TIME &gt;= #{weekTime},1,0)) as xzCustWeek,
		sum(1) as xzCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=4,1,0)) as ydCustWeek,
		sum(iif(RENT_CUST_STATUS=4,1,0)) as ydCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=2,1,0)) as fpCustWeek,
		sum(iif(RENT_CUST_STATUS=2,1,0)) as fpCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=5,1,0)) as ncjCustWeek,
		sum(iif(RENT_CUST_STATUS=5,1,0)) as ncjCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=6,1,0)) as wcjCustWeek,
		sum(iif(RENT_CUST_STATUS=6,1,0)) as wcjCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=7,1,0)) as zxCustWeek,
		sum(iif(RENT_CUST_STATUS=7,1,0)) as zxCustMonth
				
		from FUN_RENT_CUSTOMER_MIN 
		where CREATION_TIME &gt;= #{monthTime} and COMP_ID = #{compId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		and CITY_ID = #{shardCityId}
    </select>
    
    <select id="countAvailableHouse" resultType="java.lang.Integer">
		select count(1) as custCount
		from FUN_RENT_CUSTOMER_MIN
		where RENT_CUST_STATUS &lt;= 4 and COMP_ID = #{compId}
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		and CITY_ID = #{shardCityId}
	</select>
	
	<select id="getHouseBuyingPowerData" resultType="java.util.Map">
		SELECT count(1)cust,${caseWhenSql} as price
		FROM FUN_RENT_CUSTOMER_MIN
		WHERE 
		CITY_ID = #{shardCityId} 
		AND	COMP_ID = #{compId} 
		<choose>
			<when test="param.serchRange != null and 'GROUP'!=param.serchRange and 'COMP'!=param.serchRange">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</when>
			<otherwise>
				<if test="param.serchRange !=null and 'GROUP'==param.serchRange">
					AND GR_ID = #{param.serchRangeId}
				</if>
			</otherwise>
		</choose>
		AND RENT_CUST_STATUS &lt;= 4
		GROUP BY ${caseWhenSql}
		ORDER BY count(1) desc
	</select>
	
	<select id="getStoreDataAnalysis" resultType="java.util.Map">
		SELECT
		<if test="param.topCount">TOP ${param.topCount}</if>
		COUNT(1) AS counts,
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionColumnSql} AS dim
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" /> AS dim
			</otherwise>
		</choose>
		<choose>
			<when test="param.queryDim == 'SECTION'">
				FROM FUN_RENT_CUSTOMER_MIN a
				left join FUN_CUST_DEMAND_SPLIT_1 b on b.case_id=a.rent_cust_id and b.case_type=4 AND b.CITY_ID = #{shardCityId}
				left join FUN_CUST_DEMAND_SPLIT_2 c on c.case_id=a.rent_cust_id and c.case_type=4 AND c.CITY_ID = #{shardCityId}
				WHERE a.COMP_ID=#{param.compId} AND a.CITY_ID = #{shardCityId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
			</when>
			<when test="param.queryDim == 'REG'">
				FROM FUN_RENT_CUSTOMER_MIN a
				left join FUN_CUST_DEMAND_SPLIT_1 b on b.case_id=a.rent_cust_id and b.case_type=4 AND b.CITY_ID = #{shardCityId}
				WHERE a.COMP_ID=#{param.compId} AND a.CITY_ID = #{shardCityId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
			</when>
			<when test="param.queryDim == 'USEAGE'">
				FROM FUN_RENT_CUSTOMER_MIN a
				left join FUN_CUST_DEMAND_SPLIT_4 b on b.case_id=a.rent_cust_id and b.case_type=4 AND b.CITY_ID = #{shardCityId}
				<if test="param.regionId != null and param.regionId != ''"><!-- 行政区域-->
					left join FUN_CUST_DEMAND_SPLIT_1 c on c.case_id=a.rent_cust_id and c.case_type=4 AND c.CITY_ID = #{shardCityId}
				</if>
				<if test="param.sectionId != null and param.sectionId != ''"><!-- 商圈 -->
					left join FUN_CUST_DEMAND_SPLIT_2 d on c.case_id=a.rent_cust_id and c.case_type=4 AND d.CITY_ID = #{shardCityId}
				</if>
				WHERE a.COMP_ID=#{param.compId} AND a.CITY_ID = #{shardCityId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
				<if test="param.regionId != null and param.regionId != ''">AND c.SOURCE_ID = #{param.regionId}</if><!-- 行政区域 -->
				<if test="param.sectionId != null and param.sectionId != ''">AND d.SOURCE_ID = #{param.sectionId}</if><!-- 商圈 -->
			</when>
			<otherwise>
				FROM FUN_RENT_CUSTOMER_MIN a
				<if test="param.regionId != null and param.regionId != ''"><!-- 行政区域-->
					left join FUN_CUST_DEMAND_SPLIT_1 c on c.case_id=a.rent_cust_id and c.case_type=4 AND c.CITY_ID = #{shardCityId}
				</if>
				<if test="param.sectionId != null and param.sectionId != ''"><!-- 商圈 -->
					left join FUN_CUST_DEMAND_SPLIT_2 d on c.case_id=a.rent_cust_id and c.case_type=4 AND d.CITY_ID = #{shardCityId}
				</if>
				WHERE a.COMP_ID=#{param.compId} AND a.CITY_ID = #{shardCityId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND a.RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
				<if test="param.regionId != null and param.regionId != ''">AND c.SOURCE_ID = #{param.regionId}</if><!-- 行政区域 -->
				<if test="param.sectionId != null and param.sectionId != ''">AND d.SOURCE_ID = #{param.sectionId}</if><!-- 商圈 -->
			<if test="param.userId != null and param.userId != ''">AND a.USER_ID = #{param.userId}</if>
			</otherwise>
		</choose>
		GROUP BY
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionGroupSql}
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" />
			</otherwise>
		</choose>
		having COUNT(1) &gt; 0
		ORDER BY COUNT(1) DESC
	</select>
	
	<select id="getStoreDataCount" resultType="java.lang.Integer">
		SELECT COUNT(1)
		FROM FUN_RENT_CUSTOMER_MIN
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
	</select>
	
	<select id="getStoreDataDaiKan" resultType="java.util.Map">
		select sum(iif(HOUSE_LOOK is null or HOUSE_LOOK=0,1,0)) notDk,
		sum(iif(HOUSE_LOOK=1,1,0)) isDk 
		from FUN_RENT_CUSTOMER_MIN 
		WHERE COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND RENT_CUST_STATUS &lt;= 4</if><!-- 有效 -->
		<if test="param.regionId != null and param.regionId != ''">AND REG_ID = #{param.regionId}</if><!-- 行政区域 -->
		<if test="param.sectionId != null and param.sectionId != ''">AND SECTION_ID = #{param.sectionId}</if><!-- 商圈 -->
	</select>
	
	<!-- <select id="getStoreDataAnalysisByUseage" resultType="java.util.Map">
		select top 10 count(1) counts,c.SOURCE_ID byName
		from FUN_RENT_CUSTOMER_MIN a
		join FUN_CUST_DEMAND_SPLIT_4 b on b.CASE_TYPE=3 and a.RENT_CUST_ID = b.CASE_ID AND b.CITY_ID = #{shardCityId}
		join FUN_CUST_DEMAND_SPLIT_5 c on c.CASE_TYPE=3 and a.RENT_CUST_ID = c.CASE_ID AND c.CITY_ID = #{shardCityId}
		WHERE a.COMP_ID=#{param.compId} AND CITY_ID = #{shardCityId}
		AND a.${param.serchRange}=#{param.serchRangeId}搜索范围
		<if test="param.statusType == 1">AND a.RENT_CUST_STATUS &lt;= 4</if>有效
		<if test="param.useage == 1">AND b.SOURCE_ID = 1</if>住宅
		<if test="param.useage == 2">AND b.SOURCE_ID = 3</if>商铺
		<if test="param.useage == 3">AND b.SOURCE_ID = 4</if>写字
		group by c.SOURCE_ID
		order by count(1) desc
	</select> -->
	<sql id="getStoreDataAnalysisQueryDimSql">
		<if test="param.queryDim == 'STATUS'">RENT_CUST_STATUS</if><!-- 有效 -->
		<if test="param.queryDim == 'PRICE'">${param.custPriceSql}</if><!-- 价格 -->
		<if test="param.queryDim == 'AREA'">${param.custAreaSql}</if><!-- 面积 -->
		<if test="param.queryDim == 'ROOM'">HOUSE_ROOM_1</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">b.SOURCE_ID</if><!-- 行政区 -->
		<if test="param.queryDim == 'SECTION'">CONCAT(b.SOURCE_ID,'_',c.SOURCE_ID)</if><!-- 商圈 -->
		<if test="param.queryDim == 'USEAGE'">b.SOURCE_ID</if><!-- 用途 -->
		<if test="param.queryDim == 'BELONG'">HOUSE_USEAGE</if><!-- 所属TODO -->
	</sql>
	
	<select id="getAppCustStatusData" resultType="java.util.Map">
		select 
		ISNULL(sum(iif(CREATION_TIME &gt;= #{nowTime} and RENT_CUST_STATUS=5,1,0)),0) as ncjCustNow,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=5,1,0)),0) as ncjCustWeek,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{monthTime} and RENT_CUST_STATUS=5,1,0)),0) as ncjCustMonth,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{nowTime} and RENT_CUST_STATUS=6,1,0)),0) as wcjCustNow,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=6,1,0)),0) as wcjCustWeek,
		ISNULL(sum(iif(CREATION_TIME &gt;= #{monthTime} and RENT_CUST_STATUS=6,1,0)),0) as wcjCustMonth
		from FUN_RENT_CUSTOMER_MIN  
		where COMP_ID = #{compId} AND CITY_ID = #{shardCityId}
		<choose>
			<when test="rangeType == 5">
				<if test="deptId != null">
					and DEPT_ID=#{deptId}
				</if>
			</when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		in
			<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
	</select>

	<sql id="chooseWhenTimeSqlForWeb">
		<choose>
			<when test="param.dateCountType == 0">
				convert(nvarchar(10),CREATION_TIME,120)
			</when>
			<when test="param.dateCountType == 1">
				(CONVERT (VARCHAR (10),iif (CONVERT (VARCHAR (10),CREATION_TIME,120) &gt;= '${param.startTime}' AND CONVERT (VARCHAR (10),CREATION_TIME,120) &lt;=DATEADD( WEEK,1,DATEADD(DAY, 1 - DATEPART(WEEKDAY, '${param.startTime}' )-1,'${param.startTime}' )),'${param.startTime}' ,DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, CREATION_TIME), CREATION_TIME)),120) + '-' + iif (CONVERT (VARCHAR (10),CREATION_TIME,120) &gt;= CONVERT (VARCHAR (10),DATEADD( WEEKDAY,1 - DATEPART(WEEKDAY, '${param.endTime}' ),'${param.endTime}' ),120),CONVERT (VARCHAR (10),'${param.endTime}',120) ,CONVERT (VARCHAR (10),DATEADD(WEEK,1,DATEADD(DAY,1 - DATEPART(WEEKDAY, CREATION_TIME)-1,CREATION_TIME )),120)))
			</when>
			<when test="param.dateCountType == 2">
				convert(nvarchar(7),CREATION_TIME,120)
			</when>
		</choose>
	</sql>
	<select id="getCompRentCustomerCountByDate" resultType="java.util.Map">
		SELECT <include refid="chooseWhenTimeSqlForWeb" /> as date , ISNULL(COUNT(1),0) data
		from  FUN_RENT_CUSTOMER_MIN
		WHERE  COMP_ID =#{param.compId} AND CITY_ID = #{param.cityId}
		AND CREATION_TIME &gt;= #{param.startTime} AND CREATION_TIME &lt;= #{param.endTime}
		GROUP BY <include refid="chooseWhenTimeSqlForWeb" />
	</select>
</mapper>