<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.reportdb.dao.ReportFunWageDetail1Mapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.reportdb.po.ReportFunWageDetail1">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CASE_TYPE" jdbcType="INTEGER" property="caseType" />
    <result column="CASE_ID" jdbcType="INTEGER" property="caseId" />
    <result column="TRACK_ID" jdbcType="INTEGER" property="trackId" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="VALID_FLAG" jdbcType="TINYINT" property="validFlag" />
    <result column="ASSESSMENT_MONTH" jdbcType="VARCHAR" property="assessmentMonth" />
    <result column="SOURCE_FROM" jdbcType="TINYINT" property="sourceFrom" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, CITY_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, CASE_TYPE, 
    CASE_ID, TRACK_ID, CREATE_TIME, VALID_FLAG, ASSESSMENT_MONTH, SOURCE_FROM
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1Example" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_WAGE_DETAIL_1
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_WAGE_DETAIL_1
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbggenerated-->
    delete from FUN_WAGE_DETAIL_1
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1Example">
    <!--@mbggenerated-->
    delete from FUN_WAGE_DETAIL_1
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_WAGE_DETAIL_1 (CITY_ID, COMP_ID, AREA_ID, 
      REG_ID, DEPT_ID, GR_ID, 
      USER_ID, ARCHIVE_ID, CASE_TYPE, 
      CASE_ID, TRACK_ID, CREATE_TIME, 
      VALID_FLAG, ASSESSMENT_MONTH, SOURCE_FROM
      )
    values (#{cityId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, #{caseType,jdbcType=INTEGER}, 
      #{caseId,jdbcType=INTEGER}, #{trackId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{validFlag,jdbcType=TINYINT}, #{assessmentMonth,jdbcType=VARCHAR}, #{sourceFrom,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_WAGE_DETAIL_1
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="caseId != null">
        CASE_ID,
      </if>
      <if test="trackId != null">
        TRACK_ID,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="validFlag != null">
        VALID_FLAG,
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
      <if test="sourceFrom != null">
        SOURCE_FROM,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
      <if test="trackId != null">
        #{trackId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="validFlag != null">
        #{validFlag,jdbcType=TINYINT},
      </if>
      <if test="assessmentMonth != null">
        #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="sourceFrom != null">
        #{sourceFrom,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1Example" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_WAGE_DETAIL_1
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_WAGE_DETAIL_1
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.caseType != null">
        CASE_TYPE = #{record.caseType,jdbcType=INTEGER},
      </if>
      <if test="record.caseId != null">
        CASE_ID = #{record.caseId,jdbcType=INTEGER},
      </if>
      <if test="record.trackId != null">
        TRACK_ID = #{record.trackId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.validFlag != null">
        VALID_FLAG = #{record.validFlag,jdbcType=TINYINT},
      </if>
      <if test="record.assessmentMonth != null">
        ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.sourceFrom != null">
        SOURCE_FROM = #{record.sourceFrom,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_WAGE_DETAIL_1
    set ID = #{record.id,jdbcType=BIGINT},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CASE_TYPE = #{record.caseType,jdbcType=INTEGER},
      CASE_ID = #{record.caseId,jdbcType=INTEGER},
      TRACK_ID = #{record.trackId,jdbcType=INTEGER},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      VALID_FLAG = #{record.validFlag,jdbcType=TINYINT},
      ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      SOURCE_FROM = #{record.sourceFrom,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1">
    <!--@mbggenerated-->
    update FUN_WAGE_DETAIL_1
    <set>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        CASE_ID = #{caseId,jdbcType=INTEGER},
      </if>
      <if test="trackId != null">
        TRACK_ID = #{trackId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="validFlag != null">
        VALID_FLAG = #{validFlag,jdbcType=TINYINT},
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="sourceFrom != null">
        SOURCE_FROM = #{sourceFrom,jdbcType=TINYINT},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.reportdb.po.ReportFunWageDetail1">
    <!--@mbggenerated-->
    update FUN_WAGE_DETAIL_1
    set CITY_ID = #{cityId,jdbcType=INTEGER},
      COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CASE_TYPE = #{caseType,jdbcType=INTEGER},
      CASE_ID = #{caseId,jdbcType=INTEGER},
      TRACK_ID = #{trackId,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      VALID_FLAG = #{validFlag,jdbcType=TINYINT},
      ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      SOURCE_FROM = #{sourceFrom,jdbcType=TINYINT}
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <resultMap extends="BaseResultMap" id="BaseResultMapLease" type="com.myfun.repository.reportdb.dto.ReportFunWageDetail1Dto">
    <result column="LEASE_FLOORS" jdbcType="INTEGER" property="leaseFloors" />
    <result column="LEASE_FLOOR" jdbcType="INTEGER" property="leaseFloor" />
    <result column="LEASE_USEAGE" jdbcType="INTEGER" property="leaseUseage" />
    <result column="SHOP_USAGE" jdbcType="VARCHAR" property="shopUsage" />
    <result column="LEASE_MAP" jdbcType="INTEGER" property="leaseMap" />
    <result column="LEASE_KEY" jdbcType="BIT" property="leaseKey" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="LEASE_EXPLRTH" jdbcType="BIT" property="leaseExplrth" />
    <result column="LEASE_LEVEL" jdbcType="INTEGER" property="leaseLevel" />
    <result column="PLATE_TYPE" jdbcType="INTEGER" property="plateType" />
    <result column="LEASE_AREA" jdbcType="NUMERIC" property="leaseArea" />
    <result column="LEASE_TOTAL_PRICE" jdbcType="NUMERIC" property="leaseTotalPrice" />
    <result column="LEASE_ROOM" jdbcType="INTEGER" property="leaseRoom" />
    <result column="LEASE_HALL" jdbcType="INTEGER" property="leaseHall" />
    <result column="LEASE_WEI" jdbcType="INTEGER" property="leaseWei" />
  </resultMap>
    <resultMap extends="BaseResultMap" id="BaseResultMapSale" type="com.myfun.repository.reportdb.dto.ReportFunWageDetail1Dto">
    <result column="SALE_FLOORS" jdbcType="INTEGER" property="saleFloors" />
    <result column="SALE_FLOOR" jdbcType="INTEGER" property="saleFloor" />
    <result column="SALE_USEAGE" jdbcType="INTEGER" property="saleUseage" />
    <result column="SHOP_USAGE" jdbcType="VARCHAR" property="shopUsage" />
    <result column="SALE_MAP" jdbcType="INTEGER" property="saleMap" />
    <result column="SALE_KEY" jdbcType="BIT" property="saleKey" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="SALE_EXPLRTH" jdbcType="BIT" property="saleExplrth" />
    <result column="SALE_LEVEL" jdbcType="INTEGER" property="saleLevel" />
    <result column="PLATE_TYPE" jdbcType="INTEGER" property="plateType" />
    <result column="SALE_AREA" jdbcType="NUMERIC" property="saleArea" />
    <result column="SALE_TOTAL_PRICE" jdbcType="NUMERIC" property="saleTotalPrice" />
    <result column="SALE_UNIT_PRICE" jdbcType="NUMERIC" property="saleUnitPrice" />
    <result column="SALE_ROOM" jdbcType="INTEGER" property="saleRoom" />
    <result column="SALE_HALL" jdbcType="INTEGER" property="saleHall" />
    <result column="SALE_WEI" jdbcType="INTEGER" property="saleWei" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BaseResultMapCust" type="com.myfun.repository.reportdb.dto.ReportFunWageDetail1Dto">
      <result column="CUST_LEVEL" jdbcType="VARCHAR" property="custLevel" />
      <result column="HOUSE_USEAGE" jdbcType="VARCHAR" property="houseUseage" />
      <result column="HOUSE_ROOM" jdbcType="INTEGER" property="houseRoom" />
      <result column="HOUSE_ROOM1" jdbcType="INTEGER" property="houseRoom1" />
      <result column="HOUSE_FLOOR_LOW" jdbcType="INTEGER" property="houseFloorLow" />
      <result column="HOUSE_FLOOR_HIGH" jdbcType="INTEGER" property="houseFloorHigh" />
      <result column="HOUSE_PRICE_LOW" jdbcType="NUMERIC" property="housePriceLow" />
      <result column="HOUSE_PRICE_HIGH" jdbcType="NUMERIC" property="housePriceHigh" />
      <result column="HOUSE_AREA_LOW" jdbcType="NUMERIC" property="houseAreaLow" />
      <result column="HOUSE_AREA_HIGH" jdbcType="NUMERIC" property="houseAreaHigh" />
      <result column="HOUSE_LOOK" jdbcType="BIT" property="houseLook" />
      <result column="PLATE_TYPE" jdbcType="INTEGER" property="plateType" />
      <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
      <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
  </resultMap>
  <resultMap extends="BaseResultMapCust" id="BaseResultMapBuy" type="com.myfun.repository.reportdb.dto.ReportFunWageDetail1Dto">
      <result column="BUY_CUST_NO" jdbcType="VARCHAR" property="buyCustNo" />
      <result column="BUY_CUST_NAME" jdbcType="VARCHAR" property="buyCustName" />
      <result column="BUY_CUST_LEVEL" jdbcType="INTEGER" property="buyCustLevel" />
  </resultMap>
  <resultMap extends="BaseResultMapCust" id="BaseResultMapRent" type="com.myfun.repository.reportdb.dto.ReportFunWageDetail1Dto">
      <result column="RENT_CUST_NO" jdbcType="VARCHAR" property="rentCustNo" />
      <result column="RENT_CUST_NAME" jdbcType="VARCHAR" property="rentCustName" />
      <result column="RENT_CUST_LEVEL" jdbcType="INTEGER" property="rentCustLevel" />
  </resultMap>
  
	<select id="selectBuyData" resultMap="BaseResultMap">
		SELECT A.ID, A.CITY_ID, A.COMP_ID, A.AREA_ID, A.REG_ID, A.DEPT_ID, A.GR_ID, A.USER_ID,
        A.ARCHIVE_ID, A.CASE_TYPE, A.CASE_ID, A.TRACK_ID, A.CREATE_TIME, A.VALID_FLAG, A.ASSESSMENT_MONTH, A.SOURCE_FROM
		FROM FUN_WAGE_DETAIL_${param.countType} A
		WHERE
		A.ASSESSMENT_MONTH = #{param.assessmentMonth} AND A.CASE_TYPE = #{param.caseType} and IS_REPEAT=0 and case_id is not null
		<if test="param.compId != null">
			AND A.COMP_ID = #{param.compId}
		</if>
		<if test="param.areaIds.size &gt; 0">
			AND A.AREA_ID in
			<foreach close=")" collection="param.areaIds" item="areaId" open="(" separator=",">
				#{areaId}
			</foreach>
		</if>
		<if test="param.cityId != null">
			AND A.CITY_ID = #{param.cityId}
		</if>
		<if test="param.regIds.size &gt; 0">
			AND A.REG_ID in
			<foreach close=")" collection="param.regIds" item="regId" open="(" separator=",">
				#{regId}
			</foreach>
		</if>
		<if test="param.deptIds.size &gt; 0">
			AND A.DEPT_ID in
			<foreach close=")" collection="param.deptIds" item="deptId" open="(" separator=",">
				#{deptId}
			</foreach>
		</if>
		<if test="param.grIds.size &gt; 0">
			AND A.GR_ID in
			<foreach close=")" collection="param.grIds" item="grId" open="(" separator=",">
				#{grId}
			</foreach>
		</if>
		<if test="param.userId != null">
			AND A.USER_ID = #{param.userId}
		</if>
		<if test="param.archiveId != null">
			AND A.ARCHIVE_ID = #{param.archiveId}
		</if>
		<if test="param.validFlag != null">
			AND A.VALID_FLAG = #{param.validFlag}
		</if>
        <if test="null != param.sourceFrom and param.sourceFrom.size() > 0">
          AND SOURCE_FROM IN
          <foreach collection="param.sourceFrom" item="sourceFrom" close=")" open="(" separator=",">
            #{sourceFrom}
          </foreach>
        </if>
        <choose>
          <when test="param.checkBusiness == 1">
            <choose>
              <when test="1== param.countType or 8==param.countType">
                and A.case_Type = 1
              </when>
              <when test="2== param.countType or 15==param.countType">
                and A.case_Type = 3
              </when>
            </choose>
          </when>
          <when test="param.checkBusiness == 2">
            <choose>
              <when test="1== param.countType or 8==param.countType">
                and A.case_Type = 2
              </when>
              <when test="2== param.countType or 15==param.countType">
                and A.case_Type = 4
              </when>
            </choose>
          </when>
        </choose>
		ORDER BY A.CREATE_TIME DESC
	</select>
	<select id="selectBuyDataCount" resultType="java.util.Map">
		SELECT sum(iif(case_type=#{param.saleCaseType}, 1, 0)) as sale ,sum(iif(case_type=#{param.leaseCaseType}, 1, 0)) lease
        FROM FUN_WAGE_DETAIL_${param.countType} A
		WHERE
		  A.ASSESSMENT_MONTH = #{param.assessmentMonth} and IS_REPEAT=0 and CASE_ID is not null
		<if test="param.compId != null">
			AND A.COMP_ID = #{param.compId}
		</if>
		<if test="param.areaIds.size &gt; 0">
			AND A.AREA_ID in
			<foreach close=")" collection="param.areaIds" item="areaId" open="(" separator=",">
				#{areaId}
			</foreach>
		</if>
		<if test="param.cityId != null">
			AND A.CITY_ID = #{param.cityId}
		</if>
		<if test="param.regIds.size &gt; 0">
			AND A.REG_ID in
			<foreach close=")" collection="param.regIds" item="regId" open="(" separator=",">
				#{regId}
			</foreach>
		</if>
		<if test="param.deptIds.size &gt; 0">
			AND A.DEPT_ID in
			<foreach close=")" collection="param.deptIds" item="deptId" open="(" separator=",">
				#{deptId}
			</foreach>
		</if>
		<if test="param.grIds.size &gt; 0">
			AND A.GR_ID in
			<foreach close=")" collection="param.grIds" item="grId" open="(" separator=",">
				#{grId}
			</foreach>
		</if>
		<if test="param.userId != null">
			AND A.USER_ID = #{param.userId}
		</if>
		<if test="param.archiveId != null">
			AND A.ARCHIVE_ID = #{param.archiveId}
		</if>
		<if test="param.validFlag != null">
			AND A.VALID_FLAG = #{param.validFlag}
		</if>

        <if test="null != param.sourceFrom and param.sourceFrom.size() > 0">
          AND SOURCE_FROM IN
          <foreach collection="param.sourceFrom" item="sourceFrom" close=")" open="(" separator=",">
            #{sourceFrom}
          </foreach>
        </if>

        <choose>
          <when test="param.checkBusiness == 1">
              <choose>
                  <when test="1== param.countType or 8==param.countType">
                      and A.case_Type = 1
                  </when>
                  <when test="2== param.countType or 15==param.countType">
                    and A.case_Type = 3
                  </when>
              </choose>
          </when>
          <when test="param.checkBusiness == 2">
            <choose>
              <when test="1== param.countType or 8==param.countType">
                and A.case_Type = 2
              </when>
              <when test="2== param.countType or 15==param.countType">
                and A.case_Type = 4
              </when>
            </choose>
          </when>
        </choose>

	</select>

	<update id="updateCountById">
		UPDATE
		FUN_WAGE_DETAIL_${param.countType}
		SET VALID_FLAG = #{param.validFlag}
		WHERE ID IN (${param.detailIds}) and city_id=#{param.cityId}
	</update>
	
</mapper>