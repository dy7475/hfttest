<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunWageMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunWage">
    <!--@mbggenerated-->
    <id column="WAGE_ID" jdbcType="INTEGER" property="wageId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="PROFIT_WAGE" jdbcType="NUMERIC" property="profitWage" />
    <result column="WAGE_MONEY" jdbcType="NUMERIC" property="wageMoney" />
    <result column="OTHER_WAGE" jdbcType="NUMERIC" property="otherWage" />
    <result column="DEL_WAGE" jdbcType="NUMERIC" property="delWage" />
    <result column="REAL_WAGE" jdbcType="NUMERIC" property="realWage" />
    <result column="CHECK_STATUS" jdbcType="TINYINT" property="checkStatus" />
    <result column="CHECK_USER" jdbcType="INTEGER" property="checkUser" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CREATE_DATE" jdbcType="VARCHAR" property="createDate" />
    <result column="CHECK_TIME" jdbcType="TIMESTAMP" property="checkTime" />
    <result column="ASSESSMENT_MONTH" jdbcType="VARCHAR" property="assessmentMonth" />
    <result column="BASE_WAGE_GRANT_STATUS" jdbcType="TINYINT" property="baseWageGrantStatus" />
    <result column="COMMISSION_GRANT_STATUS" jdbcType="TINYINT" property="commissionGrantStatus" />
    <result column="PERSON_WORKCOUNT_AMOUNT" jdbcType="NUMERIC" property="personWorkcountAmount" />
    <result column="MANAGE_WORKCOUNT_AMOUNT" jdbcType="NUMERIC" property="manageWorkcountAmount" />
    <result column="MANAGE_PROFIT_WAGE" jdbcType="NUMERIC" property="manageProfitWage" />
    <result column="PERSON_PROFIT_WAGE" jdbcType="NUMERIC" property="personProfitWage" />
    <result column="PAID_WAGE_AMOUNT" jdbcType="NUMERIC" property="paidWageAmount" />
    <result column="PERSON_COMMSION_AMOUNT" jdbcType="NUMERIC" property="personCommsionAmount" />
    <result column="MANAGE_COMMSION_AMOUNT" jdbcType="NUMERIC" property="manageCommsionAmount" />
    <result column="REAL_WAGE_CK" jdbcType="NUMERIC" property="realWageCk" />
    <result column="EXPLAIN" jdbcType="VARCHAR" property="explain" />
    <result column="ADJUST_WAGE" jdbcType="NUMERIC" property="adjustWage" />
    <result column="EFFECTIVE_STATUS" jdbcType="TINYINT" property="effectiveStatus" />
    <result column="ORGANIZATION_PATH" jdbcType="VARCHAR" property="organizationPath" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    WAGE_ID, COMP_ID, DEPT_ID, PROFIT_WAGE, WAGE_MONEY, OTHER_WAGE, DEL_WAGE, REAL_WAGE, 
    CHECK_STATUS, CHECK_USER, USER_ID, CREATE_DATE, CHECK_TIME, ASSESSMENT_MONTH, BASE_WAGE_GRANT_STATUS, 
    COMMISSION_GRANT_STATUS, PERSON_WORKCOUNT_AMOUNT, MANAGE_WORKCOUNT_AMOUNT, MANAGE_PROFIT_WAGE, 
    PERSON_PROFIT_WAGE, PAID_WAGE_AMOUNT, PERSON_COMMSION_AMOUNT, MANAGE_COMMSION_AMOUNT, 
    REAL_WAGE_CK, [EXPLAIN], ADJUST_WAGE, EFFECTIVE_STATUS, ORGANIZATION_PATH
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunWageExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_WAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_WAGE
    where WAGE_ID = #{wageId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_WAGE
    where WAGE_ID = #{wageId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunWageExample">
    <!--@mbggenerated-->
    delete from FUN_WAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunWage">
    <!--@mbggenerated-->
    <selectKey keyProperty="wageId" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_WAGE (COMP_ID, DEPT_ID, PROFIT_WAGE, 
      WAGE_MONEY, OTHER_WAGE, DEL_WAGE, 
      REAL_WAGE, CHECK_STATUS, CHECK_USER, 
      USER_ID, CREATE_DATE, CHECK_TIME, 
      ASSESSMENT_MONTH, BASE_WAGE_GRANT_STATUS, COMMISSION_GRANT_STATUS, 
      PERSON_WORKCOUNT_AMOUNT, MANAGE_WORKCOUNT_AMOUNT, 
      MANAGE_PROFIT_WAGE, PERSON_PROFIT_WAGE, PAID_WAGE_AMOUNT, 
      PERSON_COMMSION_AMOUNT, MANAGE_COMMSION_AMOUNT, 
      REAL_WAGE_CK, [EXPLAIN], ADJUST_WAGE, 
      EFFECTIVE_STATUS, ORGANIZATION_PATH)
    values (#{compId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{profitWage,jdbcType=NUMERIC}, 
      #{wageMoney,jdbcType=NUMERIC}, #{otherWage,jdbcType=NUMERIC}, #{delWage,jdbcType=NUMERIC}, 
      #{realWage,jdbcType=NUMERIC}, #{checkStatus,jdbcType=TINYINT}, #{checkUser,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{createDate,jdbcType=VARCHAR}, #{checkTime,jdbcType=TIMESTAMP}, 
      #{assessmentMonth,jdbcType=VARCHAR}, #{baseWageGrantStatus,jdbcType=TINYINT}, #{commissionGrantStatus,jdbcType=TINYINT}, 
      #{personWorkcountAmount,jdbcType=NUMERIC}, #{manageWorkcountAmount,jdbcType=NUMERIC}, 
      #{manageProfitWage,jdbcType=NUMERIC}, #{personProfitWage,jdbcType=NUMERIC}, #{paidWageAmount,jdbcType=NUMERIC}, 
      #{personCommsionAmount,jdbcType=NUMERIC}, #{manageCommsionAmount,jdbcType=NUMERIC}, 
      #{realWageCk,jdbcType=NUMERIC}, #{explain,jdbcType=VARCHAR}, #{adjustWage,jdbcType=NUMERIC}, 
      #{effectiveStatus,jdbcType=TINYINT}, #{organizationPath,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunWage">
    <!--@mbggenerated-->
    <selectKey keyProperty="wageId" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_WAGE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="profitWage != null">
        PROFIT_WAGE,
      </if>
      <if test="wageMoney != null">
        WAGE_MONEY,
      </if>
      <if test="otherWage != null">
        OTHER_WAGE,
      </if>
      <if test="delWage != null">
        DEL_WAGE,
      </if>
      <if test="realWage != null">
        REAL_WAGE,
      </if>
      <if test="checkStatus != null">
        CHECK_STATUS,
      </if>
      <if test="checkUser != null">
        CHECK_USER,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="createDate != null">
        CREATE_DATE,
      </if>
      <if test="checkTime != null">
        CHECK_TIME,
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
      <if test="baseWageGrantStatus != null">
        BASE_WAGE_GRANT_STATUS,
      </if>
      <if test="commissionGrantStatus != null">
        COMMISSION_GRANT_STATUS,
      </if>
      <if test="personWorkcountAmount != null">
        PERSON_WORKCOUNT_AMOUNT,
      </if>
      <if test="manageWorkcountAmount != null">
        MANAGE_WORKCOUNT_AMOUNT,
      </if>
      <if test="manageProfitWage != null">
        MANAGE_PROFIT_WAGE,
      </if>
      <if test="personProfitWage != null">
        PERSON_PROFIT_WAGE,
      </if>
      <if test="paidWageAmount != null">
        PAID_WAGE_AMOUNT,
      </if>
      <if test="personCommsionAmount != null">
        PERSON_COMMSION_AMOUNT,
      </if>
      <if test="manageCommsionAmount != null">
        MANAGE_COMMSION_AMOUNT,
      </if>
      <if test="realWageCk != null">
        REAL_WAGE_CK,
      </if>
      <if test="explain != null">
        [EXPLAIN],
      </if>
      <if test="adjustWage != null">
        ADJUST_WAGE,
      </if>
      <if test="effectiveStatus != null">
        EFFECTIVE_STATUS,
      </if>
      <if test="organizationPath != null">
        ORGANIZATION_PATH,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="profitWage != null">
        #{profitWage,jdbcType=NUMERIC},
      </if>
      <if test="wageMoney != null">
        #{wageMoney,jdbcType=NUMERIC},
      </if>
      <if test="otherWage != null">
        #{otherWage,jdbcType=NUMERIC},
      </if>
      <if test="delWage != null">
        #{delWage,jdbcType=NUMERIC},
      </if>
      <if test="realWage != null">
        #{realWage,jdbcType=NUMERIC},
      </if>
      <if test="checkStatus != null">
        #{checkStatus,jdbcType=TINYINT},
      </if>
      <if test="checkUser != null">
        #{checkUser,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=VARCHAR},
      </if>
      <if test="checkTime != null">
        #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="assessmentMonth != null">
        #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="baseWageGrantStatus != null">
        #{baseWageGrantStatus,jdbcType=TINYINT},
      </if>
      <if test="commissionGrantStatus != null">
        #{commissionGrantStatus,jdbcType=TINYINT},
      </if>
      <if test="personWorkcountAmount != null">
        #{personWorkcountAmount,jdbcType=NUMERIC},
      </if>
      <if test="manageWorkcountAmount != null">
        #{manageWorkcountAmount,jdbcType=NUMERIC},
      </if>
      <if test="manageProfitWage != null">
        #{manageProfitWage,jdbcType=NUMERIC},
      </if>
      <if test="personProfitWage != null">
        #{personProfitWage,jdbcType=NUMERIC},
      </if>
      <if test="paidWageAmount != null">
        #{paidWageAmount,jdbcType=NUMERIC},
      </if>
      <if test="personCommsionAmount != null">
        #{personCommsionAmount,jdbcType=NUMERIC},
      </if>
      <if test="manageCommsionAmount != null">
        #{manageCommsionAmount,jdbcType=NUMERIC},
      </if>
      <if test="realWageCk != null">
        #{realWageCk,jdbcType=NUMERIC},
      </if>
      <if test="explain != null">
        #{explain,jdbcType=VARCHAR},
      </if>
      <if test="adjustWage != null">
        #{adjustWage,jdbcType=NUMERIC},
      </if>
      <if test="effectiveStatus != null">
        #{effectiveStatus,jdbcType=TINYINT},
      </if>
      <if test="organizationPath != null">
        #{organizationPath,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunWageExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_WAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_WAGE
    <set>
      <if test="record.wageId != null">
        WAGE_ID = #{record.wageId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.profitWage != null">
        PROFIT_WAGE = #{record.profitWage,jdbcType=NUMERIC},
      </if>
      <if test="record.wageMoney != null">
        WAGE_MONEY = #{record.wageMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.otherWage != null">
        OTHER_WAGE = #{record.otherWage,jdbcType=NUMERIC},
      </if>
      <if test="record.delWage != null">
        DEL_WAGE = #{record.delWage,jdbcType=NUMERIC},
      </if>
      <if test="record.realWage != null">
        REAL_WAGE = #{record.realWage,jdbcType=NUMERIC},
      </if>
      <if test="record.checkStatus != null">
        CHECK_STATUS = #{record.checkStatus,jdbcType=TINYINT},
      </if>
      <if test="record.checkUser != null">
        CHECK_USER = #{record.checkUser,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        CREATE_DATE = #{record.createDate,jdbcType=VARCHAR},
      </if>
      <if test="record.checkTime != null">
        CHECK_TIME = #{record.checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.assessmentMonth != null">
        ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.baseWageGrantStatus != null">
        BASE_WAGE_GRANT_STATUS = #{record.baseWageGrantStatus,jdbcType=TINYINT},
      </if>
      <if test="record.commissionGrantStatus != null">
        COMMISSION_GRANT_STATUS = #{record.commissionGrantStatus,jdbcType=TINYINT},
      </if>
      <if test="record.personWorkcountAmount != null">
        PERSON_WORKCOUNT_AMOUNT = #{record.personWorkcountAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.manageWorkcountAmount != null">
        MANAGE_WORKCOUNT_AMOUNT = #{record.manageWorkcountAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.manageProfitWage != null">
        MANAGE_PROFIT_WAGE = #{record.manageProfitWage,jdbcType=NUMERIC},
      </if>
      <if test="record.personProfitWage != null">
        PERSON_PROFIT_WAGE = #{record.personProfitWage,jdbcType=NUMERIC},
      </if>
      <if test="record.paidWageAmount != null">
        PAID_WAGE_AMOUNT = #{record.paidWageAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.personCommsionAmount != null">
        PERSON_COMMSION_AMOUNT = #{record.personCommsionAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.manageCommsionAmount != null">
        MANAGE_COMMSION_AMOUNT = #{record.manageCommsionAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.realWageCk != null">
        REAL_WAGE_CK = #{record.realWageCk,jdbcType=NUMERIC},
      </if>
      <if test="record.explain != null">
        [EXPLAIN] = #{record.explain,jdbcType=VARCHAR},
      </if>
      <if test="record.adjustWage != null">
        ADJUST_WAGE = #{record.adjustWage,jdbcType=NUMERIC},
      </if>
      <if test="record.effectiveStatus != null">
        EFFECTIVE_STATUS = #{record.effectiveStatus,jdbcType=TINYINT},
      </if>
      <if test="record.organizationPath != null">
        ORGANIZATION_PATH = #{record.organizationPath,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_WAGE
    set WAGE_ID = #{record.wageId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      PROFIT_WAGE = #{record.profitWage,jdbcType=NUMERIC},
      WAGE_MONEY = #{record.wageMoney,jdbcType=NUMERIC},
      OTHER_WAGE = #{record.otherWage,jdbcType=NUMERIC},
      DEL_WAGE = #{record.delWage,jdbcType=NUMERIC},
      REAL_WAGE = #{record.realWage,jdbcType=NUMERIC},
      CHECK_STATUS = #{record.checkStatus,jdbcType=TINYINT},
      CHECK_USER = #{record.checkUser,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      CREATE_DATE = #{record.createDate,jdbcType=VARCHAR},
      CHECK_TIME = #{record.checkTime,jdbcType=TIMESTAMP},
      ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      BASE_WAGE_GRANT_STATUS = #{record.baseWageGrantStatus,jdbcType=TINYINT},
      COMMISSION_GRANT_STATUS = #{record.commissionGrantStatus,jdbcType=TINYINT},
      PERSON_WORKCOUNT_AMOUNT = #{record.personWorkcountAmount,jdbcType=NUMERIC},
      MANAGE_WORKCOUNT_AMOUNT = #{record.manageWorkcountAmount,jdbcType=NUMERIC},
      MANAGE_PROFIT_WAGE = #{record.manageProfitWage,jdbcType=NUMERIC},
      PERSON_PROFIT_WAGE = #{record.personProfitWage,jdbcType=NUMERIC},
      PAID_WAGE_AMOUNT = #{record.paidWageAmount,jdbcType=NUMERIC},
      PERSON_COMMSION_AMOUNT = #{record.personCommsionAmount,jdbcType=NUMERIC},
      MANAGE_COMMSION_AMOUNT = #{record.manageCommsionAmount,jdbcType=NUMERIC},
      REAL_WAGE_CK = #{record.realWageCk,jdbcType=NUMERIC},
      [EXPLAIN] = #{record.explain,jdbcType=VARCHAR},
      ADJUST_WAGE = #{record.adjustWage,jdbcType=NUMERIC},
      EFFECTIVE_STATUS = #{record.effectiveStatus,jdbcType=TINYINT},
      ORGANIZATION_PATH = #{record.organizationPath,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunWage">
    <!--@mbggenerated-->
    update FUN_WAGE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="profitWage != null">
        PROFIT_WAGE = #{profitWage,jdbcType=NUMERIC},
      </if>
      <if test="wageMoney != null">
        WAGE_MONEY = #{wageMoney,jdbcType=NUMERIC},
      </if>
      <if test="otherWage != null">
        OTHER_WAGE = #{otherWage,jdbcType=NUMERIC},
      </if>
      <if test="delWage != null">
        DEL_WAGE = #{delWage,jdbcType=NUMERIC},
      </if>
      <if test="realWage != null">
        REAL_WAGE = #{realWage,jdbcType=NUMERIC},
      </if>
      <if test="checkStatus != null">
        CHECK_STATUS = #{checkStatus,jdbcType=TINYINT},
      </if>
      <if test="checkUser != null">
        CHECK_USER = #{checkUser,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        CREATE_DATE = #{createDate,jdbcType=VARCHAR},
      </if>
      <if test="checkTime != null">
        CHECK_TIME = #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="baseWageGrantStatus != null">
        BASE_WAGE_GRANT_STATUS = #{baseWageGrantStatus,jdbcType=TINYINT},
      </if>
      <if test="commissionGrantStatus != null">
        COMMISSION_GRANT_STATUS = #{commissionGrantStatus,jdbcType=TINYINT},
      </if>
      <if test="personWorkcountAmount != null">
        PERSON_WORKCOUNT_AMOUNT = #{personWorkcountAmount,jdbcType=NUMERIC},
      </if>
      <if test="manageWorkcountAmount != null">
        MANAGE_WORKCOUNT_AMOUNT = #{manageWorkcountAmount,jdbcType=NUMERIC},
      </if>
      <if test="manageProfitWage != null">
        MANAGE_PROFIT_WAGE = #{manageProfitWage,jdbcType=NUMERIC},
      </if>
      <if test="personProfitWage != null">
        PERSON_PROFIT_WAGE = #{personProfitWage,jdbcType=NUMERIC},
      </if>
      <if test="paidWageAmount != null">
        PAID_WAGE_AMOUNT = #{paidWageAmount,jdbcType=NUMERIC},
      </if>
      <if test="personCommsionAmount != null">
        PERSON_COMMSION_AMOUNT = #{personCommsionAmount,jdbcType=NUMERIC},
      </if>
      <if test="manageCommsionAmount != null">
        MANAGE_COMMSION_AMOUNT = #{manageCommsionAmount,jdbcType=NUMERIC},
      </if>
      <if test="realWageCk != null">
        REAL_WAGE_CK = #{realWageCk,jdbcType=NUMERIC},
      </if>
      <if test="explain != null">
        [EXPLAIN] = #{explain,jdbcType=VARCHAR},
      </if>
      <if test="adjustWage != null">
        ADJUST_WAGE = #{adjustWage,jdbcType=NUMERIC},
      </if>
      <if test="effectiveStatus != null">
        EFFECTIVE_STATUS = #{effectiveStatus,jdbcType=TINYINT},
      </if>
      <if test="organizationPath != null">
        ORGANIZATION_PATH = #{organizationPath,jdbcType=VARCHAR},
      </if>
    </set>
    where WAGE_ID = #{wageId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunWage">
    <!--@mbggenerated-->
    update FUN_WAGE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      PROFIT_WAGE = #{profitWage,jdbcType=NUMERIC},
      WAGE_MONEY = #{wageMoney,jdbcType=NUMERIC},
      OTHER_WAGE = #{otherWage,jdbcType=NUMERIC},
      DEL_WAGE = #{delWage,jdbcType=NUMERIC},
      REAL_WAGE = #{realWage,jdbcType=NUMERIC},
      CHECK_STATUS = #{checkStatus,jdbcType=TINYINT},
      CHECK_USER = #{checkUser,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      CREATE_DATE = #{createDate,jdbcType=VARCHAR},
      CHECK_TIME = #{checkTime,jdbcType=TIMESTAMP},
      ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      BASE_WAGE_GRANT_STATUS = #{baseWageGrantStatus,jdbcType=TINYINT},
      COMMISSION_GRANT_STATUS = #{commissionGrantStatus,jdbcType=TINYINT},
      PERSON_WORKCOUNT_AMOUNT = #{personWorkcountAmount,jdbcType=NUMERIC},
      MANAGE_WORKCOUNT_AMOUNT = #{manageWorkcountAmount,jdbcType=NUMERIC},
      MANAGE_PROFIT_WAGE = #{manageProfitWage,jdbcType=NUMERIC},
      PERSON_PROFIT_WAGE = #{personProfitWage,jdbcType=NUMERIC},
      PAID_WAGE_AMOUNT = #{paidWageAmount,jdbcType=NUMERIC},
      PERSON_COMMSION_AMOUNT = #{personCommsionAmount,jdbcType=NUMERIC},
      MANAGE_COMMSION_AMOUNT = #{manageCommsionAmount,jdbcType=NUMERIC},
      REAL_WAGE_CK = #{realWageCk,jdbcType=NUMERIC},
      [EXPLAIN] = #{explain,jdbcType=VARCHAR},
      ADJUST_WAGE = #{adjustWage,jdbcType=NUMERIC},
      EFFECTIVE_STATUS = #{effectiveStatus,jdbcType=TINYINT},
      ORGANIZATION_PATH = #{organizationPath,jdbcType=VARCHAR}
    where WAGE_ID = #{wageId,jdbcType=INTEGER}
  </update>

  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunWageDto">
  	  <result column="ROLE_LEVEL_ID" jdbcType="INTEGER" property="roleLevelId" />
      <result column="USER_POSITION" jdbcType="VARCHAR" property="userPostion" />
      <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
      <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
  </resultMap>
  <select id="getFunWageList" resultMap="extBaseResultMap">
    select a.WAGE_ID, a.COMP_ID, a.DEPT_ID, a.PROFIT_WAGE, a.WAGE_MONEY, a.OTHER_WAGE, a.DEL_WAGE, a.REAL_WAGE,
    a.CHECK_STATUS, a.CHECK_USER, a.USER_ID, a.CREATE_DATE, a.CHECK_TIME, a.ASSESSMENT_MONTH, a.BASE_WAGE_GRANT_STATUS,
    a.COMMISSION_GRANT_STATUS, a.PERSON_WORKCOUNT_AMOUNT, a.MANAGE_WORKCOUNT_AMOUNT, a.MANAGE_PROFIT_WAGE,
    a.PERSON_PROFIT_WAGE, a.PAID_WAGE_AMOUNT, a.PERSON_COMMSION_AMOUNT, a.MANAGE_COMMSION_AMOUNT,
    a.REAL_WAGE_CK, a.EXPLAIN, a.ADJUST_WAGE,b.USER_POSITION,b.ROLE_LEVEL_ID,b.USER_NAME,d.DEPT_NAME from FUN_WAGE a
    join FUN_USERS b on a.USER_ID = b.USER_ID join FUN_DEPTS d on b.dept_id = d.dept_id AND  b.comp_id = d.comp_id
    	<where>
	        <if test="null != param.compId">
	          	and a.COMP_ID=#{param.compId} and EFFECTIVE_STATUS = 1
	        </if>
	        <if test="param.newOrganization == false">
                <if test="null != param.areaId">
                  and b.AREA_ID=#{param.areaId}
                </if>
                <if test="null != param.regId">
                  and b.REG_ID=#{param.regId}
                </if>
                <if test="null != param.deptId">
                  and a.DEPT_ID=#{param.deptId}
                </if>
                <if test="null != param.grId">
                  and b.GR_ID=#{param.grId}
                </if>
            </if>
            <if test="param.newOrganization == true and param.organizationId &gt; 0">
                a.ORGANIZATION_PATH like '%:${param.organizationId}:%'
            </if>
	        <if test="null != param.userId">
	          	<choose>
	          		<when test="param.operLevel !=null and param.operLevel == 1">
	          			and B.TISSUE_LINE like '%:${param.userId}:%' AND USER_LEVEL &lt;= #{param.userLevel}
	          		</when>
	          		<when test="param.operLevel !=null and param.operLevel == 2">
	          			and B.TISSUE_LINE like '%:${param.userId}:%'  
	          		</when>
	          		<otherwise>
	          			and a.USER_ID=#{param.userId}
	          		</otherwise>
	          	</choose>
	        </if>
	        <if test="null != param.roleId">
	        	and b.USER_POSITION = #{param.roleId}
	        </if>
	        <if test="null != param.roleLevelId">
	        	and b.ROLE_LEVEL_ID in (${param.roleLevelId})
	        </if>

	        <if test="null != assessMentMonthSet and assessMentMonthSet.size()&gt;0">
	        	and a.ASSESSMENT_MONTH in
	          <foreach close=")" collection="assessMentMonthSet" item="assessmentMonth" open="(" separator=",">
	          	#{assessmentMonth}
	          </foreach>
	        </if>
	        <if test="null != param.wageId">
				and a.WAGE_ID=#{param.wageId}
	        </if>
    	</where>
    	order by WAGE_ID
  </select>


  <select id="getFunWageListNewOrg" resultMap="extBaseResultMap">
      select a.WAGE_ID, a.COMP_ID, a.DEPT_ID, a.PROFIT_WAGE, a.WAGE_MONEY, a.OTHER_WAGE, a.DEL_WAGE, a.REAL_WAGE,
      a.CHECK_STATUS, a.CHECK_USER, a.USER_ID, a.CREATE_DATE, a.CHECK_TIME, a.ASSESSMENT_MONTH, a.BASE_WAGE_GRANT_STATUS,
      a.COMMISSION_GRANT_STATUS, a.PERSON_WORKCOUNT_AMOUNT, a.MANAGE_WORKCOUNT_AMOUNT, a.MANAGE_PROFIT_WAGE,
      a.PERSON_PROFIT_WAGE, a.PAID_WAGE_AMOUNT, a.PERSON_COMMSION_AMOUNT, a.MANAGE_COMMSION_AMOUNT,
      a.REAL_WAGE_CK, a.EXPLAIN, a.ADJUST_WAGE,b.USER_POSITION,b.ROLE_LEVEL_ID,b.USER_NAME,d.ORGANIZATION_NAME DEPT_NAME from FUN_WAGE a
      join FUN_USERS b on a.USER_ID = b.USER_ID join FUN_ORGANIZATION d on b.ORGANIZATION_ID = d.ORGANIZATION_ID AND  b.comp_id = d.comp_id
      <where>
        <if test="null != param.compId">
          and a.COMP_ID=#{param.compId} and EFFECTIVE_STATUS = 1
        </if>
        <if test="param.newOrganization == false">
          <if test="null != param.areaId">
            and b.AREA_ID=#{param.areaId}
          </if>
          <if test="null != param.regId">
            and b.REG_ID=#{param.regId}
          </if>
          <if test="null != param.deptId">
            and a.DEPT_ID=#{param.deptId}
          </if>
          <if test="null != param.grId">
            and b.GR_ID=#{param.grId}
          </if>
        </if>
        <if test="param.newOrganization and param.organizationId > 0">
          and a.ORGANIZATION_PATH like '%:${param.organizationId}:%'
        </if>
        <if test="null != param.userId">
          <choose>
            <when test="param.operLevel !=null and param.operLevel == 1">
              and B.TISSUE_LINE like '%:${param.userId}:%' AND USER_LEVEL &lt;= #{param.userLevel}
            </when>
            <when test="param.operLevel !=null and param.operLevel == 2">
              and B.TISSUE_LINE like '%:${param.userId}:%'
            </when>
            <otherwise>
              and a.USER_ID=#{param.userId}
            </otherwise>
          </choose>
        </if>
        <if test="null != param.roleId">
          and b.USER_POSITION = #{param.roleId}
        </if>
        <if test="null != param.roleLevelId">
          and b.ROLE_LEVEL_ID in (${param.roleLevelId})
        </if>

        <if test="null != assessMentMonthSet and assessMentMonthSet.size()&gt;0">
          and a.ASSESSMENT_MONTH in
          <foreach close=")" collection="assessMentMonthSet" item="assessmentMonth" open="(" separator=",">
            #{assessmentMonth}
          </foreach>
        </if>
        <if test="null != param.wageId">
          and a.WAGE_ID=#{param.wageId}
        </if>
      </where>
      order by WAGE_ID
    </select>
	
	<select id="getWageStatistic" resultType="java.util.Map">
		SELECT USER_ID userId,SUM(PERSON_WORKCOUNT_AMOUNT+MANAGE_WORKCOUNT_AMOUNT+MANAGE_PROFIT_WAGE+PERSON_PROFIT_WAGE)
		FROM FUN_WAGE
		WHERE COMP_ID=#{compId} AND ASSESSMENT_MONTH=#{assessMentMonth}
		AND USER_ID IN
		<foreach close=")" collection="userIdSet" item="item" open="(" separator=",">
			#{item}
		</foreach>
		GROUP BY USER_ID
	</select>
	
	<select id="getStaticWageInfoList" resultMap="extBaseResultMap">
		<choose>
			<when test="grId!=null">
			  select A.WAGE_ID, A.COMP_ID, A.DEPT_ID, A.PROFIT_WAGE, A.WAGE_MONEY, A.OTHER_WAGE, A.DEL_WAGE, A.REAL_WAGE,
              A.CHECK_STATUS, A.CHECK_USER, A.USER_ID, A.CREATE_DATE, A.CHECK_TIME, A.ASSESSMENT_MONTH, A.BASE_WAGE_GRANT_STATUS,
              A.COMMISSION_GRANT_STATUS, A.PERSON_WORKCOUNT_AMOUNT, A.MANAGE_WORKCOUNT_AMOUNT, A.MANAGE_PROFIT_WAGE,
              A.PERSON_PROFIT_WAGE, A.PAID_WAGE_AMOUNT, A.PERSON_COMMSION_AMOUNT, A.MANAGE_COMMSION_AMOUNT,
              A.REAL_WAGE_CK, A.EXPLAIN, A.ADJUST_WAGE from FUN_WAGE A join FUN_USERS B on A.USER_ID = B.USER_ID
				where A.COMP_ID = #{compId} and A.CREATE_DATE &gt;= #{startDate} and A.CREATE_DATE &lt; #{subDate}
				<if test="userId!=null">
					and A.USER_ID = #{userId}
				</if>
				order BY CREATE_DATE,WAGE_MONEY DESC
			</when>
			<otherwise>
				select
				<include refid="Base_Column_List" />
				from FUN_WAGE
				where COMP_ID = #{compId} and CREATE_DATE &gt;= #{startDate} and CREATE_DATE &lt; #{subDate}
				<if test="userId!=null">
					and USER_ID = #{userId}
				</if>
				order BY CREATE_DATE,WAGE_MONEY DESC
			</otherwise>
		</choose>
	</select>

  <select id="getFunWageByUserId" resultMap="BaseResultMap">
    select top 1 <include refid="Base_Column_List" />
    from FUN_WAGE where comp_id=#{compId} and USER_ID = #{userId} and ASSESSMENT_MONTH = #{assessmentMonth}  order by WAGE_ID desc
  </select>
  <insert id="initWageByUserId">
   insert into FUN_WAGE (
    DEL_WAGE,
    [COMP_ID],
    [DEPT_ID],
    [USER_ID],
    [CREATE_DATE],
    [ASSESSMENT_MONTH],
    WAGE_MONEY,
    EFFECTIVE_STATUS,ORGANIZATION_PATH
    ) select
	      0,
	      COMP_ID,
	      DEPT_ID,
	      USER_ID,
	      getdate(),
	      #{assessmentMonth},
	      isnull(#{baseWage}, 0),
	      #{effectiveThisMonth},TISSUE_LINE
  		from FUN_USERS where USER_WRITEOFF = 0 and COMP_ID = #{compId} and USER_ID = #{userId} 
  </insert>
  
  <select id="getFunWageDetail" resultMap="extBaseResultMap">
    SELECT a.WAGE_ID, a.COMP_ID, a.DEPT_ID, a.PROFIT_WAGE, a.WAGE_MONEY, a.OTHER_WAGE, a.DEL_WAGE, a.REAL_WAGE,
    a.CHECK_STATUS, a.CHECK_USER, a.USER_ID, a.CREATE_DATE, a.CHECK_TIME, a.ASSESSMENT_MONTH, a.BASE_WAGE_GRANT_STATUS,
    a.COMMISSION_GRANT_STATUS, a.PERSON_WORKCOUNT_AMOUNT, a.MANAGE_WORKCOUNT_AMOUNT, a.MANAGE_PROFIT_WAGE,
    a.PERSON_PROFIT_WAGE, a.PAID_WAGE_AMOUNT, a.PERSON_COMMSION_AMOUNT, a.MANAGE_COMMSION_AMOUNT,
    a.REAL_WAGE_CK, a.EXPLAIN, a.ADJUST_WAGE, b.USER_POSITION,b.USER_NAME  FROM FUN_WAGE a
    JOIN FUN_USERS b on a.USER_ID = b.USER_ID
    <where>
      <if test="null != param.compId">
        and a.COMP_ID=#{param.compId}
      </if>
      <if test="null != param.deptId">
        and a.DEPT_ID=#{param.deptId}
      </if>
      <if test="null != param.userId">
        and a.USER_ID=#{param.userId}
      </if>
      <if test="null != param.roleId">
        and b.USER_POSITION = #{param.roleId}
      </if>
      <if test="null != param.grId">
        and b.GR_ID=#{param.grId}
      </if>
      <if test="null != assessMentMonthSet and assessMentMonthSet.size()&gt;0">
        and a.ASSESSMENT_MONTH in <foreach close=")" collection="assessMentMonthSet" item="assessmentMonth" open="(" separator=",">
        #{assessmentMonth}
      </foreach>
      </if>
      <if test="null != param.wageId">
        and a.WAGE_ID=#{param.wageId}
      </if>
    </where>
    ORDER BY WAGE_ID
  </select>
</mapper>