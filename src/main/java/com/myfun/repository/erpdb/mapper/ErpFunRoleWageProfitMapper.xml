<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunRoleWageProfitMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunRoleWageProfit">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="ROLE_WAGE_CONFIG_ID" jdbcType="INTEGER" property="roleWageConfigId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="QUOTA_START" jdbcType="NUMERIC" property="quotaStart" />
    <result column="QUOTA_END" jdbcType="NUMERIC" property="quotaEnd" />
    <result column="QUOTA_AMOUNT" jdbcType="NUMERIC" property="quotaAmount" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="CHECK_TYPE" jdbcType="TINYINT" property="checkType" />
    <result column="CHECK_RANGE" jdbcType="TINYINT" property="checkRange" />
    <result column="CHECK_BUSINESS" jdbcType="TINYINT" property="checkBusiness" />
    <result column="PROFIT_SEQ" jdbcType="INTEGER" property="profitSeq" />
    <result column="IS_CHECK" jdbcType="TINYINT" property="isCheck" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, ROLE_WAGE_CONFIG_ID, COMP_ID, QUOTA_START, QUOTA_END, QUOTA_AMOUNT, CREATE_TIME, 
    CHECK_TYPE, CHECK_RANGE, CHECK_BUSINESS, PROFIT_SEQ, IS_CHECK
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfitExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_ROLE_WAGE_PROFIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_ROLE_WAGE_PROFIT
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_ROLE_WAGE_PROFIT
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfitExample">
    <!--@mbggenerated-->
    delete from FUN_ROLE_WAGE_PROFIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfit" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_ROLE_WAGE_PROFIT (ROLE_WAGE_CONFIG_ID, COMP_ID, QUOTA_START, 
      QUOTA_END, QUOTA_AMOUNT, CREATE_TIME, 
      CHECK_TYPE, CHECK_RANGE, CHECK_BUSINESS, 
      PROFIT_SEQ, IS_CHECK)
    values (#{roleWageConfigId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{quotaStart,jdbcType=NUMERIC}, 
      #{quotaEnd,jdbcType=NUMERIC}, #{quotaAmount,jdbcType=NUMERIC}, #{createTime,jdbcType=TIMESTAMP}, 
      #{checkType,jdbcType=TINYINT}, #{checkRange,jdbcType=TINYINT}, #{checkBusiness,jdbcType=TINYINT}, 
      #{profitSeq,jdbcType=INTEGER}, #{isCheck,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfit" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_ROLE_WAGE_PROFIT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleWageConfigId != null">
        ROLE_WAGE_CONFIG_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="quotaStart != null">
        QUOTA_START,
      </if>
      <if test="quotaEnd != null">
        QUOTA_END,
      </if>
      <if test="quotaAmount != null">
        QUOTA_AMOUNT,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="checkType != null">
        CHECK_TYPE,
      </if>
      <if test="checkRange != null">
        CHECK_RANGE,
      </if>
      <if test="checkBusiness != null">
        CHECK_BUSINESS,
      </if>
      <if test="profitSeq != null">
        PROFIT_SEQ,
      </if>
      <if test="isCheck != null">
        IS_CHECK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleWageConfigId != null">
        #{roleWageConfigId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="quotaStart != null">
        #{quotaStart,jdbcType=NUMERIC},
      </if>
      <if test="quotaEnd != null">
        #{quotaEnd,jdbcType=NUMERIC},
      </if>
      <if test="quotaAmount != null">
        #{quotaAmount,jdbcType=NUMERIC},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkType != null">
        #{checkType,jdbcType=TINYINT},
      </if>
      <if test="checkRange != null">
        #{checkRange,jdbcType=TINYINT},
      </if>
      <if test="checkBusiness != null">
        #{checkBusiness,jdbcType=TINYINT},
      </if>
      <if test="profitSeq != null">
        #{profitSeq,jdbcType=INTEGER},
      </if>
      <if test="isCheck != null">
        #{isCheck,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfitExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_ROLE_WAGE_PROFIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_PROFIT
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.roleWageConfigId != null">
        ROLE_WAGE_CONFIG_ID = #{record.roleWageConfigId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.quotaStart != null">
        QUOTA_START = #{record.quotaStart,jdbcType=NUMERIC},
      </if>
      <if test="record.quotaEnd != null">
        QUOTA_END = #{record.quotaEnd,jdbcType=NUMERIC},
      </if>
      <if test="record.quotaAmount != null">
        QUOTA_AMOUNT = #{record.quotaAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.checkType != null">
        CHECK_TYPE = #{record.checkType,jdbcType=TINYINT},
      </if>
      <if test="record.checkRange != null">
        CHECK_RANGE = #{record.checkRange,jdbcType=TINYINT},
      </if>
      <if test="record.checkBusiness != null">
        CHECK_BUSINESS = #{record.checkBusiness,jdbcType=TINYINT},
      </if>
      <if test="record.profitSeq != null">
        PROFIT_SEQ = #{record.profitSeq,jdbcType=INTEGER},
      </if>
      <if test="record.isCheck != null">
        IS_CHECK = #{record.isCheck,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_PROFIT
    set ID = #{record.id,jdbcType=INTEGER},
      ROLE_WAGE_CONFIG_ID = #{record.roleWageConfigId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      QUOTA_START = #{record.quotaStart,jdbcType=NUMERIC},
      QUOTA_END = #{record.quotaEnd,jdbcType=NUMERIC},
      QUOTA_AMOUNT = #{record.quotaAmount,jdbcType=NUMERIC},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      CHECK_TYPE = #{record.checkType,jdbcType=TINYINT},
      CHECK_RANGE = #{record.checkRange,jdbcType=TINYINT},
      CHECK_BUSINESS = #{record.checkBusiness,jdbcType=TINYINT},
      PROFIT_SEQ = #{record.profitSeq,jdbcType=INTEGER},
      IS_CHECK = #{record.isCheck,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfit">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_PROFIT
    <set>
      <if test="roleWageConfigId != null">
        ROLE_WAGE_CONFIG_ID = #{roleWageConfigId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="quotaStart != null">
        QUOTA_START = #{quotaStart,jdbcType=NUMERIC},
      </if>
      <if test="quotaEnd != null">
        QUOTA_END = #{quotaEnd,jdbcType=NUMERIC},
      </if>
      <if test="quotaAmount != null">
        QUOTA_AMOUNT = #{quotaAmount,jdbcType=NUMERIC},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkType != null">
        CHECK_TYPE = #{checkType,jdbcType=TINYINT},
      </if>
      <if test="checkRange != null">
        CHECK_RANGE = #{checkRange,jdbcType=TINYINT},
      </if>
      <if test="checkBusiness != null">
        CHECK_BUSINESS = #{checkBusiness,jdbcType=TINYINT},
      </if>
      <if test="profitSeq != null">
        PROFIT_SEQ = #{profitSeq,jdbcType=INTEGER},
      </if>
      <if test="isCheck != null">
        IS_CHECK = #{isCheck,jdbcType=TINYINT},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageProfit">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_PROFIT
    set ROLE_WAGE_CONFIG_ID = #{roleWageConfigId,jdbcType=INTEGER},
      COMP_ID = #{compId,jdbcType=INTEGER},
      QUOTA_START = #{quotaStart,jdbcType=NUMERIC},
      QUOTA_END = #{quotaEnd,jdbcType=NUMERIC},
      QUOTA_AMOUNT = #{quotaAmount,jdbcType=NUMERIC},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      CHECK_TYPE = #{checkType,jdbcType=TINYINT},
      CHECK_RANGE = #{checkRange,jdbcType=TINYINT},
      CHECK_BUSINESS = #{checkBusiness,jdbcType=TINYINT},
      PROFIT_SEQ = #{profitSeq,jdbcType=INTEGER},
      IS_CHECK = #{isCheck,jdbcType=TINYINT}
    where ID = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateById">
    update FUN_ROLE_WAGE_PROFIT set QUOTA_START=#{param.quotaStart},QUOTA_END=#{param.quotaEnd},QUOTA_AMOUNT=#{param.quotaAmount},
    CHECK_RANGE=#{param.checkRange}, CHECK_BUSINESS=#{param.checkBusiness}, PROFIT_SEQ=#{param.profitSeq} where ID=#{param.id}
  </update>
</mapper>