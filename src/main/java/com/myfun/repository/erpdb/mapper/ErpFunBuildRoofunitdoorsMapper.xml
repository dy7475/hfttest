<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunBuildRoofunitdoorsMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoors">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="ROOFS" jdbcType="INTEGER" property="roofs" />
    <result column="UNITS" jdbcType="INTEGER" property="units" />
    <result column="DOORS" jdbcType="INTEGER" property="doors" />
  </resultMap>
  <resultMap id="BaseResultMapDto" extends="BaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunBuildRoofunitdoorsDto">
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, CITY_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, BUILD_ID, ROOFS, UNITS, DOORS
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoorsExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_BUILD_ROOFUNITDOORS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_BUILD_ROOFUNITDOORS
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_BUILD_ROOFUNITDOORS
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoorsExample">
    <!--@mbggenerated-->
    delete from FUN_BUILD_ROOFUNITDOORS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoors" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_BUILD_ROOFUNITDOORS (CITY_ID, COMP_ID, AREA_ID, 
      REG_ID, DEPT_ID, BUILD_ID, 
      ROOFS, UNITS, DOORS
      )
    values (#{cityId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, 
      #{roofs,jdbcType=INTEGER}, #{units,jdbcType=INTEGER}, #{doors,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoors" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_BUILD_ROOFUNITDOORS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="roofs != null">
        ROOFS,
      </if>
      <if test="units != null">
        UNITS,
      </if>
      <if test="doors != null">
        DOORS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="roofs != null">
        #{roofs,jdbcType=INTEGER},
      </if>
      <if test="units != null">
        #{units,jdbcType=INTEGER},
      </if>
      <if test="doors != null">
        #{doors,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoorsExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_BUILD_ROOFUNITDOORS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BUILD_ROOFUNITDOORS
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.roofs != null">
        ROOFS = #{record.roofs,jdbcType=INTEGER},
      </if>
      <if test="record.units != null">
        UNITS = #{record.units,jdbcType=INTEGER},
      </if>
      <if test="record.doors != null">
        DOORS = #{record.doors,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BUILD_ROOFUNITDOORS
    set ID = #{record.id,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      ROOFS = #{record.roofs,jdbcType=INTEGER},
      UNITS = #{record.units,jdbcType=INTEGER},
      DOORS = #{record.doors,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoors">
    <!--@mbggenerated-->
    update FUN_BUILD_ROOFUNITDOORS
    <set>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="roofs != null">
        ROOFS = #{roofs,jdbcType=INTEGER},
      </if>
      <if test="units != null">
        UNITS = #{units,jdbcType=INTEGER},
      </if>
      <if test="doors != null">
        DOORS = #{doors,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildRoofunitdoors">
    <!--@mbggenerated-->
    update FUN_BUILD_ROOFUNITDOORS
    set CITY_ID = #{cityId,jdbcType=INTEGER},
      COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      ROOFS = #{roofs,jdbcType=INTEGER},
      UNITS = #{units,jdbcType=INTEGER},
      DOORS = #{doors,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
	<select id="selectRoofUnitDoors" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select ROOF_UNIT_DOORS from FUN_BUILD_ROOFUNITDOORS where
		BUILD_ID = #{buildId}
	</select>
	
	<select id="geterpFunBuildRoofunitdoorsByBuild" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select TOP 1
		<include refid="Base_Column_List" />
		from FUN_BUILD_ROOFUNITDOORS
		where COMP_ID = 0 AND
		BUILD_ID =
		#{buildId,jdbcType=INTEGER} ORDER BY ID DESC
	</select>
	
	<select id="getRoofUnitRoomCount" resultMap="BaseResultMapDto">
		select ROOFS, UNITS, DOORS
		from FUN_BUILD_ROOFUNITDOORS
		where COMP_ID = 0 and BUILD_ID = #{buildId}
	</select>
	
	<select id="deleteByBuildId">
		delete from FUN_BUILD_ROOFUNITDOORS
		where COMP_ID = 0
		and BUILD_ID = #{buildId}
	</select>

	<update id="updateByBuildId">
		update FUN_BUILD_ROOFUNITDOORS
		set ROOFS = #{roofs}, UNITS = #{units}, DOORS = #{doors}
		where COMP_ID = 0 and BUILD_ID = #{buildId}
	</update>

  <select id="getRoUnDoCounts" resultMap="BaseResultMap">
    select TOP 1 ROOFS,UNITS,DOORS from FUN_BUILD_ROOFUNITDOORS
    where COMP_ID = 0 and BUILD_ID = #{buildId} ORDER BY ID DESC
  </select>
  <update id="addRoomCountInBuildRoofUnitDoors">
    update FUN_BUILD_ROOFUNITDOORS
    <set>
      <if test="roomChangeCount != null">
        DOORS = (ISNULL(DOORS, 0) + #{roomChangeCount}),
      </if>
      <if test="unitChangeCount != null">
        UNITS = (ISNULL(UNITS, 0) + #{unitChangeCount}),
      </if>
      <if test="roofChangeCount != null">
        ROOFS = (ISNULL(ROOFS, 0) + #{roofChangeCount})
      </if>
    </set>
    where COMP_ID = 0 and BUILD_ID = #{buildId}
  </update>
  <update id="delRoomCountInBuildRoofUnitDoors">
    update FUN_BUILD_ROOFUNITDOORS
    set  DOORS = IIF(ISNULL(DOORS, 0) - #{roomChangeCount} &lt; 0, 0, ISNULL(DOORS, 0) - #{roomChangeCount})
    where COMP_ID = 0 and BUILD_ID = #{buildId}
  </update>
  <update id="updateRoomAndUnitCountInRoofUnitDoors">
    update FUN_BUILD_ROOFUNITDOORS
    set  DOORS = (SELECT COUNT(*) FROM BUILDING_SET_ROOM
                  WHERE COMP_ID = 0 AND BUILD_ID = #{buildId} ),
         UNITS = (SELECT COUNT(*) FROM BUILDING_SET_UNIT
                  WHERE COMP_ID = 0 AND BUILD_ID = #{buildId} ),
         ROOFS = (SELECT COUNT(*) FROM BUILDING_SET_ROOF
                  WHERE COMP_ID = 0 AND BUILD_ID = #{buildId} )
    where COMP_ID = 0 and BUILD_ID = #{buildId}
  </update>

</mapper>

