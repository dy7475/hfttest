<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpBuildingSetUnitMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpBuildingSetUnit">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="PROVINCE_ID" jdbcType="INTEGER" property="provinceId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="COMP_NO" jdbcType="VARCHAR" property="compNo" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="BUILD_ROOF" jdbcType="VARCHAR" property="buildRoof" />
    <result column="BUILD_LADDER" jdbcType="VARCHAR" property="buildLadder" />
    <result column="BUILD_DOORS" jdbcType="VARCHAR" property="buildDoors" />
    <result column="NUMBER_RULE" jdbcType="TINYINT" property="numberRule" />
    <result column="NUMBER_TYPE" jdbcType="TINYINT" property="numberType" />
    <result column="COMPRISE_RULE" jdbcType="TINYINT" property="compriseRule" />
    <result column="FLOOR_START" jdbcType="INTEGER" property="floorStart" />
    <result column="FLOOR_END" jdbcType="INTEGER" property="floorEnd" />
    <result column="BUILDING_SET_ROOF_ID" jdbcType="INTEGER" property="buildingSetRoofId" />
    <result column="BUILD_UNIT" jdbcType="VARCHAR" property="buildUnit" />
    <result column="DEL_FLAG" jdbcType="TINYINT" property="delFlag" />
    <result column="INUNIT_SUFFIX_TYPE " jdbcType="TINYINT" property="inunitSuffixType" />
    <result column="DOOR_START" jdbcType="VARCHAR" property="doorStart" />
    <result column="BUILD_UNIT_NAME " jdbcType="VARCHAR" property="buildUnitName" />
    <result column="DOORS" jdbcType="INTEGER" property="doors" />
    <result column="ADDED_BY_ALL_UNITS " jdbcType="TINYINT" property="addedByAllUnits" />
    <result column="ROOM_GENERATED" jdbcType="TINYINT" property="roomGenerated" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="DOOR_START_IN_PAGE" jdbcType="VARCHAR" property="doorStartInPage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, PROVINCE_ID, CITY_ID, COMP_ID, COMP_NO, BUILD_ID, BUILD_ROOF, BUILD_LADDER, BUILD_DOORS, 
    NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, FLOOR_START, FLOOR_END, BUILDING_SET_ROOF_ID, 
    BUILD_UNIT, DEL_FLAG, [INUNIT_SUFFIX_TYPE ], DOOR_START, [BUILD_UNIT_NAME ], DOORS, 
    [ADDED_BY_ALL_UNITS ], ROOM_GENERATED, CREATE_TIME, UPDATE_TIME, DOOR_START_IN_PAGE
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnitExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from BUILDING_SET_UNIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from BUILDING_SET_UNIT
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from BUILDING_SET_UNIT
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnitExample">
    <!--@mbggenerated-->
    delete from BUILDING_SET_UNIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnit" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into BUILDING_SET_UNIT (PROVINCE_ID, CITY_ID, COMP_ID, 
      COMP_NO, BUILD_ID, BUILD_ROOF, 
      BUILD_LADDER, BUILD_DOORS, NUMBER_RULE, 
      NUMBER_TYPE, COMPRISE_RULE, FLOOR_START, 
      FLOOR_END, BUILDING_SET_ROOF_ID, BUILD_UNIT, 
      DEL_FLAG, [INUNIT_SUFFIX_TYPE ], DOOR_START, 
      [BUILD_UNIT_NAME ], DOORS, [ADDED_BY_ALL_UNITS ], 
      ROOM_GENERATED, CREATE_TIME, UPDATE_TIME, 
      DOOR_START_IN_PAGE)
    values (#{provinceId,jdbcType=INTEGER}, #{cityId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, 
      #{compNo,jdbcType=VARCHAR}, #{buildId,jdbcType=INTEGER}, #{buildRoof,jdbcType=VARCHAR}, 
      #{buildLadder,jdbcType=VARCHAR}, #{buildDoors,jdbcType=VARCHAR}, #{numberRule,jdbcType=TINYINT}, 
      #{numberType,jdbcType=TINYINT}, #{compriseRule,jdbcType=TINYINT}, #{floorStart,jdbcType=INTEGER}, 
      #{floorEnd,jdbcType=INTEGER}, #{buildingSetRoofId,jdbcType=INTEGER}, #{buildUnit,jdbcType=VARCHAR}, 
      #{delFlag,jdbcType=TINYINT}, #{inunitSuffixType,jdbcType=TINYINT}, #{doorStart,jdbcType=VARCHAR}, 
      #{buildUnitName,jdbcType=VARCHAR}, #{doors,jdbcType=INTEGER}, #{addedByAllUnits,jdbcType=TINYINT}, 
      #{roomGenerated,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{doorStartInPage,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnit" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into BUILDING_SET_UNIT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="provinceId != null">
        PROVINCE_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="compNo != null">
        COMP_NO,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="buildRoof != null">
        BUILD_ROOF,
      </if>
      <if test="buildLadder != null">
        BUILD_LADDER,
      </if>
      <if test="buildDoors != null">
        BUILD_DOORS,
      </if>
      <if test="numberRule != null">
        NUMBER_RULE,
      </if>
      <if test="numberType != null">
        NUMBER_TYPE,
      </if>
      <if test="compriseRule != null">
        COMPRISE_RULE,
      </if>
      <if test="floorStart != null">
        FLOOR_START,
      </if>
      <if test="floorEnd != null">
        FLOOR_END,
      </if>
      <if test="buildingSetRoofId != null">
        BUILDING_SET_ROOF_ID,
      </if>
      <if test="buildUnit != null">
        BUILD_UNIT,
      </if>
      <if test="delFlag != null">
        DEL_FLAG,
      </if>
      <if test="inunitSuffixType != null">
        [INUNIT_SUFFIX_TYPE ],
      </if>
      <if test="doorStart != null">
        DOOR_START,
      </if>
      <if test="buildUnitName != null">
        [BUILD_UNIT_NAME ],
      </if>
      <if test="doors != null">
        DOORS,
      </if>
      <if test="addedByAllUnits != null">
        [ADDED_BY_ALL_UNITS ],
      </if>
      <if test="roomGenerated != null">
        ROOM_GENERATED,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="doorStartInPage != null">
        DOOR_START_IN_PAGE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="provinceId != null">
        #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="compNo != null">
        #{compNo,jdbcType=VARCHAR},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildRoof != null">
        #{buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="buildLadder != null">
        #{buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="buildDoors != null">
        #{buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="numberRule != null">
        #{numberRule,jdbcType=TINYINT},
      </if>
      <if test="numberType != null">
        #{numberType,jdbcType=TINYINT},
      </if>
      <if test="compriseRule != null">
        #{compriseRule,jdbcType=TINYINT},
      </if>
      <if test="floorStart != null">
        #{floorStart,jdbcType=INTEGER},
      </if>
      <if test="floorEnd != null">
        #{floorEnd,jdbcType=INTEGER},
      </if>
      <if test="buildingSetRoofId != null">
        #{buildingSetRoofId,jdbcType=INTEGER},
      </if>
      <if test="buildUnit != null">
        #{buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="inunitSuffixType != null">
        #{inunitSuffixType,jdbcType=TINYINT},
      </if>
      <if test="doorStart != null">
        #{doorStart,jdbcType=VARCHAR},
      </if>
      <if test="buildUnitName != null">
        #{buildUnitName,jdbcType=VARCHAR},
      </if>
      <if test="doors != null">
        #{doors,jdbcType=INTEGER},
      </if>
      <if test="addedByAllUnits != null">
        #{addedByAllUnits,jdbcType=TINYINT},
      </if>
      <if test="roomGenerated != null">
        #{roomGenerated,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="doorStartInPage != null">
        #{doorStartInPage,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnitExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from BUILDING_SET_UNIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update BUILDING_SET_UNIT
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.provinceId != null">
        PROVINCE_ID = #{record.provinceId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.compNo != null">
        COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.buildRoof != null">
        BUILD_ROOF = #{record.buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="record.buildLadder != null">
        BUILD_LADDER = #{record.buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="record.buildDoors != null">
        BUILD_DOORS = #{record.buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="record.numberRule != null">
        NUMBER_RULE = #{record.numberRule,jdbcType=TINYINT},
      </if>
      <if test="record.numberType != null">
        NUMBER_TYPE = #{record.numberType,jdbcType=TINYINT},
      </if>
      <if test="record.compriseRule != null">
        COMPRISE_RULE = #{record.compriseRule,jdbcType=TINYINT},
      </if>
      <if test="record.floorStart != null">
        FLOOR_START = #{record.floorStart,jdbcType=INTEGER},
      </if>
      <if test="record.floorEnd != null">
        FLOOR_END = #{record.floorEnd,jdbcType=INTEGER},
      </if>
      <if test="record.buildingSetRoofId != null">
        BUILDING_SET_ROOF_ID = #{record.buildingSetRoofId,jdbcType=INTEGER},
      </if>
      <if test="record.buildUnit != null">
        BUILD_UNIT = #{record.buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null">
        DEL_FLAG = #{record.delFlag,jdbcType=TINYINT},
      </if>
      <if test="record.inunitSuffixType != null">
        [INUNIT_SUFFIX_TYPE ] = #{record.inunitSuffixType,jdbcType=TINYINT},
      </if>
      <if test="record.doorStart != null">
        DOOR_START = #{record.doorStart,jdbcType=VARCHAR},
      </if>
      <if test="record.buildUnitName != null">
        [BUILD_UNIT_NAME ] = #{record.buildUnitName,jdbcType=VARCHAR},
      </if>
      <if test="record.doors != null">
        DOORS = #{record.doors,jdbcType=INTEGER},
      </if>
      <if test="record.addedByAllUnits != null">
        [ADDED_BY_ALL_UNITS ] = #{record.addedByAllUnits,jdbcType=TINYINT},
      </if>
      <if test="record.roomGenerated != null">
        ROOM_GENERATED = #{record.roomGenerated,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.doorStartInPage != null">
        DOOR_START_IN_PAGE = #{record.doorStartInPage,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update BUILDING_SET_UNIT
    set ID = #{record.id,jdbcType=INTEGER},
      PROVINCE_ID = #{record.provinceId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      BUILD_ROOF = #{record.buildRoof,jdbcType=VARCHAR},
      BUILD_LADDER = #{record.buildLadder,jdbcType=VARCHAR},
      BUILD_DOORS = #{record.buildDoors,jdbcType=VARCHAR},
      NUMBER_RULE = #{record.numberRule,jdbcType=TINYINT},
      NUMBER_TYPE = #{record.numberType,jdbcType=TINYINT},
      COMPRISE_RULE = #{record.compriseRule,jdbcType=TINYINT},
      FLOOR_START = #{record.floorStart,jdbcType=INTEGER},
      FLOOR_END = #{record.floorEnd,jdbcType=INTEGER},
      BUILDING_SET_ROOF_ID = #{record.buildingSetRoofId,jdbcType=INTEGER},
      BUILD_UNIT = #{record.buildUnit,jdbcType=VARCHAR},
      DEL_FLAG = #{record.delFlag,jdbcType=TINYINT},
      [INUNIT_SUFFIX_TYPE ] = #{record.inunitSuffixType,jdbcType=TINYINT},
      DOOR_START = #{record.doorStart,jdbcType=VARCHAR},
      [BUILD_UNIT_NAME ] = #{record.buildUnitName,jdbcType=VARCHAR},
      DOORS = #{record.doors,jdbcType=INTEGER},
      [ADDED_BY_ALL_UNITS ] = #{record.addedByAllUnits,jdbcType=TINYINT},
      ROOM_GENERATED = #{record.roomGenerated,jdbcType=TINYINT},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      DOOR_START_IN_PAGE = #{record.doorStartInPage,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnit">
    <!--@mbggenerated-->
    update BUILDING_SET_UNIT
    <set>
      <if test="provinceId != null">
        PROVINCE_ID = #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="compNo != null">
        COMP_NO = #{compNo,jdbcType=VARCHAR},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildRoof != null">
        BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="buildLadder != null">
        BUILD_LADDER = #{buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="buildDoors != null">
        BUILD_DOORS = #{buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="numberRule != null">
        NUMBER_RULE = #{numberRule,jdbcType=TINYINT},
      </if>
      <if test="numberType != null">
        NUMBER_TYPE = #{numberType,jdbcType=TINYINT},
      </if>
      <if test="compriseRule != null">
        COMPRISE_RULE = #{compriseRule,jdbcType=TINYINT},
      </if>
      <if test="floorStart != null">
        FLOOR_START = #{floorStart,jdbcType=INTEGER},
      </if>
      <if test="floorEnd != null">
        FLOOR_END = #{floorEnd,jdbcType=INTEGER},
      </if>
      <if test="buildingSetRoofId != null">
        BUILDING_SET_ROOF_ID = #{buildingSetRoofId,jdbcType=INTEGER},
      </if>
      <if test="buildUnit != null">
        BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        DEL_FLAG = #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="inunitSuffixType != null">
        [INUNIT_SUFFIX_TYPE ] = #{inunitSuffixType,jdbcType=TINYINT},
      </if>
      <if test="doorStart != null">
        DOOR_START = #{doorStart,jdbcType=VARCHAR},
      </if>
      <if test="buildUnitName != null">
        [BUILD_UNIT_NAME ] = #{buildUnitName,jdbcType=VARCHAR},
      </if>
      <if test="doors != null">
        DOORS = #{doors,jdbcType=INTEGER},
      </if>
      <if test="addedByAllUnits != null">
        [ADDED_BY_ALL_UNITS ] = #{addedByAllUnits,jdbcType=TINYINT},
      </if>
      <if test="roomGenerated != null">
        ROOM_GENERATED = #{roomGenerated,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="doorStartInPage != null">
        DOOR_START_IN_PAGE = #{doorStartInPage,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetUnit">
    <!--@mbggenerated-->
    update BUILDING_SET_UNIT
    set PROVINCE_ID = #{provinceId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      COMP_ID = #{compId,jdbcType=INTEGER},
      COMP_NO = #{compNo,jdbcType=VARCHAR},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR},
      BUILD_LADDER = #{buildLadder,jdbcType=VARCHAR},
      BUILD_DOORS = #{buildDoors,jdbcType=VARCHAR},
      NUMBER_RULE = #{numberRule,jdbcType=TINYINT},
      NUMBER_TYPE = #{numberType,jdbcType=TINYINT},
      COMPRISE_RULE = #{compriseRule,jdbcType=TINYINT},
      FLOOR_START = #{floorStart,jdbcType=INTEGER},
      FLOOR_END = #{floorEnd,jdbcType=INTEGER},
      BUILDING_SET_ROOF_ID = #{buildingSetRoofId,jdbcType=INTEGER},
      BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR},
      DEL_FLAG = #{delFlag,jdbcType=TINYINT},
      [INUNIT_SUFFIX_TYPE ] = #{inunitSuffixType,jdbcType=TINYINT},
      DOOR_START = #{doorStart,jdbcType=VARCHAR},
      [BUILD_UNIT_NAME ] = #{buildUnitName,jdbcType=VARCHAR},
      DOORS = #{doors,jdbcType=INTEGER},
      [ADDED_BY_ALL_UNITS ] = #{addedByAllUnits,jdbcType=TINYINT},
      ROOM_GENERATED = #{roomGenerated,jdbcType=TINYINT},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      DOOR_START_IN_PAGE = #{doorStartInPage,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
    <delete id="delBuildUnit">
        DELETE FROM BUILDING_SET_UNIT
        WHERE COMP_ID = 0
        <if test="param.buildId != null">
            AND BUILD_ID = #{param.buildId,jdbcType=INTEGER}
        </if>
        <if test="param.buildingSetRoofId != null">
            AND BUILDING_SET_ROOF_ID = #{param.buildingSetRoofId,jdbcType=INTEGER}
        </if>
        <if test="param.buildingSetUnitId != null">
            AND ID = #{param.buildingSetUnitId,jdbcType=INTEGER}
        </if>
    </delete>
    <select id="getBuildUnitListVo" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpBuildingSetUnitVo">
        SELECT ID AS buildingSetUnitId, BUILD_ID AS buildId, BUILDING_SET_ROOF_ID AS buildingSetRoofId,
               BUILD_UNIT AS buildUnit, BUILD_UNIT_NAME AS buildUnitName, ROOM_GENERATED AS roomGenerated
        FROM BUILDING_SET_UNIT
        WHERE COMP_ID =0 AND BUILD_ID = #{buildId}
      <if test="buildingSetRoofId != null and buildingSetRoofId != 0">
        AND BUILDING_SET_ROOF_ID = #{buildingSetRoofId}
      </if>
    </select>
    <select id="selectByBuildAndBuildUnit" resultMap="BaseResultMap">
      select top 1
      <include refid="Base_Column_List" />
      from BUILDING_SET_UNIT where  COMP_ID = 0 AND BUILD_ID = #{buildId} and BUILD_UNIT=#{buildUnit}
    </select>
  <select id="selectByBuildId" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpRegisterBuildingSetUnitVO">
    select
    ID as buildingSetUnitId, BUILD_ID as buildId, BUILD_LADDER as buildLadder, BUILD_DOORS as buildDoors,
    FLOOR_START as floorStart, FLOOR_END as floorEnd, BUILDING_SET_ROOF_ID as buildingSetRoofId,
    BUILD_UNIT as buildUnit from BUILDING_SET_UNIT where  COMP_ID = 0 AND BUILD_ID = #{buildId} and ID in
    <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach> order by BUILD_UNIT
  </select>
  <select id="selectByBuildIdAndUnitIds" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpRegisterBuildingSetUnitVO">
    select
    ID as buildingSetUnitId, BUILD_ID as buildId, BUILD_LADDER as buildLadder, BUILD_DOORS as buildDoors,
    FLOOR_START as floorStart, FLOOR_END as floorEnd, BUILDING_SET_ROOF_ID as buildingSetRoofId,
    BUILD_UNIT as buildUnit from BUILDING_SET_UNIT where  COMP_ID = 0 AND BUILD_ID = #{buildId} and ID in
    <foreach close=")" collection="roofIds" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach>
    order by BUILD_UNIT
  </select>
  <select id="getBuildUnitRule" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpBuildingSetUnitDetailsVO">
    SELECT ID AS buildingSetUnitId, BUILDING_SET_ROOF_ID AS buildingSetRoofId, BUILD_UNIT AS buildUnit, BUILD_UNIT_NAME
    AS buildUnitName,
    BUILD_LADDER AS buildLadder, BUILD_DOORS AS buildDoors, FLOOR_START AS floorStart, FLOOR_END AS floorEnd,
    NUMBER_RULE AS numberRule,
    NUMBER_TYPE AS numberType, COMPRISE_RULE AS compriseRule, ADDED_BY_ALL_UNITS AS addedByAllUnits, DOOR_START AS
    doorStart, ROOM_GENERATED AS roomGenerated, DOOR_START_IN_PAGE AS doorStartInPage
    FROM BUILDING_SET_UNIT
    WHERE COMP_ID =0 AND BUILD_ID = #{param.buildId}
    <if test="param.buildingSetRoofId != null and param.buildingSetRoofId != 0">
      AND BUILDING_SET_ROOF_ID = #{param.buildingSetRoofId,jdbcType=INTEGER}
    </if>
    AND ID = #{param.buildingSetUnitId}
  </select>

  <select id="getUnitDoors" resultMap="BaseResultMap">
    select ID,DOORS from BUILDING_SET_UNIT where COMP_ID =0 AND BUILD_ID = #{buildId}  and BUILD_UNIT = #{buildingSetUnit}
  </select>

  <update id="delRoomCountInUnit">
    UPDATE BUILDING_SET_UNIT SET DOORS = iif(DOORS - #{changeCount} &lt; 0, 0, DOORS - #{changeCount})
    WHERE COMP_ID = 0 AND BUILD_ID = #{buildId}  AND ID = #{buildingSetUnitId}
  </update>
  <update id="addRoomCountInUnit">
    UPDATE BUILDING_SET_UNIT SET DOORS = DOORS + #{changeCount} WHERE COMP_ID = 0 AND BUILD_ID = #{buildId}  AND ID = #{buildingSetUnitId}
  </update>
  <update id="updateRoomCountInUnit">
    UPDATE BUILDING_SET_UNIT
    SET DOORS = (SELECT COUNT(*) FROM BUILDING_SET_ROOM
                 WHERE COMP_ID = #{compId} AND BUILD_ID = #{buildId}  AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId})
    WHERE COMP_ID = 0 AND BUILD_ID = #{buildId} AND ID = #{buildingSetUnitId}
  </update>
  <insert id="batchAddUnit" parameterType="java.util.List">
    insert into BUILDING_SET_UNIT (PROVINCE_ID, CITY_ID, COMP_ID, COMP_NO, BUILD_ID, BUILD_ROOF,
    BUILD_LADDER, BUILD_DOORS, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, FLOOR_START, FLOOR_END, BUILDING_SET_ROOF_ID,
    BUILD_UNIT, DEL_FLAG, INUNIT_SUFFIX_TYPE, DOOR_START, BUILD_UNIT_NAME, DOORS, ADDED_BY_ALL_UNITS, ROOM_GENERATED,
                                   CREATE_TIME, UPDATE_TIME, DOOR_START_IN_PAGE) VALUES
    <foreach collection="insertUnitList" index="index" item="insertUnit" separator=",">
      (
      #{insertUnit.provinceId}, #{insertUnit.cityId}, 0, #{insertUnit.compNo},
      #{insertUnit.buildId}, #{insertUnit.buildRoof}, #{insertUnit.buildLadder}, #{insertUnit.buildDoors},
      #{insertUnit.numberRule}, #{insertUnit.numberType}, #{insertUnit.compriseRule}, #{insertUnit.floorStart},
      #{insertUnit.floorEnd}, #{insertUnit.buildingSetRoofId}, #{insertUnit.buildUnit}, ISNULL(#{insertUnit.delFlag}, 0), #{insertUnit.inunitSuffixType},
      #{insertUnit.doorStart}, #{insertUnit.buildUnitName}, #{insertUnit.doors}, #{insertUnit.addedByAllUnits}, #{insertUnit.roomGenerated}, GETDATE(), GETDATE(),
      #{insertUnit.doorStartInPage}
      )
    </foreach>
  </insert>
  <select id="getNewAddUnitIds" resultType="java.lang.Integer">
    select ID from BUILDING_SET_UNIT
    where COMP_ID = 0 AND BUILD_ID = #{buildId} AND BUILDING_SET_ROOF_ID = #{buildingSetRoofId}
    <if test="unitList != null and unitList.size &gt; 0">
      AND BUILD_UNIT IN
      <foreach close=")" collection="unitList" index="index" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
  </select>
  <select id="getBuildUnitDetailsWhenSingleAdd" resultMap="BaseResultMap">
    SELECT ID AS buildingSetUnitId, BUILD_ROOF AS buildRoof, NUMBER_RULE AS numberRule, NUMBER_TYPE AS numberType,
    COMPRISE_RULE AS compriseRule, DOOR_START AS doorStart, BUILDING_SET_ROOF_ID AS buildingSetRoofId, BUILD_UNIT AS buildUnit
    FROM BUILDING_SET_UNIT
    WHERE COMP_ID = 0 AND BUILD_ID = #{param.buildId}
    <if test="param.buildingSetRoofId != null and param.buildingSetRoofId != 0">
      AND BUILDING_SET_ROOF_ID = #{param.buildingSetRoofId,jdbcType=INTEGER}
    </if>
    AND ID = #{param.buildingSetUnitId}
  </select>

  <select id="checkHasRule" resultType="java.lang.Integer">
    select count(1) from BUILDING_SET_UNIT where COMP_ID = 0 AND BUILD_ID = #{buildId}
  </select>

  <insert id="createTemp">
      <!-- 拷贝ROOF表 -->
      INSERT INTO BUILDING_SET_ROOF (PROVINCE_ID, CITY_ID, COMP_ID,COMP_NO, BUILD_ID, BUILD_ROOF,HOUSE_STRUCT, HOUSE_YEAR, HOUSE_TYPE,HOUSE_USEAGE, BUILD_LAND_AGE,
      BUILD_LAND_NATURE,BUILD_RIGHT_NATURE, BUILDING_MANAGER_ID, [BUILD_ROOF_NAME ], UNIT_PRE_FIX, [UNIT_SUFFIX_START ], [UNIT_SUFFIX_END ],[INUNIT_SUFFIX_TYPE ], FLOOR_START,
      FLOOR_END,BUILD_LADDER, [BUILD_DOORS ], COMPRISE_RULE,[ADDED_BY_ALL_UNITS ], NUMBER_RULE, NUMBER_TYPE,[BUILD_UNIT_NAME ], UNITS, DOORS, DEL_FLAG, ROOF_SUFFIX_TYPE)
      SELECT #{provinceId}, #{shardCityId}, #{compId},#{compNo}, BUILD_ID, BUILD_ROOF,HOUSE_STRUCT, HOUSE_YEAR, HOUSE_TYPE,HOUSE_USEAGE, BUILD_LAND_AGE,
      BUILD_LAND_NATURE,BUILD_RIGHT_NATURE, BUILDING_MANAGER_ID, [BUILD_ROOF_NAME ], UNIT_PRE_FIX, [UNIT_SUFFIX_START ], [UNIT_SUFFIX_END ],[INUNIT_SUFFIX_TYPE ], FLOOR_START,
      FLOOR_END,BUILD_LADDER, [BUILD_DOORS ], COMPRISE_RULE,[ADDED_BY_ALL_UNITS ], NUMBER_RULE, NUMBER_TYPE,[BUILD_UNIT_NAME ], UNITS, DOORS, DEL_FLAG, ROOF_SUFFIX_TYPE
      FROM BUILDING_SET_ROOF
      WHERE COMP_ID=0 AND BUILD_ID=#{buildId} ;
      <!-- 拷贝UNIT表 -->
      INSERT INTO BUILDING_SET_UNIT (PROVINCE_ID, CITY_ID, COMP_ID,COMP_NO, BUILD_ID, BUILD_ROOF,BUILD_LADDER, BUILD_DOORS, NUMBER_RULE,NUMBER_TYPE, COMPRISE_RULE, FLOOR_START,
      FLOOR_END, BUILDING_SET_ROOF_ID, BUILD_UNIT,DEL_FLAG, [INUNIT_SUFFIX_TYPE ], DOOR_START,[BUILD_UNIT_NAME ], DOORS, [ADDED_BY_ALL_UNITS ],ROOM_GENERATED)
      select #{provinceId}, #{shardCityId}, #{compId},#{compNo}, BUILD_ID, BUILD_ROOF,BUILD_LADDER, BUILD_DOORS, NUMBER_RULE,NUMBER_TYPE, COMPRISE_RULE, FLOOR_START,
      FLOOR_END, BUILDING_SET_ROOF_ID, BUILD_UNIT,DEL_FLAG, [INUNIT_SUFFIX_TYPE ], DOOR_START,[BUILD_UNIT_NAME ], DOORS, [ADDED_BY_ALL_UNITS ],ROOM_GENERATED
      FROM BUILDING_SET_UNIT
      WHERE COMP_ID=0 AND BUILD_ID=#{buildId} ;
      <!-- 拷贝FLOOR表 -->
      INSERT INTO BUILDING_SET_FLOOR (CITY_ID, COMP_ID, BUILD_ID,BUILD_ROOF, BUILD_UNIT, BUILD_FLOOR, SYS_BUILD_FLOOR, CREATION_TIME, UPDATE_TIME,
      BUILDING_SET_ROOF_ID, BUILDING_SET_UNIT_ID, FLOOR_USEAGE, DEL_FLAG)
      SELECT #{shardCityId}, #{compId},BUILD_ID,BUILD_ROOF, BUILD_UNIT, BUILD_FLOOR, SYS_BUILD_FLOOR, CREATION_TIME, UPDATE_TIME,
      BUILDING_SET_ROOF_ID, BUILDING_SET_UNIT_ID, FLOOR_USEAGE, DEL_FLAG
      FROM BUILDING_SET_FLOOR
      WHERE COMP_ID=0 AND BUILD_ID=#{buildId} ;
      <!-- 拷贝ROOM表 -->
      INSERT INTO BUILDING_SET_ROOM (CITY_ID, COMP_ID, BUILD_ID,SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM,HOUSE_HALL, HOUSE_WEI, HOUSE_YANG,HOUSE_DIRECT, HOUSE_AREA, HOUSE_INNERAREA,
      CREATION_TIME, UPDATE_TIME, BUILD_ROOF,BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM, HOUSE_OWNER,CELL_PHONE, OWNER_SEX, JOINT_USER_NAME,
      JOINT_CELL_PHONE, JOINT_USER_SEX, BUILDING_SET_ROOF_ID, BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID,ADDR_MD5, SALE_FLAG, LEASE_FLAG,SALE_PRICE, LEASE_PRICE, PRICE_UNIT,NEAR_STREET)
      SELECT #{shardCityId}, #{compId},BUILD_ID,SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM,HOUSE_HALL, HOUSE_WEI, HOUSE_YANG,HOUSE_DIRECT, HOUSE_AREA, HOUSE_INNERAREA,
      CREATION_TIME, UPDATE_TIME, BUILD_ROOF,BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM, HOUSE_OWNER,CELL_PHONE, OWNER_SEX, JOINT_USER_NAME,
      JOINT_CELL_PHONE, JOINT_USER_SEX, BUILDING_SET_ROOF_ID, BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID,ADDR_MD5, SALE_FLAG, LEASE_FLAG,SALE_PRICE, LEASE_PRICE, PRICE_UNIT,NEAR_STREET
      FROM BUILDING_SET_ROOM
      WHERE COMP_ID=0 AND BUILD_ID=#{buildId} ;
  </insert>
    <select id="selectByRoofIdAndBuildUnit" resultMap="BaseResultMap">
        select top 1
        <include refid="Base_Column_List" />
        from BUILDING_SET_UNIT where COMP_ID=0 and BUILD_ID=#{buildId} and BUILDING_SET_ROOF_ID=#{buildingSetRoofId}
        <if test="buildUnit!=null">
            and BUILD_UNIT=#{buildUnit}
        </if>
    </select>
  <update id="updateRoofIdInUnit">
    <!-- 更新单元表中的 BUILDING_SET_ROOF_ID -->
    UPDATE A
    SET A.BUILDING_SET_ROOF_ID = B.BUILDING_SET_ROOF_ID
    FROM
    BUILDING_SET_UNIT A
    JOIN BUILDING_SET_ROOF B ON A.COMP_ID = B.COMP_ID AND A.BUILD_ID = B.BUILD_ID AND A.BUILD_ROOF = B.BUILD_ROOF
    WHERE
    A.COMP_ID =0 AND A.BUILD_ID = #{buildId} ;
  </update>
  <select id="getUnitIds" resultType="java.lang.Integer">
    select ID from BUILDING_SET_UNIT
    where COMP_ID =0 AND BUILD_ID = #{buildId}
  </select>
  <select id="getRepeatUnit" resultMap="BaseResultMap">
    select TOP 1 BUILD_UNIT from BUILDING_SET_UNIT
    where COMP_ID = 0 AND BUILD_ID = #{buildId}
    <if test="condition != null">
      AND ${condition}
    </if>
  </select>
  <select id="getBuildUnitRoomGenerated" resultMap="BaseResultMap">
    SELECT ROOM_GENERATED AS roomGenerated
    FROM BUILDING_SET_UNIT
    WHERE COMP_ID =0 AND BUILD_ID = #{buildId}  AND ID = #{buildingSetUnitId}
  </select>
    <select id="getUnitNameAndMarketingControlCount" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpBuildingSetUnitVo">
        SELECT A.ID AS buildingSetUnitId, A.BUILD_ID AS buildId, A.BUILDING_SET_ROOF_ID AS buildingSetRoofId,
        A.BUILD_UNIT AS buildUnit, A.BUILD_UNIT_NAME AS buildUnitName, A.ROOM_GENERATED AS roomGenerated, COUNT(B.ID) AS count
        FROM BUILDING_SET_UNIT A
        LEFT JOIN BUILDING_MARKETING_CONTROL B ON B.COMP_ID=0 AND A.BUILD_ID = B.BUILD_ID
        <if test="buildingSetRoofId != null and buildingSetRoofId != 0">
            AND A.BUILD_ROOF = B.BUILDING_SET_ROOF
        </if>
        AND A.BUILD_UNIT = B.BUILDING_SET_UNIT
        WHERE A.COMP_ID = 0 AND A.BUILD_ID = #{buildId}
        <if test="buildingSetRoofId != null and buildingSetRoofId != 0">
            AND A.BUILDING_SET_ROOF_ID = #{buildingSetRoofId}
        </if>
        GROUP BY A.ID, A.BUILD_ID, A.BUILDING_SET_ROOF_ID, A.BUILD_UNIT, A.BUILD_UNIT_NAME, A.ROOM_GENERATED;
    </select>
    <select id="getUnitIdsByBuildRoofs" resultType="java.lang.Integer">
        SELECT ID FROM BUILDING_SET_UNIT
        WHERE COMP_ID = 0 AND BUILD_ID = #{buildId}
        <if test="buildRoofs != null and buildRoofs.size &gt; 0">
            AND BUILD_ROOF IN
            <foreach close=")" collection="buildRoofs" index="index" item="item" open="(" separator=",">
                #{item}
            </foreach>
        </if>
    </select>
  <select id="getBuildUnitNames" resultType="com.myfun.erpWeb.businesstools.builddic.vo.BuildUnitNameInMobileVo">
    SELECT
    ID AS buildingSetUnitId, BUILD_UNIT AS buildUnit, BUILD_UNIT_NAME AS buildUnitName,
    NUMBER_RULE AS numberRule, NUMBER_TYPE AS numberType, COMPRISE_RULE AS compriseRule,
    ADDED_BY_ALL_UNITS AS addedByAllUnits
    FROM BUILDING_SET_UNIT
    WHERE COMP_ID = 0 AND BUILD_ID = #{buildId}
    <if test="buildingSetRoofId != null">
      AND BUILDING_SET_ROOF_ID = #{buildingSetRoofId}
    </if>
    ORDER BY BUILD_UNIT
  </select>

</mapper>