<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunCountwageMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunCountwage">
    <!--@mbggenerated-->
    <id column="WAGECOUNT_ID" jdbcType="INTEGER" property="wagecountId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="WAGETYPE_ID" jdbcType="INTEGER" property="wagetypeId" />
    <result column="MIN_VALUE" jdbcType="NUMERIC" property="minValue" />
    <result column="MAX_VALUE" jdbcType="NUMERIC" property="maxValue" />
    <result column="PRO" jdbcType="REAL" property="pro" />
    <result column="SEQ" jdbcType="INTEGER" property="seq" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    WAGECOUNT_ID, COMP_ID, WAGETYPE_ID, MIN_VALUE, MAX_VALUE, PRO, SEQ, DEPT_ID
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwageExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_COUNTWAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_COUNTWAGE
    where WAGECOUNT_ID = #{wagecountId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_COUNTWAGE
    where WAGECOUNT_ID = #{wagecountId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwageExample">
    <!--@mbggenerated-->
    delete from FUN_COUNTWAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwage">
    <!--@mbggenerated-->
    <selectKey keyProperty="wagecountId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_COUNTWAGE_WAGECOUNT_ID
    </selectKey>
    insert into FUN_COUNTWAGE (WAGECOUNT_ID, COMP_ID, WAGETYPE_ID, 
      MIN_VALUE, MAX_VALUE, PRO, 
      SEQ, DEPT_ID)
    values (#{wagecountId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{wagetypeId,jdbcType=INTEGER}, 
      #{minValue,jdbcType=NUMERIC}, #{maxValue,jdbcType=NUMERIC}, #{pro,jdbcType=REAL}, 
      #{seq,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwage">
    <!--@mbggenerated-->
    <selectKey keyProperty="wagecountId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_COUNTWAGE_WAGECOUNT_ID
    </selectKey>
    insert into FUN_COUNTWAGE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      WAGECOUNT_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="wagetypeId != null">
        WAGETYPE_ID,
      </if>
      <if test="minValue != null">
        MIN_VALUE,
      </if>
      <if test="maxValue != null">
        MAX_VALUE,
      </if>
      <if test="pro != null">
        PRO,
      </if>
      <if test="seq != null">
        SEQ,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{wagecountId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="wagetypeId != null">
        #{wagetypeId,jdbcType=INTEGER},
      </if>
      <if test="minValue != null">
        #{minValue,jdbcType=NUMERIC},
      </if>
      <if test="maxValue != null">
        #{maxValue,jdbcType=NUMERIC},
      </if>
      <if test="pro != null">
        #{pro,jdbcType=REAL},
      </if>
      <if test="seq != null">
        #{seq,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwageExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_COUNTWAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_COUNTWAGE
    <set>
      <if test="record.wagecountId != null">
        WAGECOUNT_ID = #{record.wagecountId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.wagetypeId != null">
        WAGETYPE_ID = #{record.wagetypeId,jdbcType=INTEGER},
      </if>
      <if test="record.minValue != null">
        MIN_VALUE = #{record.minValue,jdbcType=NUMERIC},
      </if>
      <if test="record.maxValue != null">
        MAX_VALUE = #{record.maxValue,jdbcType=NUMERIC},
      </if>
      <if test="record.pro != null">
        PRO = #{record.pro,jdbcType=REAL},
      </if>
      <if test="record.seq != null">
        SEQ = #{record.seq,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_COUNTWAGE
    set WAGECOUNT_ID = #{record.wagecountId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      WAGETYPE_ID = #{record.wagetypeId,jdbcType=INTEGER},
      MIN_VALUE = #{record.minValue,jdbcType=NUMERIC},
      MAX_VALUE = #{record.maxValue,jdbcType=NUMERIC},
      PRO = #{record.pro,jdbcType=REAL},
      SEQ = #{record.seq,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwage">
    <!--@mbggenerated-->
    update FUN_COUNTWAGE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="wagetypeId != null">
        WAGETYPE_ID = #{wagetypeId,jdbcType=INTEGER},
      </if>
      <if test="minValue != null">
        MIN_VALUE = #{minValue,jdbcType=NUMERIC},
      </if>
      <if test="maxValue != null">
        MAX_VALUE = #{maxValue,jdbcType=NUMERIC},
      </if>
      <if test="pro != null">
        PRO = #{pro,jdbcType=REAL},
      </if>
      <if test="seq != null">
        SEQ = #{seq,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
    </set>
    where WAGECOUNT_ID = #{wagecountId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunCountwage">
    <!--@mbggenerated-->
    update FUN_COUNTWAGE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      WAGETYPE_ID = #{wagetypeId,jdbcType=INTEGER},
      MIN_VALUE = #{minValue,jdbcType=NUMERIC},
      MAX_VALUE = #{maxValue,jdbcType=NUMERIC},
      PRO = #{pro,jdbcType=REAL},
      SEQ = #{seq,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER}
    where WAGECOUNT_ID = #{wagecountId,jdbcType=INTEGER}
  </update>
  <delete id="delFunCountwageByWageTypeId">
    delete from FUN_COUNTWAGE
    where WAGETYPE_ID = #{wagetypeId,jdbcType=INTEGER}
    and COMP_ID = #{compId}
  </delete>
  <delete id="delFunCountwageNotInwageCountIds">
    delete from FUN_COUNTWAGE
    where  COMP_ID = #{compId}
    and WAGETYPE_ID = #{wagetypeId}
    and WAGECOUNT_ID not in 
    <foreach close=")" collection="wageCountIds" item="wageCountId" open="(" separator=",">
    	#{wageCountId}
    </foreach>
   
  </delete>
  <select id="selectFunCountWageListByWageTypeId" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from FUN_COUNTWAGE
    where WAGETYPE_ID = #{wageTypeId,jdbcType=INTEGER}
    and COMP_ID = #{compId}
  </select>
	
	<select id="getFunCountwageByCompIdAndWageTypeIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_COUNTWAGE
		where COMP_ID = #{compId} and WAGETYPE_ID in
		<foreach close=")" collection="wageTypeIds" item="wageTypeId" open="(" separator=",">
			#{wageTypeId}
		</foreach>
	</select>

  <select id="getFunCountwageListByWageTypeIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from FUN_COUNTWAGE
    where COMP_ID = #{compId} and WAGETYPE_ID in
    <foreach collection="wageTypeIds" separator="," item="wageTypeId" open="(" close=")">
      #{wageTypeId}
    </foreach>
  </select>
<delete id="deleteByWageTypeId" >
  DELETE  FROM  FUN_COUNTWAGE where COMP_ID = #{compId} and WAGETYPE_ID = #{wageTypeId}
</delete>
  <insert id="insertBatch">
    INSERT INTO FUN_COUNTWAGE ([WAGECOUNT_ID], [COMP_ID], [WAGETYPE_ID], [MIN_VALUE], [MAX_VALUE], [PRO], [SEQ], [DEPT_ID]) VALUES
    <foreach collection="countWageList" item="countWage" separator=",">
      (NEXT VALUE FOR SEQ_FUN_COUNTWAGE_WAGECOUNT_ID,#{countWage.compId},#{countWage.wagetypeId},#{countWage.minValue},#{countWage.maxValue},#{countWage.pro},#{countWage.seq},#{countWage.deptId})
    </foreach>
  </insert>
<delete id="deleteBatchByWageTypeId">
  DELETE  FROM  FUN_COUNTWAGE where COMP_ID = #{compId}
  <choose>
    <when test="wagetypeIds != null and wagetypeIds.size() > 0">
      and WAGETYPE_ID in
      <foreach close=")" collection="wagetypeIds" item="wagetypeId" open="(" separator=",">
        #{wagetypeId}
      </foreach>
    </when>
    <otherwise>
      and 1 != 1
    </otherwise>
  </choose>
</delete>
</mapper>