<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpBuildingSetMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpBuildingSet">
    <!--@mbggenerated-->
    <id column="BS_ID" jdbcType="INTEGER" property="bsId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="COMP_NO" jdbcType="VARCHAR" property="compNo" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="PROVINCE_ID" jdbcType="INTEGER" property="provinceId" />
    <result column="BUILD_ROOF" jdbcType="VARCHAR" property="buildRoof" />
    <result column="BUILD_UNIT" jdbcType="VARCHAR" property="buildUnit" />
    <result column="BUILD_FLOORS" jdbcType="VARCHAR" property="buildFloors" />
    <result column="BUILD_LADDER" jdbcType="VARCHAR" property="buildLadder" />
    <result column="BUILD_DOORS" jdbcType="VARCHAR" property="buildDoors" />
    <result column="BUILD_LOCK" jdbcType="TINYINT" property="buildLock" />
    <result column="NUMBER_RULE" jdbcType="TINYINT" property="numberRule" />
    <result column="NUMBER_TYPE" jdbcType="TINYINT" property="numberType" />
    <result column="COMPRISE_RULE" jdbcType="TINYINT" property="compriseRule" />
    <result column="HAVE_NUM_RULE" jdbcType="TINYINT" property="haveNumRule" />
    <result column="COPY_TOALL_BUILDING" jdbcType="TINYINT" property="copyToallBuilding" />
    <result column="HOUSE_TYPE" jdbcType="TINYINT" property="houseType" />
    <result column="HOUSE_STRUCT" jdbcType="TINYINT" property="houseStruct" />
    <result column="HOUSE_YEAR" jdbcType="INTEGER" property="houseYear" />
    <result column="DOOR_START" jdbcType="INTEGER" property="doorStart" />
    <result column="FLOOR_START" jdbcType="INTEGER" property="floorStart" />
    <result column="FLOOR_END" jdbcType="INTEGER" property="floorEnd" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    BS_ID, COMP_ID, BUILD_ID, COMP_NO, CITY_ID, PROVINCE_ID, BUILD_ROOF, BUILD_UNIT, 
    BUILD_FLOORS, BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, 
    HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, HOUSE_STRUCT, HOUSE_YEAR, DOOR_START, 
    FLOOR_START, FLOOR_END
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from BUILDING_SET
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from BUILDING_SET
    where BS_ID = #{bsId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from BUILDING_SET
    where BS_ID = #{bsId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetExample">
    <!--@mbggenerated-->
    delete from BUILDING_SET
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet">
    <!--@mbggenerated-->
    <selectKey keyProperty="bsId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_BUILDING_SET_BS_ID
    </selectKey>
    insert into BUILDING_SET (BS_ID, COMP_ID, BUILD_ID, 
      COMP_NO, CITY_ID, PROVINCE_ID, 
      BUILD_ROOF, BUILD_UNIT, BUILD_FLOORS, 
      BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, 
      NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, 
      HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, 
      HOUSE_STRUCT, HOUSE_YEAR, DOOR_START, 
      FLOOR_START, FLOOR_END)
    values (#{bsId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, 
      #{compNo,jdbcType=VARCHAR}, #{cityId,jdbcType=INTEGER}, #{provinceId,jdbcType=INTEGER}, 
      #{buildRoof,jdbcType=VARCHAR}, #{buildUnit,jdbcType=VARCHAR}, #{buildFloors,jdbcType=VARCHAR}, 
      #{buildLadder,jdbcType=VARCHAR}, #{buildDoors,jdbcType=VARCHAR}, #{buildLock,jdbcType=TINYINT}, 
      #{numberRule,jdbcType=TINYINT}, #{numberType,jdbcType=TINYINT}, #{compriseRule,jdbcType=TINYINT}, 
      #{haveNumRule,jdbcType=TINYINT}, #{copyToallBuilding,jdbcType=TINYINT}, #{houseType,jdbcType=TINYINT}, 
      #{houseStruct,jdbcType=TINYINT}, #{houseYear,jdbcType=INTEGER}, #{doorStart,jdbcType=INTEGER}, 
      #{floorStart,jdbcType=INTEGER}, #{floorEnd,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet">
    <!--@mbggenerated-->
    <selectKey keyProperty="bsId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_BUILDING_SET_BS_ID
    </selectKey>
    insert into BUILDING_SET
    <trim prefix="(" suffix=")" suffixOverrides=",">
      BS_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="compNo != null">
        COMP_NO,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="provinceId != null">
        PROVINCE_ID,
      </if>
      <if test="buildRoof != null">
        BUILD_ROOF,
      </if>
      <if test="buildUnit != null">
        BUILD_UNIT,
      </if>
      <if test="buildFloors != null">
        BUILD_FLOORS,
      </if>
      <if test="buildLadder != null">
        BUILD_LADDER,
      </if>
      <if test="buildDoors != null">
        BUILD_DOORS,
      </if>
      <if test="buildLock != null">
        BUILD_LOCK,
      </if>
      <if test="numberRule != null">
        NUMBER_RULE,
      </if>
      <if test="numberType != null">
        NUMBER_TYPE,
      </if>
      <if test="compriseRule != null">
        COMPRISE_RULE,
      </if>
      <if test="haveNumRule != null">
        HAVE_NUM_RULE,
      </if>
      <if test="copyToallBuilding != null">
        COPY_TOALL_BUILDING,
      </if>
      <if test="houseType != null">
        HOUSE_TYPE,
      </if>
      <if test="houseStruct != null">
        HOUSE_STRUCT,
      </if>
      <if test="houseYear != null">
        HOUSE_YEAR,
      </if>
      <if test="doorStart != null">
        DOOR_START,
      </if>
      <if test="floorStart != null">
        FLOOR_START,
      </if>
      <if test="floorEnd != null">
        FLOOR_END,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{bsId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="compNo != null">
        #{compNo,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="provinceId != null">
        #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="buildRoof != null">
        #{buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="buildUnit != null">
        #{buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="buildFloors != null">
        #{buildFloors,jdbcType=VARCHAR},
      </if>
      <if test="buildLadder != null">
        #{buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="buildDoors != null">
        #{buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="buildLock != null">
        #{buildLock,jdbcType=TINYINT},
      </if>
      <if test="numberRule != null">
        #{numberRule,jdbcType=TINYINT},
      </if>
      <if test="numberType != null">
        #{numberType,jdbcType=TINYINT},
      </if>
      <if test="compriseRule != null">
        #{compriseRule,jdbcType=TINYINT},
      </if>
      <if test="haveNumRule != null">
        #{haveNumRule,jdbcType=TINYINT},
      </if>
      <if test="copyToallBuilding != null">
        #{copyToallBuilding,jdbcType=TINYINT},
      </if>
      <if test="houseType != null">
        #{houseType,jdbcType=TINYINT},
      </if>
      <if test="houseStruct != null">
        #{houseStruct,jdbcType=TINYINT},
      </if>
      <if test="houseYear != null">
        #{houseYear,jdbcType=INTEGER},
      </if>
      <if test="doorStart != null">
        #{doorStart,jdbcType=INTEGER},
      </if>
      <if test="floorStart != null">
        #{floorStart,jdbcType=INTEGER},
      </if>
      <if test="floorEnd != null">
        #{floorEnd,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from BUILDING_SET
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update BUILDING_SET
    <set>
      <if test="record.bsId != null">
        BS_ID = #{record.bsId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.compNo != null">
        COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.provinceId != null">
        PROVINCE_ID = #{record.provinceId,jdbcType=INTEGER},
      </if>
      <if test="record.buildRoof != null">
        BUILD_ROOF = #{record.buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="record.buildUnit != null">
        BUILD_UNIT = #{record.buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.buildFloors != null">
        BUILD_FLOORS = #{record.buildFloors,jdbcType=VARCHAR},
      </if>
      <if test="record.buildLadder != null">
        BUILD_LADDER = #{record.buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="record.buildDoors != null">
        BUILD_DOORS = #{record.buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="record.buildLock != null">
        BUILD_LOCK = #{record.buildLock,jdbcType=TINYINT},
      </if>
      <if test="record.numberRule != null">
        NUMBER_RULE = #{record.numberRule,jdbcType=TINYINT},
      </if>
      <if test="record.numberType != null">
        NUMBER_TYPE = #{record.numberType,jdbcType=TINYINT},
      </if>
      <if test="record.compriseRule != null">
        COMPRISE_RULE = #{record.compriseRule,jdbcType=TINYINT},
      </if>
      <if test="record.haveNumRule != null">
        HAVE_NUM_RULE = #{record.haveNumRule,jdbcType=TINYINT},
      </if>
      <if test="record.copyToallBuilding != null">
        COPY_TOALL_BUILDING = #{record.copyToallBuilding,jdbcType=TINYINT},
      </if>
      <if test="record.houseType != null">
        HOUSE_TYPE = #{record.houseType,jdbcType=TINYINT},
      </if>
      <if test="record.houseStruct != null">
        HOUSE_STRUCT = #{record.houseStruct,jdbcType=TINYINT},
      </if>
      <if test="record.houseYear != null">
        HOUSE_YEAR = #{record.houseYear,jdbcType=INTEGER},
      </if>
      <if test="record.doorStart != null">
        DOOR_START = #{record.doorStart,jdbcType=INTEGER},
      </if>
      <if test="record.floorStart != null">
        FLOOR_START = #{record.floorStart,jdbcType=INTEGER},
      </if>
      <if test="record.floorEnd != null">
        FLOOR_END = #{record.floorEnd,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update BUILDING_SET
    set BS_ID = #{record.bsId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      COMP_NO = #{record.compNo,jdbcType=VARCHAR},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      PROVINCE_ID = #{record.provinceId,jdbcType=INTEGER},
      BUILD_ROOF = #{record.buildRoof,jdbcType=VARCHAR},
      BUILD_UNIT = #{record.buildUnit,jdbcType=VARCHAR},
      BUILD_FLOORS = #{record.buildFloors,jdbcType=VARCHAR},
      BUILD_LADDER = #{record.buildLadder,jdbcType=VARCHAR},
      BUILD_DOORS = #{record.buildDoors,jdbcType=VARCHAR},
      BUILD_LOCK = #{record.buildLock,jdbcType=TINYINT},
      NUMBER_RULE = #{record.numberRule,jdbcType=TINYINT},
      NUMBER_TYPE = #{record.numberType,jdbcType=TINYINT},
      COMPRISE_RULE = #{record.compriseRule,jdbcType=TINYINT},
      HAVE_NUM_RULE = #{record.haveNumRule,jdbcType=TINYINT},
      COPY_TOALL_BUILDING = #{record.copyToallBuilding,jdbcType=TINYINT},
      HOUSE_TYPE = #{record.houseType,jdbcType=TINYINT},
      HOUSE_STRUCT = #{record.houseStruct,jdbcType=TINYINT},
      HOUSE_YEAR = #{record.houseYear,jdbcType=INTEGER},
      DOOR_START = #{record.doorStart,jdbcType=INTEGER},
      FLOOR_START = #{record.floorStart,jdbcType=INTEGER},
      FLOOR_END = #{record.floorEnd,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet">
    <!--@mbggenerated-->
    update BUILDING_SET
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="compNo != null">
        COMP_NO = #{compNo,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="provinceId != null">
        PROVINCE_ID = #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="buildRoof != null">
        BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="buildUnit != null">
        BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="buildFloors != null">
        BUILD_FLOORS = #{buildFloors,jdbcType=VARCHAR},
      </if>
      <if test="buildLadder != null">
        BUILD_LADDER = #{buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="buildDoors != null">
        BUILD_DOORS = #{buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="buildLock != null">
        BUILD_LOCK = #{buildLock,jdbcType=TINYINT},
      </if>
      <if test="numberRule != null">
        NUMBER_RULE = #{numberRule,jdbcType=TINYINT},
      </if>
      <if test="numberType != null">
        NUMBER_TYPE = #{numberType,jdbcType=TINYINT},
      </if>
      <if test="compriseRule != null">
        COMPRISE_RULE = #{compriseRule,jdbcType=TINYINT},
      </if>
      <if test="haveNumRule != null">
        HAVE_NUM_RULE = #{haveNumRule,jdbcType=TINYINT},
      </if>
      <if test="copyToallBuilding != null">
        COPY_TOALL_BUILDING = #{copyToallBuilding,jdbcType=TINYINT},
      </if>
      <if test="houseType != null">
        HOUSE_TYPE = #{houseType,jdbcType=TINYINT},
      </if>
      <if test="houseStruct != null">
        HOUSE_STRUCT = #{houseStruct,jdbcType=TINYINT},
      </if>
      <if test="houseYear != null">
        HOUSE_YEAR = #{houseYear,jdbcType=INTEGER},
      </if>
      <if test="doorStart != null">
        DOOR_START = #{doorStart,jdbcType=INTEGER},
      </if>
      <if test="floorStart != null">
        FLOOR_START = #{floorStart,jdbcType=INTEGER},
      </if>
      <if test="floorEnd != null">
        FLOOR_END = #{floorEnd,jdbcType=INTEGER},
      </if>
    </set>
    where BS_ID = #{bsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet">
    <!--@mbggenerated-->
    update BUILDING_SET
    set COMP_ID = #{compId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      COMP_NO = #{compNo,jdbcType=VARCHAR},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      PROVINCE_ID = #{provinceId,jdbcType=INTEGER},
      BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR},
      BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR},
      BUILD_FLOORS = #{buildFloors,jdbcType=VARCHAR},
      BUILD_LADDER = #{buildLadder,jdbcType=VARCHAR},
      BUILD_DOORS = #{buildDoors,jdbcType=VARCHAR},
      BUILD_LOCK = #{buildLock,jdbcType=TINYINT},
      NUMBER_RULE = #{numberRule,jdbcType=TINYINT},
      NUMBER_TYPE = #{numberType,jdbcType=TINYINT},
      COMPRISE_RULE = #{compriseRule,jdbcType=TINYINT},
      HAVE_NUM_RULE = #{haveNumRule,jdbcType=TINYINT},
      COPY_TOALL_BUILDING = #{copyToallBuilding,jdbcType=TINYINT},
      HOUSE_TYPE = #{houseType,jdbcType=TINYINT},
      HOUSE_STRUCT = #{houseStruct,jdbcType=TINYINT},
      HOUSE_YEAR = #{houseYear,jdbcType=INTEGER},
      DOOR_START = #{doorStart,jdbcType=INTEGER},
      FLOOR_START = #{floorStart,jdbcType=INTEGER},
      FLOOR_END = #{floorEnd,jdbcType=INTEGER}
    where BS_ID = #{bsId,jdbcType=INTEGER}
  </update>
  <select id="selectBuildfloors" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from BUILDING_SET
     BUILD_ID = #{buildId,jdbcType=INTEGER}
    and COMP_ID = #{compId,jdbcType=INTEGER}
    and COMP_NO = #{compNo,jdbcType=VARCHAR}
    and CITY_ID = #{cityId,jdbcType=INTEGER}
    and BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR}
    and BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR}
  </select>
	
	<select id="countErpBuildingSet" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet" resultType="java.lang.Integer">
		select count(1)
		from BUILDING_SET WITH (NOLOCK)
		where BUILD_ID = #{buildId}
		and COMP_ID = #{compId}
		and CITY_ID = #{cityId}
	</select>
	
  <select id="getBuildingRuleList" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSet" resultMap="BaseResultMap"> 
    select 
    <include refid="Base_Column_List" />
    from BUILDING_SET
    where BUILD_ID = #{buildId,jdbcType=INTEGER}
    and COMP_ID = #{compId,jdbcType=INTEGER}
    and COMP_NO = #{compNo,jdbcType=VARCHAR}
    and CITY_ID = #{cityId,jdbcType=INTEGER}
    order by BUILD_ROOF asc, BUILD_UNIT asc
  </select>
  <insert id="insertErpBuildingSet">
    <selectKey keyProperty="bsId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_BUILDING_SET_BS_ID
    </selectKey>
    insert into BUILDING_SET
    <trim prefix="(" suffix=")" suffixOverrides=",">
      BS_ID,
      <if test="insertModel.compId != null">
        COMP_ID,
      </if>
      <if test="insertModel.buildId != null">
        BUILD_ID,
      </if>
      <if test="insertModel.compNo != null">
        COMP_NO,
      </if>
      <if test="insertModel.cityId != null">
        CITY_ID,
      </if>
      <if test="insertModel.provinceId != null">
        PROVINCE_ID,
      </if>
      <if test="insertModel.buildRoof != null">
        BUILD_ROOF,
      </if>
      <if test="insertModel.buildUnit != null">
        BUILD_UNIT,
      </if>
      <if test="insertModel.buildFloors != null">
        BUILD_FLOORS,
      </if>
      <if test="insertModel.buildLadder != null">
        BUILD_LADDER,
      </if>
      <if test="insertModel.buildDoors != null">
        BUILD_DOORS,
      </if>
      <if test="insertModel.buildLock != null">
        BUILD_LOCK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{insertModel.bsId,jdbcType=INTEGER},
      <if test="insertModel.compId != null">
        #{insertModel.compId,jdbcType=INTEGER},
      </if>
      <if test="insertModel.buildId != null">
        #{insertModel.buildId,jdbcType=INTEGER},
      </if>
      <if test="insertModel.compNo != null">
        #{insertModel.compNo,jdbcType=VARCHAR},
      </if>
      <if test="insertModel.cityId != null">
        #{insertModel.cityId,jdbcType=INTEGER},
      </if>
      <if test="insertModel.provinceId != null">
        #{insertModel.provinceId,jdbcType=INTEGER},
      </if>
      <if test="insertModel.buildRoof != null">
        #{insertModel.buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="insertModel.buildUnit != null">
        #{insertModel.buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="insertModel.buildFloors != null">
        #{insertModel.buildFloors,jdbcType=VARCHAR},
      </if>
      <if test="insertModel.buildLadder != null">
        #{insertModel.buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="insertModel.buildDoors != null">
        #{insertModel.buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="insertModel.buildLock != null">
        #{insertModel.buildLock,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
	
  <update id="updateErpBuildingSet">
    update BUILDING_SET
    <set>
      <if test="updateModel.compId != null">
        COMP_ID = #{updateModel.compId,jdbcType=INTEGER},
      </if>
      <if test="updateModel.buildId != null">
        BUILD_ID = #{updateModel.buildId,jdbcType=INTEGER},
      </if>
      <if test="updateModel.compNo != null">
        COMP_NO = #{updateModel.compNo,jdbcType=VARCHAR},
      </if>
      <if test="updateModel.cityId != null">
        CITY_ID = #{updateModel.cityId,jdbcType=INTEGER},
      </if>
      <if test="updateModel.provinceId != null">
        PROVINCE_ID = #{updateModel.provinceId,jdbcType=INTEGER},
      </if>
      <if test="updateModel.buildRoof != null">
        BUILD_ROOF = #{updateModel.buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="updateModel.buildUnit != null">
        BUILD_UNIT = #{updateModel.buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="updateModel.buildFloors != null">
        BUILD_FLOORS = #{updateModel.buildFloors,jdbcType=VARCHAR},
      </if>
      <if test="updateModel.buildLadder != null">
        BUILD_LADDER = #{updateModel.buildLadder,jdbcType=VARCHAR},
      </if>
      <if test="updateModel.buildDoors != null">
        BUILD_DOORS = #{updateModel.buildDoors,jdbcType=VARCHAR},
      </if>
      <if test="updateModel.buildLock != null">
        BUILD_LOCK = #{updateModel.buildLock,jdbcType=TINYINT},
      </if>
    </set>
    where BS_ID = #{updateModel.bsId,jdbcType=INTEGER}
  </update>
  	
	<select id="selectBuildIdLockList" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET where BUILD_LOCK = 1 and COMP_ID =#{compId} and
		BUILD_ID in
		<foreach close=")" collection="buildIdList" index="index" item="buildlist" open="(" separator=",">
			#{buildlist}
		</foreach>
	</select>
	
	<select id="getIsLock" resultType="java.lang.Integer">
		select count(1) from BUILDING_SET
		where BUILD_LOCK = 1 and COMP_ID =#{compId}
		and BUILD_ID = #{buildId}
	</select>
	
	<select id="getRoofUnitNameRepeatCount" resultType="java.lang.Integer">
		select count(1) from BUILDING_SET
		where COMP_ID =#{compId}
		and BUILD_ID = #{buildId}
		AND BUILD_ROOF = #{buildRoof}
		<if test="buildUnit != null">AND BUILD_UNIT = #{buildUnit}</if>
		<if test="bsId != null">AND BS_ID != #{bsId}</if>
	</select>
	
	<select id="getRoofDoorCount" resultType="java.util.Map">
		select BUILD_ROOF buildRoof, count(1) unitCount,
		sum((FLOOR_END-FLOOR_START+iif(FLOOR_START &gt; 0,1,0))*convert(int,BUILD_DOORS)) doorCount
		from BUILDING_SET
		where COMP_ID = #{compId}
		and BUILD_ID = #{buildId}
		group by BUILD_ROOF
	</select>
	
	<select id="getDoorStartNum" resultType="java.lang.Integer">
		select 
		<!-- 1：按楼层时，后一栋起始号为前面房间数之和，2：按单元时，后一栋起始号为楼层*房间数之和 -->
		<choose>
			<when test="numberRule == null or numberRule == 1">sum(convert(int,BUILD_DOORS))</when>
			<otherwise>sum((FLOOR_END-FLOOR_START+iif(FLOOR_START &gt; 0,1,0))*convert(int,BUILD_DOORS))</otherwise>
		</choose>
		from BUILDING_SET where comp_id=#{compId} and build_id=#{buildId} and BUILD_ROOF = #{buildRoof}
	</select>
	
	<select id="getBuildRoofList" resultMap="BaseResultMap">
		select BUILD_ROOF from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		group by BUILD_ROOF
	</select>
	
	<select id="getBuildUnitList" resultMap="BaseResultMap">
		select 
		BS_ID, BUILD_ID, BUILD_ROOF, BUILD_UNIT, 
		BUILD_FLOORS, BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, 
		HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, HOUSE_STRUCT, HOUSE_YEAR,DOOR_START,FLOOR_START, FLOOR_END
		from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		AND BUILD_ROOF = #{buildRoof}
	</select>

	<delete id="delBuildRoofById">
		delete from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		and BUILD_ROOF = #{buildRoof}
	</delete>
	
	<delete id="delBuildUnitById">
		delete from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		and BUILD_ROOF = #{buildRoof} and BUILD_UNIT = #{buildUnit}
	</delete>
	
	<update id="updateRoofByOldRoof">
		update BUILDING_SET set BUILD_ROOF = #{buildRoof}
		where COMP_ID = #{compId} and BUILD_ID = #{buildId} and BUILD_ROOF = #{oldBuildRoof}
	</update>
	
	<select id="getBuildRoofUnits" resultMap="BaseResultMap">
		select BUILD_ROOF,BUILD_UNIT from BUILDING_SET
		where COMP_ID = #{param.compId}
		and BUILD_ID = #{param.buildId}
		group by BUILD_ROOF,BUILD_UNIT
		order by BUILD_ROOF,BUILD_UNIT
	</select>
	
	<select id="selectByBuildUnit" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		and BUILD_ROOF = #{buildRoof} and BUILD_UNIT = #{buildUnit}
	</select>
	
	<select id="getErpBuildingSet" resultMap ="BaseResultMap">
		SELECT TOP 1
		<include refid="Base_Column_List" />
		FROM BUILDING_SET
		WHERE COMP_ID = #{compId} AND BUILD_ID = #{buildId}
		<if test="isLock != null and isLock != ''">
			AND BUILD_LOCK = #{isLock}
		</if>
	</select>
	
	<select id="getErpBuildingSetByRoofAndUnit" resultMap ="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId} and BUILD_LOCK = 1
		and BUILD_ROOF = #{buildRoof} and BUILD_UNIT = #{buildUnit}
	</select>
	
	<delete id="deleteCompBuildingSet">
		DELETE FROM BUILDING_SET WHERE BUILD_ID=#{buildId} AND COMP_ID=#{compId};
		DELETE FROM BUILDING_SET_ROOM WHERE BUILD_ID=#{buildId} AND COMP_ID=#{compId};
		DELETE FROM BUILDING_SET_FLOOR WHERE BUILD_ID=#{buildId} AND COMP_ID=#{compId};
	</delete>
	
	<insert id="createTempBuildingSet">
		<!-- 拷贝楼盘规则 -->
		INSERT INTO BUILDING_SET (BS_ID, COMP_ID, BUILD_ID, COMP_NO, CITY_ID, PROVINCE_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOORS, BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, HOUSE_STRUCT, HOUSE_YEAR, DOOR_START, FLOOR_START, FLOOR_END) 
		SELECT (NEXT VALUE FOR SEQ_BUILDING_SET_BS_ID), #{copyToCompId}, BUILD_ID, #{copyToCompNo}, CITY_ID, PROVINCE_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOORS, BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, HOUSE_STRUCT, HOUSE_YEAR, DOOR_START, FLOOR_START, FLOOR_END
		FROM BUILDING_SET
		WHERE BUILD_ID=#{buildId} AND COMP_ID=#{sourceCompId};
		<!-- 拷贝房间，面积和朝向不拷贝 -->
		INSERT INTO BUILDING_SET_ROOM (CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, HOUSE_HALL, HOUSE_WEI, HOUSE_YANG, CREATION_TIME, UPDATE_TIME, BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM) 
		SELECT CITY_ID, #{copyToCompId}, BUILD_ID, SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, HOUSE_HALL, HOUSE_WEI, HOUSE_YANG, CREATION_TIME, UPDATE_TIME, BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM
		FROM BUILDING_SET_ROOM
		WHERE BUILD_ID=#{buildId} AND COMP_ID=#{sourceCompId} AND DEL_FLAG=0;
		<!-- 拷贝楼层 -->
		INSERT INTO BUILDING_SET_FLOOR (CITY_ID, COMP_ID, BUILD_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOOR, SYS_BUILD_FLOOR, CREATION_TIME, UPDATE_TIME) 
		SELECT CITY_ID, #{copyToCompId}, BUILD_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOOR, SYS_BUILD_FLOOR, CREATION_TIME, UPDATE_TIME
		FROM BUILDING_SET_FLOOR
		WHERE BUILD_ID=#{buildId} AND COMP_ID=#{sourceCompId};
	</insert>
	
    <delete id="delBuildById">
		delete from BUILDING_SET
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
	</delete>

  <insert id="copyTempBuildRule">
    <!-- 拷贝楼盘规则 -->
    INSERT INTO BUILDING_SET (BS_ID, COMP_ID, BUILD_ID, COMP_NO, CITY_ID, PROVINCE_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOORS, BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, HOUSE_STRUCT, HOUSE_YEAR, DOOR_START, FLOOR_START, FLOOR_END)
    SELECT (NEXT VALUE FOR SEQ_BUILDING_SET_BS_ID), #{copyToCompId}, BUILD_ID, #{copyToCompNo}, CITY_ID, PROVINCE_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOORS, BUILD_LADDER, BUILD_DOORS, BUILD_LOCK, NUMBER_RULE, NUMBER_TYPE, COMPRISE_RULE, HAVE_NUM_RULE, COPY_TOALL_BUILDING, HOUSE_TYPE, HOUSE_STRUCT, HOUSE_YEAR, DOOR_START, FLOOR_START, FLOOR_END
    FROM BUILDING_SET
    WHERE BUILD_ID=#{buildId} AND COMP_ID=#{sourceCompId};
    <!-- 拷贝房间，面积和朝向不拷贝 -->
    INSERT INTO BUILDING_SET_ROOM (CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, HOUSE_HALL, HOUSE_WEI, HOUSE_YANG, CREATION_TIME, UPDATE_TIME, BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM)
    SELECT CITY_ID, #{copyToCompId}, BUILD_ID, SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, HOUSE_HALL, HOUSE_WEI, HOUSE_YANG, CREATION_TIME, UPDATE_TIME, BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM
    FROM BUILDING_SET_ROOM
    WHERE BUILD_ID=#{buildId} AND COMP_ID=#{sourceCompId} AND DEL_FLAG=0;
    <!-- 拷贝楼层 -->
    INSERT INTO BUILDING_SET_FLOOR (CITY_ID, COMP_ID, BUILD_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOOR, SYS_BUILD_FLOOR, CREATION_TIME, UPDATE_TIME)
    SELECT CITY_ID, #{copyToCompId}, BUILD_ID, BUILD_ROOF, BUILD_UNIT, BUILD_FLOOR, SYS_BUILD_FLOOR, CREATION_TIME, UPDATE_TIME
    FROM BUILDING_SET_FLOOR
    WHERE BUILD_ID=#{buildId} AND COMP_ID=#{sourceCompId};
  </insert>
	
</mapper>




