<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunStatisticTotleMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
    <!--@mbggenerated-->
    <id column="STATISTIC_TOTLE_ID" jdbcType="INTEGER" property="statisticTotleId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="CASE_TYPE" jdbcType="INTEGER" property="caseType" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="DJ_COUNT" jdbcType="INTEGER" property="djCount" />
    <result column="ZYX_COUNT" jdbcType="INTEGER" property="zyxCount" />
    <result column="SSZR_COUNT" jdbcType="INTEGER" property="sszrCount" />
    <result column="ZP_COUNT" jdbcType="INTEGER" property="zpCount" />
    <result column="FP_COUNT" jdbcType="INTEGER" property="fpCount" />
    <result column="XG_COUNT" jdbcType="INTEGER" property="xgCount" />
    <result column="ZTBG_COUNT" jdbcType="INTEGER" property="ztbgCount" />
    <result column="WT_COUNT" jdbcType="INTEGER" property="wtCount" />
    <result column="GJ_COUNT" jdbcType="INTEGER" property="gjCount" />
    <result column="FK_COUNT" jdbcType="INTEGER" property="fkCount" />
    <result column="YSTJ_COUNT" jdbcType="INTEGER" property="ystjCount" />
    <result column="YJ_COUNT" jdbcType="INTEGER" property="yjCount" />
    <result column="TPSC_COUNT" jdbcType="INTEGER" property="tpscCount" />
    <result column="SPSC_COUNT" jdbcType="INTEGER" property="spscCount" />
    <result column="CKDH_COUNT" jdbcType="INTEGER" property="ckdhCount" />
    <result column="IPCALL_COUNT" jdbcType="INTEGER" property="ipcallCount" />
    <result column="WLFB_COUNT" jdbcType="INTEGER" property="wlfbCount" />
    <result column="WLSX_COUNT" jdbcType="INTEGER" property="wlsxCount" />
    <result column="DK_COUNT" jdbcType="INTEGER" property="dkCount" />
    <result column="CJ_COUNT" jdbcType="INTEGER" property="cjCount" />
    <result column="SX_COUNT" jdbcType="INTEGER" property="sxCount" />
  </resultMap>
  <resultMap id="BaseResultMapDto" extends="BaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunStatisticTotleDto">
  <id column="STATISTIC_TOTLE_ID" jdbcType="INTEGER" property="statisticTotleId" />
    <result column="HOUSE_DJ_COUNT" jdbcType="VARCHAR" property="houseDjCount" />
    <result column="CUST_DJ_COUNT" jdbcType="VARCHAR" property="custDjCount" />
    <result column="FK_HOUSE_COUNT" jdbcType="VARCHAR" property="fkHouseCount" />
    <result column="DK_CUST_COUNT" jdbcType="VARCHAR" property="dkCustCount" />
    <result column="DATE_COUNT" jdbcType="VARCHAR" property="dateCount" />
    <result column="MONTH_COUNT" jdbcType="VARCHAR" property="monthCount" />
    <result column="HOUSE_FK_COUNT" jdbcType="VARCHAR" property="houseFkCount" />
    <result column="CUST_FK_COUNT" jdbcType="VARCHAR" property="custFkCount" />
    <result column="HOUSE_DK_COUNT" jdbcType="VARCHAR" property="houseDkCount" />
    <result column="CUST_DK_COUNT" jdbcType="VARCHAR" property="custDkCount" />
  </resultMap>
  <resultMap id="BaseResultRateDto" extends="BaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunStatisticRateDto">
    <result column="DATE_COUNT" property="dateCount" />
    <result column="SIGN_COUNT" property="signCount" />
    <result column="DK_RATE" property="dkRate" />
    <result column="FK_RATE" property="fkRate" />
    <result column="CJ_RATE" property="cjRate" />
    <result column="SIGN_RATE" property="signRate" />
    <result column="RANGE" property="range" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    STATISTIC_TOTLE_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, CITY_ID, CASE_TYPE, 
    CREATE_TIME, DJ_COUNT, ZYX_COUNT, SSZR_COUNT, ZP_COUNT, FP_COUNT, XG_COUNT, ZTBG_COUNT, 
    WT_COUNT, GJ_COUNT, FK_COUNT, YSTJ_COUNT, YJ_COUNT, TPSC_COUNT, SPSC_COUNT, CKDH_COUNT, 
    IPCALL_COUNT, WLFB_COUNT, WLSX_COUNT, DK_COUNT, CJ_COUNT, SX_COUNT
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_STATISTIC_TOTLE
    where STATISTIC_TOTLE_ID = #{statisticTotleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
    <!--@mbggenerated-->
    <selectKey keyProperty="statisticTotleId" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_STATISTIC_TOTLE (COMP_ID, AREA_ID, REG_ID, 
      DEPT_ID, GR_ID, USER_ID, 
      CITY_ID, CASE_TYPE, CREATE_TIME, 
      DJ_COUNT, ZYX_COUNT, SSZR_COUNT, 
      ZP_COUNT, FP_COUNT, XG_COUNT, 
      ZTBG_COUNT, WT_COUNT, GJ_COUNT, 
      FK_COUNT, YSTJ_COUNT, YJ_COUNT, 
      TPSC_COUNT, SPSC_COUNT, CKDH_COUNT, 
      IPCALL_COUNT, WLFB_COUNT, WLSX_COUNT, 
      DK_COUNT, CJ_COUNT, SX_COUNT
      )
    values (#{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, 
      #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{cityId,jdbcType=INTEGER}, #{caseType,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{djCount,jdbcType=INTEGER}, #{zyxCount,jdbcType=INTEGER}, #{sszrCount,jdbcType=INTEGER}, 
      #{zpCount,jdbcType=INTEGER}, #{fpCount,jdbcType=INTEGER}, #{xgCount,jdbcType=INTEGER}, 
      #{ztbgCount,jdbcType=INTEGER}, #{wtCount,jdbcType=INTEGER}, #{gjCount,jdbcType=INTEGER}, 
      #{fkCount,jdbcType=INTEGER}, #{ystjCount,jdbcType=INTEGER}, #{yjCount,jdbcType=INTEGER}, 
      #{tpscCount,jdbcType=INTEGER}, #{spscCount,jdbcType=INTEGER}, #{ckdhCount,jdbcType=INTEGER}, 
      #{ipcallCount,jdbcType=INTEGER}, #{wlfbCount,jdbcType=INTEGER}, #{wlsxCount,jdbcType=INTEGER}, 
      #{dkCount,jdbcType=INTEGER}, #{cjCount,jdbcType=INTEGER}, #{sxCount,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
    <!--@mbggenerated-->
    <selectKey keyProperty="statisticTotleId" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_STATISTIC_TOTLE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="djCount != null">
        DJ_COUNT,
      </if>
      <if test="zyxCount != null">
        ZYX_COUNT,
      </if>
      <if test="sszrCount != null">
        SSZR_COUNT,
      </if>
      <if test="zpCount != null">
        ZP_COUNT,
      </if>
      <if test="fpCount != null">
        FP_COUNT,
      </if>
      <if test="xgCount != null">
        XG_COUNT,
      </if>
      <if test="ztbgCount != null">
        ZTBG_COUNT,
      </if>
      <if test="wtCount != null">
        WT_COUNT,
      </if>
      <if test="gjCount != null">
        GJ_COUNT,
      </if>
      <if test="fkCount != null">
        FK_COUNT,
      </if>
      <if test="ystjCount != null">
        YSTJ_COUNT,
      </if>
      <if test="yjCount != null">
        YJ_COUNT,
      </if>
      <if test="tpscCount != null">
        TPSC_COUNT,
      </if>
      <if test="spscCount != null">
        SPSC_COUNT,
      </if>
      <if test="ckdhCount != null">
        CKDH_COUNT,
      </if>
      <if test="ipcallCount != null">
        IPCALL_COUNT,
      </if>
      <if test="wlfbCount != null">
        WLFB_COUNT,
      </if>
      <if test="wlsxCount != null">
        WLSX_COUNT,
      </if>
      <if test="dkCount != null">
        DK_COUNT,
      </if>
      <if test="cjCount != null">
        CJ_COUNT,
      </if>
      <if test="sxCount != null">
        SX_COUNT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="djCount != null">
        #{djCount,jdbcType=INTEGER},
      </if>
      <if test="zyxCount != null">
        #{zyxCount,jdbcType=INTEGER},
      </if>
      <if test="sszrCount != null">
        #{sszrCount,jdbcType=INTEGER},
      </if>
      <if test="zpCount != null">
        #{zpCount,jdbcType=INTEGER},
      </if>
      <if test="fpCount != null">
        #{fpCount,jdbcType=INTEGER},
      </if>
      <if test="xgCount != null">
        #{xgCount,jdbcType=INTEGER},
      </if>
      <if test="ztbgCount != null">
        #{ztbgCount,jdbcType=INTEGER},
      </if>
      <if test="wtCount != null">
        #{wtCount,jdbcType=INTEGER},
      </if>
      <if test="gjCount != null">
        #{gjCount,jdbcType=INTEGER},
      </if>
      <if test="fkCount != null">
        #{fkCount,jdbcType=INTEGER},
      </if>
      <if test="ystjCount != null">
        #{ystjCount,jdbcType=INTEGER},
      </if>
      <if test="yjCount != null">
        #{yjCount,jdbcType=INTEGER},
      </if>
      <if test="tpscCount != null">
        #{tpscCount,jdbcType=INTEGER},
      </if>
      <if test="spscCount != null">
        #{spscCount,jdbcType=INTEGER},
      </if>
      <if test="ckdhCount != null">
        #{ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="ipcallCount != null">
        #{ipcallCount,jdbcType=INTEGER},
      </if>
      <if test="wlfbCount != null">
        #{wlfbCount,jdbcType=INTEGER},
      </if>
      <if test="wlsxCount != null">
        #{wlsxCount,jdbcType=INTEGER},
      </if>
      <if test="dkCount != null">
        #{dkCount,jdbcType=INTEGER},
      </if>
      <if test="cjCount != null">
        #{cjCount,jdbcType=INTEGER},
      </if>
      <if test="sxCount != null">
        #{sxCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
    <!--@mbggenerated-->
    update FUN_STATISTIC_TOTLE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="djCount != null">
        DJ_COUNT = #{djCount,jdbcType=INTEGER},
      </if>
      <if test="zyxCount != null">
        ZYX_COUNT = #{zyxCount,jdbcType=INTEGER},
      </if>
      <if test="sszrCount != null">
        SSZR_COUNT = #{sszrCount,jdbcType=INTEGER},
      </if>
      <if test="zpCount != null">
        ZP_COUNT = #{zpCount,jdbcType=INTEGER},
      </if>
      <if test="fpCount != null">
        FP_COUNT = #{fpCount,jdbcType=INTEGER},
      </if>
      <if test="xgCount != null">
        XG_COUNT = #{xgCount,jdbcType=INTEGER},
      </if>
      <if test="ztbgCount != null">
        ZTBG_COUNT = #{ztbgCount,jdbcType=INTEGER},
      </if>
      <if test="wtCount != null">
        WT_COUNT = #{wtCount,jdbcType=INTEGER},
      </if>
      <if test="gjCount != null">
        GJ_COUNT = #{gjCount,jdbcType=INTEGER},
      </if>
      <if test="fkCount != null">
        FK_COUNT = #{fkCount,jdbcType=INTEGER},
      </if>
      <if test="ystjCount != null">
        YSTJ_COUNT = #{ystjCount,jdbcType=INTEGER},
      </if>
      <if test="yjCount != null">
        YJ_COUNT = #{yjCount,jdbcType=INTEGER},
      </if>
      <if test="tpscCount != null">
        TPSC_COUNT = #{tpscCount,jdbcType=INTEGER},
      </if>
      <if test="spscCount != null">
        SPSC_COUNT = #{spscCount,jdbcType=INTEGER},
      </if>
      <if test="ckdhCount != null">
        CKDH_COUNT = #{ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="ipcallCount != null">
        IPCALL_COUNT = #{ipcallCount,jdbcType=INTEGER},
      </if>
      <if test="wlfbCount != null">
        WLFB_COUNT = #{wlfbCount,jdbcType=INTEGER},
      </if>
      <if test="wlsxCount != null">
        WLSX_COUNT = #{wlsxCount,jdbcType=INTEGER},
      </if>
      <if test="dkCount != null">
        DK_COUNT = #{dkCount,jdbcType=INTEGER},
      </if>
      <if test="cjCount != null">
        CJ_COUNT = #{cjCount,jdbcType=INTEGER},
      </if>
      <if test="sxCount != null">
        SX_COUNT = #{sxCount,jdbcType=INTEGER},
      </if>
    </set>
    where STATISTIC_TOTLE_ID = #{statisticTotleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
    <!--@mbggenerated-->
    update FUN_STATISTIC_TOTLE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      CASE_TYPE = #{caseType,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      DJ_COUNT = #{djCount,jdbcType=INTEGER},
      ZYX_COUNT = #{zyxCount,jdbcType=INTEGER},
      SSZR_COUNT = #{sszrCount,jdbcType=INTEGER},
      ZP_COUNT = #{zpCount,jdbcType=INTEGER},
      FP_COUNT = #{fpCount,jdbcType=INTEGER},
      XG_COUNT = #{xgCount,jdbcType=INTEGER},
      ZTBG_COUNT = #{ztbgCount,jdbcType=INTEGER},
      WT_COUNT = #{wtCount,jdbcType=INTEGER},
      GJ_COUNT = #{gjCount,jdbcType=INTEGER},
      FK_COUNT = #{fkCount,jdbcType=INTEGER},
      YSTJ_COUNT = #{ystjCount,jdbcType=INTEGER},
      YJ_COUNT = #{yjCount,jdbcType=INTEGER},
      TPSC_COUNT = #{tpscCount,jdbcType=INTEGER},
      SPSC_COUNT = #{spscCount,jdbcType=INTEGER},
      CKDH_COUNT = #{ckdhCount,jdbcType=INTEGER},
      IPCALL_COUNT = #{ipcallCount,jdbcType=INTEGER},
      WLFB_COUNT = #{wlfbCount,jdbcType=INTEGER},
      WLSX_COUNT = #{wlsxCount,jdbcType=INTEGER},
      DK_COUNT = #{dkCount,jdbcType=INTEGER},
      CJ_COUNT = #{cjCount,jdbcType=INTEGER},
      SX_COUNT = #{sxCount,jdbcType=INTEGER}
    where STATISTIC_TOTLE_ID = #{statisticTotleId,jdbcType=INTEGER}
  </update>
	<update id="addWorkCount" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticTotle">
		merge into FUN_STATISTIC_TOTLE aim using
		(select #{caseType} as CASE_TYPE,#{userId} as USER_ID,#{grId} as GR_ID,#{deptId} as DEPT_ID,
		#{regId} as REG_ID,#{areaId} as AREA_ID,#{compId} as COMP_ID,#{cityId} as CITY_ID,
		#{createTime} as CREATE_TIME, 1 as ${countFieldName}) src
		on aim.CITY_ID = src.CITY_ID and aim.CASE_TYPE = src.CASE_TYPE 
		and aim.CREATE_TIME = src.CREATE_TIME and aim.USER_ID = src.USER_ID
		when not matched then insert(CASE_TYPE, USER_ID, GR_ID, DEPT_ID, REG_ID, 
		AREA_ID, COMP_ID, CITY_ID, CREATE_TIME,${countFieldName}) 
		values(src.CASE_TYPE,SRC.USER_ID,src.GR_ID,src.DEPT_ID,src.REG_ID,src.AREA_ID,
		src.COMP_ID,src.CITY_ID,src.CREATE_TIME,src.${countFieldName})
		when matched then UPDATE set ${countFieldName} = aim.${countFieldName} + 1;
	</update>
  <select id="countTodayExplrthAndLook"  resultType="java.util.Map">
    SELECT
		SUM (iif(CASE_TYPE = '4' or CASE_TYPE = '3', DK_COUNT, 0)) AS LOOK_COUNT,
		SUM (iif(CASE_TYPE = '1'or CASE_TYPE = '2', FK_COUNT, 0)) AS EXPLRTH_COUNT
	FROM
	FUN_STATISTIC_TOTLE where COMP_ID = #{compId} and USER_ID = #{userId} and CREATE_TIME &gt;=#{startTime}
	and CREATE_TIME &lt;=#{endTime}
  </select>
  <select id="getBasicDetails" resultType="java.util.Map">
	SET DATEFIRST 1;
	SELECT
	sum(iif(CASE_TYPE in (1,2),DJ_COUNT,0)) AS houseDjCount, 
	sum(iif(CASE_TYPE in (3,4),DJ_COUNT,0)) AS custDjCount, 
	SUM (iif (CASE_TYPE IN (1, 2),FK_COUNT,0)) AS fkCount,
	SUM (iif (CASE_TYPE IN (3, 4),DK_COUNT,0)) AS dkCount,
	${param.admindbRptTrackqueryColumn} AS weekTime
	FROM FUN_STATISTIC_TOTLE 
	WHERE CREATE_TIME &gt;= #{param.startTime}
	AND CREATE_TIME &lt;=  #{param.endTime}
	AND COMP_ID = #{param.compId}
	<if test="param.serchRange == 'AREA'">
		AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'REG'">
		AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'DEPT'">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'GR'">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'USER'">
		AND USER_ID = #{param.serchRangeId}
	</if>
	GROUP BY
	${param.admindbRptTrackqueryColumn}
</select>
  <select id="getFlowAnalysisStockDataForSale"  resultType="java.util.Map">
	select sum(DJ_COUNT) incrementForSale,
	(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForSale ,CASE_TYPE caseType from FUN_STATISTIC_TOTLE
	where COMP_ID = #{param.compId} and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
	and CASE_TYPE = 1
	group by CASE_TYPE
  </select>
  <select id="getFlowAnalysisStockDataForBuy"  resultType="java.util.Map">
	select sum(DJ_COUNT) incrementForBuy,
	(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForBuy ,CASE_TYPE caseType from FUN_STATISTIC_TOTLE
	where COMP_ID = #{param.compId} and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
	and CASE_TYPE = 2
	group by CASE_TYPE
  </select>
  <select id="getFlowAnalysisStockDataForLease"  resultType="java.util.Map">
	select sum(DJ_COUNT) incrementForLease,
	(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForLease ,CASE_TYPE caseType from FUN_STATISTIC_TOTLE
	where COMP_ID = #{param.compId} and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
	and CASE_TYPE = 3
	group by CASE_TYPE
  </select>
  <select id="getFlowAnalysisStockDataForRent"  resultType="java.util.Map">
	select sum(DJ_COUNT) incrementForRent,
	(sum(CJ_COUNT)+sum(ZX_COUNT)) decrementForRent ,CASE_TYPE caseType from FUN_STATISTIC_TOTLE
	where COMP_ID = #{param.compId} and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
	and CASE_TYPE = 4
	group by CASE_TYPE
  </select>

<select id="getDaiKanRateCount" resultMap="BaseResultRateDto">
	SET DATEFIRST 1; 
	WITH T_ADD_CUST AS ( 
	SELECT CASE_ID, CASE_TYPE 
	FROM 
	FUN_STATISTIC_DETAIL 
	WHERE 
	COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
	</if>
	AND STATISTIC_TYPE = 1 
	<if test="param.caseType != null and 101 == param.caseType">
	AND CASE_TYPE = 3 
	</if>
	<if test="param.caseType != null and 102 == param.caseType">
	AND CASE_TYPE = 4 
	</if>
	<if test="param.caseType == null or '' == param.caseType">
	AND CASE_TYPE IN (3, 4) 
	</if>
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	), 
	T_DJ_COUNT AS ( SELECT 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	AS DATE_COUNT, 
	CASE_ID,CASE_TYPE, 
	COUNT(1) AS DJ_COUNT FROM FUN_STATISTIC_DETAIL 
	WHERE 
	COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
	</if>
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	AND STATISTIC_TYPE=1 
	<if test="param.caseType != null and param.caseType == 101">
	AND CASE_TYPE = 3 
	</if>
	<if test="param.caseType != null and param.caseType == 102">
	AND CASE_TYPE = 4 
	</if>
	<if test="param.caseType == null or '' == param.caseType">
	AND CASE_TYPE IN (3, 4) 
	</if>
	GROUP BY 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	,CASE_TYPE,CASE_ID
	 ), 
	T_DK_COUNT AS ( SELECT 
	<if test="param.dateColumnB != null and '' != param.dateColumnB">
	${param.dateColumnB}
	</if>
	AS DATE_COUNT, a.CASE_ID,b.CASE_TYPE, COUNT (1) AS DK_COUNT FROM T_ADD_CUST a JOIN FUN_STATISTIC_DETAIL b ON a.CASE_ID = b.CASE_ID 
	AND a.CASE_TYPE = b.CASE_TYPE 
	AND b.COMP_ID = #{param.compId} 
	WHERE b.COMP_ID = #{param.compId}  
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND b.${param.serchRange}_ID = #{param.serchRangeId}
	</if>
	AND b.STATISTIC_TYPE = 19 
	<if test="param.startTime != null and '' != param.startTime">
	AND b.CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND b.CREATE_TIME &lt;= #{param.endTime} 
	</if> 
	GROUP BY 
	<if test="param.dateColumnB != null and '' != param.dateColumnB">
	${param.dateColumnB}
	</if>
	,a.CASE_ID,b.CASE_TYPE
	 ) 
	SELECT a.DATE_COUNT, 
	( ISNULL( sum(iif (b.DK_COUNT >= 0, b.DK_COUNT, 0)), 0.0 ) + 0.0 ) / iif ( ISNULL( sum(iif (a.DJ_COUNT >= 0, a.DJ_COUNT, 0)), 0 ) = 0, 1.0, sum(iif (a.DJ_COUNT >= 0, a.DJ_COUNT, 0)) ) AS DK_RATE 
	FROM 
	T_DJ_COUNT a LEFT JOIN T_DK_COUNT b on a.CASE_ID = b.CASE_ID and a.CASE_TYPE=b.CASE_TYPE and a.DATE_COUNT = b.DATE_COUNT
	GROUP BY 
	a.DATE_COUNT
	ORDER BY a.DATE_COUNT DESC
</select>
<select id="getFunKanRateCount" resultMap="BaseResultRateDto">
	SET DATEFIRST 1; 
	WITH T_ADD_HOUSE AS ( SELECT CASE_ID, CASE_TYPE 
	FROM 
	FUN_STATISTIC_DETAIL 
	WHERE 
	COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
	</if>
	AND STATISTIC_TYPE = 1 
	<!-- AND CASE_TYPE IN (1, 2) --> 
	<if test="param.caseType != null and 101 == param.caseType">
	AND CASE_TYPE = 1 
	</if>
	<if test="param.caseType != null and 102 == param.caseType">
	AND CASE_TYPE = 2 
	</if>
	<if test="param.caseType == null or '' == param.caseType">
	AND CASE_TYPE IN (1, 2) 
	</if>
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	 ), 
	T_DJ_COUNT AS ( SELECT 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	AS DATE_COUNT, 
	CASE_ID,CASE_TYPE, count(1) AS DJ_COUNT 
	FROM 
	FUN_STATISTIC_DETAIL 
	WHERE 
	COMP_ID = #{param.compId}
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
	</if> 
	AND STATISTIC_TYPE=1 
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if> 
	<if test="param.caseType != null and 101 == param.caseType">
	AND CASE_TYPE = 3 
	</if>
	<if test="param.caseType != null and 102 == param.caseType">
	AND CASE_TYPE = 4 
	</if>
	<if test="param.caseType == null or '' == param.caseType">
	AND CASE_TYPE IN (3, 4) 
	</if>
	GROUP BY 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	,CASE_ID,CASE_TYPE ), 
	T_FK_HOUSE AS ( SELECT 
	<if test="param.dateColumnB != null and '' != param.dateColumnB">
	${param.dateColumnB}
	</if>
	AS DATE_COUNT, 
	b.CASE_ID,b.CASE_TYPE,count(1) as FK_COUNT 
	FROM T_ADD_HOUSE a JOIN FUN_STATISTIC_DETAIL b ON a.CASE_ID = b.CASE_ID AND a.CASE_TYPE = b.CASE_TYPE 
	AND b.COMP_ID = #{param.compId}
	WHERE 
	b.COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND b.${param.serchRange}_ID = #{param.serchRangeId}
	</if> 
	<if test="param.startTime != null and '' != param.startTime">
	AND b.CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND b.CREATE_TIME &lt;= #{param.endTime} 
	</if> 
	AND b.STATISTIC_TYPE = 10 
	GROUP BY 
	<if test="param.dateColumnB != null and '' != param.dateColumnB">
	${param.dateColumnB}
	</if>
	, b.CASE_ID, b.CASE_TYPE ) SELECT a.DATE_COUNT, 
	( ISNULL( sum(iif (b.FK_COUNT >= 0,b.FK_COUNT, 0)), 0.0 ) + 0.0 ) / iif ( ISNULL( sum(iif (a.DJ_COUNT &gt;= 0, a.DJ_COUNT, 0)), 0 ) = 0, 1.0, sum(iif (a.DJ_COUNT &gt;= 0, a.DJ_COUNT, 0)) ) AS FK_RATE 
	FROM T_DJ_COUNT a LEFT JOIN T_FK_HOUSE b on a.CASE_ID = b.CASE_ID and a.CASE_TYPE=b.CASE_TYPE and a.DATE_COUNT = b.DATE_COUNT 
	GROUP BY a.DATE_COUNT 
	ORDER BY a.DATE_COUNT DESC
</select>
<select id="getSignRateCountNoDeal" resultMap="BaseResultRateDto">
	SET DATEFIRST 1; 
	with T_DKAN_COUNT as( SELECT 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	AS DATE_COUNT,
	SUM(DK_COUNT) DK_COUNT from FUN_STATISTIC_TOTLE 
	where 
	COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
	</if> 
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if> 
	group by 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	),
	T_SIGN_COUNT as( SELECT 
	<if test="param.signDateColumnNoDeal != null and '' != param.signDateColumnNoDeal">
	${param.signDateColumnNoDeal}
	</if>
	AS DATE_COUNT, 
	COUNT (1) AS SIGN_COUNT 
	FROM
    HOUSE_INNERDEAL_ANALYSIS A
  	WHERE 
	A.COMP_ID = #{param.compId} 
	AND A.DEAL_ID IS NULL
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND A.${param.serchRange}_ID = #{param.serchRangeId}
	</if>  
	AND A.CREATE_TIME &gt;= #{param.startTime} AND A.CREATE_TIME &lt;= #{param.endTime}
	GROUP BY 
	<if test="param.signDateColumnNoDeal != null and '' != param.signDateColumnNoDeal">
	${param.signDateColumnNoDeal}
	</if>
	)select a.SIGN_COUNT,b.DK_COUNT,
	(iif (ISNULL(a.SIGN_COUNT,0.0) > 0, a.SIGN_COUNT, 0)+0.0)/iif(ISNULL(b.DK_COUNT,0) > 0, b.DK_COUNT, 1.0) as SIGN_RATE,
	a.DATE_COUNT from T_SIGN_COUNT a left join T_DKAN_COUNT b on 
	a.DATE_COUNT=b.DATE_COUNT
</select>

<select id="getSignRateCountHasDeal" resultMap="BaseResultRateDto">
	SET DATEFIRST 1; 
	with T_DKAN_COUNT as( SELECT 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn} AS DATE_COUNT,
	</if>
	SUM(DK_COUNT) DK_COUNT from FUN_STATISTIC_TOTLE 
	where 
	COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
	</if> 
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if> 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	group by ${param.dateColumn}
	</if>
	),
	T_SIGN_COUNT as( SELECT 
	<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">
	${param.signDateColumnHasDeal}
	</if>
	AS DATE_COUNT, 
	sum(iif(B.SIGN_USER_ID>0,1,0)) AS SIGN_COUNT 
	FROM
    FUN_DEAL　B 
	LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3 
	WHERE 
	B.COMP_ID = #{param.compId} 
    AND B.SIGN_DATE &gt;= #{param.startTime}
    AND B.SIGN_DATE &lt;= #{param.endTime}
	AND B.DEAL_ID>0
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND C.${param.serchRange}_ID = #{param.serchRangeId}
	</if>  
	GROUP BY 
	<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">
	${param.signDateColumnHasDeal}
	</if>
	)select a.SIGN_COUNT,b.DK_COUNT,
	(iif (ISNULL(a.SIGN_COUNT,0.0) > 0, a.SIGN_COUNT, 0)+0.0)/iif(ISNULL(b.DK_COUNT,0) > 0, b.DK_COUNT, 1.0) as SIGN_RATE,
	a.DATE_COUNT from T_SIGN_COUNT a left join T_DKAN_COUNT b on 
	a.DATE_COUNT=b.DATE_COUNT
</select>

	<select id="getDaiKanRateCountReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		WITH T_ADD_CUST AS (
			SELECT
			CASE_ID, CASE_TYPE
			FROM FUN_STATISTIC_DETAIL
			WHERE COMP_ID = #{param.compId}
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			AND STATISTIC_TYPE = 1
			<if test="param.caseType != null and 101 == param.caseType">
				AND CASE_TYPE = 3
			</if>
			<if test="param.caseType != null and 102 == param.caseType">
				AND CASE_TYPE = 4
			</if>
			<if test="param.caseType == null or '' == param.caseType">
				AND CASE_TYPE IN (3, 4)
			</if>
			AND CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;= #{param.endTime}
		), T_DJ_COUNT AS (
			SELECT
			CASE_ID,CASE_TYPE, COUNT(1) AS DJ_COUNT,
			<if test="param.dateColumn != null and '' != param.dateColumn">
				${param.dateColumn} AS DATE_COUNT,
			</if>
    		<choose>
    			<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
    			</when>
    			<otherwise>
					<if test='param.dimension == "AREA"'>AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
    			</otherwise>
    		</choose>
			as RANGE
			FROM FUN_STATISTIC_DETAIL
			WHERE COMP_ID = #{param.compId}
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			AND CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;= #{param.endTime}
			AND STATISTIC_TYPE=1
			<if test="param.caseType != null and 101 == param.caseType">
				AND CASE_TYPE = 3
			</if>
			<if test="param.caseType != null and 102 == param.caseType">
				AND CASE_TYPE = 4
			</if>
			<if test="param.caseType == null or '' == param.caseType">
				AND CASE_TYPE IN (3, 4)
			</if>
			GROUP BY
			<if test="param.dateColumn != null and '' != param.dateColumn">
				${param.dateColumn}
			</if>
			,CASE_TYPE,CASE_ID,
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>REG_ID</if>
					<if test='param.dimension == "DEPT"'>REG_ID,DEPT_ID</if>
					<if test='param.dimension == "GR"'>REG_ID,DEPT_ID,GR_ID</if>
					<if test='param.dimension == "USER"'>REG_ID,DEPT_ID,GR_ID,USER_ID</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>AREA_ID</if>
					<if test='param.dimension == "REG"'>AREA_ID,REG_ID</if>
					<if test='param.dimension == "DEPT"'>AREA_ID,REG_ID,DEPT_ID</if>
					<if test='param.dimension == "GR"'>AREA_ID,REG_ID,DEPT_ID,GR_ID</if>
					<if test='param.dimension == "USER"'>AREA_ID,REG_ID,DEPT_ID,GR_ID,USER_ID</if>
				</otherwise>
			</choose>
		), T_DK_COUNT AS (
			SELECT
			<if test="param.dateColumnB != null and '' != param.dateColumnB">
				${param.dateColumnB}
			</if>
			AS DATE_COUNT, a.CASE_ID,a.CASE_TYPE,
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(b.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(b.REG_ID,'_',b.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID,'_',b.USER_ID)</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>b.AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(b.AREA_ID,'_',b.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(b.AREA_ID,'_',b.REG_ID,'_',b.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(b.AREA_ID,'_',b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(b.AREA_ID,'_',b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID,'_',b.USER_ID)</if>
				</otherwise>
			</choose>
			as RANGE,
			COUNT (1) AS DK_COUNT FROM T_ADD_CUST a JOIN FUN_STATISTIC_DETAIL b ON
			a.CASE_ID = b.CASE_ID
			AND a.CASE_TYPE = b.CASE_TYPE
			AND b.COMP_ID = #{param.compId}
			WHERE b.COMP_ID = #{param.compId}
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND b.${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			AND b.STATISTIC_TYPE = 19
			<if test="param.caseType != null and 101 == param.caseType">
				AND b.CASE_TYPE = 3
			</if>
			<if test="param.caseType != null and 102 == param.caseType">
				AND b.CASE_TYPE = 4
			</if>
			<if test="param.caseType == null or '' == param.caseType">
				AND b.CASE_TYPE IN (3, 4)
			</if>
			AND b.CREATE_TIME &gt;= #{param.startTime}
			AND b.CREATE_TIME &lt;= #{param.endTime}
			GROUP BY
			<if test="param.dateColumnB != null and '' != param.dateColumnB">
				${param.dateColumnB}
			</if>
			,a.CASE_ID,a.CASE_TYPE,
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>b.REG_ID</if>
					<if test='param.dimension == "DEPT"'>b.REG_ID,b.DEPT_ID</if>
					<if test='param.dimension == "GR"'>b.REG_ID,b.DEPT_ID,b.GR_ID</if>
					<if test='param.dimension == "USER"'>b.REG_ID,b.DEPT_ID,b.GR_ID,b.USER_ID</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>b.AREA_ID</if>
					<if test='param.dimension == "REG"'>b.AREA_ID,b.REG_ID</if>
					<if test='param.dimension == "DEPT"'>b.AREA_ID,b.REG_ID,b.DEPT_ID</if>
					<if test='param.dimension == "GR"'>b.AREA_ID,b.REG_ID,b.DEPT_ID,b.GR_ID</if>
					<if test='param.dimension == "USER"'>b.AREA_ID,b.REG_ID,b.DEPT_ID,b.GR_ID,b.USER_ID</if>
				</otherwise>
			</choose>
		)
		SELECT a.DATE_COUNT as dateCount, a.RANGE as range,
		sum(b.DK_COUNT) as djdkCount,
		sum(a.DJ_COUNT) AS custdjCount
		FROM T_DJ_COUNT a LEFT JOIN T_DK_COUNT b on a.CASE_ID = b.CASE_ID
		and a.CASE_TYPE=b.CASE_TYPE and a.DATE_COUNT = b.DATE_COUNT and
		a.RANGE=b.RANGE
		GROUP BY a.DATE_COUNT,a.RANGE ORDER BY a.DATE_COUNT DESC
	</select>
	
	<select id="getFunKanRateCountReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		WITH T_ADD_HOUSE AS (
		SELECT
		CASE_ID,
		CASE_TYPE
		FROM
		FUN_STATISTIC_DETAIL
		WHERE
		COMP_ID = #{param.compId}
		<if
			test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND ${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND STATISTIC_TYPE = 1
		<if test="param.caseType != null and 101 == param.caseType">
			AND CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and 102 == param.caseType">
			AND CASE_TYPE = 2
		</if>
		<if test="param.caseType == null or '' == param.caseType">
			AND CASE_TYPE IN (1, 2)
		</if>
		AND CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;= #{param.endTime}
		),
		T_DJ_COUNT AS (
		SELECT
		<if test="param.dateColumn != null and '' != param.dateColumn">
			${param.dateColumn}
		</if>
		AS DATE_COUNT,
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test='param.dimension == "REG"'>CONCAT(REG_ID)</if>
				<if test='param.dimension == "DEPT"'>CONCAT(REG_ID,'_',DEPT_ID)</if>
				<if test='param.dimension == "GR"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
				<if test='param.dimension == "USER"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
			</when>
			<otherwise>
				<if test='param.dimension == "AREA"'>AREA_ID</if>
				<if test='param.dimension == "REG"'>CONCAT(AREA_ID,'_',REG_ID)</if>
				<if test='param.dimension == "DEPT"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
				<if test='param.dimension == "GR"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
				<if test='param.dimension == "USER"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
			</otherwise>
		</choose>
		AS RANGE,
		CASE_ID,
		CASE_TYPE,
		COUNT (1) AS DJ_COUNT
		FROM
		FUN_STATISTIC_DETAIL
		WHERE
		COMP_ID = #{param.compId}
		<if
			test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND ${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND STATISTIC_TYPE = 1
		AND CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;= #{param.endTime}
		<if test="param.caseType != null and 101 == param.caseType">
			AND CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and 102 == param.caseType">
			AND CASE_TYPE = 2
		</if>
		<if test="param.caseType == null or '' == param.caseType">
			AND CASE_TYPE IN (1, 2)
		</if>
		GROUP BY
		<if test="param.dateColumn != null and '' != param.dateColumn">
			${param.dateColumn}
		</if>
		,
		CASE_ID,
		CASE_TYPE,
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test='param.dimension == "REG"'>REG_ID</if>
				<if test='param.dimension == "DEPT"'>REG_ID,DEPT_ID</if>
				<if test='param.dimension == "GR"'>REG_ID,DEPT_ID,GR_ID</if>
				<if test='param.dimension == "USER"'>REG_ID,DEPT_ID,GR_ID,USER_ID</if>
			</when>
			<otherwise>
				<if test='param.dimension == "AREA"'>AREA_ID</if>
				<if test='param.dimension == "REG"'>AREA_ID,REG_ID</if>
				<if test='param.dimension == "DEPT"'>AREA_ID,REG_ID,DEPT_ID</if>
				<if test='param.dimension == "GR"'>AREA_ID,REG_ID,DEPT_ID,GR_ID</if>
				<if test='param.dimension == "USER"'>AREA_ID,REG_ID,DEPT_ID,GR_ID,USER_ID</if>
			</otherwise>
		</choose>
		),T_FANKAN as(
		SELECT
		<if test="param.dateColumnB != null and '' != param.dateColumnB">
			${param.dateColumnB}
		</if>
		AS DATE_COUNT,
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test='param.dimension == "REG"'>CONCAT(b.REG_ID)</if>
				<if test='param.dimension == "DEPT"'>CONCAT(b.REG_ID,'_',b.DEPT_ID)</if>
				<if test='param.dimension == "GR"'>CONCAT(b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID)</if>
				<if test='param.dimension == "USER"'>CONCAT(b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID,'_',b.USER_ID)</if>
			</when>
			<otherwise>
				<if test='param.dimension == "AREA"'>b.AREA_ID</if>
				<if test='param.dimension == "REG"'>CONCAT(b.AREA_ID,'_',b.REG_ID)</if>
				<if test='param.dimension == "DEPT"'>CONCAT(b.AREA_ID,'_',b.REG_ID,'_',b.DEPT_ID)</if>
				<if test='param.dimension == "GR"'>CONCAT(b.AREA_ID,'_',b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID)</if>
				<if test='param.dimension == "USER"'>CONCAT(b.AREA_ID,'_',b.REG_ID,'_',b.DEPT_ID,'_',b.GR_ID,'_',b.USER_ID)</if>
			</otherwise>
		</choose>
		AS RANGE,
		COUNT (1) AS FK_COUNT
		FROM
		T_ADD_HOUSE a
		JOIN FUN_STATISTIC_DETAIL b ON a.CASE_ID = b.CASE_ID
		AND a.CASE_TYPE = b.CASE_TYPE
		AND b.COMP_ID = #{param.compId}
		WHERE
		b.COMP_ID = #{param.compId}
		<if
			test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND b.${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		<if test="param.caseType != null and 101 == param.caseType">
			AND b.CASE_TYPE = 1
		</if>
		<if test="param.caseType != null and 102 == param.caseType">
			AND b.CASE_TYPE = 2
		</if>
		<if test="param.caseType == null or '' == param.caseType">
			AND b.CASE_TYPE IN (1, 2)
		</if>
		AND b.CREATE_TIME &gt;= #{param.startTime}
		AND b.CREATE_TIME &lt;= #{param.endTime}
		AND b.STATISTIC_TYPE = 10
		GROUP BY
		<if test="param.dateColumnB != null and '' != param.dateColumnB">
			${param.dateColumnB},
		</if>
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test='param.dimension == "REG"'>b.REG_ID</if>
				<if test='param.dimension == "DEPT"'>b.REG_ID,b.DEPT_ID</if>
				<if test='param.dimension == "GR"'>b.REG_ID,b.DEPT_ID,b.GR_ID</if>
				<if test='param.dimension == "USER"'>b.REG_ID,b.DEPT_ID,b.GR_ID,b.USER_ID</if>
			</when>
			<otherwise>
				<if test='param.dimension == "AREA"'>b.AREA_ID</if>
				<if test='param.dimension == "REG"'>b.AREA_ID,b.REG_ID</if>
				<if test='param.dimension == "DEPT"'>b.AREA_ID,b.REG_ID,b.DEPT_ID</if>
				<if test='param.dimension == "GR"'>b.AREA_ID,b.REG_ID,b.DEPT_ID,b.GR_ID</if>
				<if test='param.dimension == "USER"'>b.AREA_ID,b.REG_ID,b.DEPT_ID,b.GR_ID,b.USER_ID</if>
			</otherwise>
		</choose>
		)SELECT a.DATE_COUNT as dateCount, a.RANGE as range,
		sum(b.FK_COUNT) as djfkCount,
		sum(a.DJ_COUNT) AS housedjCount
		FROM T_DJ_COUNT a LEFT JOIN T_FANKAN b on a.DATE_COUNT = b.DATE_COUNT and
		a.RANGE=b.RANGE
		GROUP BY a.DATE_COUNT,a.RANGE ORDER BY a.DATE_COUNT DESC
	</select>
<select id="getSignRateCountReportNoDeal" resultMap="BaseResultRateDto">
	SET DATEFIRST 1; 
	SELECT 
	<if test="param.signDateColumnNoDeal != null and '' != param.signDateColumnNoDeal">
	${param.signDateColumnNoDeal}
	</if>
	AS dateCount, 
	<if test="param.dimension != null and '' != param.dimension">
	A.${param.dimension}_ID as range,
	</if>
	<choose>
		<when test="param.caseType != null and 101 == param.caseType">
			sum(iif(A.CASE_TYPE in(1,3)),1,0)))
		</when>
		<when test="param.caseType != null and 102 == param.caseType">
			sum(iif(A.CASE_TYPE in(2,4)),1,0)))
		</when>
		<otherwise>
			count(1)
		</otherwise>
	</choose>
	AS signCount
	FROM 
	HOUSE_INNERDEAL_ANALYSIS A 	WHERE 
    A.CREATE_TIME &gt;= #{param.startTime} AND A.CREATE_TIME &lt;= #{param.endTime}
	AND A.COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND A.${param.serchRange}_ID = #{param.serchRangeId} 
	</if>
	AND A.DEAL_ID IS NULL
	GROUP BY 
	<if test="param.signDateColumnNoDeal!= null and '' != param.signDateColumnNoDeal">
	${param.signDateColumnNoDeal}
	</if>
	<if test="param.dimension != null and '' != param.dimension">
	,A.${param.dimension}_ID
	</if>
	</select>
<select id="getSignRateCountReportHasDeal" resultMap="BaseResultRateDto">
	SET DATEFIRST 1; 
	with T_DKAN_COUNT as( SELECT 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	AS DATE_COUNT,
	<if test="param.dimension != null and '' != param.dimension">
	${param.dimension}_ID as RANGE,
	</if>
	SUM(DK_COUNT) DK_COUNT 
	from 
	FUN_STATISTIC_TOTLE 
	where 
	COMP_ID = #{param.compId}
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
	AND ${param.serchRange}_ID = #{param.serchRangeId}
    </if>
	AND CREATE_TIME &gt;= #{param.startTime}
	AND CREATE_TIME &lt;= #{param.endTime}
	group by 
	<if test="param.dateColumn != null and '' != param.dateColumn">
	${param.dateColumn}
	</if>
	<if test="param.dimension != null and '' != param.dimension">
	,${param.dimension}_ID
	</if>
	),T_SIGN_COUNT as( SELECT 
	<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">
	${param.signDateColumnHasDeal}
	</if>
	AS DATE_COUNT, 
	<if test="param.dimension != null and '' != param.dimension">
	A.${param.dimension}_ID as RANGE,
	</if>
	COUNT(distinct B.DEAL_ID) as SIGN_COUNT
	FROM 
	FUN_DEAL　B 
	LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3  
	WHERE 
    B.SIGN_DATE &gt;= #{param.startTime} AND B.SIGN_DATE &lt;= #{param.endTime}
	AND B.COMP_ID = #{param.compId} 
	<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
		AND C.${param.serchRange}_ID = #{param.serchRangeId}
	</if>
	<if test="param.caseType!= null and 101 == param.caseType">
		AND B.DEAL_TYPE = 101
	</if>
	<if test="param.caseType!= null and 102 == param.caseType">
		AND B.DEAL_TYPE = 102
	</if>p
	AND B.DEAL_ID>0
	GROUP BY 
	<if test="param.signDateColumnHasDeal != null and '' != param.signDateColumnHasDeal">
	${param.signDateColumnHasDeal}
	</if>
	<if test="param.dimension != null and '' != param.dimension">
	,A.${param.dimension}_ID
	</if>
	)select a.SIGN_COUNT as signCount,b.DK_COUNT as dkCount,a.RANGE as range,
	(iif(ISNULL(a.SIGN_COUNT,0)>0,a.SIGN_COUNT,0)+0.0)/iif(ISNULL(b.DK_COUNT,0)=0,1.0,b.DK_COUNT) as signRate,
	a.DATE_COUNT as dateCount from T_SIGN_COUNT a left join T_DKAN_COUNT b on a.RANGE = b.RANGE and a.DATE_COUNT=b.DATE_COUNT
</select>

	<select id="getConversionRatioAnalysisOffDkan" resultType="java.util.Map">
		SELECT
		TOP 15 SUM(${param.countType}) as counts,CASE_TYPE caseType,
		<choose>
			<when test='param.dimension == "DEPT"'>DEPT_ID deptId</when>
			<otherwise>DEPT_ID deptId,USER_ID userId</otherwise>
		</choose>
		FROM FUN_STATISTIC_TOTLE
		WHERE COMP_ID = #{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.startTime != null and '' != param.startTime">AND CREATE_TIME &gt;= #{param.startTime}</if>
		<if test="param.endTime != null and '' != param.endTime">AND CREATE_TIME &lt;= #{param.endTime}</if>
		AND CASE_TYPE IN
		<foreach close=")" collection="param.caseTypeArr" item="val" open="(" separator=",">#{val}</foreach>
		GROUP BY CASE_TYPE,
		<choose>
			<when test='param.dimension == "DEPT"'>DEPT_ID</when>
			<otherwise>DEPT_ID,USER_ID</otherwise>
		</choose>
		having SUM (${param.countType}) > 0
		order by counts desc
	</select>

<select id="getDkContrastOffRatioAnalysis" resultType="java.util.Map">
	SELECT TOP 4 SUM (DK_COUNT) as dkCount,
 	DEPT_ID as deptId
	FROM
		FUN_STATISTIC_TOTLE
	WHERE
		COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND USER_ID = #{param.serchRangeId}
	</if>
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	<if test="param.caseType != null and 101==param.caseType">
		AND CASE_TYPE = 3
	</if>
	<if test="param.caseType != null and 102==param.caseType">
		AND CASE_TYPE = 4
	</if>
	<if test="param.caseType == null">
		AND CASE_TYPE IN (3, 4)
	</if>
	GROUP BY
		DEPT_ID
	HAVING SUM (FK_COUNT)>0	
	ORDER BY dkCount desc
</select>
<select id="getTrueHouseCountOffMarketing" resultType="java.util.Map">
	SELECT SUM (iif(CASE_TYPE=1,ZFY_COUNT,0)) as saleTrueHouseCount,
	SUM (iif(CASE_TYPE=2,ZFY_COUNT,0)) as leaseTrueHouseCount
	FROM
		FUN_STATISTIC_TOTLE
	WHERE
		COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND USER_ID = #{param.serchRangeId}
	</if>
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	AND CASE_TYPE IN (1, 2)
	
</select>
<select id="getTotalDkContrastOffRatioAnalysis" resultType="java.util.Map">
	SELECT  SUM (DK_COUNT) as totalCount
	FROM
		FUN_STATISTIC_TOTLE
	WHERE
		COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND USER_ID = #{param.serchRangeId}
	</if>
	<if test="param.startTime != null and '' != param.startTime">
	AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
	AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	<if test="param.caseType != null and 101==param.caseType">
		AND CASE_TYPE = 3
	</if>
	<if test="param.caseType != null and 102==param.caseType">
		AND CASE_TYPE = 4
	</if>
	<if test="param.caseType == null">
		AND CASE_TYPE IN (3, 4)
	</if>
</select>

<select id="getFkContrastOffRatioAnalysis" resultType="java.util.Map">
	SELECT TOP 4 SUM(FK_COUNT) as fkCount,
 	DEPT_ID as deptId
	FROM
		FUN_STATISTIC_TOTLE
	WHERE
		COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND USER_ID = #{param.serchRangeId}
	</if>
	<if test="param.startTime != null and '' != param.startTime">
		AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
		AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	<if test="param.caseType != null and param.caseType == 101">
		AND CASE_TYPE = 1
	</if>
	<if test="param.caseType != null and param.caseType == 102">
		AND CASE_TYPE = 2
	</if>
	<if test="param.caseType == null">
		AND CASE_TYPE IN (1, 2)
	</if>
	GROUP BY
		DEPT_ID
	having SUM(FK_COUNT)>0
	ORDER BY fkCount desc
</select>
<select id="getTotalFkContrastOffRatioAnalysis" resultType="java.util.Map">
	SELECT  SUM (FK_COUNT) as totalCount
	FROM
		FUN_STATISTIC_TOTLE
	WHERE
		COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND USER_ID = #{param.serchRangeId}
	</if>
	<if test="param.startTime != null and '' != param.startTime">
		AND CREATE_TIME &gt;= #{param.startTime} 
	</if>
	<if test="param.endTime != null and '' != param.endTime">
		AND CREATE_TIME &lt;= #{param.endTime} 
	</if>
	<if test="param.caseType != null and 101 == param.caseType">
		AND CASE_TYPE = 1
	</if>
	<if test="param.caseType != null and 102 == param.caseType">
		AND CASE_TYPE = 2
	</if>
	<if test="param.caseType == null">
		AND CASE_TYPE IN (1, 2)
	</if>
</select>

<select id="getCjContrastOffRatioAnalysis" resultType="java.util.Map">
	<if test="param.deptType != null and 1==param.deptType ">
	select B.SIGN_USER_DEPT_ID as deptId,COUNT(distinct B.DEAL_ID) AS cjCount
	FROM
		  FUN_DEAL　B LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3
	WHERE
			B.COMP_ID = #{param.compId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND C.AREA_ID = #{param.serchRangeId} 
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND C.REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND C.DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND C.DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND C.GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND C.ARCHIVE_ID = #{param.archiveId}
		</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND B.DEAL_TYPE = 101
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND B.DEAL_TYPE = 102
		</if>
		AND B.SIGN_DATE &gt;= #{param.startTime}
		AND B.SIGN_DATE &lt;= #{param.endTime}
	group by B.SIGN_USER_DEPT_ID order by cjCount desc
	</if>
	<if test="param.deptType == null">
	select A.DEPT_ID deptId,count(1) as cjCount from HOUSE_INNERDEAL_ANALYSIS A
		where A.COMP_ID = #{param.compId}
		AND A.DEAL_ID IS NULL
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND A.AREA_ID = #{param.serchRangeId} 
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND A.REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND A.DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND A.DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND A.GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND A.ARCHIVE_ID = #{param.archiveId}
		</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND A.CASE_TYPE IN(1,3)
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND A.CASE_TYPE IN(2,4)
		</if>
		AND A.CREATE_TIME &gt;= #{param.startTime}
		AND A.CREATE_TIME &lt;= #{param.endTime}
	group by A.DEPT_ID order by cjCount desc
	</if>
</select>
<select id="getTotalCjContrastOffRatioAnalysis" resultType="java.util.Map">
	<if test="param.deptType != null and 1==param.deptType ">
		select COUNT(distinct B.DEAL_ID) AS cjCount
		FROM
			HOUSE_INNERDEAL_ANALYSIS A LEFT JOIN FUN_DEAL　B ON A.DEAL_ID = B.DEAL_ID LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID AND B.SIGN_USER_ID = C.USER_ID  AND B.DEAL_AUDIT_STATUS != 3 AND C.RELATE_TYPE =3
		WHERE
			A.COMP_ID = #{param.compId}
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND C.AREA_ID = #{param.serchRangeId} 
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND C.REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND C.DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND C.DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND C.GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND C.ARCHIVE_ID = #{param.archiveId}
		</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND B.DEAL_TYPE = 101
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND B.DEAL_TYPE = 102
		</if>
		AND B.SIGN_DATE &gt;= #{param.startTime}
		AND B.SIGN_DATE &lt;= #{param.endTime}
	</if>
	<if test="param.deptType == null">
	select count(1) as cjCount from HOUSE_INNERDEAL_ANALYSIS A
		where A.COMP_ID = #{param.compId}
		AND A.DEAL_ID IS NULL
		<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND A.AREA_ID = #{param.serchRangeId} 
		</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND A.REG_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange">
			AND A.DEPT_ID = #{param.serchRangeId}
		</if>
		<if test="param.deptId != null">
			AND A.DEPT_ID = #{param.deptId}
		</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">
			AND A.GR_ID = #{param.serchRangeId}
		</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange">
			AND A.ARCHIVE_ID = #{param.archiveId}
		</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND A.CASE_TYPE IN(1,3)
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND A.CASE_TYPE IN(2,4)
		</if>
		AND A.CREATE_TIME &gt;= #{param.startTime}
		AND A.CREATE_TIME &lt;= #{param.endTime}
	</if>

</select>

	<select id="getSignRateCountHasDealReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
			<if test="param.signDateColumnB != null and '' != param.signDateColumnB">
				(${param.signDateColumnB}) AS dateCount,
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(C.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(C.REG_ID,'_',C.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>C.AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(C.AREA_ID,'_',C.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</otherwise>
			</choose>
			as range,
			SUM (iif(B.SIGN_USER_ID > 0,1,0)) AS signCount
			FROM  FUN_DEAL B 
			LEFT JOIN DEAL_USER_RELATIVE C ON B.DEAL_ID = C.DEAL_ID
			AND B.SIGN_USER_ID = C.USER_ID
			AND B.DEAL_AUDIT_STATUS != 3
			AND C.RELATE_TYPE = 3
			WHERE
			B.COMP_ID = #{param.compId}
			AND B.SIGN_DATE &gt;= #{param.startTime}
			AND B.SIGN_DATE &lt;= #{param.endTime}
			AND B.DEAL_ID > 0
			<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND C.${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			GROUP BY
			<if test="param.signDateColumnB != null and '' != param.signDateColumnB">
				(${param.signDateColumnB}),
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(C.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(C.REG_ID,'_',C.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>C.AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(C.AREA_ID,'_',C.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(C.AREA_ID,'_',C.REG_ID,'_',C.DEPT_ID,'_',C.GR_ID,'_',C.USER_ID)</if>
				</otherwise>
			</choose>
	</select>
	
	<select id="getSignDaiKanCountReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
			<if test="param.dateColumn != null and '' != param.dateColumn">
				(${param.dateColumn}) AS dateCount,
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',SER_ID)</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose> as range,
			SUM (DK_COUNT) signDkCount
			FROM
			FUN_STATISTIC_TOTLE
			WHERE
			COMP_ID = #{param.compId}
			<if
				test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
				AND ${param.serchRange}_ID = #{param.serchRangeId}
			</if>
			AND CREATE_TIME &gt;= #{param.startTime}
			AND CREATE_TIME &lt;= #{param.endTime}
			<if test="param.caseType != null and 101==param.caseType">
				AND CASE_TYPE=3
			</if>
			<if test="param.caseType != null and 102==param.caseType">
				AND CASE_TYPE=4
			</if>
			<if test="param.caseType == null">
				AND CASE_TYPE IN (3,4)
			</if>
			GROUP BY
			<if test="param.dateColumn != null and '' != param.dateColumn">
				(${param.dateColumn}),
			</if>
			<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(REG_ID,'_',DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(AREA_ID,'_',REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID)</if>
				</otherwise>
			</choose>
			
	</select>
	
	<select id="getSignRateCountNoDealReport" resultType="java.util.Map">
		SET DATEFIRST 1;
		SELECT
		<if test="param.dateColumnA != null and '' != param.dateColumnA">
			(${param.dateColumnA}) AS dateCount,
		</if>
		<choose>
			<when test="param.areaFlag == null or 1 != param.areaFlag">
				<if test='param.dimension == "REG"'>CONCAT(A.REG_ID)</if>
				<if test='param.dimension == "DEPT"'>CONCAT(A.REG_ID,'_',A.DEPT_ID)</if>
				<if test='param.dimension == "GR"'>CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
				<if test='param.dimension == "USER"'>CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
			</when>
			<otherwise>
				<if test='param.dimension == "AREA"'>A.AREA_ID</if>
				<if test='param.dimension == "REG"'>CONCAT(A.AREA_ID,'_',A.REG_ID)</if>
				<if test='param.dimension == "DEPT"'>CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID)</if>
				<if test='param.dimension == "GR"'>CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
				<if test='param.dimension == "USER"'>CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
			</otherwise>
		</choose>
		as range,
		COUNT (1) AS signCount
		FROM HOUSE_INNERDEAL_ANALYSIS A
		WHERE
		A.COMP_ID = #{param.compId}
		AND A.DEAL_ID IS NULL
		<if test="param.serchRange != null and '' != param.serchRange and '' != param.serchRangeId and param.serchRangeId != null">
			AND A.${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND A.CREATE_TIME &gt;= #{param.startTime}
		AND A.CREATE_TIME &lt;= #{param.endTime}
		GROUP BY
		<if test="param.dateColumnA != null and '' != param.dateColumnA">
			(${param.dateColumnA}),
		</if>
		<choose>
				<when test="param.areaFlag == null or 1 != param.areaFlag">
					<if test='param.dimension == "REG"'>CONCAT(A.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(A.REG_ID,'_',A.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
				</when>
				<otherwise>
					<if test='param.dimension == "AREA"'>A.AREA_ID</if>
					<if test='param.dimension == "REG"'>CONCAT(A.AREA_ID,'_',A.REG_ID)</if>
					<if test='param.dimension == "DEPT"'>CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID)</if>
					<if test='param.dimension == "GR"'>CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID)</if>
					<if test='param.dimension == "USER"'>CONCAT(A.AREA_ID,'_',A.REG_ID,'_',A.DEPT_ID,'_',A.GR_ID,'_',A.USER_ID)</if>
				</otherwise>
		</choose>
	</select>
<select id="getTrueHouseDkCount" resultType="java.util.Map">
	SET DATEFIRST 1;
	select
		${param.erpFunStatisticTotlProfitequeryColumn} as dateCount,
		sum(ZFY_COUNT) as trueHouseCount,
		sum(DK_COUNT) as dkCount
	from FUN_STATISTIC_TOTLE
	where COMP_ID = #{param.compId} 
		<if test="param.serchRange != null and 'AREA'== param.serchRange"> AND AREA_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'REG'== param.serchRange"> AND REG_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'DEPT'== param.serchRange"> AND DEPT_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'GROUP'== param.serchRange">AND GR_ID = #{param.serchRangeId}</if>
		<if test="param.serchRange != null and 'USER'== param.serchRange"> AND USER_ID = #{param.archiveId}</if>
		<if test="param.caseType != null and 101==param.caseType">
			AND CASE_TYPE IN(1,3)
		</if>
		<if test="param.caseType != null and 102==param.caseType">
			AND CASE_TYPE IN(2,4)
		</if>
		and CREATE_TIME &gt;= #{param.startTime} and CREATE_TIME &lt;= #{param.endTime}
	group by
	${param.erpFunStatisticTotlProfitequeryColumn}
</select>
	
	<sql id="getWorkCountRankingCoulmnSql">
		<if test='param.dimension == "AREA"'>AREA_ID areaId</if>
		<if test='param.dimension == "REG"'>AREA_ID areaId,REG_ID regId</if>
		<if test='param.dimension == "DEPT"'>AREA_ID areaId,REG_ID regId,DEPT_ID deptId</if>
		<if test='param.dimension == "GROUP"'>AREA_ID areaId,REG_ID regId,DEPT_ID deptId,GR_ID grId</if>
		<if test='param.dimension == "USER"'>AREA_ID areaId,REG_ID regId,DEPT_ID deptId,GR_ID grId,USER_ID userId</if>
	</sql>
	
	<sql id="getWorkCountRankingGroupSql">
		<if test='param.dimension == "AREA"'>AREA_ID</if>
		<if test='param.dimension == "REG"'>AREA_ID,REG_ID</if>
		<if test='param.dimension == "DEPT"'>AREA_ID,REG_ID,DEPT_ID</if>
		<if test='param.dimension == "GROUP"'>AREA_ID,REG_ID,DEPT_ID,GR_ID</if>
		<if test='param.dimension == "USER"'>AREA_ID,REG_ID,DEPT_ID,GR_ID,USER_ID</if>
	</sql>
	
	<select id="getWorkCountRanking" resultType="java.util.Map">
		select top ${param.topCount}
		sum(iif(case_type=${param.houseType},DJ_COUNT,0)) houseDjCount,sum(iif(case_type=${param.custType},DJ_COUNT,0)) custDjCount,
		sum(iif(case_type=${param.houseType},GJ_COUNT,0)) houseGjCount,sum(iif(case_type=${param.custType},GJ_COUNT,0)) custGjCount,
		sum(iif(case_type=${param.houseType},FK_COUNT,0)) fkCount,sum(iif(case_type=${param.custType},DK_COUNT,0)) dkCount,
		sum(YSTJ_COUNT) ystjCount,
		<include refid="getWorkCountRankingCoulmnSql"/>
		from FUN_STATISTIC_TOTLE where comp_id= #{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		AND CASE_TYPE in(${param.houseType},${param.custType})
		group by
		<include refid="getWorkCountRankingGroupSql"/>
		order by sum(DJ_COUNT)+sum(GJ_COUNT)+sum(YSTJ_COUNT)+sum(DK_COUNT)+sum(FK_COUNT)
		<choose>
			<when test="param.orderBy == 'DESC'">DESC</when>
			<otherwise>ASC</otherwise>
		</choose>
	</select>
	
	<select id="getTotalWorkCount" resultType="java.lang.Integer">
		select
		sum(DJ_COUNT)+sum(ZYX_COUNT)+sum(SSZR_COUNT)+sum(ZP_COUNT)+sum(FP_COUNT)+sum(XG_COUNT)
		+sum(ZTBG_COUNT)+sum(WT_COUNT)+sum(GJ_COUNT)+sum(FK_COUNT)+sum(YSTJ_COUNT)+sum(YJ_COUNT)
		+sum(TPSC_COUNT)+sum(SPSC_COUNT)+sum(CKDH_COUNT)+sum(IPCALL_COUNT)+sum(WLFB_COUNT)
		+sum(WLSX_COUNT)+sum(DK_COUNT)+sum(CJ_COUNT)+sum(SX_COUNT)+sum(SPDK_COUNT)+sum(KFDP_COUNT)
		+sum(PYQ_COUNT)+sum(VR_COUNT)+sum(ZFY_COUNT)+sum(ZX_COUNT)+sum(QFTG_COUNT)
		as counts
		from FUN_STATISTIC_TOTLE where comp_id= #{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		and CREATE_TIME BETWEEN #{param.startTime} and #{param.endTime}
		AND CASE_TYPE in(${param.houseType},${param.custType})
	</select>

</mapper>


