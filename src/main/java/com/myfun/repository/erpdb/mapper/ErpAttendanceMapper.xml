<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpAttendanceMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpAttendance">
    <!--@mbggenerated-->
    <id column="ATT_ID" jdbcType="INTEGER" property="attId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="ATT_USER" jdbcType="INTEGER" property="attUser" />
    <result column="ATT_DATE" jdbcType="VARCHAR" property="attDate" />
    <result column="WORK_ON_TYPE" jdbcType="TINYINT" property="workOnType" />
    <result column="ATT_ON_STATUS" jdbcType="TINYINT" property="attOnStatus" />
    <result column="ATT_ON_TIME" jdbcType="VARCHAR" property="attOnTime" />
    <result column="ATT_LATE_TIME" jdbcType="INTEGER" property="attLateTime" />
    <result column="ATT_LATE_REASON" jdbcType="VARCHAR" property="attLateReason" />
    <result column="WORK_OFF_TYPE" jdbcType="TINYINT" property="workOffType" />
    <result column="ATT_OFF_STATUS" jdbcType="TINYINT" property="attOffStatus" />
    <result column="ATT_OFF_TIME" jdbcType="VARCHAR" property="attOffTime" />
    <result column="ATT_EARLY_TIME" jdbcType="INTEGER" property="attEarlyTime" />
    <result column="ATT_EARLY_REASON" jdbcType="VARCHAR" property="attEarlyReason" />
    <result column="UPDATE_USER" jdbcType="INTEGER" property="updateUser" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="CREATE_WORKON_USER" jdbcType="INTEGER" property="createWorkonUser" />
    <result column="CREATE_WORKOFF_USER" jdbcType="INTEGER" property="createWorkoffUser" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ATT_ID, COMP_ID, DEPT_ID, ATT_USER, ATT_DATE, WORK_ON_TYPE, ATT_ON_STATUS, ATT_ON_TIME, 
    ATT_LATE_TIME, ATT_LATE_REASON, WORK_OFF_TYPE, ATT_OFF_STATUS, ATT_OFF_TIME, ATT_EARLY_TIME, 
    ATT_EARLY_REASON, UPDATE_USER, UPDATE_TIME, CREATE_WORKON_USER, CREATE_WORKOFF_USER
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpAttendanceExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ATTENDANCE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from ATTENDANCE
    where ATT_ID = #{attId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from ATTENDANCE
    where ATT_ID = #{attId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpAttendanceExample">
    <!--@mbggenerated-->
    delete from ATTENDANCE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpAttendance">
    <!--@mbggenerated-->
    <selectKey keyProperty="attId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_ATTENDANCE_ATT_ID
    </selectKey>
    insert into ATTENDANCE (ATT_ID, COMP_ID, DEPT_ID, 
      ATT_USER, ATT_DATE, WORK_ON_TYPE, 
      ATT_ON_STATUS, ATT_ON_TIME, ATT_LATE_TIME, 
      ATT_LATE_REASON, WORK_OFF_TYPE, ATT_OFF_STATUS, 
      ATT_OFF_TIME, ATT_EARLY_TIME, ATT_EARLY_REASON, 
      UPDATE_USER, UPDATE_TIME, CREATE_WORKON_USER, 
      CREATE_WORKOFF_USER)
    values (#{attId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{attUser,jdbcType=INTEGER}, #{attDate,jdbcType=VARCHAR}, #{workOnType,jdbcType=TINYINT}, 
      #{attOnStatus,jdbcType=TINYINT}, #{attOnTime,jdbcType=VARCHAR}, #{attLateTime,jdbcType=INTEGER}, 
      #{attLateReason,jdbcType=VARCHAR}, #{workOffType,jdbcType=TINYINT}, #{attOffStatus,jdbcType=TINYINT}, 
      #{attOffTime,jdbcType=VARCHAR}, #{attEarlyTime,jdbcType=INTEGER}, #{attEarlyReason,jdbcType=VARCHAR}, 
      #{updateUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, #{createWorkonUser,jdbcType=INTEGER}, 
      #{createWorkoffUser,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpAttendance">
    <!--@mbggenerated-->
    <selectKey keyProperty="attId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_ATTENDANCE_ATT_ID
    </selectKey>
    insert into ATTENDANCE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      ATT_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="attUser != null">
        ATT_USER,
      </if>
      <if test="attDate != null">
        ATT_DATE,
      </if>
      <if test="workOnType != null">
        WORK_ON_TYPE,
      </if>
      <if test="attOnStatus != null">
        ATT_ON_STATUS,
      </if>
      <if test="attOnTime != null">
        ATT_ON_TIME,
      </if>
      <if test="attLateTime != null">
        ATT_LATE_TIME,
      </if>
      <if test="attLateReason != null">
        ATT_LATE_REASON,
      </if>
      <if test="workOffType != null">
        WORK_OFF_TYPE,
      </if>
      <if test="attOffStatus != null">
        ATT_OFF_STATUS,
      </if>
      <if test="attOffTime != null">
        ATT_OFF_TIME,
      </if>
      <if test="attEarlyTime != null">
        ATT_EARLY_TIME,
      </if>
      <if test="attEarlyReason != null">
        ATT_EARLY_REASON,
      </if>
      <if test="updateUser != null">
        UPDATE_USER,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="createWorkonUser != null">
        CREATE_WORKON_USER,
      </if>
      <if test="createWorkoffUser != null">
        CREATE_WORKOFF_USER,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{attId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="attUser != null">
        #{attUser,jdbcType=INTEGER},
      </if>
      <if test="attDate != null">
        #{attDate,jdbcType=VARCHAR},
      </if>
      <if test="workOnType != null">
        #{workOnType,jdbcType=TINYINT},
      </if>
      <if test="attOnStatus != null">
        #{attOnStatus,jdbcType=TINYINT},
      </if>
      <if test="attOnTime != null">
        #{attOnTime,jdbcType=VARCHAR},
      </if>
      <if test="attLateTime != null">
        #{attLateTime,jdbcType=INTEGER},
      </if>
      <if test="attLateReason != null">
        #{attLateReason,jdbcType=VARCHAR},
      </if>
      <if test="workOffType != null">
        #{workOffType,jdbcType=TINYINT},
      </if>
      <if test="attOffStatus != null">
        #{attOffStatus,jdbcType=TINYINT},
      </if>
      <if test="attOffTime != null">
        #{attOffTime,jdbcType=VARCHAR},
      </if>
      <if test="attEarlyTime != null">
        #{attEarlyTime,jdbcType=INTEGER},
      </if>
      <if test="attEarlyReason != null">
        #{attEarlyReason,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createWorkonUser != null">
        #{createWorkonUser,jdbcType=INTEGER},
      </if>
      <if test="createWorkoffUser != null">
        #{createWorkoffUser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpAttendanceExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from ATTENDANCE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update ATTENDANCE
    <set>
      <if test="record.attId != null">
        ATT_ID = #{record.attId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.attUser != null">
        ATT_USER = #{record.attUser,jdbcType=INTEGER},
      </if>
      <if test="record.attDate != null">
        ATT_DATE = #{record.attDate,jdbcType=VARCHAR},
      </if>
      <if test="record.workOnType != null">
        WORK_ON_TYPE = #{record.workOnType,jdbcType=TINYINT},
      </if>
      <if test="record.attOnStatus != null">
        ATT_ON_STATUS = #{record.attOnStatus,jdbcType=TINYINT},
      </if>
      <if test="record.attOnTime != null">
        ATT_ON_TIME = #{record.attOnTime,jdbcType=VARCHAR},
      </if>
      <if test="record.attLateTime != null">
        ATT_LATE_TIME = #{record.attLateTime,jdbcType=INTEGER},
      </if>
      <if test="record.attLateReason != null">
        ATT_LATE_REASON = #{record.attLateReason,jdbcType=VARCHAR},
      </if>
      <if test="record.workOffType != null">
        WORK_OFF_TYPE = #{record.workOffType,jdbcType=TINYINT},
      </if>
      <if test="record.attOffStatus != null">
        ATT_OFF_STATUS = #{record.attOffStatus,jdbcType=TINYINT},
      </if>
      <if test="record.attOffTime != null">
        ATT_OFF_TIME = #{record.attOffTime,jdbcType=VARCHAR},
      </if>
      <if test="record.attEarlyTime != null">
        ATT_EARLY_TIME = #{record.attEarlyTime,jdbcType=INTEGER},
      </if>
      <if test="record.attEarlyReason != null">
        ATT_EARLY_REASON = #{record.attEarlyReason,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUser != null">
        UPDATE_USER = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createWorkonUser != null">
        CREATE_WORKON_USER = #{record.createWorkonUser,jdbcType=INTEGER},
      </if>
      <if test="record.createWorkoffUser != null">
        CREATE_WORKOFF_USER = #{record.createWorkoffUser,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update ATTENDANCE
    set ATT_ID = #{record.attId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      ATT_USER = #{record.attUser,jdbcType=INTEGER},
      ATT_DATE = #{record.attDate,jdbcType=VARCHAR},
      WORK_ON_TYPE = #{record.workOnType,jdbcType=TINYINT},
      ATT_ON_STATUS = #{record.attOnStatus,jdbcType=TINYINT},
      ATT_ON_TIME = #{record.attOnTime,jdbcType=VARCHAR},
      ATT_LATE_TIME = #{record.attLateTime,jdbcType=INTEGER},
      ATT_LATE_REASON = #{record.attLateReason,jdbcType=VARCHAR},
      WORK_OFF_TYPE = #{record.workOffType,jdbcType=TINYINT},
      ATT_OFF_STATUS = #{record.attOffStatus,jdbcType=TINYINT},
      ATT_OFF_TIME = #{record.attOffTime,jdbcType=VARCHAR},
      ATT_EARLY_TIME = #{record.attEarlyTime,jdbcType=INTEGER},
      ATT_EARLY_REASON = #{record.attEarlyReason,jdbcType=VARCHAR},
      UPDATE_USER = #{record.updateUser,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      CREATE_WORKON_USER = #{record.createWorkonUser,jdbcType=INTEGER},
      CREATE_WORKOFF_USER = #{record.createWorkoffUser,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpAttendance">
    <!--@mbggenerated-->
    update ATTENDANCE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="attUser != null">
        ATT_USER = #{attUser,jdbcType=INTEGER},
      </if>
      <if test="attDate != null">
        ATT_DATE = #{attDate,jdbcType=VARCHAR},
      </if>
      <if test="workOnType != null">
        WORK_ON_TYPE = #{workOnType,jdbcType=TINYINT},
      </if>
      <if test="attOnStatus != null">
        ATT_ON_STATUS = #{attOnStatus,jdbcType=TINYINT},
      </if>
      <if test="attOnTime != null">
        ATT_ON_TIME = #{attOnTime,jdbcType=VARCHAR},
      </if>
      <if test="attLateTime != null">
        ATT_LATE_TIME = #{attLateTime,jdbcType=INTEGER},
      </if>
      <if test="attLateReason != null">
        ATT_LATE_REASON = #{attLateReason,jdbcType=VARCHAR},
      </if>
      <if test="workOffType != null">
        WORK_OFF_TYPE = #{workOffType,jdbcType=TINYINT},
      </if>
      <if test="attOffStatus != null">
        ATT_OFF_STATUS = #{attOffStatus,jdbcType=TINYINT},
      </if>
      <if test="attOffTime != null">
        ATT_OFF_TIME = #{attOffTime,jdbcType=VARCHAR},
      </if>
      <if test="attEarlyTime != null">
        ATT_EARLY_TIME = #{attEarlyTime,jdbcType=INTEGER},
      </if>
      <if test="attEarlyReason != null">
        ATT_EARLY_REASON = #{attEarlyReason,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        UPDATE_USER = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createWorkonUser != null">
        CREATE_WORKON_USER = #{createWorkonUser,jdbcType=INTEGER},
      </if>
      <if test="createWorkoffUser != null">
        CREATE_WORKOFF_USER = #{createWorkoffUser,jdbcType=INTEGER},
      </if>
    </set>
    where ATT_ID = #{attId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpAttendance">
    <!--@mbggenerated-->
    update ATTENDANCE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      ATT_USER = #{attUser,jdbcType=INTEGER},
      ATT_DATE = #{attDate,jdbcType=VARCHAR},
      WORK_ON_TYPE = #{workOnType,jdbcType=TINYINT},
      ATT_ON_STATUS = #{attOnStatus,jdbcType=TINYINT},
      ATT_ON_TIME = #{attOnTime,jdbcType=VARCHAR},
      ATT_LATE_TIME = #{attLateTime,jdbcType=INTEGER},
      ATT_LATE_REASON = #{attLateReason,jdbcType=VARCHAR},
      WORK_OFF_TYPE = #{workOffType,jdbcType=TINYINT},
      ATT_OFF_STATUS = #{attOffStatus,jdbcType=TINYINT},
      ATT_OFF_TIME = #{attOffTime,jdbcType=VARCHAR},
      ATT_EARLY_TIME = #{attEarlyTime,jdbcType=INTEGER},
      ATT_EARLY_REASON = #{attEarlyReason,jdbcType=VARCHAR},
      UPDATE_USER = #{updateUser,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      CREATE_WORKON_USER = #{createWorkonUser,jdbcType=INTEGER},
      CREATE_WORKOFF_USER = #{createWorkoffUser,jdbcType=INTEGER}
    where ATT_ID = #{attId,jdbcType=INTEGER}
  </update>
	<resultMap extends="BaseResultMap" id="ErpAttendanceDtoMap" type="com.myfun.repository.erpdb.dto.ErpAttendanceDto" />
  <resultMap id="DtoBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpAttendanceDto">
    <id column="ATT_ID" jdbcType="INTEGER" property="attId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="ATT_USER" jdbcType="INTEGER" property="attUser" />
    <result column="ATT_DATE" jdbcType="VARCHAR" property="attDate" />
    <result column="WORK_ON_TYPE" jdbcType="TINYINT" property="workOnType" />
    <result column="ATT_ON_STATUS" jdbcType="TINYINT" property="attOnStatus" />
    <result column="ATT_ON_TIME" jdbcType="VARCHAR" property="attOnTime" />
    <result column="ATT_LATE_TIME" jdbcType="INTEGER" property="attLateTime" />
    <result column="ATT_LATE_REASON" jdbcType="VARCHAR" property="attLateReason" />
    <result column="WORK_OFF_TYPE" jdbcType="TINYINT" property="workOffType" />
    <result column="ATT_OFF_STATUS" jdbcType="TINYINT" property="attOffStatus" />
    <result column="ATT_OFF_TIME" jdbcType="VARCHAR" property="attOffTime" />
    <result column="ATT_EARLY_TIME" jdbcType="INTEGER" property="attEarlyTime" />
    <result column="ATT_EARLY_REASON" jdbcType="VARCHAR" property="attEarlyReason" />
    <result column="UPDATE_USER" jdbcType="INTEGER" property="updateUser" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="CREATE_WORKON_USER" jdbcType="INTEGER" property="createWorkonUser" />
    <result column="CREATE_WORKOFF_USER" jdbcType="INTEGER" property="createWorkoffUser" />
  </resultMap>
  <sql id="Stat_Column_List">
    ATT_ID,ATT_USER, ATT_DATE, WORK_ON_TYPE, ATT_ON_STATUS,WORK_OFF_TYPE, ATT_OFF_STATUS
  </sql>
  <select id="selectByDateAndUserId" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ATTENDANCE
    where ATT_DATE = #{nowDate,jdbcType=VARCHAR}
    and ATT_USER = #{userId,jdbcType=INTEGER}
    <if test="workOnType != null">
     and  WORK_ON_TYPE=#{workOnType}
    </if>
    <if test="workOffType != null">
     and  WORK_OFF_TYPE=#{workOffType}
    </if>
  </select>
  <select id="selectStatList" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  
    select 
    <include refid="Stat_Column_List" />
    from ATTENDANCE
    where COMP_ID = #{param.compId,jdbcType=INTEGER}
    <if test="param.deptId != null">
     and DEPT_ID = #{param.deptId,jdbcType=INTEGER}
    </if>
    <if test="param.statEnd != null">
     and ATT_DATE &lt;= #{param.statEnd,jdbcType=VARCHAR}
    </if>
    <if test="param.statStart != null">
     and ATT_DATE &gt;= #{param.statStart,jdbcType=VARCHAR}
    </if>
    <if test="param.attendanceModel != null and '1'=param.attendanceModel">
     and (WORK_ON_TYPE=#{param.workType} OR WORK_OFF_TYPE=#{param.workOffType})
    </if>
    order by ATT_USER desc,ATT_DATE
  </select>
	<select id="getAttendanceList" resultMap="ErpAttendanceDtoMap">
		select
		A.*
		from ATTENDANCE A JOIN FUN_USERS B ON A.ATT_USER=B.USER_ID
		<where>
			AND A.COMP_ID = #{param.compId}
			<if test="null != param.deptId">
				AND A.DEPT_ID = #{param.deptId}
			</if>
			<if test="null != param.grId">
				AND B.GR_ID = #{param.grId}
			</if>
			<if test="null != param.userId">
				AND A.ATT_USER = #{param.userId}
			</if>
			<if test="null != param.workStatus">
				AND (A.ATT_ON_STATUS = #{param.workStatus}
				OR A.ATT_OFF_STATUS = #{param.workStatus})
			</if>
			<if test="null != param.workOnType and null != param.workOffType">
				AND (A.WORK_ON_TYPE = #{param.workOnType}
				OR A.WORK_OFF_TYPE = #{param.workOffType})
			</if>
			<if test="null != param.attDate1">
				AND A.ATT_DATE &gt;= #{param.attDate1}
			</if>
			<if test="null != param.attDate2">
				AND A.ATT_DATE &lt;= #{param.attDate2}
			</if>
		</where>
	</select>

  <select id="getAttendanceByUserId" resultMap="BaseResultMap">
    select
    sum(iif(ATT_ON_STATUS is not null, 1, 0)) ON_SIGN_COUNT,
    sum(iif(ATT_OFF_STATUS is not null, 1, 0)) OFF_SIGN_COUNT
    from ATTENDANCE
    where COMP_ID = #{compId} AND DEPT_ID = #{deptId} AND ATT_USER = #{userId} AND ATT_DATE &gt;= #{date}
  </select>

</mapper>