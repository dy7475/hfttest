<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpSalaryTypeRelativeMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpSalaryTypeRelative">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="SALARY_TYPE_ID" jdbcType="INTEGER" property="salaryTypeId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ROLE_ID" jdbcType="VARCHAR" property="roleId" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="DEL_FLAG" jdbcType="INTEGER" property="delFlag" />
    <result column="DEL_TIME" jdbcType="TIMESTAMP" property="delTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, SALARY_TYPE_ID, USER_ID, ROLE_ID, CREATION_TIME, 
    DEL_FLAG, DEL_TIME
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelativeExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from SALARY_TYPE_RELATIVE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from SALARY_TYPE_RELATIVE
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from SALARY_TYPE_RELATIVE
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelativeExample">
    <!--@mbggenerated-->
    delete from SALARY_TYPE_RELATIVE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelative" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into SALARY_TYPE_RELATIVE (COMP_ID, AREA_ID, REG_ID, 
      DEPT_ID, GR_ID, SALARY_TYPE_ID, 
      USER_ID, ROLE_ID, CREATION_TIME, 
      DEL_FLAG, DEL_TIME)
    values (#{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, 
      #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, #{salaryTypeId,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=VARCHAR}, #{creationTime,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=INTEGER}, #{delTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelative" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into SALARY_TYPE_RELATIVE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="salaryTypeId != null">
        SALARY_TYPE_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="roleId != null">
        ROLE_ID,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="delFlag != null">
        DEL_FLAG,
      </if>
      <if test="delTime != null">
        DEL_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="salaryTypeId != null">
        #{salaryTypeId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=INTEGER},
      </if>
      <if test="delTime != null">
        #{delTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelativeExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from SALARY_TYPE_RELATIVE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update SALARY_TYPE_RELATIVE
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.salaryTypeId != null">
        SALARY_TYPE_ID = #{record.salaryTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null">
        ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delFlag != null">
        DEL_FLAG = #{record.delFlag,jdbcType=INTEGER},
      </if>
      <if test="record.delTime != null">
        DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update SALARY_TYPE_RELATIVE
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      SALARY_TYPE_ID = #{record.salaryTypeId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      DEL_FLAG = #{record.delFlag,jdbcType=INTEGER},
      DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelative">
    <!--@mbggenerated-->
    update SALARY_TYPE_RELATIVE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="salaryTypeId != null">
        SALARY_TYPE_ID = #{salaryTypeId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        ROLE_ID = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        DEL_FLAG = #{delFlag,jdbcType=INTEGER},
      </if>
      <if test="delTime != null">
        DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpSalaryTypeRelative">
    <!--@mbggenerated-->
    update SALARY_TYPE_RELATIVE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      SALARY_TYPE_ID = #{salaryTypeId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ROLE_ID = #{roleId,jdbcType=VARCHAR},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      DEL_FLAG = #{delFlag,jdbcType=INTEGER},
      DEL_TIME = #{delTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="BaseResultMapDto" type="com.myfun.repository.erpdb.dto.ErpSalaryTypeRelativeDto">
    <result column="SALARY_TYPE_NAME" jdbcType="VARCHAR" property="salaryTypeName" />
  </resultMap>
	
	<select id="getSalaryTypeByUserIds" resultMap="BaseResultMap">
		SELECT USER_ID, MAX(SALARY_TYPE_ID) SALARY_TYPE_ID
		FROM SALARY_TYPE_RELATIVE
		WHERE USER_ID IN 
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
		and DEL_FLAG = 0
		group by USER_ID
	</select>
	
	<select id="getSalaryTypeAndNameByUserId" resultType="java.util.Map">
		SELECT TOP 1 B.ID salaryTypeId, B.SALARY_TYPE_NAME salaryTypeName
		FROM SALARY_TYPE_RELATIVE A
		JOIN FUN_SALARY_TYPE B ON B.ID=A.SALARY_TYPE_ID
		WHERE A.USER_ID = #{userId} and A.DEL_FLAG = 0
		ORDER BY A.CREATION_TIME DESC
	</select>
	
	<select id="getBySalaryTypeId" resultMap="BaseResultMap">
		select top 1
		<include refid="Base_Column_List" />
		from SALARY_TYPE_RELATIVE
		where USER_ID = #{userId}
		order by CREATION_TIME desc
	</select>
	
	<select id="getUserProfitMoney" resultType="java.util.Map">
		WITH T_USER AS (
			SELECT
				b.COMP_ID AS compId,
				b.USER_ID AS userId,
				b.ARCHIVE_ID AS archiveId
			FROM
			 FUN_USERS b 
			
			WHERE
				b.COMP_ID = #{param.compId}
				AND b.USER_ID IN 
				<foreach close=")" collection="userIdList" item="userId" open="(" separator=",">
					#{userId}
				</foreach>
			),T_PROFIT as(
				select e.ARCHIVE_ID as archiveId,e.COMP_ID as compId,sum(e.PROFIT_MONEY) as profitMoney from FUN_PROFIT e join T_USER f on e.ARCHIVE_ID = f.archiveId and e.COMP_ID = f.compId
				LEFT JOIN FUN_DEAL C ON e.DEAL_ID = C.DEAL_ID
			WHERE
				e.COMP_ID = #{param.compId}
				and C.SIGN_DATE &lt;= #{param.endTime} and C.SIGN_DATE &gt;= #{param.startTime} 
				AND e.USER_ID&gt;0
			group by e.ARCHIVE_ID,e.COMP_ID
			) select a.userId,b.profitMoney from T_USER A left JOIN T_PROFIT B ON a.archiveId = b.archiveId
			 
		
			</select>
	
	<select id="getUserSalaryTypeList" resultType="map">
	with T_SALARY_TYPE as(
		select b.USER_ID,MAX(b.ID) as ID from FUN_SALARY_TYPE a left join SALARY_TYPE_RELATIVE b ON a.ID = b.SALARY_TYPE_ID 
		where b.COMP_ID = #{param.compId}
		<if test="param.salaryTypeId != null and '' != param.salaryTypeId">
			AND b.SALARY_TYPE_ID = #{param.salaryTypeId}
		</if>
		<if test="param.areaId != null and '' != param.areaId">
			and b.AREA_ID = #{param.areaId}
		</if>
		<if test="param.regId != null and '' != param.regId">
			and b.REG_ID = #{param.regId}
		</if>
		<if test="param.deptId != null and '' != param.deptId">
			and b.DEPT_ID = #{param.deptId}
		</if>
		<if test="param.grId!= null and '' != param.grId">
			and b.GR_ID = #{param.grId}
		</if>
		<if test="param.userId != null and '' != param.userId">
			and b.USER_ID = #{param.userId}
		</if>
		<if test="param.roleId != null and '' != param.roleId">
			and a.ROLE_ID = #{param.roleId}
		</if>
		AND (b.CREATION_TIME &lt;= #{param.endTime} and a.UPDATE_TIME &lt;= #{param.endTime}  and (b.DEL_FLAG=0 or (b.DEL_FLAG !=0 and b.DEL_TIME &gt; #{param.startTime})))
		group by b.USER_ID
	)select b.COMP_ID AS compId,
			b.USER_ID AS userId,
			a.ROLE_ID AS roleId,
			b.DEPT_ID AS deptId,
			a.TRAGET_PROFIT AS tragetProfit,
			a.SALARY_MONEY AS salaryMoney,
			a.TASK_PERCENT AS taskPercent,
			a.TASK_MONEY AS taskMoney,
			a.HOUSE_ADD_COUNT AS houseAssessmentCount,
			a.PER_HOUSE_MONEY AS perHouseMoney,
			a.CUST_ADD_COUNT AS custAssessmentCount,
			a.PER_CUST_MONEY AS perCustMoney,
			a.FANKAN_COUNT AS fankanAssessmentCount,
			a.PER_FANKAN_MONEY AS perFankanMoney,
			a.DAIKAN_COUNT AS daikanAssessmentCount,
			a.PER_DAIKAN_MONEY AS perDaikanMoney,
			a.PROFIT_COUNT_TYPE as profitCountType,
			a.COUNT_TYPE as countType,
			a.MANAGE_LEVEL as manageLevel
			from
			FUN_SALARY_TYPE a
			LEFT JOIN SALARY_TYPE_RELATIVE b ON a.ID = b.SALARY_TYPE_ID
			JOIN T_SALARY_TYPE c ON b.ID = c.Id
			where b.COMP_ID = #{param.compId}
			<if test="param.salaryTypeId != null and '' != param.salaryTypeId">
				AND b.SALARY_TYPE_ID = #{param.salaryTypeId}
			</if>
			<if test="param.areaId != null and '' != param.areaId">
				and b.AREA_ID = #{param.areaId}
			</if>
			<if test="param.regId != null and '' != param.regId">
				and b.REG_ID = #{param.regId}
			</if>
			<if test="param.deptId != null and '' != param.deptId">
				and b.DEPT_ID = #{param.deptId}
			</if>
			<if test="param.grId!= null and '' != param.grId">
				and b.GR_ID = #{param.grId}
			</if>
			<if test="param.userId != null and '' != param.userId">
				and b.USER_ID = #{param.userId}
			</if>
			<if test="param.roleId != null and '' != param.roleId">
				and a.ROLE_ID = #{param.roleId}
			</if>
			AND (b.CREATION_TIME &lt;= #{param.endTime} and a.UPDATE_TIME &lt;= #{param.endTime}  and (b.DEL_FLAG=0 or (b.DEL_FLAG !=0 and b.DEL_TIME &gt; #{param.startTime})))
			
	</select>
	
  <select id="getUserSalaryTypeRoleList" resultType="java.lang.String">
    select a.ROLE_ID from FUN_SALARY_TYPE a left join SALARY_TYPE_RELATIVE b ON a.ID = b.SALARY_TYPE_ID 
		where b.COMP_ID = #{param.compId}
		<if test="param.salaryTypeId != null and '' != param.salaryTypeId">
			AND b.SALARY_TYPE_ID = #{param.salaryTypeId}
		</if>
		<if test="param.areaId != null and '' != param.areaId">
			and b.AREA_ID = #{param.areaId}
		</if>
		<if test="param.regId != null and '' != param.regId">
			and b.REG_ID = #{param.regId}
		</if>
		<if test="param.deptId != null and '' != param.deptId">
			and b.DEPT_ID = #{param.deptId}
		</if>
		<if test="param.grId!= null and '' != param.grId">
			and b.GR_ID = #{param.grId}
		</if>
		<if test="param.userId != null and '' != param.userId">
			and b.USER_ID = #{param.userId}
		</if>
		<if test="param.roleId != null and '' != param.roleId">
			and a.ROLE_ID = #{param.roleId}
		</if>
		AND (b.CREATION_TIME &lt;= #{param.endTime} and a.UPDATE_TIME &lt;= #{param.endTime}  and (b.DEL_FLAG=0 or (b.DEL_FLAG !=0 and b.DEL_TIME &gt; #{param.startTime})))
 		AND a.MANAGE_LEVEL&gt;0
    group by a.ROLE_ID
    
  </select>
  <update id="delSalaryTypeRelativeById">
    update SALARY_TYPE_RELATIVE
    set 
      DEL_FLAG = #{delFlag},DEL_TIME = #{delTime}
    where COMP_ID = #{compId} and SALARY_TYPE_ID = #{salaryTypeId}
  </update>

    <select id="getFunSalaryTypeRelativeByUserId" resultType="java.lang.Integer">
        select COUNT(*)
        from SALARY_TYPE_RELATIVE
        where USER_ID = #{userId} AND DEL_FLAG = 0
    </select>

	<select id="getSalaryRelativeData" resultMap="BaseResultMap">
		SELECT TOP 1 B.ID, B.COMP_ID, B.AREA_ID, B.REG_ID, B.DEPT_ID, B.GR_ID,
                   B.SALARY_TYPE_ID, B.USER_ID, B.ROLE_ID, B.CREATION_TIME, B.DEL_FLAG, B.DEL_TIME
		FROM FUN_SALARY_TYPE A
		LEFT JOIN SALARY_TYPE_RELATIVE B ON A.ID = B.SALARY_TYPE_ID
		WHERE B.COMP_ID = #{compId} AND B.USER_ID=#{userId}
		AND ( B.CREATION_TIME &lt;= #{endTime} AND A.UPDATE_TIME &lt; = #{endTime}
		AND (B.DEL_FLAG = 0 OR ( B.DEL_FLAG != 0 AND B.DEL_TIME &gt; #{startTime})))
		ORDER BY B.ID DESC
	</select>
	
	<select id="getLastMonthSalaryRelativeData" resultMap="BaseResultMap">
        SELECT TOP 1 B.ID, B.COMP_ID, B.AREA_ID, B.REG_ID, B.DEPT_ID, B.GR_ID,
                   B.SALARY_TYPE_ID, B.USER_ID, B.ROLE_ID, B.CREATION_TIME, B.DEL_FLAG, B.DEL_TIME
		FROM FUN_SALARY_TYPE A
		LEFT JOIN SALARY_TYPE_RELATIVE B ON A.ID = B.SALARY_TYPE_ID
		WHERE B.COMP_ID = #{compId} AND B.USER_ID=#{userId}
		AND (B.DEL_FLAG != 0 AND B.DEL_TIME &gt;= #{startTime} AND B.DEL_TIME &lt; #{endTime})
		ORDER BY B.ID DESC
	</select>
	
	<select id="getLatestConfigureTime" resultMap="BaseResultMap">
		select top 1 A.CREATION_TIME
		from SALARY_TYPE_RELATIVE A join FUN_SALARY_TYPE B ON A.SALARY_TYPE_ID=B.ID
		where B.DEL_FLAG = 0 and A.COMP_ID = #{compId} and A.CREATION_TIME = #{creationTime}
		and A.USER_ID in
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
	</select>
	
	<select id="getSalaryTypeRelativeInfoOffUserId" resultMap="BaseResultMap">
		select B.ROLE_ID,B.MANAGE_LEVEL,B.COUNT_TYPE,B.PROFIT_COUNT_TYPE,A.USER_ID,B.HOUSE_ADD_COUNT,B.PER_HOUSE_MONEY,B.CUST_ADD_COUNT,B.PER_CUST_MONEY,B.FANKAN_COUNT,B.PER_FANKAN_MONEY,B.DAIKAN_COUNT,B.PER_DAIKAN_MONEY,B.TASK_MONEY,B.TRAGET_PROFIT,B.SALARY_MONEY
		from SALARY_TYPE_RELATIVE A join FUN_SALARY_TYPE B ON A.SALARY_TYPE_ID=B.ID
		where A.COMP_ID = #{compId} and B.DEL_FLAG = 0 and A.USER_ID = #{userId} and A.CREATION_TIME &lt; = #{endTime}
		and (a.DEL_FLAG = 0 or (a.DEL_FLAG!=0 and a.DEL_TIME &gt; #{startTime}))
		order BY order by A.CREATION_TIME DESC
	</select>

	<insert id="batCreateWageConfigForUsers">
		insert into SALARY_TYPE_RELATIVE (COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, SALARY_TYPE_ID, USER_ID, ROLE_ID, CREATION_TIME, DEL_FLAG)
	      select COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, #{wageConfigId}, USER_ID, USER_POSITION, getdate(), 0 
	      	from fun_users where comp_id = #{compId} and user_id in 
			<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
				#{userId}
			</foreach>
	</insert>
</mapper>