<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunEmployeeDocMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="NATION" jdbcType="VARCHAR" property="nation" />
    <result column="MARITAL_STATUS" jdbcType="TINYINT" property="maritalStatus" />
    <result column="PLACE_OF_ORIGIN" jdbcType="VARCHAR" property="placeOfOrigin" />
    <result column="USER_SCHOOL" jdbcType="VARCHAR" property="userSchool" />
    <result column="BANK_ACCOUNT" jdbcType="VARCHAR" property="bankAccount" />
    <result column="SOCIAL_SECURITY_ACCOUNT" jdbcType="VARCHAR" property="socialSecurityAccount" />
    <result column="REMARK_INFO" jdbcType="VARCHAR" property="remarkInfo" />
    <result column="CHANNEL_DESCRIPTION" jdbcType="VARCHAR" property="channelDescription" />
    <result column="USER_SCHLRECORD" jdbcType="VARCHAR" property="userSchlrecord" />
    <result column="ACCOUNT_TYPE" jdbcType="INTEGER" property="accountType" />
    <result column="GRADUATION_TIME" jdbcType="TIMESTAMP" property="graduationTime" />
    <result column="USER_JOB_DATE" jdbcType="TIMESTAMP" property="userJobDate" />
    <result column="WRITEOFF_TIME" jdbcType="TIMESTAMP" property="writeoffTime" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, ARCHIVE_ID, CREATION_TIME, UPDATE_TIME, NATION, MARITAL_STATUS, PLACE_OF_ORIGIN, 
    USER_SCHOOL, BANK_ACCOUNT, SOCIAL_SECURITY_ACCOUNT, REMARK_INFO, CHANNEL_DESCRIPTION, 
    USER_SCHLRECORD, ACCOUNT_TYPE, GRADUATION_TIME, USER_JOB_DATE, WRITEOFF_TIME, USER_ID
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDocExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_EMPLOYEE_DOC
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_EMPLOYEE_DOC
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_EMPLOYEE_DOC
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDocExample">
    <!--@mbggenerated-->
    delete from FUN_EMPLOYEE_DOC
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_EMPLOYEE_DOC (COMP_ID, ARCHIVE_ID, CREATION_TIME, 
      UPDATE_TIME, NATION, MARITAL_STATUS, 
      PLACE_OF_ORIGIN, USER_SCHOOL, BANK_ACCOUNT, 
      SOCIAL_SECURITY_ACCOUNT, REMARK_INFO, CHANNEL_DESCRIPTION, 
      USER_SCHLRECORD, ACCOUNT_TYPE, GRADUATION_TIME, 
      USER_JOB_DATE, WRITEOFF_TIME, USER_ID
      )
    values (#{compId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, #{creationTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{nation,jdbcType=VARCHAR}, #{maritalStatus,jdbcType=TINYINT}, 
      #{placeOfOrigin,jdbcType=VARCHAR}, #{userSchool,jdbcType=VARCHAR}, #{bankAccount,jdbcType=VARCHAR}, 
      #{socialSecurityAccount,jdbcType=VARCHAR}, #{remarkInfo,jdbcType=VARCHAR}, #{channelDescription,jdbcType=VARCHAR}, 
      #{userSchlrecord,jdbcType=VARCHAR}, #{accountType,jdbcType=INTEGER}, #{graduationTime,jdbcType=TIMESTAMP}, 
      #{userJobDate,jdbcType=TIMESTAMP}, #{writeoffTime,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_EMPLOYEE_DOC
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="nation != null">
        NATION,
      </if>
      <if test="maritalStatus != null">
        MARITAL_STATUS,
      </if>
      <if test="placeOfOrigin != null">
        PLACE_OF_ORIGIN,
      </if>
      <if test="userSchool != null">
        USER_SCHOOL,
      </if>
      <if test="bankAccount != null">
        BANK_ACCOUNT,
      </if>
      <if test="socialSecurityAccount != null">
        SOCIAL_SECURITY_ACCOUNT,
      </if>
      <if test="remarkInfo != null">
        REMARK_INFO,
      </if>
      <if test="channelDescription != null">
        CHANNEL_DESCRIPTION,
      </if>
      <if test="userSchlrecord != null">
        USER_SCHLRECORD,
      </if>
      <if test="accountType != null">
        ACCOUNT_TYPE,
      </if>
      <if test="graduationTime != null">
        GRADUATION_TIME,
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE,
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nation != null">
        #{nation,jdbcType=VARCHAR},
      </if>
      <if test="maritalStatus != null">
        #{maritalStatus,jdbcType=TINYINT},
      </if>
      <if test="placeOfOrigin != null">
        #{placeOfOrigin,jdbcType=VARCHAR},
      </if>
      <if test="userSchool != null">
        #{userSchool,jdbcType=VARCHAR},
      </if>
      <if test="bankAccount != null">
        #{bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="socialSecurityAccount != null">
        #{socialSecurityAccount,jdbcType=VARCHAR},
      </if>
      <if test="remarkInfo != null">
        #{remarkInfo,jdbcType=VARCHAR},
      </if>
      <if test="channelDescription != null">
        #{channelDescription,jdbcType=VARCHAR},
      </if>
      <if test="userSchlrecord != null">
        #{userSchlrecord,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=INTEGER},
      </if>
      <if test="graduationTime != null">
        #{graduationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userJobDate != null">
        #{userJobDate,jdbcType=TIMESTAMP},
      </if>
      <if test="writeoffTime != null">
        #{writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDocExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_EMPLOYEE_DOC
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_DOC
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.nation != null">
        NATION = #{record.nation,jdbcType=VARCHAR},
      </if>
      <if test="record.maritalStatus != null">
        MARITAL_STATUS = #{record.maritalStatus,jdbcType=TINYINT},
      </if>
      <if test="record.placeOfOrigin != null">
        PLACE_OF_ORIGIN = #{record.placeOfOrigin,jdbcType=VARCHAR},
      </if>
      <if test="record.userSchool != null">
        USER_SCHOOL = #{record.userSchool,jdbcType=VARCHAR},
      </if>
      <if test="record.bankAccount != null">
        BANK_ACCOUNT = #{record.bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.socialSecurityAccount != null">
        SOCIAL_SECURITY_ACCOUNT = #{record.socialSecurityAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.remarkInfo != null">
        REMARK_INFO = #{record.remarkInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.channelDescription != null">
        CHANNEL_DESCRIPTION = #{record.channelDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.userSchlrecord != null">
        USER_SCHLRECORD = #{record.userSchlrecord,jdbcType=VARCHAR},
      </if>
      <if test="record.accountType != null">
        ACCOUNT_TYPE = #{record.accountType,jdbcType=INTEGER},
      </if>
      <if test="record.graduationTime != null">
        GRADUATION_TIME = #{record.graduationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userJobDate != null">
        USER_JOB_DATE = #{record.userJobDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.writeoffTime != null">
        WRITEOFF_TIME = #{record.writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_DOC
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      NATION = #{record.nation,jdbcType=VARCHAR},
      MARITAL_STATUS = #{record.maritalStatus,jdbcType=TINYINT},
      PLACE_OF_ORIGIN = #{record.placeOfOrigin,jdbcType=VARCHAR},
      USER_SCHOOL = #{record.userSchool,jdbcType=VARCHAR},
      BANK_ACCOUNT = #{record.bankAccount,jdbcType=VARCHAR},
      SOCIAL_SECURITY_ACCOUNT = #{record.socialSecurityAccount,jdbcType=VARCHAR},
      REMARK_INFO = #{record.remarkInfo,jdbcType=VARCHAR},
      CHANNEL_DESCRIPTION = #{record.channelDescription,jdbcType=VARCHAR},
      USER_SCHLRECORD = #{record.userSchlrecord,jdbcType=VARCHAR},
      ACCOUNT_TYPE = #{record.accountType,jdbcType=INTEGER},
      GRADUATION_TIME = #{record.graduationTime,jdbcType=TIMESTAMP},
      USER_JOB_DATE = #{record.userJobDate,jdbcType=TIMESTAMP},
      WRITEOFF_TIME = #{record.writeoffTime,jdbcType=TIMESTAMP},
      USER_ID = #{record.userId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_DOC
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nation != null">
        NATION = #{nation,jdbcType=VARCHAR},
      </if>
      <if test="maritalStatus != null">
        MARITAL_STATUS = #{maritalStatus,jdbcType=TINYINT},
      </if>
      <if test="placeOfOrigin != null">
        PLACE_OF_ORIGIN = #{placeOfOrigin,jdbcType=VARCHAR},
      </if>
      <if test="userSchool != null">
        USER_SCHOOL = #{userSchool,jdbcType=VARCHAR},
      </if>
      <if test="bankAccount != null">
        BANK_ACCOUNT = #{bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="socialSecurityAccount != null">
        SOCIAL_SECURITY_ACCOUNT = #{socialSecurityAccount,jdbcType=VARCHAR},
      </if>
      <if test="remarkInfo != null">
        REMARK_INFO = #{remarkInfo,jdbcType=VARCHAR},
      </if>
      <if test="channelDescription != null">
        CHANNEL_DESCRIPTION = #{channelDescription,jdbcType=VARCHAR},
      </if>
      <if test="userSchlrecord != null">
        USER_SCHLRECORD = #{userSchlrecord,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        ACCOUNT_TYPE = #{accountType,jdbcType=INTEGER},
      </if>
      <if test="graduationTime != null">
        GRADUATION_TIME = #{graduationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE = #{userJobDate,jdbcType=TIMESTAMP},
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME = #{writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_DOC
    set COMP_ID = #{compId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      NATION = #{nation,jdbcType=VARCHAR},
      MARITAL_STATUS = #{maritalStatus,jdbcType=TINYINT},
      PLACE_OF_ORIGIN = #{placeOfOrigin,jdbcType=VARCHAR},
      USER_SCHOOL = #{userSchool,jdbcType=VARCHAR},
      BANK_ACCOUNT = #{bankAccount,jdbcType=VARCHAR},
      SOCIAL_SECURITY_ACCOUNT = #{socialSecurityAccount,jdbcType=VARCHAR},
      REMARK_INFO = #{remarkInfo,jdbcType=VARCHAR},
      CHANNEL_DESCRIPTION = #{channelDescription,jdbcType=VARCHAR},
      USER_SCHLRECORD = #{userSchlrecord,jdbcType=VARCHAR},
      ACCOUNT_TYPE = #{accountType,jdbcType=INTEGER},
      GRADUATION_TIME = #{graduationTime,jdbcType=TIMESTAMP},
      USER_JOB_DATE = #{userJobDate,jdbcType=TIMESTAMP},
      WRITEOFF_TIME = #{writeoffTime,jdbcType=TIMESTAMP},
      USER_ID = #{userId,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="getErpFunEmployeeDocByArchiveId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_EMPLOYEE_DOC
    where COMP_ID = #{compId} and  ARCHIVE_ID = #{archiveId}
  </select>
  
  <select id="getErpFunEmployeeDocByUserId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_EMPLOYEE_DOC
    where COMP_ID = #{compId} and  USER_ID = #{userId}
  </select>

  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunEmployeeDocDto">
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="USER_RIGHT" jdbcType="INTEGER" property="userRight" />
    <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
    <result column="USER_POSITION" jdbcType="VARCHAR" property="userPosition" />
    <result column="WORKING_YEARS" jdbcType="VARCHAR" property="workingYears" />
    <result column="USER_BIRTHDAY" jdbcType="TIMESTAMP" property="userBirthday" />
    <result column="SERVICE_REG" jdbcType="VARCHAR" property="serviceReg" />
    <result column="SERVICE_ZONE" jdbcType="VARCHAR" property="serviceZone" />
    <result column="USER_QQ" jdbcType="VARCHAR" property="userQq" />
    <result column="USER_EMAIL" jdbcType="VARCHAR" property="userEmail" />
    <result column="USER_ADDRESS" jdbcType="VARCHAR" property="userAddress" />
    <result column="USER_ICCODE" jdbcType="VARCHAR" property="userIccode" />
    <result column="USER_POLITY" jdbcType="VARCHAR" property="userPolity" />
    <result column="USER_FIELD" jdbcType="VARCHAR" property="userField" />
    <result column="SERVICE_ZONE_IDS" jdbcType="VARCHAR" property="serviceZoneIds" />
    <result column="USER_PHOTO" jdbcType="VARCHAR" property="userPhoto" />
    <result column="USER_OFFICEPH" jdbcType="VARCHAR" property="userOfficeph" />
    <result column="USER_FIXEDPH" jdbcType="VARCHAR" property="userFixedph" />
    <result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
    <result column="RECRUITMENT_CHANNEL" jdbcType="VARCHAR" property="recruitmentChannel" />
    <result column="USER_SEX" jdbcType="TINYINT" property="userSex" />
    <result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
    <result column="USER_STATUS" jdbcType="TINYINT" property="userStatus" />
    <result column="WORK_YEAR" jdbcType="NUMERIC" property="workYear" />
    <result column="EMERGENCY_CONTACT" jdbcType="VARCHAR" property="emergencyContact" />
    <result column="INVITE_USER_ID" jdbcType="INTEGER" property="inviteUserId" />
    <result column="CURRENT_P_ID" jdbcType="INTEGER" property="currentPId" />
    <result column="ORGANIZATION_NAME" jdbcType="VARCHAR" property="organizationName" />
  </resultMap>
  <select id="getEmployeeDocList" resultMap="extBaseResultMap">
      SELECT a.archive_id,a.id,a.USER_JOB_DATE,a.WRITEOFF_TIME,a.NATION,c.USER_BIRTHDAY,a.PLACE_OF_ORIGIN, c.USER_NAME,
        b.USER_ID, d.DEPT_NAME,d.DEPT_ID, b.USER_POSITION, b.USER_MOBILE, b.USER_STATUS
      FROM [dbo].[FUN_EMPLOYEE_DOC] a
      JOIN FUN_USERS b on a.USER_ID=b.USER_ID
      JOIN hft_admindb.dbo.FUN_ARCHIVE c on c.ARCHIVE_ID = a.ARCHIVE_ID
      LEFT JOIN FUN_DEPTS d on d.DEPT_ID = b.DEPT_ID
      <where>
          <if test="1==1">
              and a.COMP_ID=#{paramMap.compId}
          </if>
          <if test="null != paramMap.userId and '' != paramMap.userId">
              and a.USER_ID=#{paramMap.userId}
          </if>
          <if test="null != paramMap.deptId and '' != paramMap.deptId">
              and b.DEPT_ID=#{paramMap.deptId}
          </if>
          <if test="null != paramMap.grId and '' != paramMap.grId">
              and b.GR_ID=#{paramMap.grId}
          </if>
          <if test="null != paramMap.areaId and '' != paramMap.areaId">
              and b.AREA_ID=#{paramMap.areaId}
          </if>
          <if test="null != paramMap.regId and '' != paramMap.regId">
              and b.REG_ID=#{paramMap.regId}
          </if>
          <if test="null != paramMap.userSchlrecord and '' != paramMap.userSchlrecord">
              and a.USER_SCHLRECORD=#{paramMap.userSchlrecord}
          </if>
          <if test="null != paramMap.matchStr and '' != paramMap.matchStr">
              and (a.USER_SCHOOL like '%${paramMap.matchStr}%' or c.USER_MOBILE like '%${paramMap.matchStr}%' or c.USER_NAME like '%${paramMap.matchStr}%')
          </if>
          <if test="null != paramMap.userFlag and '' != paramMap.userFlag">
            and b.user_status=#{paramMap.userFlag}
          </if>
          <if test="null != paramMap.userStatus and '' != paramMap.userStatus">
            <choose>
              <when test="paramMap.userStatus == 1">
                  and a.WRITEOFF_TIME is null
              </when>
              <otherwise>
                  and a.WRITEOFF_TIME is not null
              </otherwise>
            </choose>
          </if>

          <if test="paramMap.startTime !=null and paramMap.startTime != '' and paramMap.endTime !=null and paramMap.endTime != ''">
            <choose>
              <when test="paramMap.inOrOut == 1">
                and a.USER_JOB_DATE &gt;= #{paramMap.startTime} and a.USER_JOB_DATE &lt;= #{paramMap.endTime}
              </when>
              <otherwise>
                and a.WRITEOFF_TIME &gt;= #{paramMap.startTime} and a.WRITEOFF_TIME &lt;= #{paramMap.endTime}
              </otherwise>
            </choose>
          </if>
      </where>
      GROUP BY a.archive_id,a.id,a.WRITEOFF_TIME,c.USER_BIRTHDAY,a.USER_JOB_DATE,a.WRITEOFF_TIME,
        a.NATION,a.PLACE_OF_ORIGIN,c.USER_NAME, b.USER_ID, d.DEPT_NAME,d.DEPT_ID, b.USER_POSITION, b.USER_MOBILE,b.USER_STATUS
    <choose>
      <when test="paramMap.inOrOut == 1">
        ORDER BY a.USER_JOB_DATE DESC
      </when>
      <otherwise>
        ORDER BY a.WRITEOFF_TIME DESC
      </otherwise>
    </choose>
  </select>

  <select id="getEmployeeDocDetail" resultMap="extBaseResultMap">
      SELECT iif(b.USER_WRITEOFF=1,DATEDIFF(day,b.USER_JOB_DATE, b.WRITEOFF_TIME)+1,
          DATEDIFF(day,b.USER_JOB_DATE,GETDATE())+1) as WORKING_YEARS, c.USER_RIGHT, c.SERVICE_REG,b.WORK_YEAR,b.EMERGENCY_CONTACT,b.INVITE_USER_ID,B.CURRENT_P_ID,
            c.USER_SEX,c.SERVICE_ZONE,c.USER_QQ,c.USER_EMAIL,c.USER_ADDRESS,c.USER_ICCODE,
            c.USER_BIRTHDAY,c.USER_POLITY,c.USER_FIELD,c.SERVICE_ZONE_IDS,b.USER_PHOTO,c.USER_OFFICEPH,c.USER_FIXEDPH,
        a.*,b.USER_NAME,c.USER_MOBILE, b.USER_POSITION,d.dept_name,b.RECRUITMENT_CHANNEL, c.user_Desc as remarkInfo, b.USER_POSITION as userPosition,B.USER_STATUS,b.GR_ID 
        from FUN_EMPLOYEE_DOC a
      JOIN fun_users b on b.USER_ID =#{userId}
      JOIN fun_depts d on b.dept_id=d.dept_id
      JOIN hft_admindb.dbo.FUN_ARCHIVE c on c.ARCHIVE_ID = a.ARCHIVE_ID
      where a.USER_ID = #{userId,jdbcType=INTEGER} and a.COMP_ID = #{compId}
  </select>

  <select id="getEmployeeDocDetailNewOrg" resultMap="extBaseResultMap">
      SELECT iif(b.USER_WRITEOFF=1,DATEDIFF(day,b.USER_JOB_DATE, b.WRITEOFF_TIME)+1,
          DATEDIFF(day,b.USER_JOB_DATE,GETDATE())+1) as WORKING_YEARS, c.USER_RIGHT, c.SERVICE_REG,b.WORK_YEAR,b.EMERGENCY_CONTACT,b.INVITE_USER_ID,B.CURRENT_P_ID,
            c.USER_SEX,c.SERVICE_ZONE,c.USER_QQ,c.USER_EMAIL,c.USER_ADDRESS,c.USER_ICCODE,
            c.USER_BIRTHDAY,c.USER_POLITY,c.USER_FIELD,c.SERVICE_ZONE_IDS,b.USER_PHOTO,c.USER_OFFICEPH,c.USER_FIXEDPH,
        a.*,b.USER_NAME,c.USER_MOBILE, b.USER_POSITION,d.ORGANIZATION_NAME,b.RECRUITMENT_CHANNEL, c.user_Desc as remarkInfo, b.USER_POSITION as userPosition,B.USER_STATUS,b.GR_ID
        from FUN_EMPLOYEE_DOC a
      JOIN fun_users b on b.USER_ID =#{userId}
      JOIN FUN_ORGANIZATION d on b.ORGANIZATION_ID=d.ORGANIZATION_ID
      JOIN hft_admindb.dbo.FUN_ARCHIVE c on c.ARCHIVE_ID = a.ARCHIVE_ID
      where a.USER_ID = #{userId,jdbcType=INTEGER} and a.COMP_ID = #{compId}
  </select>

  <update id="updateByArchiveId"  parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc">
    update FUN_EMPLOYEE_DOC
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nation != null">
        NATION = #{nation,jdbcType=VARCHAR},
      </if>
      <if test="maritalStatus != null">
        MARITAL_STATUS = #{maritalStatus,jdbcType=TINYINT},
      </if>
      <if test="placeOfOrigin != null">
        PLACE_OF_ORIGIN = #{placeOfOrigin,jdbcType=VARCHAR},
      </if>
      <if test="userSchool != null">
        USER_SCHOOL = #{userSchool,jdbcType=VARCHAR},
      </if>
      <if test="bankAccount != null">
        BANK_ACCOUNT = #{bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="socialSecurityAccount != null">
        SOCIAL_SECURITY_ACCOUNT = #{socialSecurityAccount,jdbcType=VARCHAR},
      </if>
      <if test="remarkInfo != null">
        REMARK_INFO = #{remarkInfo,jdbcType=VARCHAR},
      </if>
      <if test="channelDescription != null">
        CHANNEL_DESCRIPTION = #{channelDescription,jdbcType=VARCHAR},
      </if>
      <if test="userSchlrecord != null">
        USER_SCHLRECORD = #{userSchlrecord,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        ACCOUNT_TYPE = #{accountType,jdbcType=INTEGER},
      </if>
      <if test="graduationTime != null">
        GRADUATION_TIME = #{graduationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE = #{userJobDate,jdbcType=TIMESTAMP},
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME = #{writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where ARCHIVE_ID = #{archiveId} and COMP_ID = #{compId}

  </update>
	<update id="updateWriteoffTime" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeDoc">
		update FUN_EMPLOYEE_DOC
		set USER_ID=#{userId},WRITEOFF_TIME=#{writeoffTime},UPDATE_TIME=#{updateTime}
		where ARCHIVE_ID = #{archiveId} and COMP_ID = #{compId}
	</update>
	<select id="getEmployeeDocByUserIds" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_EMPLOYEE_DOC
		WHERE COMP_ID = #{compId} AND
		USER_ID IN 
		<foreach collection="userIds" close=")" index="index" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
	</select>
</mapper>