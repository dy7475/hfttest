<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunKeyMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    <id column="KEY_ID" jdbcType="INTEGER" property="keyId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="CASE_ID" jdbcType="INTEGER" property="caseId" />
    <result column="CASE_TYPE" jdbcType="TINYINT" property="caseType" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="TRACK_ID" jdbcType="INTEGER" property="trackId" />
    <result column="KEY_NUM" jdbcType="VARCHAR" property="keyNum" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CREATOR_TIME" jdbcType="VARCHAR" property="creatorTime" />
    <result column="KEY_STATUS" jdbcType="TINYINT" property="keyStatus" />
    <result column="KEY_LOG_ID" jdbcType="INTEGER" property="keyLogId" />
    <result column="CASE_NO" jdbcType="VARCHAR" property="caseNo" />
    <result column="USEAGE" jdbcType="TINYINT" property="useage" />
    <result column="KEY_DEPT_ID" jdbcType="INTEGER" property="keyDeptId" />
    <result column="LOG_TYPE" jdbcType="INTEGER" property="logType" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="DEL_TIME" jdbcType="TIMESTAMP" property="delTime" />
    <result column="BORROW_KEY_TIME" jdbcType="TIMESTAMP" property="borrowKeyTime" />
    <result column="BORROW_PHONE" jdbcType="VARCHAR" property="borrowPhone" />
    <result column="CURRENT_DEPOSIT" jdbcType="DECIMAL" property="currentDeposit" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="BORROW_USER" jdbcType="VARCHAR" property="borrowUser" />
    <result column="MAX_BORROW_TIME" jdbcType="TIMESTAMP" property="maxBorrowTime" />
    <result column="DEPOSIT_STATUS" jdbcType="INTEGER" property="depositStatus" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="KEY_VOUCHER" jdbcType="VARCHAR" property="keyVoucher" />
    <result column="KEY_TYPE" jdbcType="TINYINT" property="keyType" />
    <result column="KEY_COUNT" jdbcType="INTEGER" property="keyCount" />
    <result column="GATHER_TIME" jdbcType="TIMESTAMP" property="gatherTime" />
    <result column="LEND_COUNT" jdbcType="INTEGER" property="lendCount" />
    <result column="KEY_PASSWORD" jdbcType="VARCHAR" property="keyPassword" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    KEY_ID, COMP_ID, CASE_ID, CASE_TYPE, DEPT_ID, TRACK_ID, KEY_NUM, USER_ID, CREATOR_TIME, 
    KEY_STATUS, KEY_LOG_ID, CASE_NO, USEAGE, KEY_DEPT_ID, LOG_TYPE, UPDATE_TIME, DEL_TIME, 
    BORROW_KEY_TIME, BORROW_PHONE, CURRENT_DEPOSIT, USER_NAME, BORROW_USER, MAX_BORROW_TIME, 
    DEPOSIT_STATUS, BUILD_ID, KEY_VOUCHER, [KEY_TYPE], KEY_COUNT, GATHER_TIME, LEND_COUNT, 
    KEY_PASSWORD
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunKeyExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_KEY
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_KEY
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_KEY
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunKeyExample">
    <!--@mbggenerated-->
    delete from FUN_KEY
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    <selectKey keyProperty="keyId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_KEY_KEY_ID
    </selectKey>
    insert into FUN_KEY (KEY_ID, COMP_ID, CASE_ID, 
      CASE_TYPE, DEPT_ID, TRACK_ID, 
      KEY_NUM, USER_ID, CREATOR_TIME, 
      KEY_STATUS, KEY_LOG_ID, CASE_NO, 
      USEAGE, KEY_DEPT_ID, LOG_TYPE, 
      UPDATE_TIME, DEL_TIME, BORROW_KEY_TIME, 
      BORROW_PHONE, CURRENT_DEPOSIT, USER_NAME, 
      BORROW_USER, MAX_BORROW_TIME, DEPOSIT_STATUS, 
      BUILD_ID, KEY_VOUCHER, [KEY_TYPE], 
      KEY_COUNT, GATHER_TIME, LEND_COUNT, 
      KEY_PASSWORD)
    values (#{keyId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{caseId,jdbcType=INTEGER}, 
      #{caseType,jdbcType=TINYINT}, #{deptId,jdbcType=INTEGER}, #{trackId,jdbcType=INTEGER}, 
      #{keyNum,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, #{creatorTime,jdbcType=VARCHAR}, 
      #{keyStatus,jdbcType=TINYINT}, #{keyLogId,jdbcType=INTEGER}, #{caseNo,jdbcType=VARCHAR}, 
      #{useage,jdbcType=TINYINT}, #{keyDeptId,jdbcType=INTEGER}, #{logType,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{delTime,jdbcType=TIMESTAMP}, #{borrowKeyTime,jdbcType=TIMESTAMP}, 
      #{borrowPhone,jdbcType=VARCHAR}, #{currentDeposit,jdbcType=DECIMAL}, #{userName,jdbcType=VARCHAR}, 
      #{borrowUser,jdbcType=VARCHAR}, #{maxBorrowTime,jdbcType=TIMESTAMP}, #{depositStatus,jdbcType=INTEGER}, 
      #{buildId,jdbcType=INTEGER}, #{keyVoucher,jdbcType=VARCHAR}, #{keyType,jdbcType=TINYINT}, 
      #{keyCount,jdbcType=INTEGER}, #{gatherTime,jdbcType=TIMESTAMP}, #{lendCount,jdbcType=INTEGER}, 
      #{keyPassword,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    <selectKey keyProperty="keyId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_KEY_KEY_ID
    </selectKey>
    insert into FUN_KEY
    <trim prefix="(" suffix=")" suffixOverrides=",">
      KEY_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="caseId != null">
        CASE_ID,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="trackId != null">
        TRACK_ID,
      </if>
      <if test="keyNum != null">
        KEY_NUM,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="creatorTime != null">
        CREATOR_TIME,
      </if>
      <if test="keyStatus != null">
        KEY_STATUS,
      </if>
      <if test="keyLogId != null">
        KEY_LOG_ID,
      </if>
      <if test="caseNo != null">
        CASE_NO,
      </if>
      <if test="useage != null">
        USEAGE,
      </if>
      <if test="keyDeptId != null">
        KEY_DEPT_ID,
      </if>
      <if test="logType != null">
        LOG_TYPE,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="delTime != null">
        DEL_TIME,
      </if>
      <if test="borrowKeyTime != null">
        BORROW_KEY_TIME,
      </if>
      <if test="borrowPhone != null">
        BORROW_PHONE,
      </if>
      <if test="currentDeposit != null">
        CURRENT_DEPOSIT,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="borrowUser != null">
        BORROW_USER,
      </if>
      <if test="maxBorrowTime != null">
        MAX_BORROW_TIME,
      </if>
      <if test="depositStatus != null">
        DEPOSIT_STATUS,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="keyVoucher != null">
        KEY_VOUCHER,
      </if>
      <if test="keyType != null">
        [KEY_TYPE],
      </if>
      <if test="keyCount != null">
        KEY_COUNT,
      </if>
      <if test="gatherTime != null">
        GATHER_TIME,
      </if>
      <if test="lendCount != null">
        LEND_COUNT,
      </if>
      <if test="keyPassword != null">
        KEY_PASSWORD,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{keyId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=TINYINT},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="trackId != null">
        #{trackId,jdbcType=INTEGER},
      </if>
      <if test="keyNum != null">
        #{keyNum,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="creatorTime != null">
        #{creatorTime,jdbcType=VARCHAR},
      </if>
      <if test="keyStatus != null">
        #{keyStatus,jdbcType=TINYINT},
      </if>
      <if test="keyLogId != null">
        #{keyLogId,jdbcType=INTEGER},
      </if>
      <if test="caseNo != null">
        #{caseNo,jdbcType=VARCHAR},
      </if>
      <if test="useage != null">
        #{useage,jdbcType=TINYINT},
      </if>
      <if test="keyDeptId != null">
        #{keyDeptId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        #{logType,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delTime != null">
        #{delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowKeyTime != null">
        #{borrowKeyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowPhone != null">
        #{borrowPhone,jdbcType=VARCHAR},
      </if>
      <if test="currentDeposit != null">
        #{currentDeposit,jdbcType=DECIMAL},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="borrowUser != null">
        #{borrowUser,jdbcType=VARCHAR},
      </if>
      <if test="maxBorrowTime != null">
        #{maxBorrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="depositStatus != null">
        #{depositStatus,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="keyVoucher != null">
        #{keyVoucher,jdbcType=VARCHAR},
      </if>
      <if test="keyType != null">
        #{keyType,jdbcType=TINYINT},
      </if>
      <if test="keyCount != null">
        #{keyCount,jdbcType=INTEGER},
      </if>
      <if test="gatherTime != null">
        #{gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lendCount != null">
        #{lendCount,jdbcType=INTEGER},
      </if>
      <if test="keyPassword != null">
        #{keyPassword,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunKeyExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_KEY
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_KEY
    <set>
      <if test="record.keyId != null">
        KEY_ID = #{record.keyId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.caseId != null">
        CASE_ID = #{record.caseId,jdbcType=INTEGER},
      </if>
      <if test="record.caseType != null">
        CASE_TYPE = #{record.caseType,jdbcType=TINYINT},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.trackId != null">
        TRACK_ID = #{record.trackId,jdbcType=INTEGER},
      </if>
      <if test="record.keyNum != null">
        KEY_NUM = #{record.keyNum,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.creatorTime != null">
        CREATOR_TIME = #{record.creatorTime,jdbcType=VARCHAR},
      </if>
      <if test="record.keyStatus != null">
        KEY_STATUS = #{record.keyStatus,jdbcType=TINYINT},
      </if>
      <if test="record.keyLogId != null">
        KEY_LOG_ID = #{record.keyLogId,jdbcType=INTEGER},
      </if>
      <if test="record.caseNo != null">
        CASE_NO = #{record.caseNo,jdbcType=VARCHAR},
      </if>
      <if test="record.useage != null">
        USEAGE = #{record.useage,jdbcType=TINYINT},
      </if>
      <if test="record.keyDeptId != null">
        KEY_DEPT_ID = #{record.keyDeptId,jdbcType=INTEGER},
      </if>
      <if test="record.logType != null">
        LOG_TYPE = #{record.logType,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delTime != null">
        DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.borrowKeyTime != null">
        BORROW_KEY_TIME = #{record.borrowKeyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.borrowPhone != null">
        BORROW_PHONE = #{record.borrowPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.currentDeposit != null">
        CURRENT_DEPOSIT = #{record.currentDeposit,jdbcType=DECIMAL},
      </if>
      <if test="record.userName != null">
        USER_NAME = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.borrowUser != null">
        BORROW_USER = #{record.borrowUser,jdbcType=VARCHAR},
      </if>
      <if test="record.maxBorrowTime != null">
        MAX_BORROW_TIME = #{record.maxBorrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.depositStatus != null">
        DEPOSIT_STATUS = #{record.depositStatus,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.keyVoucher != null">
        KEY_VOUCHER = #{record.keyVoucher,jdbcType=VARCHAR},
      </if>
      <if test="record.keyType != null">
        [KEY_TYPE] = #{record.keyType,jdbcType=TINYINT},
      </if>
      <if test="record.keyCount != null">
        KEY_COUNT = #{record.keyCount,jdbcType=INTEGER},
      </if>
      <if test="record.gatherTime != null">
        GATHER_TIME = #{record.gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lendCount != null">
        LEND_COUNT = #{record.lendCount,jdbcType=INTEGER},
      </if>
      <if test="record.keyPassword != null">
        KEY_PASSWORD = #{record.keyPassword,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_KEY
    set KEY_ID = #{record.keyId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      CASE_ID = #{record.caseId,jdbcType=INTEGER},
      CASE_TYPE = #{record.caseType,jdbcType=TINYINT},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      TRACK_ID = #{record.trackId,jdbcType=INTEGER},
      KEY_NUM = #{record.keyNum,jdbcType=VARCHAR},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      CREATOR_TIME = #{record.creatorTime,jdbcType=VARCHAR},
      KEY_STATUS = #{record.keyStatus,jdbcType=TINYINT},
      KEY_LOG_ID = #{record.keyLogId,jdbcType=INTEGER},
      CASE_NO = #{record.caseNo,jdbcType=VARCHAR},
      USEAGE = #{record.useage,jdbcType=TINYINT},
      KEY_DEPT_ID = #{record.keyDeptId,jdbcType=INTEGER},
      LOG_TYPE = #{record.logType,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
      BORROW_KEY_TIME = #{record.borrowKeyTime,jdbcType=TIMESTAMP},
      BORROW_PHONE = #{record.borrowPhone,jdbcType=VARCHAR},
      CURRENT_DEPOSIT = #{record.currentDeposit,jdbcType=DECIMAL},
      USER_NAME = #{record.userName,jdbcType=VARCHAR},
      BORROW_USER = #{record.borrowUser,jdbcType=VARCHAR},
      MAX_BORROW_TIME = #{record.maxBorrowTime,jdbcType=TIMESTAMP},
      DEPOSIT_STATUS = #{record.depositStatus,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      KEY_VOUCHER = #{record.keyVoucher,jdbcType=VARCHAR},
      [KEY_TYPE] = #{record.keyType,jdbcType=TINYINT},
      KEY_COUNT = #{record.keyCount,jdbcType=INTEGER},
      GATHER_TIME = #{record.gatherTime,jdbcType=TIMESTAMP},
      LEND_COUNT = #{record.lendCount,jdbcType=INTEGER},
      KEY_PASSWORD = #{record.keyPassword,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    update FUN_KEY
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        CASE_ID = #{caseId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=TINYINT},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="trackId != null">
        TRACK_ID = #{trackId,jdbcType=INTEGER},
      </if>
      <if test="keyNum != null">
        KEY_NUM = #{keyNum,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="creatorTime != null">
        CREATOR_TIME = #{creatorTime,jdbcType=VARCHAR},
      </if>
      <if test="keyStatus != null">
        KEY_STATUS = #{keyStatus,jdbcType=TINYINT},
      </if>
      <if test="keyLogId != null">
        KEY_LOG_ID = #{keyLogId,jdbcType=INTEGER},
      </if>
      <if test="caseNo != null">
        CASE_NO = #{caseNo,jdbcType=VARCHAR},
      </if>
      <if test="useage != null">
        USEAGE = #{useage,jdbcType=TINYINT},
      </if>
      <if test="keyDeptId != null">
        KEY_DEPT_ID = #{keyDeptId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        LOG_TYPE = #{logType,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delTime != null">
        DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowKeyTime != null">
        BORROW_KEY_TIME = #{borrowKeyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowPhone != null">
        BORROW_PHONE = #{borrowPhone,jdbcType=VARCHAR},
      </if>
      <if test="currentDeposit != null">
        CURRENT_DEPOSIT = #{currentDeposit,jdbcType=DECIMAL},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="borrowUser != null">
        BORROW_USER = #{borrowUser,jdbcType=VARCHAR},
      </if>
      <if test="maxBorrowTime != null">
        MAX_BORROW_TIME = #{maxBorrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="depositStatus != null">
        DEPOSIT_STATUS = #{depositStatus,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="keyVoucher != null">
        KEY_VOUCHER = #{keyVoucher,jdbcType=VARCHAR},
      </if>
      <if test="keyType != null">
        [KEY_TYPE] = #{keyType,jdbcType=TINYINT},
      </if>
      <if test="keyCount != null">
        KEY_COUNT = #{keyCount,jdbcType=INTEGER},
      </if>
      <if test="gatherTime != null">
        GATHER_TIME = #{gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lendCount != null">
        LEND_COUNT = #{lendCount,jdbcType=INTEGER},
      </if>
      <if test="keyPassword != null">
        KEY_PASSWORD = #{keyPassword,jdbcType=VARCHAR},
      </if>
    </set>
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    update FUN_KEY
    set COMP_ID = #{compId,jdbcType=INTEGER},
      CASE_ID = #{caseId,jdbcType=INTEGER},
      CASE_TYPE = #{caseType,jdbcType=TINYINT},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      TRACK_ID = #{trackId,jdbcType=INTEGER},
      KEY_NUM = #{keyNum,jdbcType=VARCHAR},
      USER_ID = #{userId,jdbcType=INTEGER},
      CREATOR_TIME = #{creatorTime,jdbcType=VARCHAR},
      KEY_STATUS = #{keyStatus,jdbcType=TINYINT},
      KEY_LOG_ID = #{keyLogId,jdbcType=INTEGER},
      CASE_NO = #{caseNo,jdbcType=VARCHAR},
      USEAGE = #{useage,jdbcType=TINYINT},
      KEY_DEPT_ID = #{keyDeptId,jdbcType=INTEGER},
      LOG_TYPE = #{logType,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
      BORROW_KEY_TIME = #{borrowKeyTime,jdbcType=TIMESTAMP},
      BORROW_PHONE = #{borrowPhone,jdbcType=VARCHAR},
      CURRENT_DEPOSIT = #{currentDeposit,jdbcType=DECIMAL},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      BORROW_USER = #{borrowUser,jdbcType=VARCHAR},
      MAX_BORROW_TIME = #{maxBorrowTime,jdbcType=TIMESTAMP},
      DEPOSIT_STATUS = #{depositStatus,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      KEY_VOUCHER = #{keyVoucher,jdbcType=VARCHAR},
      [KEY_TYPE] = #{keyType,jdbcType=TINYINT},
      KEY_COUNT = #{keyCount,jdbcType=INTEGER},
      GATHER_TIME = #{gatherTime,jdbcType=TIMESTAMP},
      LEND_COUNT = #{lendCount,jdbcType=INTEGER},
      KEY_PASSWORD = #{keyPassword,jdbcType=VARCHAR}
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="KeyDtoResultMap" type="com.myfun.repository.erpdb.dto.ErpFunKeyDto">

  	 <result column="houseDeptId" jdbcType="INTEGER" property="houseDeptId" />
  	 <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
  	 <result column="BUILD_ID" jdbcType="VARCHAR" property="buildId" />
  	 <result column="room" property="room" />
  	 <result column="wei" property="wei" />
  	 <result column="yang" property="yang" />
  	 <result column="hall" property="hall" />
  	 <result column="floor" property="floor" />
  	 <result column="floors" property="floors" />
  	 <result column="totalPrice" property="totalPrice" />
  	 <result column="useage" property="useage" />
  	 <result column="houseLevel" property="houseLevel" />
  	 <result column="houseStatus" property="houseStatus" />
  	 <result column="houseUserId" property="houseUserId" />
  	 <result column="houseOrganizationId" property="houseOrganizationId" />
  	 <result column="housePlateType" property="housePlateType" />
  </resultMap>
    <resultMap extends="BaseResultMap" id="extResultMap" type="com.myfun.repository.erpdb.dto.ErpFunKeyDto">

    </resultMap>
  <!-- 查询列来源表 -->
	<sql id="QUERY_FROM_TABLE">${baseQuery.tableName}</sql>
	<!-- 所有查询列，可自定义列 -->
	<sql id="QUERY_COLUMN_LIST_OBJ">
		<if test="baseQuery.columns != null and baseQuery.columns.length &gt; 0">
			<foreach collection="baseQuery.columns" item="column" separator=",">
				${column}
			</foreach>
		</if>
		<if test="baseQuery.columns == null or baseQuery.columns.length == 0"><include refid="Base_Column_List" /></if>
	</sql>
	<!-- 更新的条件 -->
	<sql id="CONDITIONS_LIST">
		<if test="baseQuery.conditions != null and baseQuery.conditions.size() &gt; 0">
			<foreach collection="baseQuery.conditions" item="item" separator=" ">
				<if test="item.column == &quot;)&quot; or item.column == &quot;(&quot;">${item.logic} ${item.column}</if>
				<if test="item.column != &quot;)&quot; and item.column != &quot;(&quot; and item.values != null">${item.logic} ${item.column} ${item.add} #{item.values}</if>
				<if test="item.column != &quot;)&quot; and item.column != &quot;(&quot; and item.valuesArr != null">
					${item.logic} ${item.column} ${item.add}
					<foreach close=")" collection="item.valuesArr" item="val" open="(" separator=",">#{val}</foreach>
				</if>
			</foreach>
		</if>
	</sql>
	<!-- 更新自定义列字段 -->
	<sql id="UPDATE_LIST_COLUMN">
		<if test="baseQuery.updateColumns != null baseQuery.and updateColumns.size() &gt; 0">
			<foreach collection="baseQuery.updateColumns" item="item" separator=",">
				<if test="item.logic != null and item.logic != '' and item.column == null">${item.logic}</if>
				<if test="item.add != null and item.add != ''">${item.column} ${item.add} #{item.values}</if>
			</foreach>
		</if>
	</sql>
	<!-- 排序 -->
	<sql id="QUERY_GROUP_ORDER_CONDTION">
		<if test="baseQuery.groupByField != null and baseQuery.groupByField != ''">GROUP BY ${baseQuery.groupByField}</if>
		<if test="baseQuery.orderByField != null and baseQuery.orderByField != ''">ORDER BY ${baseQuery.orderByField}</if>
	</sql>
	<!-- 查询,通过条件 -->
	<select id="selectListByCondition" parameterType="com.myfun.repository.support.mybatis.condition.BaseQuery" resultMap="KeyDtoResultMap">
		SELECT
		<include refid="QUERY_COLUMN_LIST_OBJ" />
		FROM
		<include refid="QUERY_FROM_TABLE" />
		<where>
			<include refid="CONDITIONS_LIST" />
		</where>
		<include refid="QUERY_GROUP_ORDER_CONDTION" />
	</select>
  <select id="selectKey" resultMap="BaseResultMap">
    select top 1 
    <include refid="Base_Column_List" />
    from FUN_KEY
     where COMP_ID = #{conditionModel.compId,jdbcType=INTEGER} and KEY_STATUS != 3
     <if test="conditionModel.keyId != null">
     and KEY_ID = #{conditionModel.keyId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.caseId != null">
     and CASE_ID = #{conditionModel.caseId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.caseType != null">
     and CASE_TYPE = #{conditionModel.caseType,jdbcType=TINYINT}
     </if>
     <if test="conditionModel.deptId != null">
     and DEPT_ID = #{conditionModel.deptId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.trackId != null">
     and TRACK_ID = #{conditionModel.trackId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.keyNum != null">
     and KEY_NUM = #{conditionModel.keyNum,jdbcType=VARCHAR}
     </if>
     <if test="conditionModel.userId != null">
     and USER_ID = #{conditionModel.userId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.creatorTime != null">
     and CREATOR_TIME = #{conditionModel.creatorTime,jdbcType=VARCHAR}
     </if>
     <if test="conditionModel.keyStatus != null">
     and KEY_STATUS = #{conditionModel.keyStatus,jdbcType=TINYINT}
     </if>
     <if test="conditionModel.keyLogId != null">
     and KEY_LOG_ID = #{conditionModel.keyLogId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.caseNo != null">
     and CASE_NO = #{conditionModel.caseNo,jdbcType=VARCHAR}
     </if>
     <if test="conditionModel.useage != null">
     and USE_AGE = #{conditionModel.useage,jdbcType=TINYINT}
     </if>
     <if test="conditionModel.keyDeptId != null">
     and KEY_DEPT_ID = #{conditionModel.keyDeptId,jdbcType=INTEGER}
     </if>
  </select>
  <select id="countFunKey" resultType="java.lang.Integer">
	 select
	 count(*) as attr
	 from FUN_KEY
	 where COMP_ID = #{compId,jdbcType=INTEGER} and KEY_STATUS !=3
     <if test="conditionModel.keyId != null">
     and KEY_ID = #{conditionModel.keyId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.caseId != null">
     and CASE_ID = #{conditionModel.caseId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.caseType != null">
     and CASE_TYPE = #{conditionModel.caseType,jdbcType=TINYINT}
     </if>
     <if test="conditionModel.deptId != null">
     and DEPT_ID = #{conditionModel.deptId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.trackId != null">
     and TRACK_TYPE = #{conditionModel.trackId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.keyNum != null">
     and KEY_NUM = #{conditionModel.keyNum,jdbcType=VARCHAR}
     </if>
     <if test="conditionModel.userId != null">
     and USER_ID = #{conditionModel.userId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.creatorTime != null">
     and CREATOR_TIME = #{conditionModel.creatorTime,jdbcType=VARCHAR}
     </if>
     <if test="conditionModel.keyStatus != null">
     and KEY_STATUS = #{conditionModel.keyStatus,jdbcType=TINYINT}
     </if>
     <if test="conditionModel.keyLogId != null">
     and KEY_LOG_ID = #{conditionModel.keyLogId,jdbcType=INTEGER}
     </if>
     <if test="conditionModel.caseNo != null">
     and CASE_NO = #{conditionModel.caseNo,jdbcType=VARCHAR}
     </if>
     <if test="conditionModel.useage != null">
     and USE_AGE = #{conditionModel.useage,jdbcType=TINYINT}
     </if>
     <if test="conditionModel.keyDeptId != null">
     and KEY_DEPT_ID = #{conditionModel.keyDeptId,jdbcType=INTEGER}
     </if>
  </select>
  <delete id="deleteFunKey" parameterType="java.lang.Integer">
    update FUN_KEY set KEY_STATUS = 3
    where KEY_ID IN
    <foreach close=")" collection="keyIds" item="keyId" open="(" separator=",">
     #{keyId,jdbcType=INTEGER}
    </foreach>
  </delete>
  <select id="getKeyIdsByCondition" resultType="java.lang.Integer">
  	select KEY_ID from fun_key where CASE_ID = #{param.caseId}
  	and CASE_TYPE = #{param.caseType} and COMP_ID = #{param.compId} 
  </select>

	<select id="getMgrSubmitKeyLogList" resultMap="extResultMap">
      select * from (
      SELECT A.* FROM FUN_KEY A
      join FUN_SALE l on A.CASE_ID = l.SALE_ID
      <if test="null != param.grId and '' != param.grId">
        JOIN FUN_USERS B ON B.USER_ID=A.USER_ID AND B.GR_ID=#{param.grId}
      </if>
	  WHERE A.COMP_ID = #{param.compId} AND A.CASE_TYPE = 1
        <if test="null != param.partnerId and '' != param.partnerId">
          AND l.PARTNER_ID = #{param.partnerId}
        </if>
        <if test="param.newOrganizatione and '' != param.organizationId and null != param.organizationId and 0 != param.organizationId">
          AND l.TISSUE_LINE LIKE CONCAT('%:', #{param.organizationId}, ':%')
        </if>
		<if test="null != param.sCaseType and '' != param.sCaseType and 'ALL' != param.sCaseType">
			AND A.CASE_TYPE = #{param.sCaseType}
		</if>
		<if test="null != param.keyStatus and '' != param.keyStatus and 'ALL' != param.keyStatus ">
			AND A.KEY_STATUS = #{param.keyStatus}
		</if>
		<if test="null != param.deptId and '' != param.deptId and 'ALL' != param.deptId ">
			AND A.DEPT_ID = #{param.deptId}
		</if>
		<if test="null != param.cUserId and '' != param.cUserId and 'ALL' != param.cUserId ">
			AND A.USER_ID = #{param.cUserId}
		</if>
		<if test="null != param.houseNo and '' != param.houseNo and 'ALL' != param.houseNo ">
			AND A.CASE_NO like #{param.houseNo}
		</if>
		<if test="((null != param.regId and '' != param.regId) or (null != param.areaId and '' != param.areaId) ) and null != param.deptIds">
			AND A.DEPT_ID = (${param.deptIds})
		</if>
		<if test="null != param.startTime and '' != param.startTime">
			AND A.CREATOR_TIME &gt;=#{param.startTime}
		</if>
		<if test="null != param.endTime and '' != param.endTime">
			AND A.CREATOR_TIME &lt;=#{param.endTime}
		</if>

      union all
      SELECT A.* FROM FUN_KEY A
      join FUN_LEASE l on A.CASE_ID = l.LEASE_ID
      <if test="null != param.grId and '' != param.grId">
        JOIN FUN_USERS B ON B.USER_ID=A.USER_ID AND B.GR_ID=#{param.grId}
      </if>
      WHERE A.COMP_ID = #{param.compId} AND A.CASE_TYPE = 2
      <if test="null != param.partnerId and '' != param.partnerId">
        AND l.PARTNER_ID = #{param.partnerId}
      </if>
      <if test="param.newOrganizatione and '' != param.organizationId and null != param.organizationId and 0 != param.organizationId">
        AND l.TISSUE_LINE LIKE CONCAT('%:', #{param.organizationId}, ':%')
      </if>
      <if test="null != param.sCaseType and '' != param.sCaseType and 'ALL' != param.sCaseType">
        AND A.CASE_TYPE = #{param.sCaseType}
      </if>
      <if test="null != param.keyStatus and '' != param.keyStatus and 'ALL' != param.keyStatus ">
        AND A.KEY_STATUS = #{param.keyStatus}
      </if>
      <if test="null != param.deptId and '' != param.deptId and 'ALL' != param.deptId ">
        AND A.DEPT_ID = #{param.deptId}
      </if>
      <if test="null != param.cUserId and '' != param.cUserId and 'ALL' != param.cUserId ">
        AND A.USER_ID = #{param.cUserId}
      </if>
      <if test="null != param.houseNo and '' != param.houseNo and 'ALL' != param.houseNo ">
        AND A.CASE_NO like #{param.houseNo}
      </if>
      <if test="((null != param.regId and '' != param.regId) or (null != param.areaId and '' != param.areaId) ) and null != param.deptIds">
        AND A.DEPT_ID = (${param.deptIds})
      </if>
      <if test="null != param.startTime and '' != param.startTime">
        AND A.CREATOR_TIME &gt;=#{param.startTime}
      </if>
      <if test="null != param.endTime and '' != param.endTime">
        AND A.CREATOR_TIME &lt;=#{param.endTime}
      </if>
      ) a
		ORDER BY KEY_ID DESC
	</select>

	<select id="getExistNum" resultType="java.lang.String">
		SELECT KEY_NUM FROM FUN_KEY
		where CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and COMP_ID = #{compId}
	</select>

	<select id="getNewNum" resultMap="BaseResultMap">
		SELECT TOP 100
		<include refid="Base_Column_List" />
		FROM FUN_KEY
		WHERE KEY_DEPT_ID = #{keyDeptId} AND COMP_ID = #{compId}
		ORDER BY KEY_NUM ASC
	</select>
	
  <select id="getKeyInfoByKeyNum" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from FUN_KEY
    where KEY_NUM = #{param.keyNum}  and COMP_ID = #{param.compId}
  </select>
  <update id="updateErpFunKey">
    update FUN_KEY
    set  DEPT_ID = #{deptId}
    where CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and COMP_ID =#{compId}
  </update>

	<select id="getErpFunKey" resultMap="BaseResultMap">
		select top 1
		<include refid="Base_Column_List" />
		from FUN_KEY
		where CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and COMP_ID =#{compId} and KEY_STATUS != 3
	</select>

	<select id="getListByCaseId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		FROM FUN_KEY
		WHERE COMP_ID = #{compId}
		AND
		(
			(CASE_ID = #{caseId} and CASE_TYPE = #{caseType})
			<if test="saleLeaseId != null">
				OR (CASE_ID = #{saleLeaseId} and CASE_TYPE = #{saleLeaseType})
			</if>
		)
		AND KEY_STATUS != 3
	</select>
	<update id="updateKeyStatusAndLogId">
		update FUN_KEY
		set KEY_STATUS = #{keyStatus}
		<if test="null != keyLogId and keyLogId != ''">
		,KEY_LOG_ID = #{keyLogId}
		</if>
		where COMP_ID = #{compId} and KEY_ID = #{keyId}
	</update>
	
	<select id="getKeyModel" resultMap="BaseResultMap">
		select
			<include refid="Base_Column_List" />
		FROM FUN_KEY
		WHERE COMP_ID = #{compId} and ((CASE_TYPE = #{caseType} and CASE_ID = #{caseId}) 
		<if test="saleLeaseType != null">
		or (CASE_TYPE = #{saleLeaseType} and CASE_ID = #{saleLeaseId})
		</if>)
	</select>
	<select id="getErpFunKeyById" resultMap="BaseResultMap">
		select
			<include refid="Base_Column_List" />
		FROM FUN_KEY
		WHERE COMP_ID = #{compId} and KEY_ID =#{keyId}
	</select>

  <select id="getKeyNum" resultType="java.lang.String">
    SELECT TOP 1 a.key_num
    FROM KEY_NUM_TEMPLATE a
    LEFT JOIN dbo.FUN_KEY b ON
    <choose>
      <when test="null ==userId">
        #{deptNo}+a.key_num=b.KEY_NUM AND b.comp_id=#{compId} AND KEY_DEPT_ID=#{deptId}
      </when>
      <otherwise>
        a.key_num=b.KEY_NUM AND b.USER_ID=#{userId} AND b.comp_id=#{compId}
      </otherwise>
    </choose>
    WHERE b.KEY_ID is null
    ORDER BY a.id asc
  </select>
	
	<select id="getKeyDetailDto" resultType="com.myfun.erpWeb.house.vo.FunKeyDetailDto">
      SELECT TOP 1
      A.KEY_ID keyId, A.KEY_VOUCHER keyVoucher, A.KEY_STATUS keyStatus,KEY_NUM keyNum,A.KEY_DEPT_ID keyDeptId,A.LOG_TYPE logType,
      C.USER_NAME userName ,C.USER_MOBILE userMobile,B.ORGANIZATION_NAME deptName,A.KEY_LOG_ID keyLogId
      FROM FUN_KEY A
      LEFT JOIN FUN_ORGANIZATION B ON A.KEY_DEPT_ID=B.ORGANIZATION_ID
      JOIN FUN_USERS C ON A.USER_ID=C.USER_ID
      WHERE A.COMP_ID=#{compId} AND A.KEY_STATUS != 3
      <choose>
        <when test="null !=saleLeaseId">
          AND ( (A.CASE_ID=#{caseId} and A.CASE_TYPE=#{caseType}) OR (A.CASE_ID=#{saleLeaseId} AND A.CASE_TYPE=#{saleLeaseType} ) )
        </when>
        <otherwise>
          AND A.CASE_ID=#{caseId} AND A.CASE_TYPE=#{caseType}
        </otherwise>
      </choose>
      ORDER BY CREATOR_TIME DESC
	</select>
	<select id="getKeyDetailDtoNewOrg" resultType="com.myfun.erpWeb.house.vo.FunKeyDetailDto">
		SELECT TOP 1
		A.KEY_ID keyId, A.KEY_VOUCHER keyVoucher, A.KEY_STATUS keyStatus,KEY_NUM keyNum,A.KEY_DEPT_ID keyDeptId,A.LOG_TYPE logType,A.KEY_TYPE keyType, A.KEY_COUNT keyCount, A.GATHER_TIME gatherTime, A.LEND_COUNT lendCount, A.KEY_PASSWORD keyPassword, A.USER_ID userId,
		C.USER_NAME userName ,C.USER_MOBILE userMobile,B.ORGANIZATION_NAME deptName,A.KEY_LOG_ID keyLogId
		FROM FUN_KEY A
		LEFT JOIN FUN_ORGANIZATION B ON A.KEY_DEPT_ID=B.ORGANIZATION_ID
		JOIN FUN_USERS C ON A.USER_ID=C.USER_ID
		WHERE A.COMP_ID=#{compId} AND A.KEY_STATUS != 3
		<choose>
			<when test="null !=saleLeaseId">
				AND ( (A.CASE_ID=#{caseId} and A.CASE_TYPE=#{caseType}) OR (A.CASE_ID=#{saleLeaseId} AND A.CASE_TYPE=#{saleLeaseType} ) )
			</when>
			<otherwise>
				AND A.CASE_ID=#{caseId} AND A.CASE_TYPE=#{caseType}
			</otherwise>
		</choose>
      ORDER BY CREATOR_TIME DESC
	</select>
	
	<select id="getFunKeyListByTrackIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		FROM FUN_KEY
		WHERE COMP_ID = #{compId} and TRACK_ID IN
		<foreach close=")" collection="trackIds" index="index" item="trackId" open="(" separator=",">
			#{trackId}
		</foreach>
		AND KEY_STATUS != 3
	</select>
    <select id="countCroupeByUserId" resultType="java.util.Map">
      select C.userId AS userId, SUM(ISNULL(C.keyMoney,0)) as money, SUM(ISNULL(C.count,0)) AS count, C.priceUnit as priceUnit, SUM(ISNULL(C.area,0)) as area from
     (
      select A.USER_ID as userId, SUM(ISNULL(B.SALE_TOTAL_PRICE,0))*#{rate}*#{cityRate} as keyMoney, COUNT(A.USER_ID) AS count, null as priceUnit, null as area
      from FUN_KEY AS A  left join  FUN_SALE B ON A.CASE_ID = B.SALE_ID  WHERE A.USER_ID IN
      (select USER_ID from FUN_USERS where
      COMP_ID  = #{compId}
      <if test="organizationId != null">
        and TISSUE_LINE like '%:${organizationId}:%'
      </if>
      <if test="position != null">
        and USER_POSITION = #{position}
      </if>
      <if test="userId != null">
        and USER_ID = #{userId}
      </if>
      )
      AND A.KEY_STATUS &lt;&gt; 3
      AND A.CASE_TYPE = 1
      AND B.SALE_STATUS NOT IN (5,6,7)
      GROUP BY A.USER_ID
      UNION ALL
      select A.USER_ID as userId, SUM(ISNULL(B.LEASE_TOTAL_PRICE,0))*#{rate}/100 as keyMoney, COUNT(A.USER_ID) AS count, ISNULL(B.PRICE_UNIT,1) as priceUnit, SUM(ISNULL(B.LEASE_AREA,0)) as area
      from FUN_KEY AS A  left join  FUN_LEASE B ON A.CASE_ID = B.LEASE_ID  WHERE A.USER_ID IN
      (select USER_ID from FUN_USERS where
      COMP_ID  = #{compId}
      <if test="organizationId != null">
        and TISSUE_LINE like '%:${organizationId}:%'
      </if>
      <if test="position != null">
        and USER_POSITION = #{position}
      </if>
      <if test="position != null">
        and USER_ID = #{userId}
      </if>
      )
      AND A.KEY_STATUS &lt;&gt; 3
      AND A.CASE_TYPE = 2
      AND B.LEASE_STATUS NOT IN (5,6,7)
      GROUP BY A.USER_ID, B.PRICE_UNIT
      ) AS C GROUP BY C.userId, C.priceUnit
    </select>
</mapper>