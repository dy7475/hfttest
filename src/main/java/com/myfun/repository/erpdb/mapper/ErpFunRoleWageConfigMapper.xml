<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunRoleWageConfigMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunRoleWageConfig">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="BASE_WAGE" jdbcType="NUMERIC" property="baseWage" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="ROLE_ID" jdbcType="VARCHAR" property="roleId" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="MANAGE_LEVEL" jdbcType="TINYINT" property="manageLevel" />
    <result column="CREATE_UID" jdbcType="INTEGER" property="createUid" />
    <result column="IS_CHECK" jdbcType="TINYINT" property="isCheck" />
    <result column="ASSESSMENT_MONTH" jdbcType="VARCHAR" property="assessmentMonth" />
    <result column="ROLE_LEVEL_ID" jdbcType="INTEGER" property="roleLevelId" />
    <result column="DATA_WAGE" jdbcType="NUMERIC" property="dataWage" />
    <result column="SALES_WAGE" jdbcType="NUMERIC" property="salesWage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, BASE_WAGE, COMP_ID, CREATE_TIME, ROLE_ID, UPDATE_TIME, MANAGE_LEVEL, CREATE_UID, 
    IS_CHECK, ASSESSMENT_MONTH, ROLE_LEVEL_ID, DATA_WAGE, SALES_WAGE
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfigExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_ROLE_WAGE_CONFIG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_ROLE_WAGE_CONFIG
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_ROLE_WAGE_CONFIG
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfigExample">
    <!--@mbggenerated-->
    delete from FUN_ROLE_WAGE_CONFIG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfig" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_ROLE_WAGE_CONFIG (BASE_WAGE, COMP_ID, CREATE_TIME, 
      ROLE_ID, UPDATE_TIME, MANAGE_LEVEL, 
      CREATE_UID, IS_CHECK, ASSESSMENT_MONTH, 
      ROLE_LEVEL_ID, DATA_WAGE, SALES_WAGE
      )
    values (#{baseWage,jdbcType=NUMERIC}, #{compId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{roleId,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{manageLevel,jdbcType=TINYINT}, 
      #{createUid,jdbcType=INTEGER}, #{isCheck,jdbcType=TINYINT}, #{assessmentMonth,jdbcType=VARCHAR}, 
      #{roleLevelId,jdbcType=INTEGER}, #{dataWage,jdbcType=NUMERIC}, #{salesWage,jdbcType=NUMERIC}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfig" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_ROLE_WAGE_CONFIG
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="baseWage != null">
        BASE_WAGE,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="roleId != null">
        ROLE_ID,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="manageLevel != null">
        MANAGE_LEVEL,
      </if>
      <if test="createUid != null">
        CREATE_UID,
      </if>
      <if test="isCheck != null">
        IS_CHECK,
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
      <if test="roleLevelId != null">
        ROLE_LEVEL_ID,
      </if>
      <if test="dataWage != null">
        DATA_WAGE,
      </if>
      <if test="salesWage != null">
        SALES_WAGE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="baseWage != null">
        #{baseWage,jdbcType=NUMERIC},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="manageLevel != null">
        #{manageLevel,jdbcType=TINYINT},
      </if>
      <if test="createUid != null">
        #{createUid,jdbcType=INTEGER},
      </if>
      <if test="isCheck != null">
        #{isCheck,jdbcType=TINYINT},
      </if>
      <if test="assessmentMonth != null">
        #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="roleLevelId != null">
        #{roleLevelId,jdbcType=INTEGER},
      </if>
      <if test="dataWage != null">
        #{dataWage,jdbcType=NUMERIC},
      </if>
      <if test="salesWage != null">
        #{salesWage,jdbcType=NUMERIC},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfigExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_ROLE_WAGE_CONFIG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_CONFIG
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.baseWage != null">
        BASE_WAGE = #{record.baseWage,jdbcType=NUMERIC},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.roleId != null">
        ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.manageLevel != null">
        MANAGE_LEVEL = #{record.manageLevel,jdbcType=TINYINT},
      </if>
      <if test="record.createUid != null">
        CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      </if>
      <if test="record.isCheck != null">
        IS_CHECK = #{record.isCheck,jdbcType=TINYINT},
      </if>
      <if test="record.assessmentMonth != null">
        ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.roleLevelId != null">
        ROLE_LEVEL_ID = #{record.roleLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.dataWage != null">
        DATA_WAGE = #{record.dataWage,jdbcType=NUMERIC},
      </if>
      <if test="record.salesWage != null">
        SALES_WAGE = #{record.salesWage,jdbcType=NUMERIC},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_CONFIG
    set ID = #{record.id,jdbcType=INTEGER},
      BASE_WAGE = #{record.baseWage,jdbcType=NUMERIC},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      MANAGE_LEVEL = #{record.manageLevel,jdbcType=TINYINT},
      CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      IS_CHECK = #{record.isCheck,jdbcType=TINYINT},
      ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      ROLE_LEVEL_ID = #{record.roleLevelId,jdbcType=INTEGER},
      DATA_WAGE = #{record.dataWage,jdbcType=NUMERIC},
      SALES_WAGE = #{record.salesWage,jdbcType=NUMERIC}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfig">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_CONFIG
    <set>
      <if test="baseWage != null">
        BASE_WAGE = #{baseWage,jdbcType=NUMERIC},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roleId != null">
        ROLE_ID = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="manageLevel != null">
        MANAGE_LEVEL = #{manageLevel,jdbcType=TINYINT},
      </if>
      <if test="createUid != null">
        CREATE_UID = #{createUid,jdbcType=INTEGER},
      </if>
      <if test="isCheck != null">
        IS_CHECK = #{isCheck,jdbcType=TINYINT},
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="roleLevelId != null">
        ROLE_LEVEL_ID = #{roleLevelId,jdbcType=INTEGER},
      </if>
      <if test="dataWage != null">
        DATA_WAGE = #{dataWage,jdbcType=NUMERIC},
      </if>
      <if test="salesWage != null">
        SALES_WAGE = #{salesWage,jdbcType=NUMERIC},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunRoleWageConfig">
    <!--@mbggenerated-->
    update FUN_ROLE_WAGE_CONFIG
    set BASE_WAGE = #{baseWage,jdbcType=NUMERIC},
      COMP_ID = #{compId,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      ROLE_ID = #{roleId,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      MANAGE_LEVEL = #{manageLevel,jdbcType=TINYINT},
      CREATE_UID = #{createUid,jdbcType=INTEGER},
      IS_CHECK = #{isCheck,jdbcType=TINYINT},
      ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      ROLE_LEVEL_ID = #{roleLevelId,jdbcType=INTEGER},
      DATA_WAGE = #{dataWage,jdbcType=NUMERIC},
      SALES_WAGE = #{salesWage,jdbcType=NUMERIC}
    where ID = #{id,jdbcType=INTEGER}
  </update>


  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunRoleWageConfigDto">
  </resultMap>
  <select id="getRoleWageConfig" resultMap="extBaseResultMap">
      select top 1 <include refid="Base_Column_List" /> from FUN_ROLE_WAGE_CONFIG
      where COMP_ID = #{compId} 
	      and ASSESSMENT_MONTH = #{assessMentMonth} 
	      and ROLE_ID = #{roleId} 
	      and IS_CHECK = 1 
	      <if test="roleLevelId != null and roleLevelId &gt; 0">
	      	and ROLE_LEVEL_ID = #{roleLevelId}
	      </if>
	      <if test="roleLevelId == null or roleLevelId == 0">
	      	and ROLE_LEVEL_ID = 0
	      </if>
			order by id desc
  </select>

  <update id="updateBaseWageById">
      update FUN_ROLE_WAGE_CONFIG set BASE_WAGE=#{param.baseWage}, UPDATE_TIME = GETDATE() where id=#{param.id}
  </update>

  <select id="getRoleWageConfigList" resultMap="BaseResultMap">
      SELECT <include refid="Base_Column_List" /> from FUN_ROLE_WAGE_CONFIG
      WHERE COMP_ID=#{compId} and CREATE_TIME &gt;= #{startTime} and CREATE_TIME &lt; #{endTime} and
    ROLE_ID in <foreach close=")" collection="userRoles" item="roleId" open="(" separator=",">
        #{roleId} and IS_CHECK=1
  </foreach>
  </select>
  <select id="countRelativeThisMonth" resultType="java.lang.Integer">
      select count(b.id) from ROLE_WAGETYPE_RELATIVE a
      join FUN_ROLE_WAGE_CONFIG b on a.SALARY_TYPE_ID = b.ID and b.ASSESSMENT_MONTH=#{assessMentMonth} and a.COMP_ID = b.COMP_ID and b.IS_CHECK=1
      where (a.FINANCE_ID = #{wageTypeId} or TRANSFER_ID= #{wageTypeId}  or TOTAL_ID= #{wageTypeId}  or SECONDHAND_ID= #{wageTypeId}
      or LEASE_ID= #{wageTypeId}   OR NEWHOUSE_ID=#{wageTypeId} ) and a.comp_id=#{compId} and a.is_check=1

  </select>
  <select id="selectFunRoleWageConfigListByRoleIdList" resultMap="BaseResultMap">
     SELECT <include refid="Base_Column_List" />
        FROM FUN_ROLE_WAGE_CONFIG WHERE COMP_ID = #{compId} and IS_CHECK = #{isCheck} and ASSESSMENT_MONTH = #{month}  and ROLE_LEVEL_ID = 0 
        and   ROLE_ID in
       <foreach close=")" collection="roleIds" index="index" item="roleId" open="(" separator=",">
               #{roleId}
       </foreach>
        order by ID
  </select>
  
  <select id="getCompRoleWageInfo" resultType="com.myfun.erpWeb.managecenter.sysmanager.vo.GetCompRoleWageInfoVo">
  	SELECT B.ROLE_ID roleId,B.BASE_WAGE baseWage,
  	(select SUM(AMOUNT_LIMIT) from FUN_ROLE_WAGE_WORKCOUNT where ROLE_WAGE_CONFIG_ID = B.ID and IS_CHECK = 1 AND CHECK_TYPE = 1  AND COMP_ID = A.COMP_ID)  dataWage,
  	(select MAX(QUOTA_AMOUNT) from FUN_ROLE_WAGE_PROFIT where ROLE_WAGE_CONFIG_ID = B.ID and IS_CHECK = 1 AND CHECK_TYPE = 1 AND COMP_ID = A.COMP_ID) salesWage
  	FROM COMP_ROLES A 
		LEFT JOIN FUN_ROLE_WAGE_CONFIG B ON B.ROLE_ID = A.ROLE_ID AND A.COMP_ID = B.COMP_ID 
		WHERE B.IS_CHECK = 1 AND A.COMP_ID = #{compId} AND B.ASSESSMENT_MONTH = #{assessmentMonth}
  </select>
  
  <select id="getCompRoleCountWage" resultType="com.myfun.erpWeb.managecenter.sysmanager.vo.GetCompRoleCountWageVo">
  	SELECT D.MIN_VALUE minValue,D.MAX_VALUE maxValue,D.PRO pro,A.ROLE_ID roleId FROM FUN_ROLE_WAGE_CONFIG A 
			JOIN ROLE_WAGETYPE_RELATIVE B ON A.ID = B.SALARY_TYPE_ID AND B.COUNT_TYPE = 0 AND B.IS_CHECK = 1
			JOIN FUN_WAGE_TYPE_NEW C ON B.ID = C.ROLE_WAGETYPE_RELATIVE_ID  AND C.IS_CHECK = 1
			JOIN FUN_COUNTWAGE D ON C.ID = D.WAGETYPE_ID AND D.MIN_VALUE = 0.00
		WHERE A.IS_CHECK = 1 AND ((B.ROYALTY_TYPE = 1 AND C.PERFORMANCE_TYPE = 2) OR (B.ROYALTY_TYPE = 2 AND C.PERFORMANCE_TYPE = 7))
		AND A.COMP_ID = #{compId} AND A.ASSESSMENT_MONTH = #{assessmentMonth}
  </select>
  
  
 	<resultMap id="BaseRoleWagetypeInfo" type="com.myfun.repository.erpdb.dto.ErpCountWageTypeDto">
	    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
	    <result column="WAGETYPE_RELATIVE_ID" jdbcType="NUMERIC" property="wagetypeRelativeId" />
	</resultMap>
	<select id="queryRoleWagetypeInfo" resultMap="BaseRoleWagetypeInfo">
	  	select USER_ID, max(c.ID) as WAGETYPE_RELATIVE_ID from ROLE_WAGETYPE_RELATIVE c join (
			select USER_ID, max(a.ID) wageConfigId from FUN_ROLE_WAGE_CONFIG a
				join SALARY_TYPE_RELATIVE b on a.ID = b.SALARY_TYPE_ID 
				where ASSESSMENT_MONTH = #{assessmentMonth} and a.COMP_ID = #{compId} and b.DEL_FLAG = 0 group by b.USER_ID
			) tmp on c.SALARY_TYPE_ID = tmp.wageConfigId where c.IS_CHECK = 1 and c.COUNT_TYPE = 0 group by tmp.USER_ID
	</select>
	
	<select id="selectRoleWageConfigByUserId" resultMap="BaseResultMap">
      select top 1 a.* from FUN_ROLE_WAGE_CONFIG a
      join SALARY_TYPE_RELATIVE b on a.ID = b.SALARY_TYPE_ID
      where ASSESSMENT_MONTH = #{assessMentMonth} and a.COMP_ID = #{compId} and b.USER_ID = #{userId} and b.DEL_FLAG = 0 
      order by b.CREATION_TIME DESC
  </select>
  <select id="getRoleWageMaxPro" resultType="java.math.BigDecimal">
    SELECT MAX(PRO) pro FROM FUN_ROLE_WAGE_CONFIG A
    JOIN ROLE_WAGETYPE_RELATIVE B ON A.ID = B.SALARY_TYPE_ID AND B.COUNT_TYPE = 0 AND B.IS_CHECK = 1
    JOIN FUN_WAGE_TYPE_NEW C ON B.ID = C.ROLE_WAGETYPE_RELATIVE_ID  AND C.IS_CHECK = 1
    JOIN FUN_COUNTWAGE D ON C.ID = D.WAGETYPE_ID
	WHERE A.IS_CHECK = 1 AND ((B.ROYALTY_TYPE = 1 AND C.PERFORMANCE_TYPE = 2) OR (B.ROYALTY_TYPE = 2 AND C.PERFORMANCE_TYPE = 7))
	AND A.COMP_ID = #{compId} AND A.ASSESSMENT_MONTH = #{assessmentMonth} AND A.ROLE_ID = #{userPosition}
 	GROUP BY A.ROLE_ID,C.WAGE_COUNT_TYPE
  </select>
</mapper>