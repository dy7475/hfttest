<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunProfitMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunProfit">
    <!--@mbggenerated-->
    <id column="PROFIT_ID" jdbcType="INTEGER" property="profitId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEAL_ID" jdbcType="INTEGER" property="dealId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="PROFIT_PROPORTION" jdbcType="NUMERIC" property="profitProportion" />
    <result column="PROFIT_MONEY" jdbcType="NUMERIC" property="profitMoney" />
    <result column="SETTLE_TIME" jdbcType="VARCHAR" property="settleTime" />
    <result column="SETTLE_FLAG" jdbcType="INTEGER" property="settleFlag" />
    <result column="REMARK" jdbcType="VARCHAR" property="remark" />
    <result column="AGREEMENT_NO" jdbcType="VARCHAR" property="agreementNo" />
    <result column="CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="DEAL_VERIFY_TIME" jdbcType="TIMESTAMP" property="dealVerifyTime" />
    <result column="DEAL_TYPE" jdbcType="TINYINT" property="dealType" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="PROFIT_DEAL_TYPE" jdbcType="TINYINT" property="profitDealType" />
    <result column="PERFORMANCE_ID" jdbcType="INTEGER" property="performanceId" />
    <result column="PERFORMANCE_NAME" jdbcType="VARCHAR" property="performanceName" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="PROFIT_TYPE" jdbcType="TINYINT" property="profitType" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="ROLE_ID" jdbcType="VARCHAR" property="roleId" />
    <result column="ROLE_NAME" jdbcType="VARCHAR" property="roleName" />
    <result column="LEVELS_ID" jdbcType="INTEGER" property="levelsId" />
    <result column="LEVELS_NAME" jdbcType="VARCHAR" property="levelsName" />
    <result column="RECEIVABLE_MONEY" jdbcType="NUMERIC" property="receivableMoney" />
    <result column="PERFORMANCE_TYPE" jdbcType="TINYINT" property="performanceType" />
    <result column="DISCOUNT" jdbcType="NUMERIC" property="discount" />
    <result column="ASSESSMENT_MONTH" jdbcType="VARCHAR" property="assessmentMonth" />
    <result column="VALID_FLAG" jdbcType="INTEGER" property="validFlag" />
    <result column="ORGANIZATION_PATH" jdbcType="VARCHAR" property="organizationPath" />
    <result column="ORG_1" jdbcType="INTEGER" property="org1" />
    <result column="ORG_2" jdbcType="INTEGER" property="org2" />
    <result column="ORG_3" jdbcType="INTEGER" property="org3" />
    <result column="ORG_4" jdbcType="INTEGER" property="org4" />
    <result column="ORG_5" jdbcType="INTEGER" property="org5" />
    <result column="ORG_6" jdbcType="INTEGER" property="org6" />
    <result column="ORG_7" jdbcType="INTEGER" property="org7" />
    <result column="ORG_8" jdbcType="INTEGER" property="org8" />
    <result column="ORG_9" jdbcType="INTEGER" property="org9" />
    <result column="ORG_10" jdbcType="INTEGER" property="org10" />
    <result column="ORG_11" jdbcType="INTEGER" property="org11" />
    <result column="ORG_12" jdbcType="INTEGER" property="org12" />
    <result column="ORG_13" jdbcType="INTEGER" property="org13" />
    <result column="ORG_14" jdbcType="INTEGER" property="org14" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    PROFIT_ID, COMP_ID, DEAL_ID, DEPT_ID, USER_ID, PROFIT_PROPORTION, PROFIT_MONEY, SETTLE_TIME, 
    SETTLE_FLAG, REMARK, AGREEMENT_NO, CREATE_DATE, DEAL_VERIFY_TIME, DEAL_TYPE, AREA_ID, 
    REG_ID, PROFIT_DEAL_TYPE, PERFORMANCE_ID, PERFORMANCE_NAME, GR_ID, PROFIT_TYPE, ARCHIVE_ID, 
    ROLE_ID, ROLE_NAME, LEVELS_ID, LEVELS_NAME, RECEIVABLE_MONEY, PERFORMANCE_TYPE, DISCOUNT, 
    ASSESSMENT_MONTH, VALID_FLAG, ORGANIZATION_PATH, ORG_1, ORG_2, ORG_3, ORG_4, ORG_5, 
    ORG_6, ORG_7, ORG_8, ORG_9, ORG_10, ORG_11, ORG_12, ORG_13, ORG_14
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunProfitExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_PROFIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_PROFIT
    where PROFIT_ID = #{profitId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_PROFIT
    where PROFIT_ID = #{profitId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunProfitExample">
    <!--@mbggenerated-->
    delete from FUN_PROFIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunProfit">
    <!--@mbggenerated-->
    <selectKey keyProperty="profitId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_PROFIT_PROFIT_ID
    </selectKey>
    insert into FUN_PROFIT (PROFIT_ID, COMP_ID, DEAL_ID, 
      DEPT_ID, USER_ID, PROFIT_PROPORTION, 
      PROFIT_MONEY, SETTLE_TIME, SETTLE_FLAG, 
      REMARK, AGREEMENT_NO, CREATE_DATE, 
      DEAL_VERIFY_TIME, DEAL_TYPE, AREA_ID, 
      REG_ID, PROFIT_DEAL_TYPE, PERFORMANCE_ID, 
      PERFORMANCE_NAME, GR_ID, PROFIT_TYPE, 
      ARCHIVE_ID, ROLE_ID, ROLE_NAME, 
      LEVELS_ID, LEVELS_NAME, RECEIVABLE_MONEY, 
      PERFORMANCE_TYPE, DISCOUNT, ASSESSMENT_MONTH, 
      VALID_FLAG, ORGANIZATION_PATH, ORG_1, 
      ORG_2, ORG_3, ORG_4, ORG_5, 
      ORG_6, ORG_7, ORG_8, ORG_9, 
      ORG_10, ORG_11, ORG_12, 
      ORG_13, ORG_14)
    values (#{profitId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{dealId,jdbcType=INTEGER}, 
      #{deptId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{profitProportion,jdbcType=NUMERIC}, 
      #{profitMoney,jdbcType=NUMERIC}, #{settleTime,jdbcType=VARCHAR}, #{settleFlag,jdbcType=INTEGER}, 
      #{remark,jdbcType=VARCHAR}, #{agreementNo,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{dealVerifyTime,jdbcType=TIMESTAMP}, #{dealType,jdbcType=TINYINT}, #{areaId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{profitDealType,jdbcType=TINYINT}, #{performanceId,jdbcType=INTEGER}, 
      #{performanceName,jdbcType=VARCHAR}, #{grId,jdbcType=INTEGER}, #{profitType,jdbcType=TINYINT}, 
      #{archiveId,jdbcType=INTEGER}, #{roleId,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, 
      #{levelsId,jdbcType=INTEGER}, #{levelsName,jdbcType=VARCHAR}, #{receivableMoney,jdbcType=NUMERIC}, 
      #{performanceType,jdbcType=TINYINT}, #{discount,jdbcType=NUMERIC}, #{assessmentMonth,jdbcType=VARCHAR}, 
      #{validFlag,jdbcType=INTEGER}, #{organizationPath,jdbcType=VARCHAR}, #{org1,jdbcType=INTEGER}, 
      #{org2,jdbcType=INTEGER}, #{org3,jdbcType=INTEGER}, #{org4,jdbcType=INTEGER}, #{org5,jdbcType=INTEGER}, 
      #{org6,jdbcType=INTEGER}, #{org7,jdbcType=INTEGER}, #{org8,jdbcType=INTEGER}, #{org9,jdbcType=INTEGER}, 
      #{org10,jdbcType=INTEGER}, #{org11,jdbcType=INTEGER}, #{org12,jdbcType=INTEGER}, 
      #{org13,jdbcType=INTEGER}, #{org14,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunProfit">
    <!--@mbggenerated-->
    <selectKey keyProperty="profitId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_PROFIT_PROFIT_ID
    </selectKey>
    insert into FUN_PROFIT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      PROFIT_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="dealId != null">
        DEAL_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="profitProportion != null">
        PROFIT_PROPORTION,
      </if>
      <if test="profitMoney != null">
        PROFIT_MONEY,
      </if>
      <if test="settleTime != null">
        SETTLE_TIME,
      </if>
      <if test="settleFlag != null">
        SETTLE_FLAG,
      </if>
      <if test="remark != null">
        REMARK,
      </if>
      <if test="agreementNo != null">
        AGREEMENT_NO,
      </if>
      <if test="createDate != null">
        CREATE_DATE,
      </if>
      <if test="dealVerifyTime != null">
        DEAL_VERIFY_TIME,
      </if>
      <if test="dealType != null">
        DEAL_TYPE,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="profitDealType != null">
        PROFIT_DEAL_TYPE,
      </if>
      <if test="performanceId != null">
        PERFORMANCE_ID,
      </if>
      <if test="performanceName != null">
        PERFORMANCE_NAME,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="profitType != null">
        PROFIT_TYPE,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="roleId != null">
        ROLE_ID,
      </if>
      <if test="roleName != null">
        ROLE_NAME,
      </if>
      <if test="levelsId != null">
        LEVELS_ID,
      </if>
      <if test="levelsName != null">
        LEVELS_NAME,
      </if>
      <if test="receivableMoney != null">
        RECEIVABLE_MONEY,
      </if>
      <if test="performanceType != null">
        PERFORMANCE_TYPE,
      </if>
      <if test="discount != null">
        DISCOUNT,
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
      <if test="validFlag != null">
        VALID_FLAG,
      </if>
      <if test="organizationPath != null">
        ORGANIZATION_PATH,
      </if>
      <if test="org1 != null">
        ORG_1,
      </if>
      <if test="org2 != null">
        ORG_2,
      </if>
      <if test="org3 != null">
        ORG_3,
      </if>
      <if test="org4 != null">
        ORG_4,
      </if>
      <if test="org5 != null">
        ORG_5,
      </if>
      <if test="org6 != null">
        ORG_6,
      </if>
      <if test="org7 != null">
        ORG_7,
      </if>
      <if test="org8 != null">
        ORG_8,
      </if>
      <if test="org9 != null">
        ORG_9,
      </if>
      <if test="org10 != null">
        ORG_10,
      </if>
      <if test="org11 != null">
        ORG_11,
      </if>
      <if test="org12 != null">
        ORG_12,
      </if>
      <if test="org13 != null">
        ORG_13,
      </if>
      <if test="org14 != null">
        ORG_14,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{profitId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="dealId != null">
        #{dealId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="profitProportion != null">
        #{profitProportion,jdbcType=NUMERIC},
      </if>
      <if test="profitMoney != null">
        #{profitMoney,jdbcType=NUMERIC},
      </if>
      <if test="settleTime != null">
        #{settleTime,jdbcType=VARCHAR},
      </if>
      <if test="settleFlag != null">
        #{settleFlag,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="agreementNo != null">
        #{agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="dealVerifyTime != null">
        #{dealVerifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealType != null">
        #{dealType,jdbcType=TINYINT},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="profitDealType != null">
        #{profitDealType,jdbcType=TINYINT},
      </if>
      <if test="performanceId != null">
        #{performanceId,jdbcType=INTEGER},
      </if>
      <if test="performanceName != null">
        #{performanceName,jdbcType=VARCHAR},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="profitType != null">
        #{profitType,jdbcType=TINYINT},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="levelsId != null">
        #{levelsId,jdbcType=INTEGER},
      </if>
      <if test="levelsName != null">
        #{levelsName,jdbcType=VARCHAR},
      </if>
      <if test="receivableMoney != null">
        #{receivableMoney,jdbcType=NUMERIC},
      </if>
      <if test="performanceType != null">
        #{performanceType,jdbcType=TINYINT},
      </if>
      <if test="discount != null">
        #{discount,jdbcType=NUMERIC},
      </if>
      <if test="assessmentMonth != null">
        #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="validFlag != null">
        #{validFlag,jdbcType=INTEGER},
      </if>
      <if test="organizationPath != null">
        #{organizationPath,jdbcType=VARCHAR},
      </if>
      <if test="org1 != null">
        #{org1,jdbcType=INTEGER},
      </if>
      <if test="org2 != null">
        #{org2,jdbcType=INTEGER},
      </if>
      <if test="org3 != null">
        #{org3,jdbcType=INTEGER},
      </if>
      <if test="org4 != null">
        #{org4,jdbcType=INTEGER},
      </if>
      <if test="org5 != null">
        #{org5,jdbcType=INTEGER},
      </if>
      <if test="org6 != null">
        #{org6,jdbcType=INTEGER},
      </if>
      <if test="org7 != null">
        #{org7,jdbcType=INTEGER},
      </if>
      <if test="org8 != null">
        #{org8,jdbcType=INTEGER},
      </if>
      <if test="org9 != null">
        #{org9,jdbcType=INTEGER},
      </if>
      <if test="org10 != null">
        #{org10,jdbcType=INTEGER},
      </if>
      <if test="org11 != null">
        #{org11,jdbcType=INTEGER},
      </if>
      <if test="org12 != null">
        #{org12,jdbcType=INTEGER},
      </if>
      <if test="org13 != null">
        #{org13,jdbcType=INTEGER},
      </if>
      <if test="org14 != null">
        #{org14,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunProfitExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_PROFIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_PROFIT
    <set>
      <if test="record.profitId != null">
        PROFIT_ID = #{record.profitId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.dealId != null">
        DEAL_ID = #{record.dealId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.profitProportion != null">
        PROFIT_PROPORTION = #{record.profitProportion,jdbcType=NUMERIC},
      </if>
      <if test="record.profitMoney != null">
        PROFIT_MONEY = #{record.profitMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.settleTime != null">
        SETTLE_TIME = #{record.settleTime,jdbcType=VARCHAR},
      </if>
      <if test="record.settleFlag != null">
        SETTLE_FLAG = #{record.settleFlag,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        REMARK = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.agreementNo != null">
        AGREEMENT_NO = #{record.agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dealVerifyTime != null">
        DEAL_VERIFY_TIME = #{record.dealVerifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dealType != null">
        DEAL_TYPE = #{record.dealType,jdbcType=TINYINT},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.profitDealType != null">
        PROFIT_DEAL_TYPE = #{record.profitDealType,jdbcType=TINYINT},
      </if>
      <if test="record.performanceId != null">
        PERFORMANCE_ID = #{record.performanceId,jdbcType=INTEGER},
      </if>
      <if test="record.performanceName != null">
        PERFORMANCE_NAME = #{record.performanceName,jdbcType=VARCHAR},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.profitType != null">
        PROFIT_TYPE = #{record.profitType,jdbcType=TINYINT},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null">
        ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      </if>
      <if test="record.roleName != null">
        ROLE_NAME = #{record.roleName,jdbcType=VARCHAR},
      </if>
      <if test="record.levelsId != null">
        LEVELS_ID = #{record.levelsId,jdbcType=INTEGER},
      </if>
      <if test="record.levelsName != null">
        LEVELS_NAME = #{record.levelsName,jdbcType=VARCHAR},
      </if>
      <if test="record.receivableMoney != null">
        RECEIVABLE_MONEY = #{record.receivableMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.performanceType != null">
        PERFORMANCE_TYPE = #{record.performanceType,jdbcType=TINYINT},
      </if>
      <if test="record.discount != null">
        DISCOUNT = #{record.discount,jdbcType=NUMERIC},
      </if>
      <if test="record.assessmentMonth != null">
        ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.validFlag != null">
        VALID_FLAG = #{record.validFlag,jdbcType=INTEGER},
      </if>
      <if test="record.organizationPath != null">
        ORGANIZATION_PATH = #{record.organizationPath,jdbcType=VARCHAR},
      </if>
      <if test="record.org1 != null">
        ORG_1 = #{record.org1,jdbcType=INTEGER},
      </if>
      <if test="record.org2 != null">
        ORG_2 = #{record.org2,jdbcType=INTEGER},
      </if>
      <if test="record.org3 != null">
        ORG_3 = #{record.org3,jdbcType=INTEGER},
      </if>
      <if test="record.org4 != null">
        ORG_4 = #{record.org4,jdbcType=INTEGER},
      </if>
      <if test="record.org5 != null">
        ORG_5 = #{record.org5,jdbcType=INTEGER},
      </if>
      <if test="record.org6 != null">
        ORG_6 = #{record.org6,jdbcType=INTEGER},
      </if>
      <if test="record.org7 != null">
        ORG_7 = #{record.org7,jdbcType=INTEGER},
      </if>
      <if test="record.org8 != null">
        ORG_8 = #{record.org8,jdbcType=INTEGER},
      </if>
      <if test="record.org9 != null">
        ORG_9 = #{record.org9,jdbcType=INTEGER},
      </if>
      <if test="record.org10 != null">
        ORG_10 = #{record.org10,jdbcType=INTEGER},
      </if>
      <if test="record.org11 != null">
        ORG_11 = #{record.org11,jdbcType=INTEGER},
      </if>
      <if test="record.org12 != null">
        ORG_12 = #{record.org12,jdbcType=INTEGER},
      </if>
      <if test="record.org13 != null">
        ORG_13 = #{record.org13,jdbcType=INTEGER},
      </if>
      <if test="record.org14 != null">
        ORG_14 = #{record.org14,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_PROFIT
    set PROFIT_ID = #{record.profitId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEAL_ID = #{record.dealId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      PROFIT_PROPORTION = #{record.profitProportion,jdbcType=NUMERIC},
      PROFIT_MONEY = #{record.profitMoney,jdbcType=NUMERIC},
      SETTLE_TIME = #{record.settleTime,jdbcType=VARCHAR},
      SETTLE_FLAG = #{record.settleFlag,jdbcType=INTEGER},
      REMARK = #{record.remark,jdbcType=VARCHAR},
      AGREEMENT_NO = #{record.agreementNo,jdbcType=VARCHAR},
      CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      DEAL_VERIFY_TIME = #{record.dealVerifyTime,jdbcType=TIMESTAMP},
      DEAL_TYPE = #{record.dealType,jdbcType=TINYINT},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      PROFIT_DEAL_TYPE = #{record.profitDealType,jdbcType=TINYINT},
      PERFORMANCE_ID = #{record.performanceId,jdbcType=INTEGER},
      PERFORMANCE_NAME = #{record.performanceName,jdbcType=VARCHAR},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      PROFIT_TYPE = #{record.profitType,jdbcType=TINYINT},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      ROLE_NAME = #{record.roleName,jdbcType=VARCHAR},
      LEVELS_ID = #{record.levelsId,jdbcType=INTEGER},
      LEVELS_NAME = #{record.levelsName,jdbcType=VARCHAR},
      RECEIVABLE_MONEY = #{record.receivableMoney,jdbcType=NUMERIC},
      PERFORMANCE_TYPE = #{record.performanceType,jdbcType=TINYINT},
      DISCOUNT = #{record.discount,jdbcType=NUMERIC},
      ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      VALID_FLAG = #{record.validFlag,jdbcType=INTEGER},
      ORGANIZATION_PATH = #{record.organizationPath,jdbcType=VARCHAR},
      ORG_1 = #{record.org1,jdbcType=INTEGER},
      ORG_2 = #{record.org2,jdbcType=INTEGER},
      ORG_3 = #{record.org3,jdbcType=INTEGER},
      ORG_4 = #{record.org4,jdbcType=INTEGER},
      ORG_5 = #{record.org5,jdbcType=INTEGER},
      ORG_6 = #{record.org6,jdbcType=INTEGER},
      ORG_7 = #{record.org7,jdbcType=INTEGER},
      ORG_8 = #{record.org8,jdbcType=INTEGER},
      ORG_9 = #{record.org9,jdbcType=INTEGER},
      ORG_10 = #{record.org10,jdbcType=INTEGER},
      ORG_11 = #{record.org11,jdbcType=INTEGER},
      ORG_12 = #{record.org12,jdbcType=INTEGER},
      ORG_13 = #{record.org13,jdbcType=INTEGER},
      ORG_14 = #{record.org14,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunProfit">
    <!--@mbggenerated-->
    update FUN_PROFIT
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="dealId != null">
        DEAL_ID = #{dealId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="profitProportion != null">
        PROFIT_PROPORTION = #{profitProportion,jdbcType=NUMERIC},
      </if>
      <if test="profitMoney != null">
        PROFIT_MONEY = #{profitMoney,jdbcType=NUMERIC},
      </if>
      <if test="settleTime != null">
        SETTLE_TIME = #{settleTime,jdbcType=VARCHAR},
      </if>
      <if test="settleFlag != null">
        SETTLE_FLAG = #{settleFlag,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="agreementNo != null">
        AGREEMENT_NO = #{agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="dealVerifyTime != null">
        DEAL_VERIFY_TIME = #{dealVerifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealType != null">
        DEAL_TYPE = #{dealType,jdbcType=TINYINT},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="profitDealType != null">
        PROFIT_DEAL_TYPE = #{profitDealType,jdbcType=TINYINT},
      </if>
      <if test="performanceId != null">
        PERFORMANCE_ID = #{performanceId,jdbcType=INTEGER},
      </if>
      <if test="performanceName != null">
        PERFORMANCE_NAME = #{performanceName,jdbcType=VARCHAR},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="profitType != null">
        PROFIT_TYPE = #{profitType,jdbcType=TINYINT},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        ROLE_ID = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        ROLE_NAME = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="levelsId != null">
        LEVELS_ID = #{levelsId,jdbcType=INTEGER},
      </if>
      <if test="levelsName != null">
        LEVELS_NAME = #{levelsName,jdbcType=VARCHAR},
      </if>
      <if test="receivableMoney != null">
        RECEIVABLE_MONEY = #{receivableMoney,jdbcType=NUMERIC},
      </if>
      <if test="performanceType != null">
        PERFORMANCE_TYPE = #{performanceType,jdbcType=TINYINT},
      </if>
      <if test="discount != null">
        DISCOUNT = #{discount,jdbcType=NUMERIC},
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="validFlag != null">
        VALID_FLAG = #{validFlag,jdbcType=INTEGER},
      </if>
      <if test="organizationPath != null">
        ORGANIZATION_PATH = #{organizationPath,jdbcType=VARCHAR},
      </if>
      <if test="org1 != null">
        ORG_1 = #{org1,jdbcType=INTEGER},
      </if>
      <if test="org2 != null">
        ORG_2 = #{org2,jdbcType=INTEGER},
      </if>
      <if test="org3 != null">
        ORG_3 = #{org3,jdbcType=INTEGER},
      </if>
      <if test="org4 != null">
        ORG_4 = #{org4,jdbcType=INTEGER},
      </if>
      <if test="org5 != null">
        ORG_5 = #{org5,jdbcType=INTEGER},
      </if>
      <if test="org6 != null">
        ORG_6 = #{org6,jdbcType=INTEGER},
      </if>
      <if test="org7 != null">
        ORG_7 = #{org7,jdbcType=INTEGER},
      </if>
      <if test="org8 != null">
        ORG_8 = #{org8,jdbcType=INTEGER},
      </if>
      <if test="org9 != null">
        ORG_9 = #{org9,jdbcType=INTEGER},
      </if>
      <if test="org10 != null">
        ORG_10 = #{org10,jdbcType=INTEGER},
      </if>
      <if test="org11 != null">
        ORG_11 = #{org11,jdbcType=INTEGER},
      </if>
      <if test="org12 != null">
        ORG_12 = #{org12,jdbcType=INTEGER},
      </if>
      <if test="org13 != null">
        ORG_13 = #{org13,jdbcType=INTEGER},
      </if>
      <if test="org14 != null">
        ORG_14 = #{org14,jdbcType=INTEGER},
      </if>
    </set>
    where PROFIT_ID = #{profitId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunProfit">
    <!--@mbggenerated-->
    update FUN_PROFIT
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEAL_ID = #{dealId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      PROFIT_PROPORTION = #{profitProportion,jdbcType=NUMERIC},
      PROFIT_MONEY = #{profitMoney,jdbcType=NUMERIC},
      SETTLE_TIME = #{settleTime,jdbcType=VARCHAR},
      SETTLE_FLAG = #{settleFlag,jdbcType=INTEGER},
      REMARK = #{remark,jdbcType=VARCHAR},
      AGREEMENT_NO = #{agreementNo,jdbcType=VARCHAR},
      CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      DEAL_VERIFY_TIME = #{dealVerifyTime,jdbcType=TIMESTAMP},
      DEAL_TYPE = #{dealType,jdbcType=TINYINT},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      PROFIT_DEAL_TYPE = #{profitDealType,jdbcType=TINYINT},
      PERFORMANCE_ID = #{performanceId,jdbcType=INTEGER},
      PERFORMANCE_NAME = #{performanceName,jdbcType=VARCHAR},
      GR_ID = #{grId,jdbcType=INTEGER},
      PROFIT_TYPE = #{profitType,jdbcType=TINYINT},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      ROLE_ID = #{roleId,jdbcType=VARCHAR},
      ROLE_NAME = #{roleName,jdbcType=VARCHAR},
      LEVELS_ID = #{levelsId,jdbcType=INTEGER},
      LEVELS_NAME = #{levelsName,jdbcType=VARCHAR},
      RECEIVABLE_MONEY = #{receivableMoney,jdbcType=NUMERIC},
      PERFORMANCE_TYPE = #{performanceType,jdbcType=TINYINT},
      DISCOUNT = #{discount,jdbcType=NUMERIC},
      ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      VALID_FLAG = #{validFlag,jdbcType=INTEGER},
      ORGANIZATION_PATH = #{organizationPath,jdbcType=VARCHAR},
      ORG_1 = #{org1,jdbcType=INTEGER},
      ORG_2 = #{org2,jdbcType=INTEGER},
      ORG_3 = #{org3,jdbcType=INTEGER},
      ORG_4 = #{org4,jdbcType=INTEGER},
      ORG_5 = #{org5,jdbcType=INTEGER},
      ORG_6 = #{org6,jdbcType=INTEGER},
      ORG_7 = #{org7,jdbcType=INTEGER},
      ORG_8 = #{org8,jdbcType=INTEGER},
      ORG_9 = #{org9,jdbcType=INTEGER},
      ORG_10 = #{org10,jdbcType=INTEGER},
      ORG_11 = #{org11,jdbcType=INTEGER},
      ORG_12 = #{org12,jdbcType=INTEGER},
      ORG_13 = #{org13,jdbcType=INTEGER},
      ORG_14 = #{org14,jdbcType=INTEGER}
    where PROFIT_ID = #{profitId,jdbcType=INTEGER}
  </update>
  <insert id="insertSelectiveNewOrg">
    <selectKey keyProperty="profitId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_PROFIT_PROFIT_ID
    </selectKey>
    insert into FUN_PROFIT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      PROFIT_ID,
      <if test="param.compId != null">
        COMP_ID,
      </if>
      <if test="param.dealId != null">
        DEAL_ID,
      </if>
      <if test="param.deptId != null">
        DEPT_ID,
      </if>
      <if test="param.userId != null">
        USER_ID,
      </if>
      <if test="param.profitProportion != null">
        PROFIT_PROPORTION,
      </if>
      <if test="param.profitMoney != null">
        PROFIT_MONEY,
      </if>
      <if test="param.settleTime != null">
        SETTLE_TIME,
      </if>
      <if test="param.settleFlag != null">
        SETTLE_FLAG,
      </if>
      <if test="param.remark != null">
        REMARK,
      </if>
      <if test="param.agreementNo != null">
        AGREEMENT_NO,
      </if>
      <if test="param.createDate != null">
        CREATE_DATE,
      </if>
      <if test="param.dealVerifyTime != null">
        DEAL_VERIFY_TIME,
      </if>
      <if test="param.dealType != null">
        DEAL_TYPE,
      </if>
      <if test="param.areaId != null">
        AREA_ID,
      </if>
      <if test="param.regId != null">
        REG_ID,
      </if>
      <if test="param.profitDealType != null">
        PROFIT_DEAL_TYPE,
      </if>
      <if test="param.performanceId != null">
        PERFORMANCE_ID,
      </if>
      <if test="param.performanceName != null">
        PERFORMANCE_NAME,
      </if>
      <if test="param.grId != null">
        GR_ID,
      </if>
      <if test="param.profitType != null">
        PROFIT_TYPE,
      </if>
      <if test="param.archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="param.roleId != null">
        ROLE_ID,
      </if>
      <if test="param.roleName != null">
        ROLE_NAME,
      </if>
      <if test="param.levelsId != null">
        LEVELS_ID,
      </if>
      <if test="param.levelsName != null">
        LEVELS_NAME,
      </if>
      <if test="param.receivableMoney != null">
        RECEIVABLE_MONEY,
      </if>
      <if test="param.performanceType != null">
        PERFORMANCE_TYPE,
      </if>
      <if test="param.discount != null">
        DISCOUNT,
      </if>
      <if test="param.assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
      <if test="param.validFlag != null">
        VALID_FLAG,
      </if>
      <if test="param.organizationPath != null">
        ORGANIZATION_PATH,
      </if>
      <if test="dbFieldPath != null and dbFieldPath != '' and orgIds != null and orgIds != ''">
        ${dbFieldPath},
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{param.profitId,jdbcType=INTEGER},
      <if test="param.compId != null">
        #{param.compId,jdbcType=INTEGER},
      </if>
      <if test="param.dealId != null">
        #{param.dealId,jdbcType=INTEGER},
      </if>
      <if test="param.deptId != null">
        #{param.deptId,jdbcType=INTEGER},
      </if>
      <if test="param.userId != null">
        #{param.userId,jdbcType=INTEGER},
      </if>
      <if test="param.profitProportion != null">
        #{param.profitProportion,jdbcType=NUMERIC},
      </if>
      <if test="param.profitMoney != null">
        #{param.profitMoney,jdbcType=NUMERIC},
      </if>
      <if test="param.settleTime != null">
        #{param.settleTime,jdbcType=VARCHAR},
      </if>
      <if test="param.settleFlag != null">
        #{param.settleFlag,jdbcType=INTEGER},
      </if>
      <if test="param.remark != null">
        #{param.remark,jdbcType=VARCHAR},
      </if>
      <if test="param.agreementNo != null">
        #{param.agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="param.createDate != null">
        #{param.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="param.dealVerifyTime != null">
        #{param.dealVerifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="param.dealType != null">
        #{param.dealType,jdbcType=TINYINT},
      </if>
      <if test="param.areaId != null">
        #{param.areaId,jdbcType=INTEGER},
      </if>
      <if test="param.regId != null">
        #{param.regId,jdbcType=INTEGER},
      </if>
      <if test="param.profitDealType != null">
        #{param.profitDealType,jdbcType=TINYINT},
      </if>
      <if test="param.performanceId != null">
        #{param.performanceId,jdbcType=INTEGER},
      </if>
      <if test="param.performanceName != null">
        #{param.performanceName,jdbcType=VARCHAR},
      </if>
      <if test="param.grId != null">
        #{param.grId,jdbcType=INTEGER},
      </if>
      <if test="param.profitType != null">
        #{param.profitType,jdbcType=TINYINT},
      </if>
      <if test="param.archiveId != null">
        #{param.archiveId,jdbcType=INTEGER},
      </if>
      <if test="param.roleId != null">
        #{param.roleId,jdbcType=VARCHAR},
      </if>
      <if test="param.roleName != null">
        #{param.roleName,jdbcType=VARCHAR},
      </if>
      <if test="param.levelsId != null">
        #{param.levelsId,jdbcType=INTEGER},
      </if>
      <if test="param.levelsName != null">
        #{param.levelsName,jdbcType=VARCHAR},
      </if>
      <if test="param.receivableMoney != null">
        #{param.receivableMoney,jdbcType=NUMERIC},
      </if>
      <if test="param.performanceType != null">
        #{param.performanceType,jdbcType=TINYINT},
      </if>
      <if test="param.discount != null">
        #{param.discount,jdbcType=NUMERIC},
      </if>
      <if test="param.assessmentMonth != null">
        #{param.assessmentMonth,jdbcType=VARCHAR},
      </if>
      <if test="param.validFlag != null">
        #{param.validFlag,jdbcType=INTEGER},
      </if>
      <if test="param.organizationPath != null">
        #{param.organizationPath,jdbcType=VARCHAR},
      </if>
      <if test="dbFieldPath != null and dbFieldPath != '' and orgIds != null and orgIds != ''">
        #{orgIds},
      </if>
    </trim>
  </insert>
  <resultMap extends="BaseResultMap" id="BaseResultMapProfitDto" type="com.myfun.repository.erpdb.dto.ErpProfitMessageFormDto">
    <result column="SELL_ADDRESS" jdbcType="VARCHAR" property="sellAddress" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BaseResultMapDto" type="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
	<result column="DATE_COUNT" jdbcType="VARCHAR" property="dateCount" />
	<result column="PROFIT_COUNT" jdbcType="INTEGER" property="profitCount" />
  </resultMap>
   <select id="getProfitDateCount" resultType="java.util.Map">
  SET DATEFIRST 1; 
  select ${param.erpProfitequeryColumn} as dateCount,
  sum(a.PROFIT_MONEY) as profitCount 
  from FUN_PROFIT a left join FUN_DEAL b on a.DEAL_ID = b.DEAL_ID 
  where 
  	 a.COMP_ID = #{param.compId}
	<if test="param.serchRange == 'AREA'">
		and a.AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'REG'">
		and a.REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'DEPT'">
		and a.DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'GROUP'">
		and a.GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'USER'">
		and a.USER_ID = #{param.serchRangeId}
	</if>
	and b.SIGN_DATE &gt;= #{param.startTime} and b.SIGN_DATE &lt;=#{param.endTime}
	and b.DEAL_TYPE = #{param.caseType}
	group by ${param.erpProfitequeryColumn}
	</select> 

<select id="getCompProfitOffHalfYear" resultType="java.util.Map">
	select convert(VARCHAR(7),B.SIGN_DATE,20) AS dateCount,SUM(A.PROFIT_MONEY) as actualProfit,SUM(A.RECEIVABLE_MONEY) as receivableProfit from FUN_PROFIT A left join FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID where A.COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND A.AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND A.REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND A.DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND A.DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND A.GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND A.ARCHIVE_ID = #{param.archiveId}
	</if>
	and B.SIGN_DATE &gt;=#{param.startTime} and B.SIGN_DATE&lt;=#{param.endTime} 
	group by convert(VARCHAR(7),B.SIGN_DATE,20)
</select>

  <select id="getCompActualProfitAndPerProfit" resultType="java.util.Map">
	WITH T_USER_COUNT AS (
	SELECT
		COMP_ID AS RANGE,
		COUNT (1) AS USER_COUNT
	FROM
		FUN_USERS
	WHERE
		COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
			AND AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
			AND REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND ARCHIVE_ID = #{param.archiveId}
	</if>
	AND (
		JOIN_DEPT_TIME &lt;= #{param.endTime}
		AND (
			USER_WRITEOFF = 0
			OR (
				USER_WRITEOFF != 0
				AND WRITEOFF_TIME &gt; #{param.startTime}
			)
		)
	)
	GROUP BY
		COMP_ID
),
 T_PROFIT_COUNT AS (
	SELECT
		SUM (
			iif (
				b.DEAL_TYPE = 101,
				a.PROFIT_MONEY,
				0
			)
		) AS SALE_PROFIT_COUNT,
		SUM (
			iif (
				b.DEAL_TYPE = 102,
				a.PROFIT_MONEY,
				0
			)
		) AS LEASE_PROFIT_COUNT,
		A.COMP_ID AS RANGE
	FROM
		FUN_PROFIT a
	LEFT JOIN FUN_DEAL b ON a.DEAL_ID = b.DEAL_ID
	WHERE
		a.COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND a.AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND a.REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND a.DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND a.DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND a.GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND a.ARCHIVE_ID = #{param.archiveId}
	</if>

	AND b.SIGN_DATE &gt;= #{param.startTime}
	AND b.SIGN_DATE &lt;= #{param.endTime}
	GROUP BY
		A.COMP_ID
	) SELECT
		B.SALE_PROFIT_COUNT as saleProfitCount,
		B.LEASE_PROFIT_COUNT as leaseProfitCount,
		(
			ISNULL(B.SALE_PROFIT_COUNT, 0) / iif (
				ISNULL(A.USER_COUNT,0) = 0,
				1,
				ISNULL(A.USER_COUNT,0)
			)
		) AS perSaleProfitCount,
		(
			ISNULL(B.LEASE_PROFIT_COUNT, 0) / iif (
				ISNULL(A.USER_COUNT,0) = 0,
				1,
				ISNULL(A.USER_COUNT,0)
			)
		) AS perLeaseProfitCount
	FROM
		T_USER_COUNT A
	JOIN T_PROFIT_COUNT B ON A.RANGE = B.RANGE
  </select>
  <select id="getProfitCountOffUser" resultType="java.util.Map">
   SELECT
 	top 15
		SUM (
			iif (
				b.DEAL_TYPE = 101,
				a.PROFIT_MONEY,
				0
			)
		) AS saleProfitCount,
		SUM (
			iif (
				b.DEAL_TYPE = 102,
				a.PROFIT_MONEY,
				0
			)
		) AS leaseProfitCount,
		SUM (
				a.PROFIT_MONEY
		) as totalProfitMoney,
		<if test="param.dimension != null and 'DEPT'== param.dimension">
			a.DEPT_ID as deptId
		</if>
		<if test="param.dimension != null and 'USER'== param.dimension">
			a.DEPT_ID as deptId,a.USER_ID as userId
		</if>
	FROM
		FUN_PROFIT a
	LEFT JOIN FUN_DEAL b ON a.DEAL_ID = b.DEAL_ID
	WHERE
		a.COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND a.AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND a.REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND a.DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND a.DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND a.GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND a.ARCHIVE_ID = #{param.archiveId}
	</if>
	AND b.SIGN_DATE &gt;= #{param.startTime}
	AND b.SIGN_DATE &lt;= #{param.endTime}
	<if test="param.dimension != null and 'USER'== param.dimension">
		AND a.USER_ID&gt;0
	</if>
	GROUP BY
		<if test="param.dimension != null and 'DEPT'== param.dimension">
			a.DEPT_ID
		</if>
		<if test="param.dimension != null and 'USER'== param.dimension">
			a.DEPT_ID,a.USER_ID
		</if>
	having SUM (
				a.PROFIT_MONEY
		)&gt;0
	ORDER BY  totalProfitMoney desc
  </select>
  
  <select id="getTotalProfitOffDealAnalysis" resultType="java.util.Map">
   SELECT
		SUM (
				a.PROFIT_MONEY
		) as totalProfitMoney
	FROM
		FUN_PROFIT a
	LEFT JOIN FUN_DEAL b ON a.DEAL_ID = b.DEAL_ID
	WHERE
		a.COMP_ID = #{param.compId}
	<if test="param.serchRange != null and 'AREA'== param.serchRange">
		AND a.AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'REG'== param.serchRange">
		AND a.REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'DEPT'== param.serchRange">
		AND a.DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.deptId != null">
		AND a.DEPT_ID = #{param.deptId}
	</if>
	<if test="param.serchRange != null and 'GROUP'== param.serchRange">
		AND a.GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange != null and 'USER'== param.serchRange">
		AND a.ARCHIVE_ID = #{param.archiveId}
	</if>
	<if test="param.caseType != null and 101== param.caseType">
		AND b.DEAL_TYPE = 101
	</if>
	<if test="param.caseType != null and 102== param.caseType">
		AND b.DEAL_TYPE = 102
	</if>
	AND b.${param.dateType} &lt;= #{param.endTime}
	AND b.${param.dateType} &gt;= #{param.startTime}
	</select>
<select id="getTotalProfiTcountList" resultType="java.util.Map">
WITH T_USER_COUNT AS (
	SELECT
		COMP_ID 
		<if test="param.serchRange == 'AREA'">,AREA_ID</if>
		<if test="param.serchRange == 'REG'">,REG_ID </if>
		<if test="param.serchRange == 'DEPT'">,DEPT_ID</if>
		<if test="param.serchRange == 'GR'">,GR_ID </if>
		<if test="param.serchRange == 'USER'">,USER_ID</if> as RANGE
		,COUNT (1) AS USER_COUNT
	FROM
		FUN_USERS
	WHERE
	COMP_ID =#{param.serchRangeId} 
		<if test="param.serchRange == 'AREA'">AND AREA_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'REG'">AND REG_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'DEPT'">AND DEPT_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'GR'">AND GR_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'USER'">AND USER_ID =#{param.serchRangeId}</if>
	AND (
		user_job_date &lt; #{param.startTime}
		AND (
			USER_WRITEOFF = 0
			OR (
				USER_WRITEOFF != 0
				AND WRITEOFF_TIME &gt; #{param.endTime}
			)
		)
	)
	GROUP BY
		COMP_ID 
		<if test="param.serchRange == 'AREA'">,AREA_ID</if>
		<if test="param.serchRange == 'REG'">,REG_ID </if>
		<if test="param.serchRange == 'DEPT'">,DEPT_ID</if>
		<if test="param.serchRange == 'GR'">,GR_ID </if>
		<if test="param.serchRange == 'USER'">,USER_ID</if>
),
T_PROFIT_COUNT AS (
	SELECT
		b.DEAL_TYPE,
		SUM (
			iif (
				b.DEAL_TYPE = 101,
				a.PROFIT_MONEY,
				0
			)
		) AS SALE_PROFIT_COUNT,
		SUM (
			iif (
				b.DEAL_TYPE = 102,
				a.PROFIT_MONEY,
				0
			)
		) AS LEASE_PROFIT_COUNT,
		a.COMP_ID 
		<if test="param.serchRange == 'AREA'">,a.AREA_ID</if>
		<if test="param.serchRange == 'REG'">,a.REG_ID </if>
		<if test="param.serchRange == 'DEPT'">a.DEPT_ID</if>
		<if test="param.serchRange == 'GR'">,a.GR_ID </if>
		<if test="param.serchRange == 'USER'">,a.USER_ID</if> AS RANGE
	FROM
		FUN_PROFIT a
	LEFT JOIN FUN_DEAL b ON a.DEAL_ID = b.DEAL_ID
	WHERE
		a.COMP_ID =#{param.serchRangeId} 
		<if test="param.serchRange == 'AREA'">AND a.AREA_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'REG'">AND a.REG_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'DEPT'">AND a.DEPT_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'GR'">AND a.GR_ID =#{param.serchRangeId}</if>
		<if test="param.serchRange == 'USER'">AND a.USER_ID =#{param.serchRangeId}</if>
	AND a.CREATE_DATE &gt;= #{param.stratTime}
	AND a.CREATE_DATE &lt;= #{param.endTime}
	GROUP BY
		b.DEAL_TYPE,
		a.COMP_ID 
		<if test="param.serchRange == 'AREA'">,a.AREA_ID</if>
		<if test="param.serchRange == 'REG'">,a.REG_ID </if>
		<if test="param.serchRange == 'DEPT'">a.DEPT_ID</if>
		<if test="param.serchRange == 'GR'">,a.GR_ID </if>
		<if test="param.serchRange == 'USER'">,a.USER_ID</if>
) SELECT
	B.SALE_PROFIT_COUNT,
	B.LEASE_PROFIT_COUNT,
	(
		ISNULL(B.SALE_PROFIT_COUNT, 0) / iif (
			A.USER_COUNT = 0,
			1,
			A.USER_COUNT
		)
	) AS PERSALE_PROFIT_COUNT,
	(
		ISNULL(B.LEASE_PROFIT_COUNT, 0) / iif (
			A.USER_COUNT = 0,
			1,
			A.USER_COUNT
		)
	) AS PERLEASE_PROFIT_COUNT
FROM
	T_USER_COUNT A
JOIN T_PROFIT_COUNT B ON A.RANGE = B.RANGE
where B.DEAL_TYPE = #{param.caseType}
  </select>
	<select id="getSalaryTotal" resultType="java.lang.String">
		select SUM (B.PROFIT_MONEY) as salaryTotal from FUN_PROFIT B left join
		FUN_DEAL C ON B.DEAL_ID = C.DEAL_ID AND C.COMP_ID = B.COMP_ID
		where B.COMP_ID= #{param.compId} and C.SIGN_DATE &lt;= #{param.endTime} and C.SIGN_DATE &gt;=
		#{param.startTime} and B.ARCHIVE_ID = #{param.archiveId} 
	</select>

	<select id="getRankInformation" resultType="java.util.Map">
		select
			top 10 d.USER_ID as userId ,d.USER_NAME AS userName,b.ARCHIVE_ID AS archiveId,d.DEPT_ID AS deptId,SUM(B.RECEIVABLE_MONEY) as salaryTotal
		from FUN_PROFIT B
			left join FUN_DEAL C ON B.DEAL_ID = C.DEAL_ID
			LEFT JOIN FUN_USERS d on b.ARCHIVE_ID = d.ARCHIVE_ID AND b.COMP_ID = d.COMP_ID
		where C.SIGN_DATE &lt;= #{param.endTime} and C.SIGN_DATE &gt;= #{param.startTime} and B.USER_ID&gt;0  AND d.USER_WRITEOFF = 0
			<choose>
				<when test="param.type == 1">
					and b.COMP_ID =  #{param.compId}
				</when>
				<otherwise>
					and b.COMP_ID = #{param.compId}  AND B.DEPT_ID = #{param.deptId}
				</otherwise>
			</choose>
		GROUP BY d.USER_ID,d.USER_NAME,d.DEPT_ID ,b.ARCHIVE_ID 	having SUM (B.RECEIVABLE_MONEY) &gt;0 ORDER BY salaryTotal DESC, d.USER_ID asc
	</select>
	
	<select id="getRankByArchiveId" resultType="java.util.Map">
		with t_profit_rank as (
			SELECT
				 b.ARCHIVE_ID AS archiveId,d.USER_NAME as userName,d.DEPT_ID as deptId,
				SUM (B.RECEIVABLE_MONEY) AS salaryTotal
			FROM
				FUN_PROFIT B
			LEFT JOIN FUN_DEAL C ON B.DEAL_ID = C.DEAL_ID
			LEFT JOIN FUN_USERS d ON  b.ARCHIVE_ID = d.ARCHIVE_ID and b.COMP_ID = d.COMP_ID
			WHERE
			<choose>
				<when test="param.type == 1">
					b.COMP_ID =  #{param.compId}
				</when>
				<otherwise>
					b.COMP_ID = #{param.compId}  AND B.DEPT_ID = #{param.deptId}
				</otherwise>
			</choose> 
			and b.USER_ID&gt;0 and C.SIGN_DATE &lt;= #{param.endTime} and C.SIGN_DATE &gt;= #{param.startTime} AND d.USER_WRITEOFF = 0
			GROUP BY
				b.ARCHIVE_ID,d.USER_NAME,d.DEPT_ID
			having SUM (B.RECEIVABLE_MONEY) &gt;0
		),t_profit_ranknum as(
			select  archiveId,deptId,salaryTotal,ROW_NUMBER() over(order by salaryTotal DESC,archiveId) as rankNum  from t_profit_rank  
		)
		 select rankNum,salaryTotal from t_profit_ranknum where archiveId =#{param.archiveId}
	</select>
	<select id="getRankBeforeByArchiveId" resultType="java.util.Map">
		with t_profit_rank as (
			SELECT
				 b.ARCHIVE_ID as archiveId,d.USER_NAME as userName,d.DEPT_ID as deptId ,
				SUM (B.RECEIVABLE_MONEY) AS salaryTotal
			FROM
				FUN_PROFIT B
			LEFT JOIN FUN_DEAL C ON B.DEAL_ID = C.DEAL_ID
			LEFT JOIN FUN_USERS d ON  b.ARCHIVE_ID = d.ARCHIVE_ID and b.COMP_ID = d.COMP_ID
			where
			<choose>
				<when test="param.type == 1">
					 b.COMP_ID =  #{param.compId}
				</when>
				<otherwise>
					 b.COMP_ID = #{param.compId}  AND B.DEPT_ID = #{param.deptId}
				</otherwise>
			</choose> 
			and b.USER_ID&gt;0 and C.SIGN_DATE &lt;= #{param.endTime} and C.SIGN_DATE &gt;= #{param.startTime}  AND d.USER_WRITEOFF = 0
			GROUP BY
				b.ARCHIVE_ID,d.USER_NAME,d.DEPT_ID
			having SUM (B.RECEIVABLE_MONEY) &gt;0
		),t_profit_ranknum as(
			select  archiveId,deptId,userName,salaryTotal,ROW_NUMBER() over(order by salaryTotal DESC,archiveId) as rankNum  from t_profit_rank  
		) select top 1 salaryTotal,rankNum from t_profit_ranknum where rankNum &lt;=#{param.rankNumBefore} and salaryTotal &gt;#{param.profit} order by rankNum desc
	</select>
	
  <select id="getTolalRealProfitByDealId" resultType="java.math.BigDecimal">
    select sum(PROFIT_MONEY) as REAL_MONEY from FUN_PROFIT
   	WHERE DEAL_ID =#{dealId}
  </select>
  
  <select id="getProfitTotalOffRangeList" resultType="java.lang.String">
  	select SUM (B.PROFIT_MONEY)  FROM
				FUN_PROFIT B
			LEFT JOIN FUN_DEAL C ON B.DEAL_ID = C.DEAL_ID
			where
			b.COMP_ID =  #{compId}
			and b.${rangeColumn} in 
			<foreach close=")" collection="rangeList" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
			and b.USER_ID&gt;0 and C.SIGN_DATE &lt;= #{endTime} and C.SIGN_DATE &gt;= #{startTime} 
			having SUM (B.PROFIT_MONEY) &gt;0
  </select>
  <select id="getProfitPerCapitaOffRangeList" resultType="java.lang.String">
  	WITH t_personCount AS (
	SELECT
		COUNT (1) AS PERSON_COUNT,
		COMP_ID
	FROM
		FUN_USERS 
	WHERE
		COMP_ID = #{compId}
	AND ${rangeColumn} IN
	<foreach close=")" collection="rangeList" item="rangeId" open="(" separator=",">
				#{rangeId}
	</foreach>
	AND USER_JOB_DATE &lt; #{endTime}
	AND (
		USER_WRITEOFF = 0
		OR (
			USER_WRITEOFF != 0
			AND WRITEOFF_TIME &gt;= #{startTime}
		)
	)
	GROUP BY
		COMP_ID
),
 t_profitMoney AS (
	SELECT
		SUM (A.PROFIT_MONEY) AS PROFIT_MONEY,
		A.COMP_ID
	FROM
		FUN_PROFIT A
	LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
	WHERE
		A.COMP_ID = #{compId}
	AND A.${rangeColumn} IN
	<foreach close=")" collection="rangeList" item="rangeId" open="(" separator=",">
		#{rangeId}
	</foreach>
	AND B.SIGN_DATE &lt;= #{endTime}
AND B.SIGN_DATE &gt;= #{startTime}
AND A.USER_ID &gt; 0
GROUP BY
	A.COMP_ID
HAVING
	SUM (A.PROFIT_MONEY) &gt;0
) SELECT
	(
		ISNULL(A.PROFIT_MONEY, 0) + 0.0
	) / iif (
		B.PERSON_COUNT = 0,
		1,
		B.PERSON_COUNT
	) AS PROFIT_COUNT
FROM
	t_profitMoney A
JOIN t_personCount B ON A.COMP_ID = A.COMP_ID
  </select>
  
  <select id="getProfitMessageFormList" resultMap="BaseResultMapProfitDto">
	SELECT A.PROFIT_ID, A.COMP_ID, A.DEAL_ID, A.DEPT_ID, A.USER_ID, A.PROFIT_PROPORTION, A.PROFIT_MONEY, A.SETTLE_TIME,
    A.SETTLE_FLAG, A.REMARK, A.AGREEMENT_NO, A.CREATE_DATE, A.DEAL_VERIFY_TIME, A.DEAL_TYPE, A.AREA_ID,
    A.REG_ID, A.PROFIT_DEAL_TYPE, A.PERFORMANCE_ID, A.PERFORMANCE_NAME, A.GR_ID, A.PROFIT_TYPE, A.ARCHIVE_ID,
    A.ROLE_ID, A.ROLE_NAME, A.LEVELS_ID, A.LEVELS_NAME, A.RECEIVABLE_MONEY, A.PERFORMANCE_TYPE, A.DISCOUNT,
    A.ASSESSMENT_MONTH, A.VALID_FLAG,B.SELL_ADDRESS,C.USER_NAME FROM FUN_PROFIT A JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
	JOIN FUN_USERS C ON A.USER_ID = C.USER_ID 
	WHERE 
	A.COMP_ID =#{param.compId} AND A.PROFIT_TYPE = #{param.profitType}
	<if test="param.deptId != null">AND A.DEPT_ID =#{param.deptId }</if>
	<if test="param.userId != null">AND A.USER_ID =#{param.userId}</if>
	<if test="param.regId != null">AND A.REG_ID =#{param.regId}</if>
	<if test="param.areaId != null">AND A.AREA_ID =#{param.areaId}</if>
	<if test="param.grId != null">AND A.GR_ID =#{param.grId}</if>
	<if test="param.validFlag != null">AND A.VALID_FLAG =#{param.validFlag}</if>
	ORDER BY A.CREATE_DATE
</select>

<update id="updateProfitMessageStatus">
	UPDATE FUN_PROFIT SET VALID_FLAG = #{param.validFlag}
	WHERE DEAL_ID IN
	<foreach close=")" collection="IDs" index="index" item="item" open="(" separator=",">  
        #{item}  
    </foreach>
	USER_ID = #{param.userId}
	<if test="param.deptId != null">AND DEPT_ID =#{param.deptId }</if>
	<if test="param.compId != null">AND COMP_ID =#{param.compId}</if>
	<if test="param.regId != null">AND REG_ID =#{param.regId}</if>
	<if test="param.areaId != null">AND AREA_ID =#{param.areaId}</if>
	<if test="param.grId != null">AND GR_ID =#{param.grId}</if>
</update>
  <select id="selectProFitList" resultType="java.util.Map">
    SELECT
       b.id id, a.deal_id dealId,c.PROFIT_ID profitId,a.DEAL_TYPE dealType,a.CONTRACT_NO contractNo,
          c.PERFORMANCE_TYPE performanceType,b.WAGE_PROFIT_AMOUNT wageProfitAmount,PROFIT_PROPORTION profitProportion,PROFIT_MONEY profitMoney, IIF ( A.DEAL_TYPE = 101, '[售]',  '[租]') + A.HOUSEADDRESS houseaddress,c.SETTLE_FLAG settleFlag,
          c.SETTLE_TIME settleTime
    FROM
        FUN_DEAL a
    LEFT join FUN_PROCESS_ASSESSMENT b on a.DEAL_ID= b.DEAL_ID and b.PROCESS_STATUS=1
    LEFT JOIN FUN_PROFIT c on b.PROFIT_ID = c.PROFIT_ID
    WHERE
        A.COMP_ID = #{compId} AND b.ASSESSMENT_MONTH=#{param.assessmentMonth}
        <if test="param.areaIds.size() &gt; 0">
          AND c.AREA_ID in <foreach close=")" collection="param.areaIds" item="areaId" open="(" separator=",">
           #{areaId}
        </foreach>
        </if>
        <if test="param.regIds.size() &gt; 0">
          AND c.REG_ID in <foreach close=")" collection="param.regIds" item="regId" open="(" separator=",">
           #{regId}
        </foreach>
        </if>
        <if test="param.deptIds.size() &gt; 0">
          AND c.DEPT_ID in <foreach close=")" collection="param.deptIds" item="deptId" open="(" separator=",">
            #{deptId}
        </foreach>
        </if>
        <if test="param.grIds.size() &gt; 0">
          AND c.GR_ID  in <foreach close=")" collection="param.grIds" item="grId" open="(" separator=",">
            #{grId}
        </foreach>
        </if>
        <if test="param.validFlag != null">
          AND c.VALID_FLAG = #{param.validFlag}
        </if>
        <if test="null != param.userId">
            AND b.USER_ID = #{param.userId}
        </if>
    ORDER BY
        A.DEAL_VERIFY_TIME DESC
  </select>
  <select id="selectProFitCount" resultType="java.lang.Long">
    SELECT
       count(1)
    FROM
        FUN_DEAL a
    LEFT join FUN_PROCESS_ASSESSMENT b on a.DEAL_ID= b.DEAL_ID and b.PROCESS_STATUS=1
    LEFT JOIN FUN_PROFIT c on b.PROFIT_ID = c.PROFIT_ID
    WHERE
        A.COMP_ID = #{compId} AND b.ASSESSMENT_MONTH=#{param.assessmentMonth}
        <if test="null != param.areaIds and param.areaIds.size() &gt; 0">
          AND c.AREA_ID in <foreach close=")" collection="param.areaIds" item="areaId" open="(" separator=",">
           #{areaId}
        </foreach>
        </if>
        <if test="null != param.regIds and param.regIds.size() &gt; 0">
          AND c.REG_ID in <foreach close=")" collection="param.regIds" item="regId" open="(" separator=",">
           #{regId}
        </foreach>
        </if>
        <if test="null != param.deptIds and param.deptIds.size() &gt; 0">
          AND c.DEPT_ID in <foreach close=")" collection="param.deptIds" item="deptId" open="(" separator=",">
            #{deptId}
        </foreach>
        </if>
        <if test="null != param.grIds and param.grIds.size() &gt; 0">
          AND c.GR_ID  in <foreach close=")" collection="param.grIds" item="grId" open="(" separator=",">
            #{grId}
        </foreach>
        </if>
        <if test="param.validFlag != null">
          AND c.VALID_FLAG = #{param.validFlag}
        </if>
        <if test="null != param.userId">
            AND b.USER_ID = #{param.userId}
        </if>
  </select>

    <update id="updateProfitValidFlag">
        update FUN_PROFIT set VALID_FLAG = #{param.validFlag} where comp_id = #{compId} and PROFIT_ID in (${param.profitIds})
    </update>



  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
    <result column="RANGE_ID" jdbcType="INTEGER" property="rangeId" />
  </resultMap>

  <select id="getProfitList" resultMap="extBaseResultMap">
    SELECT
    <choose>
      <when test="groupRange == 5">A.GR_ID</when>
      <when test="groupRange == 6">A.USER_ID</when>
    </choose> as RANGE_ID,
      SUM (A.${moneyCloumn}) PROFIT_MONEY
    FROM
      FUN_PROFIT A
      LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
    WHERE
      A.COMP_ID = #{compId}
      AND A.USER_ID IS NOT NULL
      AND B.SIGN_DATE &gt;= #{startTime}
      AND
      <choose>
        <when test="groupRange == 5">A.GR_ID</when>
        <when test="groupRange == 6">A.USER_ID</when>
      </choose>
      IN
      <foreach close=")" collection="manageRangIds" item="rangeId" open="(" separator=",">
        #{rangeId}
      </foreach>
      GROUP BY
      <choose>
        <when test="groupRange == 5">A.GR_ID</when>
        <when test="groupRange == 6">A.USER_ID</when>
      </choose>
  </select>

  <select id="getCompProfitOffHalfYearForHomePage" resultType="java.util.Map">
    SELECT convert(VARCHAR(7),B.SIGN_DATE,20) AS dateCount,SUM(A.PROFIT_MONEY) as actualProfit,SUM(A.RECEIVABLE_MONEY) as receivableProfit
    FROM FUN_PROFIT A
    LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
    WHERE A.COMP_ID = #{param.compId} and

    <choose>
      <when test="param.rangeType == 1">A.COMP_ID</when>
      <when test="param.rangeType == 2">A.AREA_ID</when>
      <when test="param.rangeType == 3">A.REG_ID</when>
      <when test="param.rangeType == 4">A.DEPT_ID</when>
    </choose>
      IN
      <foreach close=")" collection="param.rangIds" item="rangeId" open="(" separator=",">
          #{rangeId}
      </foreach>
    and B.SIGN_DATE &gt;=#{param.startTime} and B.SIGN_DATE &lt;=#{param.endTime}
      group by convert(VARCHAR(7),B.SIGN_DATE,20)
  </select>

	<select id="getPersonalRank" resultType="java.util.Map">
		with t_profit as(
		select
		sum(a.${moneyCloumn}) as totalMoney,A.USER_ID  as userId,a.COMP_ID as compId from
		FUN_PROFIT A LEFT JOIN FUN_DEAL B ON a.deal_id = B.deal_id where
		a.COMP_ID = #{compId} and b.SIGN_DATE &gt;=#{startTime} GROUP BY
		A.USER_ID,a.COMP_ID
		) select totalMoney,userId,compId,ROW_NUMBER()
		over(order by
		totalMoney DESC) as ranks from t_profit
<!-- 		 where USER_ID=#{userId} -->
	</select>

	<select id="getThisYearProfitTrend" resultType="java.util.Map">
		SELECT A.${realRange},SUM(A.RECEIVABLE_MONEY) AS profitTotal FROM
		FUN_PROFIT A WHERE A.COMP_ID = #{compId} AND A.${serchRangeReal} = #{serchRangeId}
		<choose>
			<when test=" 'USER' == dimension">
				AND A.USER_ID &gt; 0
			</when>
			<otherwise>
				AND A.DEPT_ID &gt; 0
			</otherwise>
		</choose>
		AND A.DEAL_VERIFY_TIME &gt;= #{dateTime}
		GROUP BY A.${dimension}_ID ORDER BY profitTotal DESC OFFSET 0 ROW FETCH NEXT 6 ROWS ONLY
	</select>

	<select id="getHalfProfitTrend" resultType="java.util.Map">
        SELECT CONVERT(VARCHAR(7), DEAL_VERIFY_TIME , 120) AS dateTime,SUM(PROFIT_MONEY) AS  profitMoney FROM
        FUN_PROFIT WHERE COMP_ID = #{compId} AND DEAL_VERIFY_TIME &gt;= #{dateTime} AND ${realRange} = #{serchRangeId}
        GROUP BY ${realRange},CONVERT(VARCHAR(7), DEAL_VERIFY_TIME, 120) ORDER BY dateTime ASC
    </select>

	<select id="getProfitDetailInfoList" resultType="com.myfun.erpWeb.managecenter.profit.vo.ProfitDetailVo">
		SELECT
		A.PERFORMANCE_TYPE performanceType,B.ISBYHAND isbyhand,B.DEAL_ID dealId,A.USER_ID userId,PROFIT_PROPORTION
		profitProportion,PROFIT_MONEY profitMoney,
		A.DEAL_TYPE dealType,B.CONTRACT_NO contractNo,IIF(A.DEAL_TYPE = 101,'[售]','[租]') + B.HOUSEADDRESS
		houseaddress,A.DEAL_VERIFY_TIME dealVerifyTime,
		A.SETTLE_FLAG settleFlag,A.SETTLE_TIME settleTime FROM FUN_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID =
		B.DEAL_ID WHERE A.COMP_ID =#{param.compId}
		<if test="param.userId !=null">
			AND A.USER_ID =#{param.userId}
		</if>
		<if test="param.deptId !=null">
			AND A.DEPT_ID =#{param.deptId}
		</if>
		<if test="param.dealType !=null">
			AND A.DEAL_TYPE =#{param.dealType}
		</if>
		<choose>
			<when test="param.dealStatus== 1 or param.dealStatus== 0 ">
				AND B.DEAL_STATUS=#{param.dealStatus}
			</when>
			<when test="param.dealStatus== 2 ">
				<if test="param.startTime !=null">
					AND A.DEAL_VERIFY_TIME &gt;=#{param.startTime}
				</if>
				<if test="param.endTime !=null">
					AND A.DEAL_VERIFY_TIME &lt;#{param.endTime}
				</if>
			</when>
			<when test="param.dealStatus== 6 ">
				AND B.DEAL_STATUS != 2
			</when>
			<otherwise>
				AND (A.DEAL_VERIFY_TIME IS NULL OR(
				<if test="param.startTime !=null">
					A.DEAL_VERIFY_TIME &gt;=#{param.startTime}
				</if>
				<if test="param.endTime !=null">
					AND A.DEAL_VERIFY_TIME &lt;#{param.endTime}
				</if>
				))
			</otherwise>
		</choose>
		<if test="param.dealType !=null">
			AND A.DEAL_TYPE=#{param.dealType}
		</if>
		ORDER BY A.DEAL_VERIFY_TIME DESC
	</select>
	<select id="getProfitBaseInfoList" resultType="com.myfun.erpWeb.managecenter.profit.vo.ProfitBaseInfoDto">
		SELECT A.USER_ID userId,SUM(A.PROFIT_MONEY) totalMoney,COUNT(1) profitCount
		FROM FUN_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
		where A.COMP_ID=#{param.compId} AND A.USER_ID IS NOT NULL
		<if test="param.dealType !=null">
			AND B.DEAL_TYPE=#{param.dealType}
		</if>
		<choose>
			<when test="param.dealStatus== 1 or param.dealStatus== 0">
				AND B.DEAL_STATUS=#{param.dealStatus}
			</when>
			<when test="param.dealStatus== 2 ">
				<if test="param.date1 !=null">
					AND A.DEAL_VERIFY_TIME &gt;=#{param.date1}
				</if>
				<if test="param.date2 !=null">
					AND A.DEAL_VERIFY_TIME &lt;#{param.date2}
				</if>
			</when>
			<when test="param.dealStatus== 6">
				AND B.DEAL_STATUS != 2
			</when>
			<otherwise>
				AND (A.DEAL_VERIFY_TIME IS NULL OR(
				<if test="param.date1 !=null">
					A.DEAL_VERIFY_TIME &gt;=#{param.date1}
				</if>
				<if test="param.date2 !=null">
					AND A.DEAL_VERIFY_TIME &lt;#{param.date2}
				</if>
				))
			</otherwise>
		</choose>
		<choose>
			<when test="param.userId !=null">
				AND A.USER_ID=#{param.userId}
			</when>
			<otherwise>
				<if test="param.areaId !=null">
					AND A.AREA_ID =#{param.areaId}
				</if>
				<if test="param.regId !=null">
					AND A.REG_ID =#{param.regId}
				</if>
				<if test="param.deptId !=null">
					AND A.DEPT_ID =#{param.deptId,jdbcType=INTEGER}
				</if>
				<if test="param.grId !=null">
					AND A.GR_ID =#{param.grId}
				</if>
			</otherwise>
		</choose>
        <if test="param.isNewOrganization == true ">
          <if test="param.organizationId != null and param.organizationId != 0">
            and A.ORGANIZATION_PATH LIKE '%:${param.organizationId}:%'
          </if>
        </if>
		GROUP BY A.USER_ID ORDER BY SUM(A.PROFIT_MONEY) DESC
	</select>
	<select id="countProfitBaseInfo" resultType="java.lang.Integer">
		select count(1) as ATTR_NAME from ( SELECT COUNT(*) count FROM FUN_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
		where A.COMP_ID=#{param.compId} AND A.USER_ID IS NOT NULL
		<if test="param.dealType !=null">
			AND B.DEAL_TYPE=#{param.dealType}
		</if>
		<choose>
			<when test="param.dealStatus== 1 or param.dealStatus== 0">
				AND B.DEAL_STATUS=#{param.dealStatus}
			</when>
			<when test="param.dealStatus== 2 ">
				<if test="param.date1 !=null">
					AND A.DEAL_VERIFY_TIME &gt;=#{param.date1}
				</if>
				<if test="param.date2 !=null">
					AND A.DEAL_VERIFY_TIME &lt;#{param.date2}
				</if>
			</when>
			<when test="param.dealStatus== 6">
				AND B.DEAL_STATUS != 2
			</when>
			<otherwise>
				AND (A.DEAL_VERIFY_TIME IS NULL OR(
				<if test="param.date1 !=null">
					A.DEAL_VERIFY_TIME &gt;=#{param.date1}
				</if>
				<if test="param.date2 !=null">
					AND A.DEAL_VERIFY_TIME &lt;#{param.date2}
				</if>
				))
			</otherwise>
		</choose>
		<choose>
			<when test="param.userId !=null">
				AND A.USER_ID=#{param.userId}
			</when>
			<otherwise>
				<if test="param.isNewOrganization != true ">
					<if test="param.areaId !=null">
						AND A.AREA_ID =#{param.areaId}
					</if>
					<if test="param.regId !=null">
						AND A.REG_ID =#{param.regId}
					</if>
					<if test="param.deptId !=null">
						AND A.DEPT_ID =#{param.deptId,jdbcType=INTEGER}
					</if>
					<if test="param.grId !=null">
						AND A.GR_ID =#{param.grId}
					</if>
				</if>

			</otherwise>
		</choose>
        <if test="param.isNewOrganization == true ">
          <if test="param.organizationId != null and param.organizationId != 0">
            and A.ORGANIZATION_PATH LIKE '%:${param.organizationId}:%'
          </if>
        </if>
		GROUP BY A.USER_ID ) a
	</select>
	<select id="getProfitStatistics" resultType="java.util.Map">
		SELECT SUM(PROFIT_MONEY) as profitMoney FROM FUN_PROFIT
		where COMP_ID=#{param.compId} AND USER_ID IS NOT NULL
		<if test="param.dealType !=null">
			AND DEAL_TYPE=#{param.dealType}
		</if>
		<choose>
			<when test="param.dealStatus== 0 or param.dealStatus== 6 ">
				AND DEAL_VERIFY_TIME IS NULL
			</when>
			<when test="param.dealStatus== 2 ">
				<if test="param.date1 !=null">
					AND DEAL_VERIFY_TIME &gt;=#{param.date1}
				</if>
				<if test="param.date2 !=null">
					AND DEAL_VERIFY_TIME &lt;#{param.date2}
				</if>
			</when>
			<otherwise>
				AND (DEAL_VERIFY_TIME IS NULL OR(
				<if test="param.date1 !=null">
					DEAL_VERIFY_TIME &gt;=#{param.date1}
				</if>
				<if test="param.date2 !=null">
					AND DEAL_VERIFY_TIME &lt;#{param.date2}
				</if>
				))
			</otherwise>
		</choose>
		<choose>
			<when test="param.userId !=null">
				AND USER_ID=#{param.userId}
			</when>
			<otherwise>
				<if test="param.isNewOrganization != true ">
					<if test="param.areaId !=null">
						AND AREA_ID =#{param.areaId}
					</if>
					<if test="param.regId !=null">
						AND REG_ID =#{param.regId}
					</if>
					<if test="param.deptId !=null">
						AND DEPT_ID =#{param.deptId}
					</if>
					<if test="param.grId !=null">
						AND GR_ID =#{param.grId}
					</if>
				</if>
			</otherwise>
		</choose>
        <if test="param.isNewOrganization == true ">
            <if test="param.organizationId != null and param.organizationId != 0">
              AND ORGANIZATION_PATH LIKE '%:${param.organizationId}:%'
            </if>
        </if>
	</select>

	<select id="getProfitByMap" resultMap="BaseResultMap">
      select USER_ID,DEPT_ID,PERFORMANCE_NAME,PROFIT_PROPORTION,PROFIT_MONEY,DEAL_ID,RECEIVABLE_MONEY,PERFORMANCE_TYPE
      from FUN_PROFIT
      where COMP_ID = #{param.compId}
      <if test="param.performanceType != null ">
        AND PERFORMANCE_TYPE = #{param.performanceType}
      </if>
      <if test="param.performanceId != null ">
        AND PERFORMANCE_ID = #{param.performanceId}
      </if>
      <if test="param.regId != null ">
        AND REG_ID = #{param.regId}
      </if>
      <if test="param.areaId != null ">
        AND AREA_ID = #{param.areaId}
      </if>
      <if test="param.deptId != null ">
        AND DEPT_ID = #{param.deptId}
      </if>
      <if test="param.archiveId != null ">
        AND ARCHIVE_ID = #{param.archiveId}
      </if>
      AND DEAL_ID in
      <foreach close=")" collection="dealIds" item="dealId" open="(" separator=",">
        #{dealId}
      </foreach>
  </select>

  <select id="getProfitData" resultType="java.util.Map">
    with T_DEAL_PROFIT as(SELECT distinct A.DEAL_ID from FUN_PROFIT A join FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
    where B.COMP_ID=#{param.compId}
    <if test="param.dealType != null ">
      AND B.DEAL_TYPE= #{param.dealType}
    </if>
    <choose>
      <when test="param.dealStatus != null ">
        <if test="param.dealStatus == 6">
          AND B.DEAL_STATUS != 2
        </if>
        <if test="param.dealStatus != 6">
          AND B.DEAL_STATUS = #{param.dealStatus}
        </if>
      </when>
    </choose>
    <if test="param.performanceType != null ">
      AND A.PERFORMANCE_TYPE = #{param.performanceType}
    </if>
    <if test="param.performanceId != null ">
      AND A.PERFORMANCE_ID = #{param.performanceId}
    </if>
    <if test="param.intelligentSearch != null and ''!= param.intelligentSearch">
      AND B.INTELLIGENT_SEARCH LIKE %${param.intelligentSearch}%
    </if>

    <if test="param.regId != null ">
      AND A.REG_ID = #{param.regId}
    </if>
    <if test="param.areaId != null ">
      AND A.AREA_ID = #{param.areaId}
    </if>
    <if test="param.grId != null ">
      AND A.GR_ID = #{param.grId}
    </if>
    <if test="param.startDate != null and param.endDate != null">
      AND B.SIGN_DATE &gt;= #{param.startDate} AND B.SIGN_DATE  &lt; #{param.endDate}
    </if>
    <if test="param.deptId != null ">
      AND A.DEPT_ID = #{param.deptId}
    </if>
    <if test="param.archiveId != null ">
      AND A.ARCHIVE_ID = #{param.archiveId}
    </if>
    )
    select sum(A.TOTAL_NEED_INCOME) as TOTAL_NEED_INCOME,sum(A.TOTAL_REAL_INCOME) as TOTAL_REAL_INCOME from FUN_DEAL A JOIN T_DEAL_PROFIT B ON A.DEAL_ID=B.DEAL_ID
  </select>
  <select id="getProfitListByDealIds" resultMap="BaseResultMap">
    SELECT DEPT_ID,USER_ID,DEAL_TYPE,PROFIT_PROPORTION,PROFIT_MONEY,DEAL_ID,PERFORMANCE_NAME,ORGANIZATION_PATH
    FROM FUN_PROFIT
    WHERE COMP_ID = #{compId}
    <if test="param.dealIds != null">
       AND DEAL_ID IN
      <foreach close=")" collection="param.dealIds" item="dealId" open="(" separator=",">
        #{dealId}
      </foreach>
    </if>
  </select>

	<select id="getFunProfitDispatchCountChart" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
		<choose>
			<when test="param.pfActual = 0">
				with t1 as ( SELECT a.DEAL_ID, a.TOTAL_NEED_PERFORMANCE as PAY_AMOUNT
				FROM fun_deal a
				where a.comp_id=#{param.compId} and a.${param.dateType} &gt;= #{param.startTime}  and a.${param.dateType}  &lt;= #{param.endTime}
				group by a.DEAL_ID,a.TOTAL_NEED_PERFORMANCE)
				SELECT IIF(A.PERFORMANCE_NAME IS NULL,'其他',A.PERFORMANCE_NAME) as showText,
				sum(a.RECEIVABLE_MONEY) as counts
				FROM FUN_PROFIT a join t1 b on a.deal_id=b.deal_id join fun_users c on c.user_id=a.user_id
				WHERE  A.COMP_ID = #{param.compId}
				<if test="param.serchRange == 'AREA'">
					AND c.AREA_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND c.REG_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND c.DEPT_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND c.GR_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND c.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				GROUP BY a.PERFORMANCE_NAME
			</when>
			<otherwise>
				SELECT IIF(A.PERFORMANCE_NAME IS NULL,'其他',A.PERFORMANCE_NAME) as showText,
				sum(A.PROFIT_MONEY) as counts
				FROM FUN_PROFIT a join fun_deal b on a.deal_id=b.deal_id join fun_users c on c.user_id=a.user_id
				where A.COMP_ID = #{param.compId} and b.${param.dateType} &gt;= #{param.startTime}  and b.${param.dateType}  &lt;= #{param.endTime}
				<if test="param.serchRange == 'AREA'">
					AND c.AREA_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND c.REG_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND c.DEPT_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND c.GR_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND c.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				GROUP BY a.PERFORMANCE_NAME
			</otherwise>
		</choose>
	</select>

	<select id="getFunProfitSourceCountChart" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
		SELECT IIF(A.DEAL_TYPE = 101,'出售','出租') as showText,count(1) counts
		FROM FUN_PROFIT A LEFT JOIN FUN_USERS B on A.USER_ID = B.USER_ID
		LEFT JOIN FUN_DEAL C ON A.DEAL_ID = C.DEAL_ID
		WHERE A.COMP_ID = #{param.compId} and C.${param.dateType} &gt;= #{param.startTime}  and C.${param.dateType}  &lt;= #{param.endTime}
		<if test="param.serchRange == 'AREA'">
			AND B.AREA_ID= #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'REG'">
			AND B.REG_ID= #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'DEPT'">
			AND B.DEPT_ID= #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'GROUP'">
			AND B.GR_ID= #{param.serchRangeId}
		</if>
		<if test="param.serchRange == 'USER'">
			AND B.ARCHIVE_ID = #{param.serchRangeId}
		</if>
		GROUP BY A.DEAL_TYPE
	</select>

	<select id="getCompTotalProfit" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
		<choose>
			<when test="param.pfActual = 0">
				SELECT SUM(A.RECEIVABLE_MONEY) AS profitMoney
				FROM FUN_PROFIT A JOIN FUN_DEAL B ON B.DEAL_ID = A.DEAL_ID
				WHERE A.COMP_ID = #{param.compId} and B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.USER_ID= = #{param.serchRangeId}
				</if>

			</when>
			<otherwise>
				select SUM(PROFIT_MONEY) as profitMoney
				from FUN_PROFIT A LEFT JOIN FUN_USERS B on A.USER_ID  = B.USER_ID
				LEFT JOIN FUN_DEAL C ON A.DEAL_ID = C.DEAL_ID
				WHERE A.COMP_ID = #{param.compId} and C.${param.dateType} &gt;= #{param.startTime}  and C.${param.dateType}  &lt;= #{param.endTime}
				<if test="param.serchRange == 'AREA'">
					AND B.AREA_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND B.REG_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND B.DEPT_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND B.GR_ID= #{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND B.ARCHIVE_ID= = #{param.serchRangeId}
				</if>
				GROUP BY A.COMP_ID
			</otherwise>
		</choose>

	</select>
	
	<select id="getSSProfitAnalyse" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
		<if test="param.dateRange == 'MONTH'">
			<if test="param.dataType == 2">
				select CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})) month,DATENAME(month,B.${param.dateType}) as date,sum(A.PROFIT_MONEY) profitCount
				from FUN_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				and A.COMP_ID= #{param.compId}
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by  CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})),DATENAME(month,B.${param.dateType})
				ORDER BY  DATE
			</if>
			<if test="param.dataType == 1">
				select CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})) month,DATENAME(month,B.${param.dateType}) as date,sum(iif(B.SIGN_USER_ID&gt;0,1,0)) as fromCount
				from FUN_DEAL B join DEAL_USER_RELATIVE A ON A.DEAL_ID=B.DEAL_ID AND B.SIGN_USER_ID=A.USER_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				and A.RELATE_TYPE = 3 and B.DEAL_AUDIT_STATUS != 3
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})),DATENAME(month,B.${param.dateType})
				ORDER BY  DATE
			</if>
		</if>
		<if test="param.dateRange == 'QUARTER'">
			<if test="param.dataType == 2">
				select DATENAME(year,B.${param.dateType}) year,DATENAME(quarter,B.${param.dateType}) date,sum(A.PROFIT_MONEY) profitCount
				from FUN_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by DATENAME(year,B.${param.dateType}),DATENAME(quarter,B.${param.dateType})
				ORDER BY  DATE
			</if>
			<if test="param.dataType == 1">
				select DATENAME(year,B.${param.dateType}) year,DATENAME(quarter,B.${param.dateType}) date,sum(iif(B.SIGN_USER_ID&gt;0,1,0)) as fromCount
				from FUN_DEAL B join DEAL_USER_RELATIVE A ON A.DEAL_ID=B.DEAL_ID AND B.SIGN_USER_ID=A.USER_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				and A.RELATE_TYPE = 3 and B.DEAL_AUDIT_STATUS != 3
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by DATENAME(year,B.${param.dateType}),DATENAME(quarter,B.${param.dateType})
				ORDER BY  DATE
			</if>
		</if>
	</select>
	
	<select id="getYSProfitAnalyse" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
		<if test="param.dateRange == 'MONTH'">
			<if test="param.dataType == 2">
				with T_PROFIT as(select * from ( SELECT A.COMP_ID,A.AREA_ID,A.REG_ID,A.DEPT_ID,A.GR_ID,A.USER_ID,A.ARCHIVE_ID,A.DEAL_ID,'A_'+(convert(varchar(10),A.PERFORMANCE_ID) + '_COUNT') PERFORMANCE_ID,SUM(A.RECEIVABLE_MONEY) PROFIT_MONEY
				FROM FUN_PROFIT A left join FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
				WHERE A.COMP_ID = #{param.compId}
				GROUP BY A.COMP_ID,A.AREA_ID,A.REG_ID,A.DEPT_ID,A.GR_ID,A.USER_ID,A.ARCHIVE_ID,A.DEAL_ID,A.PERFORMANCE_ID
				) p PIVOT ( SUM([PROFIT_MONEY]) FOR [PERFORMANCE_ID] IN (${param.columnStr}) ) AS pvt)
				select CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})) month,DATENAME(month,B.${param.dateType}) as date,sum(${param.sumStr}) profitCount
				from T_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				and A.COMP_ID= #{param.compId}
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by  CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})),DATENAME(month,B.${param.dateType})
				ORDER BY  DATE
			</if>
			<if test="param.dataType == 1">
				select CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})) month,DATENAME(month,B.${param.dateType}) as date,sum(iif(B.SIGN_USER_ID&gt;0,1,0)) as fromCount
				from FUN_DEAL B join DEAL_USER_RELATIVE A ON A.DEAL_ID=B.DEAL_ID AND B.SIGN_USER_ID=A.USER_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				and A.RELATE_TYPE = 3 and B.DEAL_AUDIT_STATUS != 3
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by CONCAT(DATENAME(year,B.${param.dateType}),'-',DATENAME(month,B.${param.dateType})),DATENAME(month,B.${param.dateType})
				ORDER BY  DATE
			</if>
		</if>
		<if test="param.dateRange == 'QUARTER'">
			<if test="param.dataType == 2">
				with T_PROFIT as(select * from ( SELECT A.COMP_ID,A.AREA_ID,A.REG_ID,A.DEPT_ID,A.GR_ID,A.USER_ID,A.ARCHIVE_ID,A.DEAL_ID,'A_'+(convert(varchar(10),A.PERFORMANCE_ID) + '_COUNT') PERFORMANCE_ID,SUM(A.RECEIVABLE_MONEY) PROFIT_MONEY
				FROM FUN_PROFIT A left join FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
				WHERE A.COMP_ID = #{param.compId}
				GROUP BY A.COMP_ID,A.AREA_ID,A.REG_ID,A.DEPT_ID,A.GR_ID,A.USER_ID,A.ARCHIVE_ID,A.DEAL_ID,A.PERFORMANCE_ID
				) p PIVOT ( SUM([PROFIT_MONEY]) FOR [PERFORMANCE_ID] IN (${param.columnStr}) ) AS pvt)
				select DATENAME(year,B.${param.dateType}) year,DATENAME(quarter,B.${param.dateType}) date,sum(A.PROFIT_MONEY) profitCount
				from FUN_PROFIT A LEFT JOIN FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by DATENAME(year,B.${param.dateType}),DATENAME(quarter,B.${param.dateType})
				ORDER BY  DATE
			
			</if>
			<if test="param.dataType == 1">
				select DATENAME(year,B.${param.dateType}) year,DATENAME(quarter,B.${param.dateType}) date,sum(iif(B.SIGN_USER_ID&gt;0,1,0)) as fromCount
				from FUN_DEAL B join DEAL_USER_RELATIVE A ON A.DEAL_ID=B.DEAL_ID AND B.SIGN_USER_ID=A.USER_ID
				WHERE B.${param.dateType} &gt;= #{param.startTime}  and B.${param.dateType}  &lt;= #{param.endTime}
				and A.RELATE_TYPE = 3 and B.DEAL_AUDIT_STATUS != 3
				<if test="param.serchRange == 'AREA'">
					AND A.AREA_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'REG'">
					AND A.REG_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'DEPT'">
					AND A.DEPT_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'GROUP'">
					AND A.GR_ID=#{param.serchRangeId}
				</if>
				<if test="param.serchRange == 'USER'">
					AND A.ARCHIVE_ID = #{param.serchRangeId}
				</if>
				group by DATENAME(year,B.${param.dateType}),DATENAME(quarter,B.${param.dateType})
				ORDER BY  DATE
			</if>
		</if>
		
	</select>

	<update id="updateSetSettleTime" parameterType="com.myfun.repository.erpdb.po.ErpFunProfit">
		UPDATE FUN_PROFIT SET SETTLE_TIME=#{settleTime},DEAL_VERIFY_TIME=#{dealVerifyTime},SETTLE_FLAG=#{settleFlag}
		WHERE DEAL_ID = #{dealId} AND COMP_ID = #{compId}
	</update>
	
	<select id="getFunProfit" resultMap="BaseResultMap">
		select top 1 COMP_ID
		from FUN_PROFIT
		where COMP_ID = #{compId} and PROFIT_ID = #{profitId}
	</select>
	
	<update id="updatePerformanceBySysPara">
		UPDATE FUN_PROFIT SET PROFIT_MONEY = (#{realPerformance}*PROFIT_PROPORTION/100),
		RECEIVABLE_MONEY = (#{needPerformance}*PROFIT_PROPORTION/100)
		WHERE DEAL_ID = #{dealId} and PERFORMANCE_TYPE = #{performanceType}
		<if test="paramValue!=0">
			and USER_ID IS NULL
		</if>
	</update>
	
	
	<update id="updateHouseBasePerformanceBySysPara">
		UPDATE FUN_PROFIT SET PROFIT_MONEY = (#{realPerformance}*PROFIT_PROPORTION/100),
		RECEIVABLE_MONEY = (#{needPerformance}*PROFIT_PROPORTION/100)
		WHERE DEAL_ID = #{dealId} and PERFORMANCE_TYPE = #{performanceType}
		and PROFIT_TYPE IN (0,2)
	</update>
	
	<select id="getPerformanceDto" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
		select SUM(iif(USER_ID IS NULL,${realPerformance}*(PROFIT_PROPORTION/100),0)) as realcompProfitMoney,
		SUM(iif(USER_ID IS NULL,${needPerformance}*(PROFIT_PROPORTION/100),0)) as needcompReceivableMoney
		from FUN_PROFIT where DEAL_ID=#{dealId}  and PERFORMANCE_TYPE = #{performanceType}
	</select>
	
	<update id="updatePerformance">
		UPDATE FUN_PROFIT SET PROFIT_MONEY = ((${realPerformance}-${realcompProfitMoney})*PROFIT_PROPORTION/100),
		RECEIVABLE_MONEY = ((${needPerformance}-${needcompReceivableMoney})*PROFIT_PROPORTION/100)
		WHERE DEAL_ID = #{dealId} and USER_ID &gt;0 and PERFORMANCE_TYPE = #{performanceType}
	</update>
	
	<select id="countProfitByDealId" resultType="java.lang.Integer">
		select count (1)
		from FUN_PROFIT
		where DEAL_ID = #{dealId} and SETTLE_FLAG = 2
	</select>
	
	<select id="getProfitListByDealIdAndCompId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_PROFIT
		where DEAL_ID = #{dealId} and COMP_ID = #{compId}
		<if test="type!=null">
			and PROFIT_TYPE = 0
		</if>
	</select>

	<update id="updateByDealIdAndCompId">
		update FUN_PROFIT set DEAL_VERIFY_TIME = #{dealVerifyTime},SETTLE_FLAG = #{settleFlagChecked}
		where COMP_ID = #{compId} and DEAL_ID = #{dealId}
	</update>


	<select id="getDealAnalysis" resultType="java.util.Map">
		select ${param.columns} from ${param.tableName}
		where A.DEAL_AUDIT_STATUS != '3' and A.COMP_ID=#{param.compId}
		<if test="param.serchRange !=null and param.serchRangeId !=null ">
			AND B.${param.serchRange}=#{param.serchRangeId}
		</if>
		<if test="param.archiveId !=null ">
			AND B.ARCHIVE_ID=#{param.archiveId}
		</if>
		<if test="param.dateType !=null ">
			AND A.${param.dateType} &gt;= #{param.startTime}
			AND A.${param.dateType} &lt;= #{param.endTime}
		</if>
		<if test="param.caseType !=null ">
			AND A.DEAL_TYPE=#{param.caseType}
		</if>
		<if test="param.buildReg !=null ">
			AND A.BUILD_REG_ID=#{param.buildReg}
		</if>
		<if test="param.sectionIdArr !=null ">
			AND A.SECTION_ID IN
			<foreach close=")" collection="param.sectionIdArr" item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		group by ${param.groupBy}
		order by ${param.orderBy}
	</select>
	
	<update id="updateByArchiveIdAndCompId">
		update FUN_PROFIT set SETTLE_FLAG = 0
		where ARCHIVE_ID=#{archiveId} and SETTLE_FLAG != 2 and COMP_ID = #{compId}
	</update>
	
	<update id="updateProfitSettleFlag">
		update  FUN_PROFIT  set SETTLE_FLAG = 1,SETTLE_TIME = #{createDate}
		where ARCHIVE_ID=#{archiveId} and SETTLE_FLAG != 2 and COMP_ID = #{compId} and PROFIT_ID in
		<foreach close=")" collection="profitIds" item="profitId" open="(" separator=",">
			#{profitId}
		</foreach>
	</update>

	<select id="getAppCompProfit" resultType="java.util.Map">
		select ISNULL(SUM(A.PROFIT_MONEY),0) as actualProfit,ISNULL(SUM(A.RECEIVABLE_MONEY),0) as receivableProfit from FUN_PROFIT A
		left join FUN_DEAL B ON A.DEAL_ID = B.DEAL_ID where A.COMP_ID = #{compId}
		<choose>
			<when test="rangeType == 5">
				<if test="deptId != null">
					and A.DEPT_ID=#{deptId}
				</if>
			</when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND A.AREA_ID</when>
			<when test="rangeType == 3">AND A.REG_ID</when>
			<when test="rangeType == 4">AND A.DEPT_ID</when>
			<when test="rangeType == 5">AND A.GR_ID</when>
			<when test="rangeType == 6">AND A.USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		in
			<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
		and B.SIGN_DATE &gt;= #{startTime}
	</select>

    <select id="getSimpleDealData" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
        <if test="dateRange == 'MONTH'">
            <if test="dataType == 2">
                select CONCAT(DATENAME(year,CREATOR_DATE),'-',DATENAME(month,CREATOR_DATE)) MONTH,DATENAME(month,CREATOR_DATE) as DATE,sum(DEAL_COMMISSION) PROFIT_COUNT
                from FUN_OUTDEAL
                WHERE CREATOR_DATE &gt;= #{startTime} and CREATOR_DATE &lt;= #{endTime} and COMP_ID = #{compId}
                <if test="serchRange == 'AREA'">
                    AND AREA_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'REG'">
                    AND REG_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'DEPT'">
                    AND DEPT_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'GROUP'">
                    AND GR_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'USER'">
                    AND ARCHIVE_ID = #{serchRangeId}
                </if>
                group by  CONCAT(DATENAME(year,CREATOR_DATE),'-',DATENAME(month,CREATOR_DATE)),DATENAME(month,CREATOR_DATE)
                ORDER BY  DATE
            </if>
            <if test="dataType == 1">
                select CONCAT(DATENAME(year,CREATOR_DATE),'-',DATENAME(month,CREATOR_DATE)) MONTH,DATENAME(month,CREATOR_DATE) as DATE,count(AGREEMENT_NO) as FROM_COUNT
                from FUN_OUTDEAL
                WHERE CREATOR_DATE &gt;= #{startTime} and CREATOR_DATE &lt;= #{endTime} and COMP_ID = #{compId}
                <if test="serchRange == 'AREA'">
                    AND AREA_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'REG'">
                    AND REG_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'DEPT'">
                    AND DEPT_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'GROUP'">
                    AND GR_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'USER'">
                    AND ARCHIVE_ID = #{serchRangeId}
                </if>
                group by CONCAT(DATENAME(year,CREATOR_DATE),'-',DATENAME(month,CREATOR_DATE)),DATENAME(month,CREATOR_DATE)
                ORDER BY  DATE
            </if>
        </if>
        <if test="dateRange == 'QUARTER'">
            <if test="dataType == 2">
                select DATENAME(year,CREATOR_DATE) YEAR,DATENAME(quarter,CREATOR_DATE) DATE,sum(DEAL_COMMISSION) PROFIT_COUNT
                from FUN_OUTDEAL
                WHERE CREATOR_DATE &gt;= #{startTime} and CREATOR_DATE &lt;= #{endTime} and COMP_ID = #{compId}
                <if test="serchRange == 'AREA'">
                    AND AREA_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'REG'">
                    AND REG_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'DEPT'">
                    AND DEPT_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'GROUP'">
                    AND GR_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'USER'">
                    AND ARCHIVE_ID = #{serchRangeId}
                </if>
                group by DATENAME(year,CREATOR_DATE),DATENAME(quarter,CREATOR_DATE)
                ORDER BY  DATE
            </if>
            <if test="dataType == 1">
                select DATENAME(year,CREATOR_DATE) YEAR,DATENAME(quarter,CREATOR_DATE) DATE,count(AGREEMENT_NO) as FROM_COUNT
                from FUN_OUTDEAL
                WHERE CREATOR_DATE &gt;= #{startTime} and CREATOR_DATE &lt;= #{endTime} and COMP_ID = #{compId}
                <if test="serchRange == 'AREA'">
                    AND AREA_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'REG'">
                    AND REG_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'DEPT'">
                    AND DEPT_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'GROUP'">
                    AND GR_ID = #{serchRangeId}
                </if>
                <if test="serchRange == 'USER'">
                    AND ARCHIVE_ID = #{serchRangeId}
                </if>
                group by DATENAME(year,CREATOR_DATE),DATENAME(quarter,CREATOR_DATE)
                ORDER BY  DATE
            </if>
        </if>
    </select>
    
    <select id="getProFitListByDealId" resultMap="BaseResultMap">
	    <include refid="Base_Column_List" />
	    FROM FUN_PROFIT
	    WHERE COMP_ID = #{compId}
        AND DEAL_ID = #{dealId}
  </select>
    <!--<select id="getProfitList" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">-->
		<!--select ARCHIVE_ID as archiveId,SUM(PROFIT_MONEY) PROFIT_WAGE as profitWage,COUNT(1) PROFIT_COUNT as profitCount-->
		<!--FROM FUN_PROFIT-->
		<!--WHERE COMP_ID = #{compId} and DEAL_VERIFY_TIME &gt;= #{startDate} and DEAL_VERIFY_TIME &lt; #{endDate}-->
		<!--and ARCHIVE_ID in-->
		<!--<foreach collection="archiveIds" separator="," item="archiveId" open="(" close=")">-->
			<!--#{archiveId}-->
		<!--</foreach>-->
	<!--</select>-->
  <select id="getProfitListByArchiveIds" resultType="com.myfun.repository.erpdb.dto.ErpFunProfitDto">
      select ARCHIVE_ID as archiveId
    <if test="flag == 1">
      ,SUM(PROFIT_MONEY) as profitWage,COUNT(1) as profitCount
    </if>
    <if test="flag == 2">
      ,SUM(PROFIT_MONEY) as setProfitWage,COUNT(1) as setProfitCount
    </if>
    <if test="flag == 3">
      ,SUM(PROFIT_MONEY) as hisProfitWage,COUNT(1) as hisProfitCount
    </if>
        FROM FUN_PROFIT
        WHERE COMP_ID = #{compId}
        and ARCHIVE_ID in
        <foreach close=")" collection="archiveIds" item="archiveId" open="(" separator=",">
        #{archiveId}
        </foreach>
    <if test="flag == 1">
      and DEAL_VERIFY_TIME &gt;= #{startDate} and DEAL_VERIFY_TIME &lt; #{endDate}
    </if>
      <if test="flag == 2">
         and SETTLE_FLAG = 2 and DEAL_VERIFY_TIME &gt;= #{startDate} and DEAL_VERIFY_TIME &lt; #{endDate}
      </if>
    <if test="flag == 3">
      and SETTLE_FLAG != 2  and DEAL_VERIFY_TIME &lt;= #{startDate}
    </if>
      group by ARCHIVE_ID
  </select>
  
  <update id="updateProfitTypeWithNoUser">
  	update FUN_PROFIT set PROFIT_TYPE = 2 where COMP_ID = #{compId} and PROFIT_TYPE = 0 and DEAL_ID = #{dealId} and USER_ID is null
  </update>
  
  <update id="updateDoubleProportion">
  	update FUN_PROFIT set PROFIT_PROPORTION = PROFIT_PROPORTION * 2 where COMP_ID = #{compId} and PROFIT_TYPE = 0 and DEAL_ID = #{dealId} and USER_ID is NOT null 
  </update>
  
  <update id="updateProfitUserToNull">
  	update FUN_PROFIT 
		set USER_ID = null, AREA_ID = null, REG_ID = null, DEPT_ID = null, GR_ID = null, 
			ROLE_ID = null, ROLE_NAME = null, ARCHIVE_ID = null 
				where COMP_ID = #{compId} and DEAL_ID = #{dealId} and PROFIT_ID in 
				<foreach close=")" collection="profitIdSet" item="profitId" open="(" separator=",">
					#{profitId}
			    </foreach>
  </update>
  
    <delete id="deleteFunProfitByKey">
    delete FROM FUN_PROFIT WHERE COMP_ID = #{compId} AND USER_ID = #{userId} AND PERFORMANCE_NAME LIKE '%钥匙%' AND
 	PROFIT_ID NOT IN (SELECT PROFIT_ID FROM FUN_PROFIT_DETAIL WHERE COMP_ID = #{compId} AND USER_ID = #{userId})
  </delete>
  
</mapper>