<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunEmployeeLogMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunEmployeeLog">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="EMPLOYEE_ID" jdbcType="INTEGER" property="employeeId" />
    <result column="LOG_TYPE" jdbcType="TINYINT" property="logType" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="CREATE_UID" jdbcType="INTEGER" property="createUid" />
    <result column="BEFORE_DEPT" jdbcType="INTEGER" property="beforeDept" />
    <result column="AFTER_DEPT" jdbcType="INTEGER" property="afterDept" />
    <result column="BEFORE_ROLE" jdbcType="VARCHAR" property="beforeRole" />
    <result column="AFTER_ROLE" jdbcType="VARCHAR" property="afterRole" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="CONTENT" jdbcType="VARCHAR" property="content" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="BEFORE_GR" jdbcType="INTEGER" property="beforeGr" />
    <result column="AFTER_GR" jdbcType="INTEGER" property="afterGr" />
    <result column="BEFORE_ROLE_LEVEL_ID" jdbcType="INTEGER" property="beforeRoleLevelId" />
    <result column="AFTER_ROLE_LEVEL_ID" jdbcType="INTEGER" property="afterRoleLevelId" />
    <result column="BEFORE_ORGANIZATION_ID" jdbcType="INTEGER" property="beforeOrganizationId" />
    <result column="AFTER_ORGANIZATION_ID" jdbcType="INTEGER" property="afterOrganizationId" />
    <result column="CREATE_USERNAME" jdbcType="VARCHAR" property="createUsername" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, EMPLOYEE_ID, LOG_TYPE, CREATION_TIME, CREATE_UID, BEFORE_DEPT, AFTER_DEPT, BEFORE_ROLE, 
    AFTER_ROLE, COMP_ID, CONTENT, ARCHIVE_ID, BEFORE_GR, AFTER_GR, BEFORE_ROLE_LEVEL_ID, 
    AFTER_ROLE_LEVEL_ID, BEFORE_ORGANIZATION_ID, AFTER_ORGANIZATION_ID, CREATE_USERNAME
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLogExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_EMPLOYEE_LOG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_EMPLOYEE_LOG
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_EMPLOYEE_LOG
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLogExample">
    <!--@mbggenerated-->
    delete from FUN_EMPLOYEE_LOG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLog" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_EMPLOYEE_LOG (EMPLOYEE_ID, LOG_TYPE, CREATION_TIME, 
      CREATE_UID, BEFORE_DEPT, AFTER_DEPT, 
      BEFORE_ROLE, AFTER_ROLE, COMP_ID, 
      CONTENT, ARCHIVE_ID, BEFORE_GR, 
      AFTER_GR, BEFORE_ROLE_LEVEL_ID, AFTER_ROLE_LEVEL_ID, 
      BEFORE_ORGANIZATION_ID, AFTER_ORGANIZATION_ID, 
      CREATE_USERNAME)
    values (#{employeeId,jdbcType=INTEGER}, #{logType,jdbcType=TINYINT}, #{creationTime,jdbcType=TIMESTAMP}, 
      #{createUid,jdbcType=INTEGER}, #{beforeDept,jdbcType=INTEGER}, #{afterDept,jdbcType=INTEGER}, 
      #{beforeRole,jdbcType=VARCHAR}, #{afterRole,jdbcType=VARCHAR}, #{compId,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{archiveId,jdbcType=INTEGER}, #{beforeGr,jdbcType=INTEGER}, 
      #{afterGr,jdbcType=INTEGER}, #{beforeRoleLevelId,jdbcType=INTEGER}, #{afterRoleLevelId,jdbcType=INTEGER}, 
      #{beforeOrganizationId,jdbcType=INTEGER}, #{afterOrganizationId,jdbcType=INTEGER}, 
      #{createUsername,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLog" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_EMPLOYEE_LOG
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        EMPLOYEE_ID,
      </if>
      <if test="logType != null">
        LOG_TYPE,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="createUid != null">
        CREATE_UID,
      </if>
      <if test="beforeDept != null">
        BEFORE_DEPT,
      </if>
      <if test="afterDept != null">
        AFTER_DEPT,
      </if>
      <if test="beforeRole != null">
        BEFORE_ROLE,
      </if>
      <if test="afterRole != null">
        AFTER_ROLE,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="content != null">
        CONTENT,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="beforeGr != null">
        BEFORE_GR,
      </if>
      <if test="afterGr != null">
        AFTER_GR,
      </if>
      <if test="beforeRoleLevelId != null">
        BEFORE_ROLE_LEVEL_ID,
      </if>
      <if test="afterRoleLevelId != null">
        AFTER_ROLE_LEVEL_ID,
      </if>
      <if test="beforeOrganizationId != null">
        BEFORE_ORGANIZATION_ID,
      </if>
      <if test="afterOrganizationId != null">
        AFTER_ORGANIZATION_ID,
      </if>
      <if test="createUsername != null">
        CREATE_USERNAME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        #{logType,jdbcType=TINYINT},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUid != null">
        #{createUid,jdbcType=INTEGER},
      </if>
      <if test="beforeDept != null">
        #{beforeDept,jdbcType=INTEGER},
      </if>
      <if test="afterDept != null">
        #{afterDept,jdbcType=INTEGER},
      </if>
      <if test="beforeRole != null">
        #{beforeRole,jdbcType=VARCHAR},
      </if>
      <if test="afterRole != null">
        #{afterRole,jdbcType=VARCHAR},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="beforeGr != null">
        #{beforeGr,jdbcType=INTEGER},
      </if>
      <if test="afterGr != null">
        #{afterGr,jdbcType=INTEGER},
      </if>
      <if test="beforeRoleLevelId != null">
        #{beforeRoleLevelId,jdbcType=INTEGER},
      </if>
      <if test="afterRoleLevelId != null">
        #{afterRoleLevelId,jdbcType=INTEGER},
      </if>
      <if test="beforeOrganizationId != null">
        #{beforeOrganizationId,jdbcType=INTEGER},
      </if>
      <if test="afterOrganizationId != null">
        #{afterOrganizationId,jdbcType=INTEGER},
      </if>
      <if test="createUsername != null">
        #{createUsername,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLogExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_EMPLOYEE_LOG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_LOG
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.employeeId != null">
        EMPLOYEE_ID = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.logType != null">
        LOG_TYPE = #{record.logType,jdbcType=TINYINT},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUid != null">
        CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      </if>
      <if test="record.beforeDept != null">
        BEFORE_DEPT = #{record.beforeDept,jdbcType=INTEGER},
      </if>
      <if test="record.afterDept != null">
        AFTER_DEPT = #{record.afterDept,jdbcType=INTEGER},
      </if>
      <if test="record.beforeRole != null">
        BEFORE_ROLE = #{record.beforeRole,jdbcType=VARCHAR},
      </if>
      <if test="record.afterRole != null">
        AFTER_ROLE = #{record.afterRole,jdbcType=VARCHAR},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        CONTENT = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.beforeGr != null">
        BEFORE_GR = #{record.beforeGr,jdbcType=INTEGER},
      </if>
      <if test="record.afterGr != null">
        AFTER_GR = #{record.afterGr,jdbcType=INTEGER},
      </if>
      <if test="record.beforeRoleLevelId != null">
        BEFORE_ROLE_LEVEL_ID = #{record.beforeRoleLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.afterRoleLevelId != null">
        AFTER_ROLE_LEVEL_ID = #{record.afterRoleLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.beforeOrganizationId != null">
        BEFORE_ORGANIZATION_ID = #{record.beforeOrganizationId,jdbcType=INTEGER},
      </if>
      <if test="record.afterOrganizationId != null">
        AFTER_ORGANIZATION_ID = #{record.afterOrganizationId,jdbcType=INTEGER},
      </if>
      <if test="record.createUsername != null">
        CREATE_USERNAME = #{record.createUsername,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_LOG
    set ID = #{record.id,jdbcType=INTEGER},
      EMPLOYEE_ID = #{record.employeeId,jdbcType=INTEGER},
      LOG_TYPE = #{record.logType,jdbcType=TINYINT},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      BEFORE_DEPT = #{record.beforeDept,jdbcType=INTEGER},
      AFTER_DEPT = #{record.afterDept,jdbcType=INTEGER},
      BEFORE_ROLE = #{record.beforeRole,jdbcType=VARCHAR},
      AFTER_ROLE = #{record.afterRole,jdbcType=VARCHAR},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      CONTENT = #{record.content,jdbcType=VARCHAR},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      BEFORE_GR = #{record.beforeGr,jdbcType=INTEGER},
      AFTER_GR = #{record.afterGr,jdbcType=INTEGER},
      BEFORE_ROLE_LEVEL_ID = #{record.beforeRoleLevelId,jdbcType=INTEGER},
      AFTER_ROLE_LEVEL_ID = #{record.afterRoleLevelId,jdbcType=INTEGER},
      BEFORE_ORGANIZATION_ID = #{record.beforeOrganizationId,jdbcType=INTEGER},
      AFTER_ORGANIZATION_ID = #{record.afterOrganizationId,jdbcType=INTEGER},
      CREATE_USERNAME = #{record.createUsername,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLog">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_LOG
    <set>
      <if test="employeeId != null">
        EMPLOYEE_ID = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        LOG_TYPE = #{logType,jdbcType=TINYINT},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUid != null">
        CREATE_UID = #{createUid,jdbcType=INTEGER},
      </if>
      <if test="beforeDept != null">
        BEFORE_DEPT = #{beforeDept,jdbcType=INTEGER},
      </if>
      <if test="afterDept != null">
        AFTER_DEPT = #{afterDept,jdbcType=INTEGER},
      </if>
      <if test="beforeRole != null">
        BEFORE_ROLE = #{beforeRole,jdbcType=VARCHAR},
      </if>
      <if test="afterRole != null">
        AFTER_ROLE = #{afterRole,jdbcType=VARCHAR},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        CONTENT = #{content,jdbcType=VARCHAR},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="beforeGr != null">
        BEFORE_GR = #{beforeGr,jdbcType=INTEGER},
      </if>
      <if test="afterGr != null">
        AFTER_GR = #{afterGr,jdbcType=INTEGER},
      </if>
      <if test="beforeRoleLevelId != null">
        BEFORE_ROLE_LEVEL_ID = #{beforeRoleLevelId,jdbcType=INTEGER},
      </if>
      <if test="afterRoleLevelId != null">
        AFTER_ROLE_LEVEL_ID = #{afterRoleLevelId,jdbcType=INTEGER},
      </if>
      <if test="beforeOrganizationId != null">
        BEFORE_ORGANIZATION_ID = #{beforeOrganizationId,jdbcType=INTEGER},
      </if>
      <if test="afterOrganizationId != null">
        AFTER_ORGANIZATION_ID = #{afterOrganizationId,jdbcType=INTEGER},
      </if>
      <if test="createUsername != null">
        CREATE_USERNAME = #{createUsername,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunEmployeeLog">
    <!--@mbggenerated-->
    update FUN_EMPLOYEE_LOG
    set EMPLOYEE_ID = #{employeeId,jdbcType=INTEGER},
      LOG_TYPE = #{logType,jdbcType=TINYINT},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      CREATE_UID = #{createUid,jdbcType=INTEGER},
      BEFORE_DEPT = #{beforeDept,jdbcType=INTEGER},
      AFTER_DEPT = #{afterDept,jdbcType=INTEGER},
      BEFORE_ROLE = #{beforeRole,jdbcType=VARCHAR},
      AFTER_ROLE = #{afterRole,jdbcType=VARCHAR},
      COMP_ID = #{compId,jdbcType=INTEGER},
      CONTENT = #{content,jdbcType=VARCHAR},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      BEFORE_GR = #{beforeGr,jdbcType=INTEGER},
      AFTER_GR = #{afterGr,jdbcType=INTEGER},
      BEFORE_ROLE_LEVEL_ID = #{beforeRoleLevelId,jdbcType=INTEGER},
      AFTER_ROLE_LEVEL_ID = #{afterRoleLevelId,jdbcType=INTEGER},
      BEFORE_ORGANIZATION_ID = #{beforeOrganizationId,jdbcType=INTEGER},
      AFTER_ORGANIZATION_ID = #{afterOrganizationId,jdbcType=INTEGER},
      CREATE_USERNAME = #{createUsername,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="ErpFunEmployeeLogDto" type="com.myfun.repository.erpdb.dto.ErpFunEmployeeLogDto">
    <result column="USER_WRITEOFF" jdbcType="TINYINT" property="userWriteoff" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="CREATE_USERNAME" jdbcType="VARCHAR" property="createUserName" />
  </resultMap>

	<select id="getLogListByEmployeeId" resultMap="ErpFunEmployeeLogDto">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_EMPLOYEE_LOG
		WHERE EMPLOYEE_ID = #{employeeId}
		ORDER BY CREATION_TIME DESC
	</select>
	
	<select id="getEmployeeLogList" resultMap="ErpFunEmployeeLogDto">
		SELECT
		A.AFTER_DEPT,A.AFTER_ROLE,A.BEFORE_DEPT,A.BEFORE_ROLE,A.CREATION_TIME,A.CREATE_UID,A.LOG_TYPE,B.USER_ID,A.BEFORE_GR,A.AFTER_GR,A.CREATE_USERNAME,
		B.USER_ID, C.AREA_ID,C.REG_ID,C.GR_ID,C.DEPT_ID,C.USER_NAME,C.USER_WRITEOFF
		FROM FUN_EMPLOYEE_LOG A
		JOIN FUN_EMPLOYEE_DOC B ON A.EMPLOYEE_ID = B.ID
		JOIN FUN_USERS C ON B.USER_ID = C.USER_ID
		WHERE A.COMP_ID = #{compId}
		<if test="param.logType != null and param.logType != ''">
			AND A.LOG_TYPE = #{param.logType}
		</if>
		<if test="param.startTime != null and param.startTime != ''">
			AND A.CREATION_TIME &gt;= #{param.startTime}
		</if>
		<if test="param.endTime != null and param.endTime != ''">
			AND A.CREATION_TIME &lt;= #{param.endTime}
		</if>
      <if test="param.newOrganization == false">
            <if test="param.areaId != null and param.areaId != ''">
                AND C.AREA_ID = #{param.areaId}
            </if>
            <if test="param.regId != null and param.regId != ''">
                AND C.REG_ID = #{param.regId}
            </if>
            <if test="param.deptId != null and param.deptId != ''">
                AND C.DEPT_ID = #{param.deptId}
            </if>
            <if test="param.grId != null and param.grId != ''">
                AND C.GR_ID = #{param.grId}
            </if>
      </if>
		<if test="param.newOrganization == true and param.organizationId != null and param.organizationId &gt; 0">
            AND C.TISSUE_LINE LIKE '%:${param.organizationId}:%'
        </if>
		<if test="param.userId != null and param.userId != ''">
			AND C.USER_ID = #{param.userId}
		</if>
		order by A.CREATION_TIME desc
	</select>
	<select id="selectFunEmployeeLogByArchiveIds" resultMap="BaseResultMap">
      SELECT <include refid="Base_Column_List" /> FROM FUN_EMPLOYEE_LOG WHERE ID IN (SELECT MAX(ID) FROM FUN_EMPLOYEE_LOG WHERE COMP_ID = #{compId} AND ARCHIVE_ID IN
      <foreach close=")" collection="archiveIds" item="listItem" open="(" separator=",">
        #{listItem}
      </foreach>
      GROUP BY ARCHIVE_ID)
    </select>
</mapper>