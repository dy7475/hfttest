<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpSystemSettingLogsMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="SSL_TYPE" jdbcType="TINYINT" property="sslType" />
    <result column="CREATE_UID" jdbcType="INTEGER" property="createUid" />
    <result column="INFLUENCE_UID" jdbcType="INTEGER" property="influenceUid" />
    <result column="LOG_CONTENT" jdbcType="VARCHAR" property="logContent" />
    <result column="CREATE_TIME" jdbcType="VARCHAR" property="createTime" />
    <result column="MODULAR" jdbcType="INTEGER" property="modular" />
    <result column="CREATE_DEPT" jdbcType="INTEGER" property="createDept" />
    <result column="INFLUENCE_DEPT" jdbcType="INTEGER" property="influenceDept" />
    <result column="CREATE_USERNAME" jdbcType="VARCHAR" property="createUsername" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    <result column="BEFORE_MODIFICATION" jdbcType="CLOB" property="beforeModification" />
    <result column="AFTER_MODIFICATION" jdbcType="CLOB" property="afterModification" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, SSL_TYPE, CREATE_UID, INFLUENCE_UID, LOG_CONTENT, CREATE_TIME, MODULAR, 
    CREATE_DEPT, INFLUENCE_DEPT, CREATE_USERNAME
  </sql>
  <sql id="Blob_Column_List">
    <!--@mbggenerated-->
    BEFORE_MODIFICATION, AFTER_MODIFICATION
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogsExample" resultMap="ResultMapWithBLOBs">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from SYSTEM_SETTING_LOGS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogsExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from SYSTEM_SETTING_LOGS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from SYSTEM_SETTING_LOGS
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from SYSTEM_SETTING_LOGS
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogsExample">
    <!--@mbggenerated-->
    delete from SYSTEM_SETTING_LOGS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
      SELECT MAX(ISNULL(ID,0))+1 FROM SYSTEM_SETTING_LOGS
    </selectKey>
    insert into SYSTEM_SETTING_LOGS (ID, COMP_ID, SSL_TYPE, 
      CREATE_UID, INFLUENCE_UID, LOG_CONTENT, 
      CREATE_TIME, MODULAR, CREATE_DEPT, 
      INFLUENCE_DEPT, CREATE_USERNAME, BEFORE_MODIFICATION, 
      AFTER_MODIFICATION)
    values (#{id,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{sslType,jdbcType=TINYINT}, 
      #{createUid,jdbcType=INTEGER}, #{influenceUid,jdbcType=INTEGER}, #{logContent,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=VARCHAR}, #{modular,jdbcType=INTEGER}, #{createDept,jdbcType=INTEGER}, 
      #{influenceDept,jdbcType=INTEGER}, #{createUsername,jdbcType=VARCHAR}, #{beforeModification,jdbcType=CLOB}, 
      #{afterModification,jdbcType=CLOB})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
      SELECT MAX(ISNULL(ID,0))+1 FROM SYSTEM_SETTING_LOGS
    </selectKey>
    insert into SYSTEM_SETTING_LOGS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="sslType != null">
        SSL_TYPE,
      </if>
      <if test="createUid != null">
        CREATE_UID,
      </if>
      <if test="influenceUid != null">
        INFLUENCE_UID,
      </if>
      <if test="logContent != null">
        LOG_CONTENT,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="modular != null">
        MODULAR,
      </if>
      <if test="createDept != null">
        CREATE_DEPT,
      </if>
      <if test="influenceDept != null">
        INFLUENCE_DEPT,
      </if>
      <if test="createUsername != null">
        CREATE_USERNAME,
      </if>
      <if test="beforeModification != null">
        BEFORE_MODIFICATION,
      </if>
      <if test="afterModification != null">
        AFTER_MODIFICATION,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="sslType != null">
        #{sslType,jdbcType=TINYINT},
      </if>
      <if test="createUid != null">
        #{createUid,jdbcType=INTEGER},
      </if>
      <if test="influenceUid != null">
        #{influenceUid,jdbcType=INTEGER},
      </if>
      <if test="logContent != null">
        #{logContent,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="modular != null">
        #{modular,jdbcType=INTEGER},
      </if>
      <if test="createDept != null">
        #{createDept,jdbcType=INTEGER},
      </if>
      <if test="influenceDept != null">
        #{influenceDept,jdbcType=INTEGER},
      </if>
      <if test="createUsername != null">
        #{createUsername,jdbcType=VARCHAR},
      </if>
      <if test="beforeModification != null">
        #{beforeModification,jdbcType=CLOB},
      </if>
      <if test="afterModification != null">
        #{afterModification,jdbcType=CLOB},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogsExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from SYSTEM_SETTING_LOGS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update SYSTEM_SETTING_LOGS
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.sslType != null">
        SSL_TYPE = #{record.sslType,jdbcType=TINYINT},
      </if>
      <if test="record.createUid != null">
        CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      </if>
      <if test="record.influenceUid != null">
        INFLUENCE_UID = #{record.influenceUid,jdbcType=INTEGER},
      </if>
      <if test="record.logContent != null">
        LOG_CONTENT = #{record.logContent,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.modular != null">
        MODULAR = #{record.modular,jdbcType=INTEGER},
      </if>
      <if test="record.createDept != null">
        CREATE_DEPT = #{record.createDept,jdbcType=INTEGER},
      </if>
      <if test="record.influenceDept != null">
        INFLUENCE_DEPT = #{record.influenceDept,jdbcType=INTEGER},
      </if>
      <if test="record.createUsername != null">
        CREATE_USERNAME = #{record.createUsername,jdbcType=VARCHAR},
      </if>
      <if test="record.beforeModification != null">
        BEFORE_MODIFICATION = #{record.beforeModification,jdbcType=CLOB},
      </if>
      <if test="record.afterModification != null">
        AFTER_MODIFICATION = #{record.afterModification,jdbcType=CLOB},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--@mbggenerated-->
    update SYSTEM_SETTING_LOGS
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      SSL_TYPE = #{record.sslType,jdbcType=TINYINT},
      CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      INFLUENCE_UID = #{record.influenceUid,jdbcType=INTEGER},
      LOG_CONTENT = #{record.logContent,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=VARCHAR},
      MODULAR = #{record.modular,jdbcType=INTEGER},
      CREATE_DEPT = #{record.createDept,jdbcType=INTEGER},
      INFLUENCE_DEPT = #{record.influenceDept,jdbcType=INTEGER},
      CREATE_USERNAME = #{record.createUsername,jdbcType=VARCHAR},
      BEFORE_MODIFICATION = #{record.beforeModification,jdbcType=CLOB},
      AFTER_MODIFICATION = #{record.afterModification,jdbcType=CLOB}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update SYSTEM_SETTING_LOGS
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      SSL_TYPE = #{record.sslType,jdbcType=TINYINT},
      CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      INFLUENCE_UID = #{record.influenceUid,jdbcType=INTEGER},
      LOG_CONTENT = #{record.logContent,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=VARCHAR},
      MODULAR = #{record.modular,jdbcType=INTEGER},
      CREATE_DEPT = #{record.createDept,jdbcType=INTEGER},
      INFLUENCE_DEPT = #{record.influenceDept,jdbcType=INTEGER},
      CREATE_USERNAME = #{record.createUsername,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    update SYSTEM_SETTING_LOGS
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="sslType != null">
        SSL_TYPE = #{sslType,jdbcType=TINYINT},
      </if>
      <if test="createUid != null">
        CREATE_UID = #{createUid,jdbcType=INTEGER},
      </if>
      <if test="influenceUid != null">
        INFLUENCE_UID = #{influenceUid,jdbcType=INTEGER},
      </if>
      <if test="logContent != null">
        LOG_CONTENT = #{logContent,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="modular != null">
        MODULAR = #{modular,jdbcType=INTEGER},
      </if>
      <if test="createDept != null">
        CREATE_DEPT = #{createDept,jdbcType=INTEGER},
      </if>
      <if test="influenceDept != null">
        INFLUENCE_DEPT = #{influenceDept,jdbcType=INTEGER},
      </if>
      <if test="createUsername != null">
        CREATE_USERNAME = #{createUsername,jdbcType=VARCHAR},
      </if>
      <if test="beforeModification != null">
        BEFORE_MODIFICATION = #{beforeModification,jdbcType=CLOB},
      </if>
      <if test="afterModification != null">
        AFTER_MODIFICATION = #{afterModification,jdbcType=CLOB},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    update SYSTEM_SETTING_LOGS
    set COMP_ID = #{compId,jdbcType=INTEGER},
      SSL_TYPE = #{sslType,jdbcType=TINYINT},
      CREATE_UID = #{createUid,jdbcType=INTEGER},
      INFLUENCE_UID = #{influenceUid,jdbcType=INTEGER},
      LOG_CONTENT = #{logContent,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=VARCHAR},
      MODULAR = #{modular,jdbcType=INTEGER},
      CREATE_DEPT = #{createDept,jdbcType=INTEGER},
      INFLUENCE_DEPT = #{influenceDept,jdbcType=INTEGER},
      CREATE_USERNAME = #{createUsername,jdbcType=VARCHAR},
      BEFORE_MODIFICATION = #{beforeModification,jdbcType=CLOB},
      AFTER_MODIFICATION = #{afterModification,jdbcType=CLOB}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpSystemSettingLogs">
    <!--@mbggenerated-->
    update SYSTEM_SETTING_LOGS
    set COMP_ID = #{compId,jdbcType=INTEGER},
      SSL_TYPE = #{sslType,jdbcType=TINYINT},
      CREATE_UID = #{createUid,jdbcType=INTEGER},
      INFLUENCE_UID = #{influenceUid,jdbcType=INTEGER},
      LOG_CONTENT = #{logContent,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=VARCHAR},
      MODULAR = #{modular,jdbcType=INTEGER},
      CREATE_DEPT = #{createDept,jdbcType=INTEGER},
      INFLUENCE_DEPT = #{influenceDept,jdbcType=INTEGER},
      CREATE_USERNAME = #{createUsername,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
   <resultMap id="DtoBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpSystemSettingLogsDto">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="SSL_TYPE" jdbcType="TINYINT" property="sslType" />
    <result column="CREATE_UID" jdbcType="INTEGER" property="createUid" />
    <result column="INFLUENCE_UID" jdbcType="INTEGER" property="influenceUid" />
    <result column="LOG_CONTENT" jdbcType="VARCHAR" property="logContent" />
    <result column="CREATE_TIME" jdbcType="VARCHAR" property="createTime" />
    <result column="MODULAR" jdbcType="INTEGER" property="modular" />
    <result column="CREATE_DEPT" jdbcType="INTEGER" property="createDept" />
    <result column="INFLUENCE_DEPT" jdbcType="INTEGER" property="influenceDept" />
    <result column="BEFORE_MODIFICATION" jdbcType="CLOB" property="beforeModification" />
    <result column="AFTER_MODIFICATION" jdbcType="CLOB" property="afterModification" />
    <result column="CREATE_UID_NAME" jdbcType="VARCHAR" property="createUidName" />
    <result column="CREATE_USERNAME" jdbcType="VARCHAR" property="createUserName" />
  </resultMap>
	
	<select id="getMaxId" resultType="java.lang.Integer">
		SELECT MAX(ISNULL(ID,0))+1 FROM SYSTEM_SETTING_LOGS
	</select>
	
	<select id="getLogList" resultMap="DtoBaseResultMap">
		select
          A.ID, A.COMP_ID, A.SSL_TYPE, A.CREATE_UID, A.INFLUENCE_UID, A.LOG_CONTENT, A.CREATE_TIME, A.MODULAR,
      A.CREATE_DEPT, A.INFLUENCE_DEPT, A.CREATE_USERNAME
		FROM SYSTEM_SETTING_LOGS A
		LEFT JOIN FUN_USERS B ON A.INFLUENCE_UID = B.USER_ID
		<where>
			AND A.COMP_ID = #{pMap.compId}
			<if test="null != pMap.deptId and ''!= pMap.deptId">
				AND (INFLUENCE_DEPT = 0 OR INFLUENCE_DEPT = #{pMap.deptId})
			</if>
			<if test="null != pMap.createUid and '' != pMap.createUid">
				AND A.CREATE_UID = #{pMap.createUid}
			</if>
			<if test="null != pMap.grId">
				AND B.GR_ID = #{pMap.grId}
			</if>
			<if test="null != pMap.modular and '' != pMap.modular">
				AND A.MODULAR = #{pMap.modular}
			</if>
			<if test="null != pMap.influenceUid and '' != pMap.influenceUid">
				AND A.INFLUENCE_UID = #{pMap.influenceUid}
			</if>
			<if test="null != pMap.time1 and '' != pMap.time1">
				AND <![CDATA[A.CREATE_TIME  >= #{pMap.time1}]]>
			</if>
			<if test="null != pMap.time2 and '' != pMap.time2">
				AND <![CDATA[A.CREATE_TIME  <= #{pMap.time2}]]>
			</if>
			<if test="null != pMap.sslTypeNotIn">
				AND SSL_TYPE NOT IN
				<foreach close=")" collection="pMap.sslTypeNotIn" item="item" open="(" separator=",">
					#{item}
				</foreach>
			</if>
            <if test="null != pMap.organizationId">
                and B.TISSUE_LINE LIKE '%:${pMap.organizationId}:%'
            </if>
		</where>
		<choose>
			<when test="null != pMap.orderBy and '' != pMap.orderBy">
				order by ${pMap.orderBy}
			</when>
			<otherwise>
				order by A.CREATE_TIME DESC
			</otherwise>
		</choose>
	</select>

  <select id="getListCount" resultType="java.lang.Integer">
    select
      count(1)
    FROM SYSTEM_SETTING_LOGS A
    LEFT JOIN FUN_USERS B ON A.INFLUENCE_UID = B.USER_ID
    <where>
      AND A.COMP_ID = #{pMap.compId}
      <if test="null != pMap.deptId and ''!= pMap.deptId">
        AND (INFLUENCE_DEPT = 0 OR INFLUENCE_DEPT = #{pMap.deptId})
      </if>
      <if test="null != pMap.createUid and '' != pMap.createUid">
        AND A.CREATE_UID = #{pMap.createUid}
      </if>
      <if test="null != pMap.grId">
        AND B.GR_ID = #{pMap.grId}
      </if>
      <if test="null != pMap.modular and '' != pMap.modular">
        AND A.MODULAR = #{pMap.modular}
      </if>
      <if test="null != pMap.influenceUid and '' != pMap.influenceUid">
        AND A.INFLUENCE_UID = #{pMap.influenceUid}
      </if>
      <if test="null != pMap.time1 and '' != pMap.time1">
        AND <![CDATA[A.CREATE_TIME  >= #{pMap.time1}]]>
      </if>
      <if test="null != pMap.time2 and '' != pMap.time2">
        AND <![CDATA[A.CREATE_TIME  <= #{pMap.time2}]]>
      </if>
      <if test="null != pMap.sslTypeNotIn">
        AND SSL_TYPE NOT IN
        <foreach close=")" collection="pMap.sslTypeNotIn" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>
      <if test="null != pMap.organizationId">
        and B.TISSUE_LINE LIKE '%:${pMap.organizationId}:%'
      </if>
    </where>
  </select>
	
	<select id="getErpSystemSettingLogsList" resultMap="BaseResultMap">
		SELECT INFLUENCE_UID,LOG_CONTENT  from SYSTEM_SETTING_LOGS 
		where COMP_ID = #{compId} and SSL_TYPE in(5,1,9,6)  and  id  in (
		SELECT  max(id) from SYSTEM_SETTING_LOGS  where SSL_TYPE in(5,1,9,6) group by INFLUENCE_UID)
	</select>

	<select id="getEnclosureLogs" resultMap="DtoBaseResultMap">
		SELECT a.ID, a.COMP_ID, a.SSL_TYPE, a.CREATE_UID, a.INFLUENCE_UID,a.CREATE_USERNAME,
		       a.LOG_CONTENT, a.CREATE_TIME, a.MODULAR, a.CREATE_DEPT, a.INFLUENCE_DEPT, b.USER_NAME CREATE_UID_NAME
		FROM SYSTEM_SETTING_LOGS a
		left JOIN FUN_USERS b on a.INFLUENCE_UID = b.user_id
		<where>
			and a.COMP_ID = #{compId} and b.archive_id=#{archiveId}
			<choose>
				<when test="isChange== 0 ">
					and SSL_TYPE in(5,1,9,6)
				</when>
				<otherwise>
					and SSL_TYPE in(25,27,28)
				</otherwise>
			</choose>
		</where>
		order by a.CREATE_TIME desc
	</select>

	<select id="getChangeEnclosureLogs" resultMap="DtoBaseResultMap">
		SELECT
		<include refid="Blob_Column_List" />
		from SYSTEM_SETTING_LOGS
		where ID = #{systemSettingLogsId}
	</select>
</mapper>