<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunStatisticDetailMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunStatisticDetail">
    <!--@mbggenerated-->
    <id column="STATISTIC_DETAIL_ID" jdbcType="INTEGER" property="statisticDetailId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="STATISTIC_TYPE" jdbcType="INTEGER" property="statisticType" />
    <result column="CASE_TYPE" jdbcType="INTEGER" property="caseType" />
    <result column="CASE_ID" jdbcType="INTEGER" property="caseId" />
    <result column="STATISTIC_TOTLE_ID" jdbcType="INTEGER" property="statisticTotleId" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="TRACK_ID" jdbcType="VARCHAR" property="trackId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CASE_CREATE_TIME" jdbcType="TIMESTAMP" property="caseCreateTime" />
    <result column="CASE_STATUS" jdbcType="INTEGER" property="caseStatus" />
    <result column="CASE_AREA_ID" jdbcType="INTEGER" property="caseAreaId" />
    <result column="CASE_REG_ID" jdbcType="INTEGER" property="caseRegId" />
    <result column="CASE_DEPT_ID" jdbcType="INTEGER" property="caseDeptId" />
    <result column="CASE_GR_ID" jdbcType="INTEGER" property="caseGrId" />
    <result column="CASE_USER_ID" jdbcType="INTEGER" property="caseUserId" />
    <result column="CASE_ARCHIVE_ID" jdbcType="INTEGER" property="caseArchiveId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    STATISTIC_DETAIL_ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, CITY_ID, 
    STATISTIC_TYPE, CASE_TYPE, CASE_ID, STATISTIC_TOTLE_ID, CREATE_TIME, TRACK_ID, ARCHIVE_ID, 
    CASE_CREATE_TIME, CASE_STATUS, CASE_AREA_ID, CASE_REG_ID, CASE_DEPT_ID, CASE_GR_ID, 
    CASE_USER_ID, CASE_ARCHIVE_ID
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_STATISTIC_DETAIL
    where STATISTIC_DETAIL_ID = #{statisticDetailId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_STATISTIC_DETAIL
    where STATISTIC_DETAIL_ID = #{statisticDetailId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticDetail">
    <!--@mbggenerated-->
    <selectKey keyProperty="statisticDetailId" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_STATISTIC_DETAIL (COMP_ID, AREA_ID, REG_ID, 
      DEPT_ID, GR_ID, USER_ID, 
      CITY_ID, STATISTIC_TYPE, CASE_TYPE, 
      CASE_ID, STATISTIC_TOTLE_ID, CREATE_TIME, 
      TRACK_ID, ARCHIVE_ID, CASE_CREATE_TIME, 
      CASE_STATUS, CASE_AREA_ID, CASE_REG_ID, 
      CASE_DEPT_ID, CASE_GR_ID, CASE_USER_ID, 
      CASE_ARCHIVE_ID)
    values (#{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, 
      #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{cityId,jdbcType=INTEGER}, #{statisticType,jdbcType=INTEGER}, #{caseType,jdbcType=INTEGER}, 
      #{caseId,jdbcType=INTEGER}, #{statisticTotleId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{trackId,jdbcType=VARCHAR}, #{archiveId,jdbcType=INTEGER}, #{caseCreateTime,jdbcType=TIMESTAMP}, 
      #{caseStatus,jdbcType=INTEGER}, #{caseAreaId,jdbcType=INTEGER}, #{caseRegId,jdbcType=INTEGER}, 
      #{caseDeptId,jdbcType=INTEGER}, #{caseGrId,jdbcType=INTEGER}, #{caseUserId,jdbcType=INTEGER}, 
      #{caseArchiveId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticDetail">
    <!--@mbggenerated-->
    <selectKey keyProperty="statisticDetailId" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_STATISTIC_DETAIL
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="statisticType != null">
        STATISTIC_TYPE,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="caseId != null">
        CASE_ID,
      </if>
      <if test="statisticTotleId != null">
        STATISTIC_TOTLE_ID,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="trackId != null">
        TRACK_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="caseCreateTime != null">
        CASE_CREATE_TIME,
      </if>
      <if test="caseStatus != null">
        CASE_STATUS,
      </if>
      <if test="caseAreaId != null">
        CASE_AREA_ID,
      </if>
      <if test="caseRegId != null">
        CASE_REG_ID,
      </if>
      <if test="caseDeptId != null">
        CASE_DEPT_ID,
      </if>
      <if test="caseGrId != null">
        CASE_GR_ID,
      </if>
      <if test="caseUserId != null">
        CASE_USER_ID,
      </if>
      <if test="caseArchiveId != null">
        CASE_ARCHIVE_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="statisticType != null">
        #{statisticType,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
      <if test="statisticTotleId != null">
        #{statisticTotleId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="trackId != null">
        #{trackId,jdbcType=VARCHAR},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="caseCreateTime != null">
        #{caseCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="caseStatus != null">
        #{caseStatus,jdbcType=INTEGER},
      </if>
      <if test="caseAreaId != null">
        #{caseAreaId,jdbcType=INTEGER},
      </if>
      <if test="caseRegId != null">
        #{caseRegId,jdbcType=INTEGER},
      </if>
      <if test="caseDeptId != null">
        #{caseDeptId,jdbcType=INTEGER},
      </if>
      <if test="caseGrId != null">
        #{caseGrId,jdbcType=INTEGER},
      </if>
      <if test="caseUserId != null">
        #{caseUserId,jdbcType=INTEGER},
      </if>
      <if test="caseArchiveId != null">
        #{caseArchiveId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticDetail">
    <!--@mbggenerated-->
    update FUN_STATISTIC_DETAIL
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="statisticType != null">
        STATISTIC_TYPE = #{statisticType,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        CASE_ID = #{caseId,jdbcType=INTEGER},
      </if>
      <if test="statisticTotleId != null">
        STATISTIC_TOTLE_ID = #{statisticTotleId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="trackId != null">
        TRACK_ID = #{trackId,jdbcType=VARCHAR},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="caseCreateTime != null">
        CASE_CREATE_TIME = #{caseCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="caseStatus != null">
        CASE_STATUS = #{caseStatus,jdbcType=INTEGER},
      </if>
      <if test="caseAreaId != null">
        CASE_AREA_ID = #{caseAreaId,jdbcType=INTEGER},
      </if>
      <if test="caseRegId != null">
        CASE_REG_ID = #{caseRegId,jdbcType=INTEGER},
      </if>
      <if test="caseDeptId != null">
        CASE_DEPT_ID = #{caseDeptId,jdbcType=INTEGER},
      </if>
      <if test="caseGrId != null">
        CASE_GR_ID = #{caseGrId,jdbcType=INTEGER},
      </if>
      <if test="caseUserId != null">
        CASE_USER_ID = #{caseUserId,jdbcType=INTEGER},
      </if>
      <if test="caseArchiveId != null">
        CASE_ARCHIVE_ID = #{caseArchiveId,jdbcType=INTEGER},
      </if>
    </set>
    where STATISTIC_DETAIL_ID = #{statisticDetailId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticDetail">
    <!--@mbggenerated-->
    update FUN_STATISTIC_DETAIL
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      STATISTIC_TYPE = #{statisticType,jdbcType=INTEGER},
      CASE_TYPE = #{caseType,jdbcType=INTEGER},
      CASE_ID = #{caseId,jdbcType=INTEGER},
      STATISTIC_TOTLE_ID = #{statisticTotleId,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      TRACK_ID = #{trackId,jdbcType=VARCHAR},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CASE_CREATE_TIME = #{caseCreateTime,jdbcType=TIMESTAMP},
      CASE_STATUS = #{caseStatus,jdbcType=INTEGER},
      CASE_AREA_ID = #{caseAreaId,jdbcType=INTEGER},
      CASE_REG_ID = #{caseRegId,jdbcType=INTEGER},
      CASE_DEPT_ID = #{caseDeptId,jdbcType=INTEGER},
      CASE_GR_ID = #{caseGrId,jdbcType=INTEGER},
      CASE_USER_ID = #{caseUserId,jdbcType=INTEGER},
      CASE_ARCHIVE_ID = #{caseArchiveId,jdbcType=INTEGER}
    where STATISTIC_DETAIL_ID = #{statisticDetailId,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="BaseResultDtoMap" type="com.myfun.repository.erpdb.dto.ErpFunStatisticDetailDto">
	<result column="CKDH_COUNT" property="ckdhCount" />
	<result column="DJ_COUNT" property="djCount" />
	<result column="DK_COUNT" property="dkCount" />
	<result column="FK_COUNT" property="fkCount" />
	<result column="FP_COUNT" property="fpCount" />
	<result column="GJ_COUNT" property="gjCount" />
	<result column="IPCALL_COUNT" property="ipcallCount" />
	<result column="KFDP_COUNT" property="kfdpCount" />
	<result column="PYQ_COUNT" property="pyqCount" />
	<result column="SPSC_COUNT" property="spscCount" />
	<result column="SSZR_COUNT" property="sszrCount" />
	<result column="TOTAL_COUNT" property="totalCount" />
	<result column="TPSC_COUNT" property="tpscCount" />
	<result column="VR_COUNT" property="vrCount" />
	<result column="WT_COUNT" property="wtCount" />
	<result column="XG_COUNT" property="xgCount" />
	<result column="YJ_COUNT" property="yjCount" />
	<result column="YSTJ_COUNT" property="ystjCount" />
	<result column="ZP_COUNT" property="zpCount" />
	<result column="ZTBG_COUNT" property="ztbgCount" />
	<result column="ZYX_COUNT" property="zyxCount" />
	<result column="DATE_COUNT" property="dateCount" />
	<result column="SPDK_COUNT" property="spdkCount" />
	<result column="ZFYDL_COUNT" property="zfydlCount" />
	<result column="QFTG_COUNT" property="qftgCount" />
	<result column="ZX_COUNT" property="zxCount" />
  </resultMap>
	
	<select id="count" parameterType="com.myfun.repository.erpdb.po.ErpFunStatisticDetail" resultType="java.lang.Integer">
		select count(*)
		from FUN_STATISTIC_DETAIL
		<where>
			<if test="compId != null">AND COMP_ID = #{compId,jdbcType=INTEGER}</if>
			<if test="areaId != null">AND AREA_ID = #{areaId,jdbcType=INTEGER}</if>
			<if test="regId != null">AND REG_ID = #{regId,jdbcType=INTEGER}</if>
			<if test="deptId != null">AND DEPT_ID = #{deptId,jdbcType=INTEGER}</if>
			<if test="grId != null">AND GR_ID = #{grId,jdbcType=INTEGER}</if>
			<if test="userId != null">AND USER_ID = #{userId,jdbcType=INTEGER}</if>
			<if test="cityId != null">AND CITY_ID = #{cityId,jdbcType=INTEGER}</if>
			<if test="statisticType != null">AND STATISTIC_TYPE = #{statisticType,jdbcType=INTEGER}</if>
			<if test="caseType != null">AND CASE_TYPE = #{caseType,jdbcType=INTEGER}</if>
			<if test="caseId != null">AND CASE_ID = #{caseId,jdbcType=INTEGER}</if>
			<if test="trackId != null">AND TRACK_ID = #{trackId,jdbcType=VARCHAR}</if>
			<if test="statisticTotleId != null">AND STATISTIC_TOTLE_ID = #{statisticTotleId,jdbcType=INTEGER}</if>
			<if test="createTime != null">AND CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}</if>
		</where>
	</select>
	
	<select id="getDetailCountList" resultType="java.util.Map">
		select count(1) as counts,CASE_ID as caseId
		from FUN_STATISTIC_DETAIL
		where COMP_ID = #{param.compId}
		AND ${param.serchRange} = #{param.serchRangeId}
		<if test="param.areaId != null and '' != param.areaId">AND AREA_ID = #{param.areaId}</if>
		<if test="param.regId != null and '' != param.regId">AND REG_ID = #{param.regId}</if>
		<if test="param.deptId != null and '' != param.deptId">AND DEPT_ID = #{param.deptId}</if>
		<if test="param.grId != null and '' != param.grId">AND GR_ID = #{param.grId}</if>
		<if test="param.userId != null and '' != param.userId">AND USER_ID = #{param.userId}</if>
		<if test="param.cityId != null and '' != param.cityId">AND CITY_ID = #{param.cityId}</if>
		<if test="param.statisticType != null and '' != param.statisticType">AND STATISTIC_TYPE = #{param.statisticType}</if>
		<if test="param.caseType != null and '' != param.caseType">AND CASE_TYPE = #{param.caseType}</if>
		<if test="param.caseId != null and '' != param.caseId">AND CASE_ID = #{param.caseId}</if>
		<if test="param.trackId != null and '' != param.trackId">AND TRACK_ID = #{param.trackId}</if>
		<if test="param.statisticTotleId != null and '' != param.statisticTotleId">AND STATISTIC_TOTLE_ID = #{param.statisticTotleId}</if>
		<if test="param.startTime != null and ''!=param.startTime">AND CREATE_TIME &gt;= #{param.startTime}</if>
		<if test="param.endTime != null and ''!=param.startTime">AND CREATE_TIME &lt;= #{param.endTime}</if>
		group by CASE_ID
	</select>
	
	<select id="countDetails" resultType="java.lang.Integer">
		select count(1) as counts
		from FUN_STATISTIC_DETAIL
		where COMP_ID = #{param.compId}		
		<if test="param.areaId != null">AND AREA_ID = #{param.areaId}</if>
		<if test="param.regId != null">AND REG_ID = #{param.regId}</if>
		<if test="param.deptId != null">AND DEPT_ID = #{param.deptId}</if>
		<if test="param.grId != null">AND GR_ID = #{param.grId}</if>
		<if test="param.userId != null">AND USER_ID = #{param.userId}</if>
		<if test="param.cityId != null">AND CITY_ID = #{param.cityId}</if>
		<if test="param.statisticType != null">AND STATISTIC_TYPE = #{param.statisticType}</if>
		<if test="param.caseType != null">AND CASE_TYPE = #{param.caseType}</if>
		<if test="param.caseId != null">AND CASE_ID = #{param.caseId}</if>
		<if test="param.trackId != null">AND TRACK_ID = #{param.trackId,jdbcType=VARCHAR}</if>
		<if test="param.statisticTotleId != null">AND STATISTIC_TOTLE_ID = #{param.statisticTotleId}</if>
		<if test="param.startTime != null and ''!=param.startTime">AND CREATE_TIME &gt;= #{param.startTime,jdbcType=TIMESTAMP}</if>
		<if test="param.endTime != null and ''!=param.endTime">AND CREATE_TIME &lt;= #{param.endTime,jdbcType=TIMESTAMP}</if>
	</select>

	<select id="getFlowAnalysisStockDataForSale" resultType="java.util.Map">
		select sum(iif(STATISTIC_type=1,1,0)) incrementForSale,
		sum(iif(STATISTIC_type=20 or STATISTIC_type=29,1,0)) decrementForSale 
		from FUN_STATISTIC_DETAIL a
		join FUN_SALE b on b.SALE_ID = a.CASE_ID
		where b.COMP_ID = #{param.compId} 
		and b.CREATION_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and a.CASE_TYPE = 1
		group by a.CASE_TYPE
	</select>
	
	<select id="getFlowAnalysisStockDataForBuy" resultType="java.util.Map">
		select sum(iif(STATISTIC_type=1,1,0)) incrementForBuy,
		sum(iif(STATISTIC_type=20 or STATISTIC_type=29,1,0)) decrementForBuy 
		from FUN_STATISTIC_DETAIL a
		join FUN_BUY_CUSTOMER b on b.BUY_CUST_ID = a.CASE_ID
		where b.COMP_ID = #{param.compId} 
		and b.CREATION_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and a.CASE_TYPE = 3
		group by a.CASE_TYPE
	</select>
	
	<select id="getFlowAnalysisStockDataForLease" resultType="java.util.Map">
		select sum(iif(STATISTIC_type=1,1,0)) incrementForLease,
		sum(iif(STATISTIC_type=20 or STATISTIC_type=29,1,0)) decrementForLease
		from FUN_STATISTIC_DETAIL a
		join FUN_LEASE b on b.LEASE_ID = a.CASE_ID
		where b.COMP_ID = #{param.compId} 
		and b.CREATION_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and a.CASE_TYPE = 2
		group by a.CASE_TYPE
	</select>
	
	<select id="getFlowAnalysisStockDataForRent" resultType="java.util.Map">
		select sum(iif(STATISTIC_type=1,1,0)) incrementForRent,
		sum(iif(STATISTIC_type=20 or STATISTIC_type=29,1,0)) decrementForRent
		from FUN_STATISTIC_DETAIL a
		join FUN_RENT_CUSTOMER b on b.RENT_CUST_ID = a.CASE_ID
		where b.COMP_ID = #{param.compId} 
		and b.CREATION_TIME BETWEEN #{param.startTime} and #{param.endTime}
		and a.CASE_TYPE = 4
		group by a.CASE_TYPE
	</select>
	
	<select id="getWorkCountStatistics" resultMap="BaseResultDtoMap">
		SET DATEFIRST 1;
		SELECT 
		<if test="param.columnSql != null and '' != param.columnSql">${param.columnSql},</if>
		<if test="param.djColumn != null and '' != param.djColumn">${param.djColumn},</if>
		<if test="param.gjColumn != null and '' != param.gjColumn">${param.gjColumn},</if>
		<if test="param.dkColumn != null and '' != param.dkColumn">${param.dkColumn},</if>
		sum(ZYX_COUNT) as ZYX_COUNT,sum(SSZR_COUNT) as SSZR_COUNT,
		sum(ZP_COUNT) as ZP_COUNT,sum(FP_COUNT) as FP_COUNT,sum(XG_COUNT) as XG_COUNT,
		sum(ZTBG_COUNT) as ZTBG_COUNT,sum(WT_COUNT) as WT_COUNT,sum(IPCALL_COUNT) as IPCALL_COUNT,
		sum(FK_COUNT) as FK_COUNT,sum(YSTJ_COUNT) as YSTJ_COUNT,sum(YJ_COUNT) as YJ_COUNT,
		sum(TPSC_COUNT) as TPSC_COUNT,sum(SPSC_COUNT) as SPSC_COUNT,sum(CKDH_COUNT) as CKDH_COUNT,
		sum(KFDP_COUNT) as KFDP_COUNT,sum(PYQ_COUNT) as PYQ_COUNT,sum(VR_COUNT) as VR_COUNT,
		sum(SPDK_COUNT) as SPDK_COUNT,sum(ZFY_COUNT) as ZFY_COUNT,
		sum(ZX_COUNT) as ZX_COUNT,sum(QFTG_COUNT) as QFTG_COUNT,
		<if test="param.djAddColumn != null and '' != param.djAddColumn">${param.djAddColumn}</if>
		<if test="param.gjAddColumn != null and '' != param.gjAddColumn">${param.gjAddColumn}</if>
		<if test="param.dkAddColumn != null and '' != param.dkAddColumn">${param.dkAddColumn}</if>
		sum(ZYX_COUNT)+sum(SSZR_COUNT)+sum(ZP_COUNT)+sum(FP_COUNT)+sum(XG_COUNT)+sum(ZTBG_COUNT)+sum(WT_COUNT)
		+sum(FK_COUNT)+sum(YSTJ_COUNT)+sum(YJ_COUNT)+sum(TPSC_COUNT)+sum(SPSC_COUNT)+sum(CKDH_COUNT)
		+sum(KFDP_COUNT)+sum(PYQ_COUNT)+sum(VR_COUNT)+sum(SPDK_COUNT)+sum(IPCALL_COUNT)
		+sum(ZFY_COUNT)+sum(ZX_COUNT)+sum(QFTG_COUNT)
		as TOTAL_COUNT
		FROM FUN_STATISTIC_TOTLE 
		WHERE COMP_ID = #{param.compId} 
		<if test="param.serchRange != null and '' != param.serchRange and param.serchRangeId != null and '' != param.serchRangeId">
		AND ${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND CREATE_TIME &gt;= #{param.startTime} 
		AND CREATE_TIME &lt;= #{param.endTime} 
		<if test="param.caseTypeSql != null and '' != param.caseTypeSql">AND ${param.caseTypeSql}</if>
		<if test="param.columnSql != null and '' != param.columnSql">
		GROUP BY ${param.columnSql}
		</if>
		ORDER BY TOTAL_COUNT DESC
	</select>
	
	<select id="countByWorkTrack" resultType="java.util.Map">
		SELECT COUNT (*) AS ATTR_NAME
		FROM FUN_STATISTIC_DETAIL WITH (NOLOCK)
		WHERE COMP_ID = #{param.compId}
		AND ${param.serchRange} = #{param.serchRangeId}<!-- 搜索范围 -->
		AND CASE_TYPE = #{param.caseType}
		AND STATISTIC_TYPE = #{param.countName}
		<if test="null != param.colDeptId">AND DEPT_ID = #{param.deptId}</if>
		<if test="null != param.columnName1 and '' != param.columnName1">AND ${param.columnName} &gt;= #{param.columnName1}</if>
		<if test="null != param.columnName2 and '' != param.columnName2">AND ${param.columnName} &lt;= #{param.columnName2}</if>
		<if test="null != param.columnName3 and '' != param.columnName3">AND ${param.columnName} &gt;= #{param.columnName3}</if>
	</select>
	
	<select id="getCaseList" resultType="java.util.Map">
		select
		<choose>
			<when test="param.caseType == 1">
				sale_id caseId,sale_id saleId,comp_id compId,city_id cityId,gr_id grId,reg_id regId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,creator_uid creatorUid,sale_no saleNo,lock lock,sale_subject saleSubject,build_id buildId,build_name buildName,build_code buildCode,sale_reg saleReg,region_name regionName,section_id sectionId,section_name sectionName,sale_round saleRound,trade_addr tradeAddr,sale_room saleRoom,sale_hall saleHall,sale_wei saleWei,sale_yang saleYang,sale_type saleType,sale_floor saleFloor,sale_floors saleFloors,sale_fitment saleFitment,sale_direct saleDirect,sale_year saleYear,sale_useage saleUseage,shop_usage shopUsage,sale_street saleStreet,sale_area saleArea,sale_total_price saleTotalPrice,sale_unit_price saleUnitPrice,sale_source saleSource,sale_key saleKey,sale_key_num saleKeyNum,sale_explrth saleExplrth,sale_cooperate saleCooperate,sale_publish salePublish,sale_map saleMap,sale_level saleLevel,plate_type plateType,sale_status saleStatus,track_time trackTime,track_time2 trackTime2,action_time actionTime,from_soso fromSoso,repeat_flag repeatFlag,share_flag shareFlag,complaint_flag complaintFlag,red_flag redFlag,orange_flag orangeFlag,public_time publicTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,private_time privateTime,from_public fromPublic,thumb_url thumbUrl,update_time updateTime,sale_cert_time saleCertTime,publish_sites publishSites,area_id areaId,video_num videoNum,sale_innerarea saleInnerarea,sendtotencent sendtotencent,house_source_way houseSourceWay,true_flag trueFlag,you_share_flag youShareFlag,you_share_time youShareTime,you_buy_count youBuyCount,owner_sex ownerSex,you_share_id youShareId,thumbpic_ver thumbpicVer,private_user_id privateUserId,addr_md5 addrMd5,panorama_map panoramaMap,video_review_flag videoReviewFlag,youjia_statistic_flag youjiaStatisticFlag,ads_flag adsFlag,sync_time syncTime,compete_end_time competeEndTime,compete_price competePrice,you_share_money_state youShareMoneyState,proxy_url proxyUrl,sendto_weidian sendtoWeidian,sendto_youyou sendtoYouyou,check_code_url checkCodeUrl,upload_proxy_user uploadProxyUser,city_share_flag cityShareFlag,file_system_type fileSystemType,check_code_fun checkCodeFun,qz_code_fun qzCodeFun,ownership_type ownershipType,effective_date effectiveDate,funmanager_salestatus funmanagerSalestatus
				<!-- sale_id caseId,sale_id saleId,sale_useage saleUseage,plate_type plateType,sale_status saleStatus,sale_level saleLevel,sale_key saleKey,sale_map saleMap,build_name buildName,sale_useage saleUseage,sale_floor saleFloor,sale_floors saleFloors,sale_room saleRoom,sale_hall saleHall,sale_wei saleWei,sale_innerarea saleInnerarea,sale_area saleArea,sale_total_price saleTotalPrice,sale_unit_price saleUnitPrice -->
				from FUN_SALE
				where sale_id in
			</when>
			<when test="param.caseType == 2">
				lease_id caseId,lease_id leaseId,comp_id compId,city_id cityId,gr_id grId,reg_id regId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,lease_no leaseNo,lease_subject leaseSubject,lock lock,build_id buildId,build_name buildName,build_code buildCode,lease_reg leaseReg,region_name regionName,section_id sectionId,section_name sectionName,lease_round leaseRound,trade_addr tradeAddr,plate_type plateType,lease_room leaseRoom,lease_hall leaseHall,lease_wei leaseWei,lease_yang leaseYang,lease_type leaseType,lease_floor leaseFloor,lease_floors leaseFloors,lease_fitment leaseFitment,lease_direct leaseDirect,lease_year leaseYear,lease_useage leaseUseage,lease_street leaseStreet,lease_area leaseArea,lease_total_price leaseTotalPrice,price_unit priceUnit,lease_source leaseSource,lease_level leaseLevel,lease_key leaseKey,key_time keyTime,lease_explrth leaseExplrth,lease_consign leaseConsign,lease_cooperate leaseCooperate,complaint_flag complaintFlag,lease_publish leasePublish,lease_map leaseMap,lease_status leaseStatus,track_time trackTime,track_time2 trackTime2,action_time actionTime,from_soso fromSoso,repeat_flag repeatFlag,friend_house friendHouse,red_flag redFlag,orange_flag orangeFlag,public_count publicCount,public_time publicTime,due_time dueTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,private_time privateTime,from_public fromPublic,thumb_url thumbUrl,update_time updateTime,lease_cert_time leaseCertTime,publish_sites publishSites,area_id areaId,video_num videoNum,creator_uid creatorUid,lease_innerarea leaseInnerarea,sendtotencent sendtotencent,house_source_way houseSourceWay,true_flag trueFlag,you_share_flag youShareFlag,you_share_time youShareTime,you_buy_count youBuyCount,owner_sex ownerSex,you_share_id youShareId,thumbpic_ver thumbpicVer,private_user_id privateUserId,lease_room_type leaseRoomType,lease_room_classic leaseRoomClassic,flat_share_sex flatShareSex,addr_md5 addrMd5,panorama_map panoramaMap,video_review_flag videoReviewFlag,youjia_statistic_flag youjiaStatisticFlag,ads_flag adsFlag,sync_time syncTime,compete_end_time competeEndTime,compete_price competePrice,you_share_money_state youShareMoneyState,sendto_weidian sendtoWeidian,sendto_youyou sendtoYouyou,proxy_url proxyUrl,upload_proxy_user uploadProxyUser,city_share_flag cityShareFlag,check_code_fun checkCodeFun,ownership_type ownershipType,qz_code_fun qzCodeFun,effective_date effectiveDate,funmanager_salestatus funmanagerSalestatus
				<!-- lease_id caseId,lease_id leaseId,lease_useage leaseUseage,plate_type plateType,lease_status leaseStatus,lease_level leaseLevel,lease_key leaseKey,lease_map leaseMap,build_name buildName,lease_useage leaseUseage,lease_floor leaseFloor,lease_floors leaseFloors,lease_room leaseRoom,lease_hall leaseHall,lease_wei leaseWei,lease_innerarea leaseInnerarea,lease_area leaseArea,lease_total_price leaseTotalPrice -->
				from FUN_LEASE
				where LEASE_ID in
			</when>
			<when test="param.caseType == 3">
				buy_cust_id caseId,buy_cust_id buyCustId,city_id cityId,gr_id grId,reg_id regId,comp_id compId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,buy_cust_no buyCustNo,buy_cust_name buyCustName,buy_cust_sex buyCustSex,buy_cust_age buyCustAge,buy_cust_career buyCustCareer,buy_ability buyAbility,cust_level custLevel,plate_type plateType,buy_cust_source buyCustSource,buy_cust_level buyCustLevel,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,section_id sectionId,section_name sectionName,build_id buildId,build_name buildName,house_round houseRound,house_type houseType,house_useage houseUseage,house_fitment houseFitment,house_direct houseDirect,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,house_price_low housePriceLow,house_price_high housePriceHigh,house_area_low houseAreaLow,house_area_high houseAreaHigh,house_year_low houseYearLow,house_year_high houseYearHigh,house_look houseLook,cust_request custRequest,buy_cust_status buyCustStatus,track_time trackTime,repeat_flag repeatFlag,red_flag redFlag,orange_flag orangeFlag,public_count publicCount,public_time publicTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,action_time actionTime,private_time privateTime,from_public fromPublic,cooperate_flag cooperateFlag,update_time updateTime,friend_house friendHouse,cooperate_time cooperateTime,area_id areaId,private_user_id privateUserId,sync_time syncTime,you_share_flag youShareFlag,you_share_time youShareTime,you_share_id youShareId,you_buy_count youBuyCount,city_share_flag cityShareFlag
				<!-- buy_cust_id caseId,track_time trackTime,user_id userId,house_area_high houseAreaHigh,house_area_low houseAreaLow,house_price_high housePriceHigh,house_price_low housePriceLow,comp_id compId,dept_id deptId,buy_ability buyAbility,buy_cust_age buyCustAge,buy_cust_career buyCustCareer,buy_cust_status buyCustStatus,buy_cust_level buyCustLevel,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,cust_level custLevel,plate_type plateType,buy_cust_source buyCustSource,commend_time commendTime,secrecy_time secrecyTime,red_flag redFlag,action_time actionTime,public_count publicCount,public_time publicTime,from_public fromPublic,private_time privateTime,orange_flag orangeFlag,repeat_flag repeatFlag,house_useage houseUseage,house_type houseType,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,section_id sectionId,section_name sectionName,house_fitment houseFitment,buy_cust_sex buyCustSex,buy_cust_name buyCustName,build_name buildName,house_round houseRound -->
				from FUN_BUY_CUSTOMER
				where BUY_CUST_ID in
			</when>
			<when test="param.caseType == 4">
				rent_cust_id caseId,rent_cust_id rentCustId,comp_id compId,city_id cityId,gr_id grId,reg_id regId,dept_id deptId,user_id userId,archive_id archiveId,creation_time creationTime,rent_cust_no rentCustNo,rent_cust_name rentCustName,rent_cust_sex rentCustSex,rent_cust_age rentCustAge,rent_cust_career rentCustCareer,rent_lifebound rentLifebound,rent_ability rentAbility,cust_level custLevel,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,build_id buildId,build_name buildName,section_id sectionId,section_name sectionName,house_round houseRound,house_type houseType,house_useage houseUseage,house_fitment houseFitment,house_direct houseDirect,plate_type plateType,rent_cust_source rentCustSource,rent_cust_level rentCustLevel,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,house_price_low housePriceLow,house_price_high housePriceHigh,house_area_low houseAreaLow,house_area_high houseAreaHigh,house_year_low houseYearLow,house_year_high houseYearHigh,house_look houseLook,cust_request custRequest,rent_cust_status rentCustStatus,track_time trackTime,action_time actionTime,repeat_flag repeatFlag,red_flag redFlag,orange_flag orangeFlag,public_count publicCount,public_time publicTime,due_time dueTime,special_time specialTime,schedule_time scheduleTime,deal_time dealTime,writeoff_time writeoffTime,secrecy_time secrecyTime,commend_time commendTime,private_time privateTime,from_public fromPublic,cooperate_flag cooperateFlag,update_time updateTime,friend_house friendHouse,cooperate_time cooperateTime,area_id areaId,private_user_id privateUserId,sync_time syncTime,you_share_flag youShareFlag,you_share_time youShareTime,you_share_id youShareId,you_buy_count youBuyCount,city_share_flag cityShareFlag
				<!-- rent_cust_id caseId,track_time trackTime,user_id userId,house_area_high houseAreaHigh,house_area_low houseAreaLow,house_price_high housePriceHigh,house_price_low housePriceLow,comp_id compId,dept_id deptId,rent_ability rentAbility,rent_cust_age rentCustAge,rent_cust_career rentCustCareer,rent_cust_status rentCustStatus,rent_cust_level rentCustLevel,house_floor_low houseFloorLow,house_floor_high houseFloorHigh,cust_level custLevel,plate_type plateType,rent_cust_source rentCustSource,commend_time commendTime,secrecy_time secrecyTime,red_flag redFlag,action_time actionTime,public_count publicCount,public_time publicTime,from_public fromPublic,private_time privateTime,orange_flag orangeFlag,repeat_flag repeatFlag,house_useage houseUseage,house_type houseType,house_room houseRoom,house_room_1 houseRoom1,house_region houseRegion,region_name regionName,section_id sectionId,section_name sectionName,house_fitment houseFitment,rent_cust_sex rentCustSex,rent_cust_name rentCustName,build_name buildName,house_round houseRound -->
				from FUN_RENT_CUSTOMER
				where RENT_CUST_ID in
			</when>
		</choose>
		(
			select CASE_ID from FUN_STATISTIC_DETAIL
			where COMP_ID = #{param.compId}
			AND ${param.serchRange} = #{param.serchRangeId}
			<if test="param.areaId != null and param.areaId != ''">and AREA_ID = #{param.areaId}</if>
			<if test="param.regId != null and param.regId != ''">and REG_ID = #{param.regId}</if>
			<if test="param.deptId != null and param.deptId != ''">and DEPT_ID = #{param.deptId}</if>
			<if test="param.grId != null and param.grId != ''">and GR_ID = #{param.grId}</if>
			<if test="param.userId != null and param.userId != ''">and USER_ID = #{param.userId}</if>
			<if test="param.caseType != null and param.caseType != ''">and CASE_TYPE = #{param.caseType}</if>
			<if test="param.statisticType != null and param.statisticType != ''">and STATISTIC_TYPE = #{param.statisticType}</if>
			<if test="param.trackId != null and param.trackId != ''">and TRACK_ID = #{param.trackId}</if>
			<if test="param.startTime != null and param.startTime != ''">and CREATE_TIME &gt;= #{param.startTime}</if>
			<if test="param.endTime != null and param.endTime != ''">and CREATE_TIME &lt;= #{param.endTime}</if>
		)
		order by 
		<choose>
			<when test="param.caseType == 1">SALE_ID</when>
			<when test="param.caseType == 2">LEASE_ID</when>
			<when test="param.caseType == 3">BUY_CUST_ID</when>
			<when test="param.caseType == 4">RENT_CUST_ID</when>
		</choose>
		DESC
	</select>
	
	<select id="getWorkCountTrackIdList" resultType="java.util.Map">
		SELECT TRACK_ID trackId FROM FUN_STATISTIC_DETAIL
		WHERE COMP_ID = #{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.deptId != null and param.deptId != ''">and dept_id = #{param.deptId}</if>
		AND CASE_TYPE = #{param.caseType}
		AND STATISTIC_TYPE = #{param.statisticType}
		AND CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;= #{param.endTime}
		ORDER BY STATISTIC_DETAIL_ID DESC
	</select>
	
	<select id="getWorkCountIpLogCounts" resultType="java.util.Map">
		SELECT COUNT(1) AS counts,CASE_TYPE caseType
		FROM FUN_STATISTIC_DETAIL
		WHERE COMP_ID = #{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		AND STATISTIC_TYPE = #{param.statisticType}
		AND CREATE_TIME &gt;= #{param.startTime}
		AND CREATE_TIME &lt;= #{param.endTime}
		GROUP BY CASE_TYPE
	</select>
	<select id="getNeedRepairHouseCustFlowAnalysisCountList" resultType="java.util.Map">
		SELECT
			CITY_ID AS cityId, COMP_ID AS compId,CASE_ID AS caseId, CASE_TYPE AS caseType,
			ISNULL(CASE_AREA_ID, 0) AS areaId, ISNULL(CASE_REG_ID, 0) AS regId,
			ISNULL(CASE_DEPT_ID, 0) AS deptId, ISNULL(CASE_GR_ID, 0) AS grId,
			ISNULL(CASE_USER_ID,0) AS userId, ISNULL(CASE_ARCHIVE_ID,0) AS archiveId,
			CONVERT (VARCHAR (7), CREATE_TIME, 20 ) + '-01' AS creationTime,
			MAX (TRACK_ID) maxId, MIN (TRACK_ID) minId,
			CONCAT (
				CITY_ID, '_', COMP_ID, '_',
				ISNULL(CASE_AREA_ID, 0), '_', ISNULL(CASE_REG_ID, 0), '_', ISNULL(CASE_DEPT_ID, 0), '_',
				ISNULL(CASE_GR_ID, 0), '_', ISNULL(CASE_USER_ID,0), '_', ISNULL(CASE_ARCHIVE_ID,0), '_',
				CASE_TYPE, '_', CONVERT (VARCHAR (7), CREATE_TIME,20) + '-01'
			) AS keyWord
		FROM FUN_STATISTIC_DETAIL
		WHERE
			COMP_ID = #{compId} and STATISTIC_TYPE = 7 AND CITY_ID = #{cityId} AND CREATE_TIME &gt;= #{startTime} AND CREATE_TIME &lt;= #{endTime}
		GROUP BY
			CITY_ID, COMP_ID, CASE_ID, CASE_TYPE,
			ISNULL(CASE_AREA_ID, 0), ISNULL(CASE_REG_ID, 0),
			ISNULL(CASE_DEPT_ID, 0), ISNULL(CASE_GR_ID, 0),
			ISNULL(CASE_USER_ID, 0), ISNULL(CASE_ARCHIVE_ID,0),
			CONVERT (VARCHAR (7), CREATE_TIME, 20 ) + '-01',
			CONCAT (
				CITY_ID, '_', COMP_ID, '_',
				ISNULL(CASE_AREA_ID, 0), '_', ISNULL(CASE_REG_ID, 0), '_', ISNULL(CASE_DEPT_ID, 0), '_',
				ISNULL(CASE_GR_ID, 0), '_', ISNULL(CASE_USER_ID,0), '_', ISNULL(CASE_ARCHIVE_ID,0), '_',
				CASE_TYPE, '_', CONVERT (VARCHAR (7), CREATE_TIME,20) + '-01'
			)
	</select>
	
	<select id="getNeedRepairHouseCustFlowAnalysisTrackList" resultType="java.util.Map">
		WITH T_TRACK_DETAIL as(
			SELECT CITY_ID,COMP_ID as compId,CASE_AREA_ID as areaId,CASE_REG_ID as regId,CASE_DEPT_ID as deptId,
			CASE_GR_ID as grId,CASE_USER_ID as userId,CASE_ARCHIVE_ID as archiveId,CASE_ID as caseId,CASE_TYPE as caseType,
			CONVERT (VARCHAR (7), CREATE_TIME, 20) + '-01' as creationTime, MAX(TRACK_ID) maxId,MIN(TRACK_ID) minId
			FROM FUN_STATISTIC_DETAIL
			WHERE 
			STATISTIC_TYPE = 7 AND CITY_ID = #{cityId} AND COMP_ID = #{compId} 
			AND CREATE_TIME &gt;= #{startTime} AND CREATE_TIME &lt;= #{endTime}
			GROUP BY CITY_ID,COMP_ID,CASE_AREA_ID,CASE_REG_ID,CASE_DEPT_ID,CASE_GR_ID,CASE_USER_ID,CASE_ARCHIVE_ID,CASE_ID,CASE_TYPE,
			CONVERT (VARCHAR (7), CREATE_TIME, 20 ) + '-01'
		)
		select A.CASE_STATUS as caseStaus,A.TRACK_ID as trackId 
		from FUN_STATISTIC_DETAIL A
		JOIN T_TRACK_DETAIL B ON A.TRACK_ID = B.maxId OR A.TRACK_ID = B.minId 
		WHERE A.CITY_ID=#{cityId} and A.COMP_ID =#{compId} and A.STATISTIC_TYPE = 7 
		AND A.CREATE_TIME &gt;= #{startTime} AND A.CREATE_TIME &lt;= #{endTime}
	</select>
</mapper>

