<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunPhotoMlMapper" >
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunPhotoMl" >
    <!--@mbggenerated-->
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="PHOTO_ID" property="photoId" jdbcType="INTEGER" />
    <result column="UPLOAD_SOURCE_USER" property="uploadSourceUser" jdbcType="INTEGER" />
    <result column="PHOTOGRAPHER_FLAG" property="photographerFlag" jdbcType="TINYINT" />
    <result column="IS_DEL" property="isDel" jdbcType="TINYINT" />
    <result column="COMPLAINT_STATUS" property="complaintStatus" jdbcType="TINYINT" />
    <result column="COMPLAINT_VIEW" property="complaintView" jdbcType="VARCHAR" />
    <result column="COMPLAINT_REVIEW_UID" property="complaintReviewUid" jdbcType="INTEGER" />
    <result column="COMPLAINT_REVIEW_TIME" property="complaintReviewTime" jdbcType="TIMESTAMP" />
    <result column="COMPLAINT_REVIEW_VIEW" property="complaintReviewView" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--@mbggenerated-->
    ID, PHOTO_ID, UPLOAD_SOURCE_USER, PHOTOGRAPHER_FLAG, IS_DEL, COMPLAINT_STATUS, COMPLAINT_VIEW, 
    COMPLAINT_REVIEW_UID, COMPLAINT_REVIEW_TIME, COMPLAINT_REVIEW_VIEW, CREATE_TIME
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMlExample" >
    <!--@mbggenerated-->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_PHOTO_ML
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_PHOTO_ML
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    delete from FUN_PHOTO_ML
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMlExample" >
    <!--@mbggenerated-->
    delete from FUN_PHOTO_ML
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMl" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_PHOTO_ML (PHOTO_ID, UPLOAD_SOURCE_USER, PHOTOGRAPHER_FLAG, 
      IS_DEL, COMPLAINT_STATUS, COMPLAINT_VIEW, 
      COMPLAINT_REVIEW_UID, COMPLAINT_REVIEW_TIME, 
      COMPLAINT_REVIEW_VIEW, CREATE_TIME)
    values (#{photoId,jdbcType=INTEGER}, #{uploadSourceUser,jdbcType=INTEGER}, #{photographerFlag,jdbcType=TINYINT}, 
      #{isDel,jdbcType=TINYINT}, #{complaintStatus,jdbcType=TINYINT}, #{complaintView,jdbcType=VARCHAR}, 
      #{complaintReviewUid,jdbcType=INTEGER}, #{complaintReviewTime,jdbcType=TIMESTAMP}, 
      #{complaintReviewView,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMl" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_PHOTO_ML
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="photoId != null" >
        PHOTO_ID,
      </if>
      <if test="uploadSourceUser != null" >
        UPLOAD_SOURCE_USER,
      </if>
      <if test="photographerFlag != null" >
        PHOTOGRAPHER_FLAG,
      </if>
      <if test="isDel != null" >
        IS_DEL,
      </if>
      <if test="complaintStatus != null" >
        COMPLAINT_STATUS,
      </if>
      <if test="complaintView != null" >
        COMPLAINT_VIEW,
      </if>
      <if test="complaintReviewUid != null" >
        COMPLAINT_REVIEW_UID,
      </if>
      <if test="complaintReviewTime != null" >
        COMPLAINT_REVIEW_TIME,
      </if>
      <if test="complaintReviewView != null" >
        COMPLAINT_REVIEW_VIEW,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="photoId != null" >
        #{photoId,jdbcType=INTEGER},
      </if>
      <if test="uploadSourceUser != null" >
        #{uploadSourceUser,jdbcType=INTEGER},
      </if>
      <if test="photographerFlag != null" >
        #{photographerFlag,jdbcType=TINYINT},
      </if>
      <if test="isDel != null" >
        #{isDel,jdbcType=TINYINT},
      </if>
      <if test="complaintStatus != null" >
        #{complaintStatus,jdbcType=TINYINT},
      </if>
      <if test="complaintView != null" >
        #{complaintView,jdbcType=VARCHAR},
      </if>
      <if test="complaintReviewUid != null" >
        #{complaintReviewUid,jdbcType=INTEGER},
      </if>
      <if test="complaintReviewTime != null" >
        #{complaintReviewTime,jdbcType=TIMESTAMP},
      </if>
      <if test="complaintReviewView != null" >
        #{complaintReviewView,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMlExample" resultType="java.lang.Integer" >
    <!--@mbggenerated-->
    select count(*) from FUN_PHOTO_ML
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_PHOTO_ML
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.photoId != null" >
        PHOTO_ID = #{record.photoId,jdbcType=INTEGER},
      </if>
      <if test="record.uploadSourceUser != null" >
        UPLOAD_SOURCE_USER = #{record.uploadSourceUser,jdbcType=INTEGER},
      </if>
      <if test="record.photographerFlag != null" >
        PHOTOGRAPHER_FLAG = #{record.photographerFlag,jdbcType=TINYINT},
      </if>
      <if test="record.isDel != null" >
        IS_DEL = #{record.isDel,jdbcType=TINYINT},
      </if>
      <if test="record.complaintStatus != null" >
        COMPLAINT_STATUS = #{record.complaintStatus,jdbcType=TINYINT},
      </if>
      <if test="record.complaintView != null" >
        COMPLAINT_VIEW = #{record.complaintView,jdbcType=VARCHAR},
      </if>
      <if test="record.complaintReviewUid != null" >
        COMPLAINT_REVIEW_UID = #{record.complaintReviewUid,jdbcType=INTEGER},
      </if>
      <if test="record.complaintReviewTime != null" >
        COMPLAINT_REVIEW_TIME = #{record.complaintReviewTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.complaintReviewView != null" >
        COMPLAINT_REVIEW_VIEW = #{record.complaintReviewView,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_PHOTO_ML
    set ID = #{record.id,jdbcType=INTEGER},
      PHOTO_ID = #{record.photoId,jdbcType=INTEGER},
      UPLOAD_SOURCE_USER = #{record.uploadSourceUser,jdbcType=INTEGER},
      PHOTOGRAPHER_FLAG = #{record.photographerFlag,jdbcType=TINYINT},
      IS_DEL = #{record.isDel,jdbcType=TINYINT},
      COMPLAINT_STATUS = #{record.complaintStatus,jdbcType=TINYINT},
      COMPLAINT_VIEW = #{record.complaintView,jdbcType=VARCHAR},
      COMPLAINT_REVIEW_UID = #{record.complaintReviewUid,jdbcType=INTEGER},
      COMPLAINT_REVIEW_TIME = #{record.complaintReviewTime,jdbcType=TIMESTAMP},
      COMPLAINT_REVIEW_VIEW = #{record.complaintReviewView,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMl" >
    <!--@mbggenerated-->
    update FUN_PHOTO_ML
    <set >
      <if test="photoId != null" >
        PHOTO_ID = #{photoId,jdbcType=INTEGER},
      </if>
      <if test="uploadSourceUser != null" >
        UPLOAD_SOURCE_USER = #{uploadSourceUser,jdbcType=INTEGER},
      </if>
      <if test="photographerFlag != null" >
        PHOTOGRAPHER_FLAG = #{photographerFlag,jdbcType=TINYINT},
      </if>
      <if test="isDel != null" >
        IS_DEL = #{isDel,jdbcType=TINYINT},
      </if>
      <if test="complaintStatus != null" >
        COMPLAINT_STATUS = #{complaintStatus,jdbcType=TINYINT},
      </if>
      <if test="complaintView != null" >
        COMPLAINT_VIEW = #{complaintView,jdbcType=VARCHAR},
      </if>
      <if test="complaintReviewUid != null" >
        COMPLAINT_REVIEW_UID = #{complaintReviewUid,jdbcType=INTEGER},
      </if>
      <if test="complaintReviewTime != null" >
        COMPLAINT_REVIEW_TIME = #{complaintReviewTime,jdbcType=TIMESTAMP},
      </if>
      <if test="complaintReviewView != null" >
        COMPLAINT_REVIEW_VIEW = #{complaintReviewView,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunPhotoMl" >
    <!--@mbggenerated-->
    update FUN_PHOTO_ML
    set PHOTO_ID = #{photoId,jdbcType=INTEGER},
      UPLOAD_SOURCE_USER = #{uploadSourceUser,jdbcType=INTEGER},
      PHOTOGRAPHER_FLAG = #{photographerFlag,jdbcType=TINYINT},
      IS_DEL = #{isDel,jdbcType=TINYINT},
      COMPLAINT_STATUS = #{complaintStatus,jdbcType=TINYINT},
      COMPLAINT_VIEW = #{complaintView,jdbcType=VARCHAR},
      COMPLAINT_REVIEW_UID = #{complaintReviewUid,jdbcType=INTEGER},
      COMPLAINT_REVIEW_TIME = #{complaintReviewTime,jdbcType=TIMESTAMP},
      COMPLAINT_REVIEW_VIEW = #{complaintReviewView,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>