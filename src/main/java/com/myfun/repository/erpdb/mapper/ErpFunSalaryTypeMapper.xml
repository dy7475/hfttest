<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunSalaryTypeMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunSalaryType">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="SALARY_TYPE_NAME" jdbcType="VARCHAR" property="salaryTypeName" />
    <result column="SALARY_MONEY" jdbcType="NUMERIC" property="salaryMoney" />
    <result column="TASK_PERCENT" jdbcType="NUMERIC" property="taskPercent" />
    <result column="TRAGET_PROFIT" jdbcType="NUMERIC" property="tragetProfit" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="CREATE_USER_ID" jdbcType="INTEGER" property="createUserId" />
    <result column="DEL_FLAG" jdbcType="INTEGER" property="delFlag" />
    <result column="HOUSE_ADD_COUNT" jdbcType="INTEGER" property="houseAddCount" />
    <result column="PER_HOUSE_MONEY" jdbcType="NUMERIC" property="perHouseMoney" />
    <result column="CUST_ADD_COUNT" jdbcType="INTEGER" property="custAddCount" />
    <result column="PER_CUST_MONEY" jdbcType="NUMERIC" property="perCustMoney" />
    <result column="FANKAN_COUNT" jdbcType="INTEGER" property="fankanCount" />
    <result column="PER_FANKAN_MONEY" jdbcType="NUMERIC" property="perFankanMoney" />
    <result column="DAIKAN_COUNT" jdbcType="INTEGER" property="daikanCount" />
    <result column="PER_DAIKAN_MONEY" jdbcType="NUMERIC" property="perDaikanMoney" />
    <result column="UPDATE_TIME" jdbcType="VARCHAR" property="updateTime" />
    <result column="ROLE_ID" jdbcType="VARCHAR" property="roleId" />
    <result column="MANAGE_LEVEL" jdbcType="TINYINT" property="manageLevel" />
    <result column="COUNT_TYPE" jdbcType="TINYINT" property="countType" />
    <result column="PROFIT_COUNT_TYPE" jdbcType="TINYINT" property="profitCountType" />
    <result column="TASK_MONEY" jdbcType="NUMERIC" property="taskMoney" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, SALARY_TYPE_NAME, SALARY_MONEY, TASK_PERCENT, TRAGET_PROFIT, CREATION_TIME, 
    CREATE_USER_ID, DEL_FLAG, HOUSE_ADD_COUNT, PER_HOUSE_MONEY, CUST_ADD_COUNT, PER_CUST_MONEY, 
    FANKAN_COUNT, PER_FANKAN_MONEY, DAIKAN_COUNT, PER_DAIKAN_MONEY, UPDATE_TIME, ROLE_ID, 
    MANAGE_LEVEL, COUNT_TYPE, PROFIT_COUNT_TYPE, TASK_MONEY
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryTypeExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_SALARY_TYPE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_SALARY_TYPE
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_SALARY_TYPE
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryTypeExample">
    <!--@mbggenerated-->
    delete from FUN_SALARY_TYPE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryType" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_SALARY_TYPE (COMP_ID, SALARY_TYPE_NAME, SALARY_MONEY, 
      TASK_PERCENT, TRAGET_PROFIT, CREATION_TIME, 
      CREATE_USER_ID, DEL_FLAG, HOUSE_ADD_COUNT, 
      PER_HOUSE_MONEY, CUST_ADD_COUNT, PER_CUST_MONEY, 
      FANKAN_COUNT, PER_FANKAN_MONEY, DAIKAN_COUNT, 
      PER_DAIKAN_MONEY, UPDATE_TIME, ROLE_ID, 
      MANAGE_LEVEL, COUNT_TYPE, PROFIT_COUNT_TYPE, 
      TASK_MONEY)
    values (#{compId,jdbcType=INTEGER}, #{salaryTypeName,jdbcType=VARCHAR}, #{salaryMoney,jdbcType=NUMERIC}, 
      #{taskPercent,jdbcType=NUMERIC}, #{tragetProfit,jdbcType=NUMERIC}, #{creationTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=INTEGER}, #{delFlag,jdbcType=INTEGER}, #{houseAddCount,jdbcType=INTEGER}, 
      #{perHouseMoney,jdbcType=NUMERIC}, #{custAddCount,jdbcType=INTEGER}, #{perCustMoney,jdbcType=NUMERIC}, 
      #{fankanCount,jdbcType=INTEGER}, #{perFankanMoney,jdbcType=NUMERIC}, #{daikanCount,jdbcType=INTEGER}, 
      #{perDaikanMoney,jdbcType=NUMERIC}, #{updateTime,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, 
      #{manageLevel,jdbcType=TINYINT}, #{countType,jdbcType=TINYINT}, #{profitCountType,jdbcType=TINYINT}, 
      #{taskMoney,jdbcType=NUMERIC})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryType" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_SALARY_TYPE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="salaryTypeName != null">
        SALARY_TYPE_NAME,
      </if>
      <if test="salaryMoney != null">
        SALARY_MONEY,
      </if>
      <if test="taskPercent != null">
        TASK_PERCENT,
      </if>
      <if test="tragetProfit != null">
        TRAGET_PROFIT,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="createUserId != null">
        CREATE_USER_ID,
      </if>
      <if test="delFlag != null">
        DEL_FLAG,
      </if>
      <if test="houseAddCount != null">
        HOUSE_ADD_COUNT,
      </if>
      <if test="perHouseMoney != null">
        PER_HOUSE_MONEY,
      </if>
      <if test="custAddCount != null">
        CUST_ADD_COUNT,
      </if>
      <if test="perCustMoney != null">
        PER_CUST_MONEY,
      </if>
      <if test="fankanCount != null">
        FANKAN_COUNT,
      </if>
      <if test="perFankanMoney != null">
        PER_FANKAN_MONEY,
      </if>
      <if test="daikanCount != null">
        DAIKAN_COUNT,
      </if>
      <if test="perDaikanMoney != null">
        PER_DAIKAN_MONEY,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="roleId != null">
        ROLE_ID,
      </if>
      <if test="manageLevel != null">
        MANAGE_LEVEL,
      </if>
      <if test="countType != null">
        COUNT_TYPE,
      </if>
      <if test="profitCountType != null">
        PROFIT_COUNT_TYPE,
      </if>
      <if test="taskMoney != null">
        TASK_MONEY,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="salaryTypeName != null">
        #{salaryTypeName,jdbcType=VARCHAR},
      </if>
      <if test="salaryMoney != null">
        #{salaryMoney,jdbcType=NUMERIC},
      </if>
      <if test="taskPercent != null">
        #{taskPercent,jdbcType=NUMERIC},
      </if>
      <if test="tragetProfit != null">
        #{tragetProfit,jdbcType=NUMERIC},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=INTEGER},
      </if>
      <if test="houseAddCount != null">
        #{houseAddCount,jdbcType=INTEGER},
      </if>
      <if test="perHouseMoney != null">
        #{perHouseMoney,jdbcType=NUMERIC},
      </if>
      <if test="custAddCount != null">
        #{custAddCount,jdbcType=INTEGER},
      </if>
      <if test="perCustMoney != null">
        #{perCustMoney,jdbcType=NUMERIC},
      </if>
      <if test="fankanCount != null">
        #{fankanCount,jdbcType=INTEGER},
      </if>
      <if test="perFankanMoney != null">
        #{perFankanMoney,jdbcType=NUMERIC},
      </if>
      <if test="daikanCount != null">
        #{daikanCount,jdbcType=INTEGER},
      </if>
      <if test="perDaikanMoney != null">
        #{perDaikanMoney,jdbcType=NUMERIC},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="manageLevel != null">
        #{manageLevel,jdbcType=TINYINT},
      </if>
      <if test="countType != null">
        #{countType,jdbcType=TINYINT},
      </if>
      <if test="profitCountType != null">
        #{profitCountType,jdbcType=TINYINT},
      </if>
      <if test="taskMoney != null">
        #{taskMoney,jdbcType=NUMERIC},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryTypeExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_SALARY_TYPE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_SALARY_TYPE
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.salaryTypeName != null">
        SALARY_TYPE_NAME = #{record.salaryTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.salaryMoney != null">
        SALARY_MONEY = #{record.salaryMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.taskPercent != null">
        TASK_PERCENT = #{record.taskPercent,jdbcType=NUMERIC},
      </if>
      <if test="record.tragetProfit != null">
        TRAGET_PROFIT = #{record.tragetProfit,jdbcType=NUMERIC},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null">
        CREATE_USER_ID = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.delFlag != null">
        DEL_FLAG = #{record.delFlag,jdbcType=INTEGER},
      </if>
      <if test="record.houseAddCount != null">
        HOUSE_ADD_COUNT = #{record.houseAddCount,jdbcType=INTEGER},
      </if>
      <if test="record.perHouseMoney != null">
        PER_HOUSE_MONEY = #{record.perHouseMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.custAddCount != null">
        CUST_ADD_COUNT = #{record.custAddCount,jdbcType=INTEGER},
      </if>
      <if test="record.perCustMoney != null">
        PER_CUST_MONEY = #{record.perCustMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.fankanCount != null">
        FANKAN_COUNT = #{record.fankanCount,jdbcType=INTEGER},
      </if>
      <if test="record.perFankanMoney != null">
        PER_FANKAN_MONEY = #{record.perFankanMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.daikanCount != null">
        DAIKAN_COUNT = #{record.daikanCount,jdbcType=INTEGER},
      </if>
      <if test="record.perDaikanMoney != null">
        PER_DAIKAN_MONEY = #{record.perDaikanMoney,jdbcType=NUMERIC},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=VARCHAR},
      </if>
      <if test="record.roleId != null">
        ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      </if>
      <if test="record.manageLevel != null">
        MANAGE_LEVEL = #{record.manageLevel,jdbcType=TINYINT},
      </if>
      <if test="record.countType != null">
        COUNT_TYPE = #{record.countType,jdbcType=TINYINT},
      </if>
      <if test="record.profitCountType != null">
        PROFIT_COUNT_TYPE = #{record.profitCountType,jdbcType=TINYINT},
      </if>
      <if test="record.taskMoney != null">
        TASK_MONEY = #{record.taskMoney,jdbcType=NUMERIC},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_SALARY_TYPE
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      SALARY_TYPE_NAME = #{record.salaryTypeName,jdbcType=VARCHAR},
      SALARY_MONEY = #{record.salaryMoney,jdbcType=NUMERIC},
      TASK_PERCENT = #{record.taskPercent,jdbcType=NUMERIC},
      TRAGET_PROFIT = #{record.tragetProfit,jdbcType=NUMERIC},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      CREATE_USER_ID = #{record.createUserId,jdbcType=INTEGER},
      DEL_FLAG = #{record.delFlag,jdbcType=INTEGER},
      HOUSE_ADD_COUNT = #{record.houseAddCount,jdbcType=INTEGER},
      PER_HOUSE_MONEY = #{record.perHouseMoney,jdbcType=NUMERIC},
      CUST_ADD_COUNT = #{record.custAddCount,jdbcType=INTEGER},
      PER_CUST_MONEY = #{record.perCustMoney,jdbcType=NUMERIC},
      FANKAN_COUNT = #{record.fankanCount,jdbcType=INTEGER},
      PER_FANKAN_MONEY = #{record.perFankanMoney,jdbcType=NUMERIC},
      DAIKAN_COUNT = #{record.daikanCount,jdbcType=INTEGER},
      PER_DAIKAN_MONEY = #{record.perDaikanMoney,jdbcType=NUMERIC},
      UPDATE_TIME = #{record.updateTime,jdbcType=VARCHAR},
      ROLE_ID = #{record.roleId,jdbcType=VARCHAR},
      MANAGE_LEVEL = #{record.manageLevel,jdbcType=TINYINT},
      COUNT_TYPE = #{record.countType,jdbcType=TINYINT},
      PROFIT_COUNT_TYPE = #{record.profitCountType,jdbcType=TINYINT},
      TASK_MONEY = #{record.taskMoney,jdbcType=NUMERIC}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryType">
    <!--@mbggenerated-->
    update FUN_SALARY_TYPE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="salaryTypeName != null">
        SALARY_TYPE_NAME = #{salaryTypeName,jdbcType=VARCHAR},
      </if>
      <if test="salaryMoney != null">
        SALARY_MONEY = #{salaryMoney,jdbcType=NUMERIC},
      </if>
      <if test="taskPercent != null">
        TASK_PERCENT = #{taskPercent,jdbcType=NUMERIC},
      </if>
      <if test="tragetProfit != null">
        TRAGET_PROFIT = #{tragetProfit,jdbcType=NUMERIC},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        CREATE_USER_ID = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        DEL_FLAG = #{delFlag,jdbcType=INTEGER},
      </if>
      <if test="houseAddCount != null">
        HOUSE_ADD_COUNT = #{houseAddCount,jdbcType=INTEGER},
      </if>
      <if test="perHouseMoney != null">
        PER_HOUSE_MONEY = #{perHouseMoney,jdbcType=NUMERIC},
      </if>
      <if test="custAddCount != null">
        CUST_ADD_COUNT = #{custAddCount,jdbcType=INTEGER},
      </if>
      <if test="perCustMoney != null">
        PER_CUST_MONEY = #{perCustMoney,jdbcType=NUMERIC},
      </if>
      <if test="fankanCount != null">
        FANKAN_COUNT = #{fankanCount,jdbcType=INTEGER},
      </if>
      <if test="perFankanMoney != null">
        PER_FANKAN_MONEY = #{perFankanMoney,jdbcType=NUMERIC},
      </if>
      <if test="daikanCount != null">
        DAIKAN_COUNT = #{daikanCount,jdbcType=INTEGER},
      </if>
      <if test="perDaikanMoney != null">
        PER_DAIKAN_MONEY = #{perDaikanMoney,jdbcType=NUMERIC},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        ROLE_ID = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="manageLevel != null">
        MANAGE_LEVEL = #{manageLevel,jdbcType=TINYINT},
      </if>
      <if test="countType != null">
        COUNT_TYPE = #{countType,jdbcType=TINYINT},
      </if>
      <if test="profitCountType != null">
        PROFIT_COUNT_TYPE = #{profitCountType,jdbcType=TINYINT},
      </if>
      <if test="taskMoney != null">
        TASK_MONEY = #{taskMoney,jdbcType=NUMERIC},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunSalaryType">
    <!--@mbggenerated-->
    update FUN_SALARY_TYPE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      SALARY_TYPE_NAME = #{salaryTypeName,jdbcType=VARCHAR},
      SALARY_MONEY = #{salaryMoney,jdbcType=NUMERIC},
      TASK_PERCENT = #{taskPercent,jdbcType=NUMERIC},
      TRAGET_PROFIT = #{tragetProfit,jdbcType=NUMERIC},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      CREATE_USER_ID = #{createUserId,jdbcType=INTEGER},
      DEL_FLAG = #{delFlag,jdbcType=INTEGER},
      HOUSE_ADD_COUNT = #{houseAddCount,jdbcType=INTEGER},
      PER_HOUSE_MONEY = #{perHouseMoney,jdbcType=NUMERIC},
      CUST_ADD_COUNT = #{custAddCount,jdbcType=INTEGER},
      PER_CUST_MONEY = #{perCustMoney,jdbcType=NUMERIC},
      FANKAN_COUNT = #{fankanCount,jdbcType=INTEGER},
      PER_FANKAN_MONEY = #{perFankanMoney,jdbcType=NUMERIC},
      DAIKAN_COUNT = #{daikanCount,jdbcType=INTEGER},
      PER_DAIKAN_MONEY = #{perDaikanMoney,jdbcType=NUMERIC},
      UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      ROLE_ID = #{roleId,jdbcType=VARCHAR},
      MANAGE_LEVEL = #{manageLevel,jdbcType=TINYINT},
      COUNT_TYPE = #{countType,jdbcType=TINYINT},
      PROFIT_COUNT_TYPE = #{profitCountType,jdbcType=TINYINT},
      TASK_MONEY = #{taskMoney,jdbcType=NUMERIC}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="extResultMap" type="com.myfun.repository.erpdb.dto.ErpFunSalaryTypeDto">
    <result column="HOUSE_ADD_COUNT" jdbcType="INTEGER" property="houseAddCount" />
    <result column="CUST_ADD_COUNT" jdbcType="INTEGER" property="custAddCount" />
    <result column="FANKAN_COUNT" jdbcType="INTEGER" property="fankanCount" />
    <result column="DAIKAN_COUNT" jdbcType="INTEGER" property="daikanCount" />
    <result column="PER_HOUSE_MONEY" jdbcType="NUMERIC" property="perHouseMoney" />
    <result column="PER_CUST_MONEY" jdbcType="NUMERIC" property="perCustMoney" />
    <result column="PER_FANKAN_MONEY" jdbcType="NUMERIC" property="perFankanMoney" />
    <result column="PER_DAIKAN_MONEY" jdbcType="NUMERIC" property="perDaikanMoney" />
    <result column="STANRDASSESSMENT_TARGET_ID" jdbcType="INTEGER" property="stanrdassessmentTargetId" />
  </resultMap>
  
	<select id="getSalaryType" resultMap="extResultMap">
	select
	A.ID,A.COMP_ID,A.SALARY_TYPE_NAME, A.SALARY_MONEY, A.TASK_PERCENT, A.TRAGET_PROFIT,A.DEL_FLAG,A.CREATION_TIME,A.CREATE_USER_ID,
	B.STANRDASSESSMENT_TARGET_ID,B.HOUSE_ADD_COUNT,B.CUST_ADD_COUNT,B.FANKAN_COUNT,B.DAIKAN_COUNT,
	B.PER_HOUSE_MONEY,B.PER_CUST_MONEY,B.PER_FANKAN_MONEY,B.PER_DAIKAN_MONEY
	from FUN_SALARY_TYPE A
	join TASK_ASSESSMENT_TARGET B on A.ID = B.SALARY_TYPE_ID
	where A.COMP_ID = #{compId} and A.DEL_FLAG = 0
	<if test="id != null">
		and A.ID = #{id}
	</if>
	<if test="keyWord != null and '' != keyWord">
		and A.SALARY_TYPE_NAME like #{keyWord}
	</if>
	</select>
	
	<select id="getSalaryTypeNameList" resultType="map">
		select
		A.ID as id,A.ROLE_ID as roleId
		from FUN_SALARY_TYPE A left join COMP_ROLES B on A.ROLE_ID = B.ROLE_ID AND A.COMP_ID = B.COMP_ID
		where A.COMP_ID = #{compId} and A.DEL_FLAG = 0 order by B.SEQ_NO ASC
	</select>

	<select id="getSalaryTypeInfoByUserId" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" />
		from FUN_SALARY_TYPE 
		where COMP_ID = #{compId} 
		and ID = (select top 1 SALARY_TYPE_ID from SALARY_TYPE_RELATIVE where USER_ID =#{userId} AND COMP_ID =#{compId} AND (CREATION_TIME &lt;= #{param.endTime} and (DEL_FLAG=0 or (DEL_FLAG !=0 and DEL_TIME &gt; #{param.startTime}))) ORDER BY CREATION_TIME desc)
	</select>
	<select id="getSalaryTypeTargetProfitByUserId" resultType="java.lang.String">
		select TRAGET_PROFIT
		from FUN_SALARY_TYPE 
		where COMP_ID = #{compId} 
		and ID = (select top 1 SALARY_TYPE_ID from SALARY_TYPE_RELATIVE where USER_ID =#{userId} AND COMP_ID =#{compId} AND DEL_FLAG = 0)
	</select>

	<select id="getSalaryTypeByCompId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_SALARY_TYPE
		where COMP_ID = #{compId}
	</select>
	
	<select id="selectSalaryTypeByRoleId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_SALARY_TYPE
		where COMP_ID = #{compId} and ROLE_ID = #{roleId} and DEL_FLAG !=1
	</select>

	<select id="getSalaryTypeId" resultType="java.lang.String">
		select a.STANRDASSESSMENT_TARGET_ID
		from TASK_ASSESSMENT_TARGET a
		LEFT JOIN SALARY_TYPE_RELATIVE b on a.SALARY_TYPE_ID = b.SALARY_TYPE_ID 
		where b.user_id = #{userId} AND b.COMP_ID =#{compId} AND (b.CREATION_TIME &lt;= #{param.endTime} and (b.DEL_FLAG=0 or (b.DEL_FLAG !=0 and b.DEL_TIME &gt; #{param.startTime})))
	</select>
	
	<select id="countBySalaryTypeName" resultType="java.lang.Integer">
		select COUNT(A.ID)
		from FUN_SALARY_TYPE A
		join TASK_ASSESSMENT_TARGET B on A.ID = B.SALARY_TYPE_ID
		where A.COMP_ID = #{compId} and A.DEL_FLAG = 0 and A.SALARY_TYPE_NAME = #{salaryTypeName}
	</select>
</mapper>