<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunGenerationPaymentMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunGenerationPayment">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="PERSON_AMOUNT" jdbcType="NUMERIC" property="personAmount" />
    <result column="COMP_AMOUNT" jdbcType="NUMERIC" property="compAmount" />
    <result column="REMARKS" jdbcType="VARCHAR" property="remarks" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="CREATE_UID" jdbcType="INTEGER" property="createUid" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="UPDATE_UID" jdbcType="INTEGER" property="updateUid" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="AUDIT_TIME" jdbcType="TIMESTAMP" property="auditTime" />
    <result column="AUDIT_UID" jdbcType="INTEGER" property="auditUid" />
    <result column="AUDIT_STATUS" jdbcType="TINYINT" property="auditStatus" />
    <result column="IS_DEL" jdbcType="TINYINT" property="isDel" />
    <result column="DEL_TIME" jdbcType="TIMESTAMP" property="delTime" />
    <result column="DEL_UID" jdbcType="INTEGER" property="delUid" />
    <result column="OCCURRENCE_TIME" jdbcType="TIMESTAMP" property="occurrenceTime" />
    <result column="GENERATION_PAYMENT_CLASS" jdbcType="INTEGER" property="generationPaymentClass" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="ASSESSMENT_MONTH" jdbcType="VARCHAR" property="assessmentMonth" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, DEPT_ID, AREA_ID, REG_ID, PERSON_AMOUNT, COMP_AMOUNT, REMARKS, CREATE_TIME, 
    CREATE_UID, USER_ID, UPDATE_UID, UPDATE_TIME, AUDIT_TIME, AUDIT_UID, AUDIT_STATUS, 
    IS_DEL, DEL_TIME, DEL_UID, OCCURRENCE_TIME, GENERATION_PAYMENT_CLASS, GR_ID, ASSESSMENT_MONTH
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPaymentExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_GENERATION_PAYMENT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_GENERATION_PAYMENT
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_GENERATION_PAYMENT
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPaymentExample">
    <!--@mbggenerated-->
    delete from FUN_GENERATION_PAYMENT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPayment" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_GENERATION_PAYMENT (COMP_ID, DEPT_ID, AREA_ID, 
      REG_ID, PERSON_AMOUNT, COMP_AMOUNT, 
      REMARKS, CREATE_TIME, CREATE_UID, 
      USER_ID, UPDATE_UID, UPDATE_TIME, 
      AUDIT_TIME, AUDIT_UID, AUDIT_STATUS, 
      IS_DEL, DEL_TIME, DEL_UID, 
      OCCURRENCE_TIME, GENERATION_PAYMENT_CLASS, 
      GR_ID, ASSESSMENT_MONTH)
    values (#{compId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{personAmount,jdbcType=NUMERIC}, #{compAmount,jdbcType=NUMERIC}, 
      #{remarks,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createUid,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{updateUid,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{auditTime,jdbcType=TIMESTAMP}, #{auditUid,jdbcType=INTEGER}, #{auditStatus,jdbcType=TINYINT}, 
      #{isDel,jdbcType=TINYINT}, #{delTime,jdbcType=TIMESTAMP}, #{delUid,jdbcType=INTEGER}, 
      #{occurrenceTime,jdbcType=TIMESTAMP}, #{generationPaymentClass,jdbcType=INTEGER}, 
      #{grId,jdbcType=INTEGER}, #{assessmentMonth,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPayment" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_GENERATION_PAYMENT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="personAmount != null">
        PERSON_AMOUNT,
      </if>
      <if test="compAmount != null">
        COMP_AMOUNT,
      </if>
      <if test="remarks != null">
        REMARKS,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="createUid != null">
        CREATE_UID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="updateUid != null">
        UPDATE_UID,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="auditTime != null">
        AUDIT_TIME,
      </if>
      <if test="auditUid != null">
        AUDIT_UID,
      </if>
      <if test="auditStatus != null">
        AUDIT_STATUS,
      </if>
      <if test="isDel != null">
        IS_DEL,
      </if>
      <if test="delTime != null">
        DEL_TIME,
      </if>
      <if test="delUid != null">
        DEL_UID,
      </if>
      <if test="occurrenceTime != null">
        OCCURRENCE_TIME,
      </if>
      <if test="generationPaymentClass != null">
        GENERATION_PAYMENT_CLASS,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="personAmount != null">
        #{personAmount,jdbcType=NUMERIC},
      </if>
      <if test="compAmount != null">
        #{compAmount,jdbcType=NUMERIC},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUid != null">
        #{createUid,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="updateUid != null">
        #{updateUid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditTime != null">
        #{auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditUid != null">
        #{auditUid,jdbcType=INTEGER},
      </if>
      <if test="auditStatus != null">
        #{auditStatus,jdbcType=TINYINT},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=TINYINT},
      </if>
      <if test="delTime != null">
        #{delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delUid != null">
        #{delUid,jdbcType=INTEGER},
      </if>
      <if test="occurrenceTime != null">
        #{occurrenceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="generationPaymentClass != null">
        #{generationPaymentClass,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="assessmentMonth != null">
        #{assessmentMonth,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPaymentExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_GENERATION_PAYMENT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_GENERATION_PAYMENT
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.personAmount != null">
        PERSON_AMOUNT = #{record.personAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.compAmount != null">
        COMP_AMOUNT = #{record.compAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.remarks != null">
        REMARKS = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUid != null">
        CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.updateUid != null">
        UPDATE_UID = #{record.updateUid,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.auditTime != null">
        AUDIT_TIME = #{record.auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.auditUid != null">
        AUDIT_UID = #{record.auditUid,jdbcType=INTEGER},
      </if>
      <if test="record.auditStatus != null">
        AUDIT_STATUS = #{record.auditStatus,jdbcType=TINYINT},
      </if>
      <if test="record.isDel != null">
        IS_DEL = #{record.isDel,jdbcType=TINYINT},
      </if>
      <if test="record.delTime != null">
        DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delUid != null">
        DEL_UID = #{record.delUid,jdbcType=INTEGER},
      </if>
      <if test="record.occurrenceTime != null">
        OCCURRENCE_TIME = #{record.occurrenceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.generationPaymentClass != null">
        GENERATION_PAYMENT_CLASS = #{record.generationPaymentClass,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.assessmentMonth != null">
        ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_GENERATION_PAYMENT
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      PERSON_AMOUNT = #{record.personAmount,jdbcType=NUMERIC},
      COMP_AMOUNT = #{record.compAmount,jdbcType=NUMERIC},
      REMARKS = #{record.remarks,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      CREATE_UID = #{record.createUid,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      UPDATE_UID = #{record.updateUid,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      AUDIT_TIME = #{record.auditTime,jdbcType=TIMESTAMP},
      AUDIT_UID = #{record.auditUid,jdbcType=INTEGER},
      AUDIT_STATUS = #{record.auditStatus,jdbcType=TINYINT},
      IS_DEL = #{record.isDel,jdbcType=TINYINT},
      DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
      DEL_UID = #{record.delUid,jdbcType=INTEGER},
      OCCURRENCE_TIME = #{record.occurrenceTime,jdbcType=TIMESTAMP},
      GENERATION_PAYMENT_CLASS = #{record.generationPaymentClass,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPayment">
    <!--@mbggenerated-->
    update FUN_GENERATION_PAYMENT
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="personAmount != null">
        PERSON_AMOUNT = #{personAmount,jdbcType=NUMERIC},
      </if>
      <if test="compAmount != null">
        COMP_AMOUNT = #{compAmount,jdbcType=NUMERIC},
      </if>
      <if test="remarks != null">
        REMARKS = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUid != null">
        CREATE_UID = #{createUid,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="updateUid != null">
        UPDATE_UID = #{updateUid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditTime != null">
        AUDIT_TIME = #{auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditUid != null">
        AUDIT_UID = #{auditUid,jdbcType=INTEGER},
      </if>
      <if test="auditStatus != null">
        AUDIT_STATUS = #{auditStatus,jdbcType=TINYINT},
      </if>
      <if test="isDel != null">
        IS_DEL = #{isDel,jdbcType=TINYINT},
      </if>
      <if test="delTime != null">
        DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delUid != null">
        DEL_UID = #{delUid,jdbcType=INTEGER},
      </if>
      <if test="occurrenceTime != null">
        OCCURRENCE_TIME = #{occurrenceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="generationPaymentClass != null">
        GENERATION_PAYMENT_CLASS = #{generationPaymentClass,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunGenerationPayment">
    <!--@mbggenerated-->
    update FUN_GENERATION_PAYMENT
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      PERSON_AMOUNT = #{personAmount,jdbcType=NUMERIC},
      COMP_AMOUNT = #{compAmount,jdbcType=NUMERIC},
      REMARKS = #{remarks,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      CREATE_UID = #{createUid,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      UPDATE_UID = #{updateUid,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      AUDIT_TIME = #{auditTime,jdbcType=TIMESTAMP},
      AUDIT_UID = #{auditUid,jdbcType=INTEGER},
      AUDIT_STATUS = #{auditStatus,jdbcType=TINYINT},
      IS_DEL = #{isDel,jdbcType=TINYINT},
      DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
      DEL_UID = #{delUid,jdbcType=INTEGER},
      OCCURRENCE_TIME = #{occurrenceTime,jdbcType=TIMESTAMP},
      GENERATION_PAYMENT_CLASS = #{generationPaymentClass,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>

  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunGenerationPaymentDto">
    <result column="CLASS_NAME" jdbcType="VARCHAR" property="className" />
    <result column="USER_POSITION" jdbcType="VARCHAR" property="userPosition" />
  </resultMap>

  <select id="getGenerationPaymentList" resultMap="extBaseResultMap">
    SELECT a.*, b.CLASS_NAME,c.USER_POSITION from FUN_GENERATION_PAYMENT a
    LEFT JOIN FUN_GENERATION_PAYMENT_CLASS b on a.GENERATION_PAYMENT_CLASS = b.id
    JOIN FUN_USERS c on a.USER_ID = c.USER_ID
    <where>
      <if test="null != param.compId">
        and a.COMP_ID=#{param.compId} and a.IS_DEL=0
      </if>
      <if test="null != param.areaId">
        and c.AREA_ID=#{param.areaId}
      </if>
      <if test="null != param.regId">
        and c.REG_ID=#{param.regId}
      </if>
      <if test="null != param.deptId">
        and c.DEPT_ID=#{param.deptId}
      </if>
      <if test="null != param.grId">
        and c.GR_ID=#{param.grId}
      </if>
      <if test="null != param.userId">
        and a.USER_ID=#{param.userId}
      </if>
      <if test="null != param.generationPaymentClass">
        and a.GENERATION_PAYMENT_CLASS=#{param.generationPaymentClass}
      </if>
      <if test="null != param.auditStatus">
        <choose>
          <when test="1 == param.auditStatus">
              and a.AUDIT_STATUS = 1
          </when>
          <when test="0 == param.auditStatus">
              and (a.AUDIT_STATUS=0 or a.AUDIT_STATUS=2)
          </when>
        </choose>
      </if>
      <if test="null != param.occMonth and '' != param.occMonth">
        and ASSESSMENT_MONTH = #{param.occMonth}
      </if>
      <if test="null != param.startTimeDate and null != param.endTimeDate">
        <choose>
          <when test="param.timeType == 1">
            and a.CREATE_TIME &gt;= #{param.startTimeDate} and a.CREATE_TIME &lt;= #{param.endTimeDate}
          </when>
          <when test="param.timeType == 2">
            and a.UPDATE_TIME &gt;= #{param.startTimeDate} and a.UPDATE_TIME &lt;= #{param.endTimeDate}
          </when>
          <when test="param.timeType == 3">
            and a.AUDIT_TIME &gt;= #{param.startTimeDate} and a.AUDIT_TIME &lt;= #{param.endTimeDate} and a.AUDIT_STATUS=1
          </when>
        </choose>
      </if>
    </where>
    ORDER BY a.id desc
  </select>

  <select id="summaryGenerationPaymentList" resultType="java.util.Map">
    SELECT ASSESSMENT_MONTH assessmentMonth,  sum(COMP_AMOUNT) compAmount,sum(PERSON_AMOUNT) personAmount,
    <if test="'AREA' == param.dimension">
      b.AREA_ID areaId
    </if>
    <if test="'REG' == param.dimension">
      b.REG_ID regId
    </if>
    <if test="'DEPT' == param.dimension">
      b.DEPT_Id deptId
    </if>
    <if test="'GROUP' == param.dimension">
      b.GR_ID grId, b.DEPT_Id deptId
    </if>
    <if test="'USER' == param.dimension">
      b.DEPT_ID deptId,b.USER_POSITION userPosition, a.USER_ID userId
    </if>
    FROM FUN_GENERATION_PAYMENT a
    JOIN FUN_USERS b on a.USER_ID = b.USER_ID
    <where>
      <if test="null != param.compId">
        and a.COMP_ID=#{param.compId}  and a.IS_DEL=0
      </if>
      <if test="null != param.areaId">
        and b.AREA_ID=#{param.areaId}
      </if>
      <if test="null != param.regId">
        and b.REG_ID=#{param.regId}
      </if>
      <if test="null != param.deptId">
        and b.DEPT_ID=#{param.deptId}
      </if>
      <if test="null != param.grId">
        and b.GR_ID=#{param.grId}
      </if>
      <if test="null != param.userId">
        and b.USER_ID=#{param.userId}
      </if>
      <if test="null != param.auditStatus">
        <choose>
          <when test="1 == param.auditStatus">
            and a.AUDIT_STATUS = 1
          </when>
          <when test="0 == param.auditStatus">
            and (a.AUDIT_STATUS=0 or a.AUDIT_STATUS=2)
          </when>
        </choose>
      </if>
      <if test="null != param.generationPaymentClass">
        and a.GENERATION_PAYMENT_CLASS=#{param.generationPaymentClass}
      </if>
      <if test="null != param.occMonth and '' != param.occMonth">
        and ASSESSMENT_MONTH = #{param.occMonth}
      </if>
      <if test="null != param.startTime and '' != param.startTime and null != param.endTime and '' != param.endTime">
        <choose>
          <when test="param.timeType == 1">
            and a.CREATE_TIME &gt;= #{param.startTime} and  a.CREATE_TIME &lt;= #{param.endTime}
          </when>
          <when test="param.timeType == 2">
            and a.UPDATE_TIME &gt;= #{param.startTime} and  a.UPDATE_TIME &lt;= #{param.endTime}
          </when>
          <when test="param.timeType == 3">
            and a.AUDIT_TIME &gt;= #{param.startTime} and  a.AUDIT_TIME &lt;= #{param.endTime}
          </when>
        </choose>
      </if>
    </where>
    GROUP BY ASSESSMENT_MONTH,
    <if test="'AREA' == param.dimension">
      b.AREA_ID
    </if>
    <if test="'REG' == param.dimension">
      b.REG_ID
    </if>
    <if test="'DEPT' == param.dimension">
      b.DEPT_ID
    </if>
    <if test="'GROUP' == param.dimension">
      b.GR_ID, b.DEPT_ID
    </if>
    <if test="'USER' == param.dimension">
      b.DEPT_ID ,b.USER_POSITION , a.USER_ID
    </if>
    ORDER BY
      <if test="'AREA' == param.dimension">
        b.AREA_ID
      </if>
      <if test="'REG' == param.dimension">
        b.REG_ID
      </if>
      <if test="'DEPT' == param.dimension">
        b.DEPT_ID
      </if>
      <if test="'GROUP' == param.dimension">
        b.GR_ID
      </if>
      <if test="'USER' == param.dimension">
        a.USER_ID
      </if>
    desc
  </select>
  <select id="summaryGenerationPaymentCount" resultType="java.lang.Long">
      with t as (
          SELECT <if test="'AREA' == param.dimension">
                  b.AREA_ID areaId
                </if>
                  <if test="'REG' == param.dimension">
                    b.REG_ID regId
                  </if>
                  <if test="'DEPT' == param.dimension">
                    b.DEPT_Id deptId
                  </if>
                  <if test="'GROUP' == param.dimension">
                    b.GR_ID grId, b.DEPT_Id deptId
                  </if>
                  <if test="'USER' == param.dimension">
                    b.DEPT_ID deptId,b.USER_POSITION userPosition, a.USER_ID userId
                  </if>
          FROM FUN_GENERATION_PAYMENT a
          JOIN FUN_USERS b on a.USER_ID = b.USER_ID
          <where>
            <if test="null != param.compId">
              and a.COMP_ID=#{param.compId}  and a.IS_DEL=0
            </if>
            <if test="null != param.areaId">
              and b.AREA_ID=#{param.areaId}
            </if>
            <if test="null != param.regId">
              and b.REG_ID=#{param.regId}
            </if>
            <if test="null != param.deptId">
              and b.DEPT_ID=#{param.deptId}
            </if>
            <if test="null != param.grId">
              and b.GR_ID=#{param.grId}
            </if>
            <if test="null != param.userId">
              and b.USER_ID=#{param.userId}
            </if>
            <if test="null != param.auditStatus">
              <choose>
                <when test="1 == param.auditStatus">
                  and a.AUDIT_STATUS = 1
                </when>
                <when test="0 == param.auditStatus">
                  and (a.AUDIT_STATUS=0 or a.AUDIT_STATUS=2)
                </when>
              </choose>
            </if>
            <if test="null != param.generationPaymentClass">
              and a.GENERATION_PAYMENT_CLASS=#{param.generationPaymentClass}
            </if>
            <if test="null != param.occMonth and '' != param.occMonth">
              and ASSESSMENT_MONTH = #{param.occMonth}
            </if>
            <if test="null != param.startTime and '' != param.startTime and null != param.endTime and '' != param.endTime">
              <choose>
                <when test="param.timeType == 1">
                  and a.CREATE_TIME &gt;= #{param.startTime} and  a.CREATE_TIME &lt;= #{param.endTime}
                </when>
                <when test="param.timeType == 2">
                  and a.UPDATE_TIME &gt;= #{param.startTime} and  a.UPDATE_TIME &lt;= #{param.endTime}
                </when>
                <when test="param.timeType == 3">
                  and a.AUDIT_TIME &gt;= #{param.startTime} and  a.AUDIT_TIME &lt;= #{param.endTime}
                </when>
              </choose>
            </if>
          </where>
          group by ASSESSMENT_MONTH,
          <if test="'AREA' == param.dimension">
            b.AREA_ID
          </if>
          <if test="'REG' == param.dimension">
            b.REG_ID
          </if>
          <if test="'DEPT' == param.dimension">
            b.DEPT_ID
          </if>
          <if test="'GROUP' == param.dimension">
            b.GR_ID, b.DEPT_ID
          </if>
          <if test="'USER' == param.dimension">
            b.DEPT_ID ,b.USER_POSITION , a.USER_ID
          </if>
      ) select count(1) from t
  </select>

  <insert id="insertBatch">
    INSERT INTO FUN_GENERATION_PAYMENT(comp_id, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID,
    PERSON_AMOUNT,COMP_AMOUNT,CREATE_TIME,CREATE_UID,REMARKS, GENERATION_PAYMENT_CLASS, ASSESSMENT_MONTH)

    select COMP_ID, AREA_ID, REG_ID, DEPT_ID,GR_ID, USER_ID, #{param.personAmount},#{param.compAmount},
      GETDATE(), #{createUid}, #{param.remarks}, #{param.generationPaymentClass},#{param.assessmentMonth}
    from FUN_USERS
    <where>
      <if test="null != compId">
          and COMP_ID=#{compId} and USER_WRITEOFF=0
      </if>
      <if test="null != param.userId">
        and USER_ID=#{param.userId}
      </if>
      <if test="null != param.grId">
        and GR_ID=#{param.grId}
      </if>
      <if test="null != param.deptId">
        and DEPT_ID=#{param.deptId}
      </if>
      <if test="null != param.regId">
        and REG_ID=#{param.regId}
      </if>
      <if test="null != param.areaId">
        and AREA_ID=#{param.areaId}
      </if>
      <if test="null != param.userPosition and ''!= param.userPosition">
        and USER_POSITION=#{param.userPosition}
      </if>
      <if test="null != param.userIdList">
          and USER_ID in <foreach collection="param.userIdList" separator="," open="(" item="userId" close=")">
              #{userId}
          </foreach>
      </if>
    </where>
  </insert>
  
  <select id="getAllUserGenerationData" resultType="com.myfun.repository.erpdb.dto.FunWageTmpDataDto">
      select user_id userId, sum(PERSON_AMOUNT) amount1
      from FUN_GENERATION_PAYMENT
      <where>
          <if test="null != compId">
              and comp_id = #{compId} and IS_DEL=0 and AUDIT_STATUS=1
          </if>
          <if test="null != assmonthSet">
             and ASSESSMENT_MONTH in <foreach collection="assmonthSet" item="assessmentMonth" close=")" open="(" separator=",">
              #{assessmentMonth}
          </foreach>
          </if>
          <if test="userIds.size > 0">
              and user_id in <foreach collection="userIds" separator="," open="(" close=")" item="userId">
                    #{userId}
              </foreach>
          </if>
      </where>
      GROUP  BY USER_ID
  </select>
  
  <!-- new Organization begin -->
  <select id="summaryGenerationPaymentCountNewOrg" resultType="java.lang.Long">
      with t as (
          SELECT ASSESSMENT_MONTH,${param.selectColumnStr}  
          FROM FUN_GENERATION_PAYMENT a
          JOIN FUN_USERS b on a.USER_ID = b.USER_ID
          where a.COMP_ID=#{param.compId}  and a.IS_DEL=0
            <if test="param.dimension == 'ORGANIZATION'">
	          and b.${param.rangeColumn} = #{param.serchRangeId}
	        </if>
            <if test="null != param.userId">
              and b.USER_ID=#{param.userId}
            </if>
            <if test="null != param.auditStatus">
              <choose>
                <when test="1 == param.auditStatus">
                  and a.AUDIT_STATUS = 1
                </when>
                <when test="0 == param.auditStatus">
                  and (a.AUDIT_STATUS=0 or a.AUDIT_STATUS=2)
                </when>
              </choose>
            </if>
            <if test="null != param.generationPaymentClass">
              and a.GENERATION_PAYMENT_CLASS=#{param.generationPaymentClass}
            </if>
            <if test="null != param.occMonth and '' != param.occMonth">
              and ASSESSMENT_MONTH = #{param.occMonth}
            </if>
            <if test="null != param.startTime and '' != param.startTime and null != param.endTime and '' != param.endTime">
              <choose>
                <when test="param.timeType == 1">
                  and a.CREATE_TIME &gt;= #{param.startTime} and  a.CREATE_TIME &lt;= #{param.endTime}
                </when>
                <when test="param.timeType == 2">
                  and a.UPDATE_TIME &gt;= #{param.startTime} and  a.UPDATE_TIME &lt;= #{param.endTime}
                </when>
                <when test="param.timeType == 3">
                  and a.AUDIT_TIME &gt;= #{param.startTime} and  a.AUDIT_TIME &lt;= #{param.endTime}
                </when>
              </choose>
            </if>
          group by ASSESSMENT_MONTH, ${param.groupColumn}
      ) select count(1) from t
  </select>
  
  
  <select id="summaryGenerationPaymentListNewOrg" resultType="java.util.Map">
    SELECT ASSESSMENT_MONTH assessmentMonth,  sum(COMP_AMOUNT) compAmount,sum(PERSON_AMOUNT) personAmount,
    ${param.selectColumnStr} 
    FROM FUN_GENERATION_PAYMENT a
    JOIN FUN_USERS b on a.USER_ID = b.USER_ID
    <where>
      <if test="null != param.compId">
        and a.COMP_ID=#{param.compId}  and a.IS_DEL=0
      </if>
      <if test="null != param.userId">
        and b.USER_ID=#{param.userId}
      </if>
      <if test="null != param.auditStatus">
        <choose>
          <when test="1 == param.auditStatus">
            and a.AUDIT_STATUS = 1
          </when>
          <when test="0 == param.auditStatus">
            and (a.AUDIT_STATUS=0 or a.AUDIT_STATUS=2)
          </when>
        </choose>
      </if>
      <if test="null != param.generationPaymentClass">
        and a.GENERATION_PAYMENT_CLASS=#{param.generationPaymentClass}
      </if>
      <if test="null != param.occMonth and '' != param.occMonth">
        and ASSESSMENT_MONTH = #{param.occMonth}
      </if>
      <if test="null != param.startTime and '' != param.startTime and null != param.endTime and '' != param.endTime">
        <choose>
          <when test="param.timeType == 1">
            and a.CREATE_TIME &gt;= #{param.startTime} and  a.CREATE_TIME &lt;= #{param.endTime}
          </when>
          <when test="param.timeType == 2">
            and a.UPDATE_TIME &gt;= #{param.startTime} and  a.UPDATE_TIME &lt;= #{param.endTime}
          </when>
          <when test="param.timeType == 3">
            and a.AUDIT_TIME &gt;= #{param.startTime} and  a.AUDIT_TIME &lt;= #{param.endTime}
          </when>
        </choose>
      </if>
      <if test="param.dimension == 'ORGANIZATION'">
        and b.${param.rangeColumn} = #{param.serchRangeId}
      </if>
    </where>
    GROUP BY ASSESSMENT_MONTH, ${param.groupColumn}
    ORDER BY ${param.groupColumn} desc
  </select>
  
  
  <select id="getGenerationPaymentListNewOrg" resultMap="extBaseResultMap">
    SELECT a.*, b.CLASS_NAME,c.USER_POSITION from FUN_GENERATION_PAYMENT a
    LEFT JOIN FUN_GENERATION_PAYMENT_CLASS b on a.GENERATION_PAYMENT_CLASS = b.id
    JOIN FUN_USERS c on a.USER_ID = c.USER_ID
    <where>
      <if test="null != param.organizationId and param.organizationId &gt; 0">
      	and c.TISSUE_LINE LIKE '%:${param.organizationId}:%'
      </if>
      <if test="null != param.compId">
        and a.COMP_ID=#{param.compId} and a.IS_DEL=0
      </if>
      <if test="null != param.userId">
        and a.USER_ID=#{param.userId}
      </if>
      <if test="null != param.generationPaymentClass">
        and a.GENERATION_PAYMENT_CLASS=#{param.generationPaymentClass}
      </if>
      <if test="null != param.auditStatus">
        <choose>
          <when test="1 == param.auditStatus">
              and a.AUDIT_STATUS = 1
          </when>
          <when test="0 == param.auditStatus">
              and (a.AUDIT_STATUS=0 or a.AUDIT_STATUS=2)
          </when>
        </choose>
      </if>
      <if test="null != param.occMonth and '' != param.occMonth">
        and ASSESSMENT_MONTH = #{param.occMonth}
      </if>
      <if test="null != param.startTimeDate and null != param.endTimeDate">
        <choose>
          <when test="param.timeType == 1">
            and a.CREATE_TIME &gt;= #{param.startTimeDate} and a.CREATE_TIME &lt;= #{param.endTimeDate}
          </when>
          <when test="param.timeType == 2">
            and a.UPDATE_TIME &gt;= #{param.startTimeDate} and a.UPDATE_TIME &lt;= #{param.endTimeDate}
          </when>
          <when test="param.timeType == 3">
            and a.AUDIT_TIME &gt;= #{param.startTimeDate} and a.AUDIT_TIME &lt;= #{param.endTimeDate} and a.AUDIT_STATUS=1
          </when>
        </choose>
      </if>
    </where>
    ORDER BY a.id desc
  </select>
  
  <insert id="insertBatchNewOrg">
    INSERT INTO FUN_GENERATION_PAYMENT(comp_id, DEPT_ID, GR_ID, USER_ID,
    PERSON_AMOUNT,COMP_AMOUNT,CREATE_TIME,CREATE_UID,REMARKS, GENERATION_PAYMENT_CLASS, ASSESSMENT_MONTH)

    select COMP_ID, DEPT_ID,GR_ID, USER_ID, #{param.personAmount},#{param.compAmount},
      GETDATE(), #{createUid}, #{param.remarks}, #{param.generationPaymentClass},#{param.assessmentMonth}
    from FUN_USERS
    <where>
      <if test="null != compId">
          and COMP_ID=#{compId} and USER_WRITEOFF=0
      </if>
      <if test="null != param.userId">
        and USER_ID=#{param.userId}
      </if>
      <if test="null != param.grId">
        and GR_ID=#{param.grId}
      </if>
      <if test="null != param.deptId">
        and DEPT_ID=#{param.deptId}
      </if>
      <if test="null != param.userPosition and ''!= param.userPosition">
        and USER_POSITION=#{param.userPosition}
      </if>
      <if test="null != param.userIdList">
          and USER_ID in <foreach collection="param.userIdList" separator="," open="(" item="userId" close=")">
              #{userId}
          </foreach>
      </if>
      <if test="null != param.organizationId and param.organizationId &gt; 0">
      	and TISSUE_LINE LIKE '%:${param.organizationid}:%'
      </if>
    </where>
  </insert>
  
  
</mapper>