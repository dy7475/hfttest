<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunBuildrulequerylimitMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimit">
    <!--@mbggenerated-->
    <id column="LIMIT_ID" jdbcType="INTEGER" property="limitId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="RULE_REG_EX" jdbcType="VARCHAR" property="ruleRegEx" />
    <result column="RULE_STR" jdbcType="VARCHAR" property="ruleStr" />
    <result column="START_TIME" jdbcType="VARCHAR" property="startTime" />
    <result column="END_TIME" jdbcType="VARCHAR" property="endTime" />
    <result column="CREATE_USER_ID" jdbcType="INTEGER" property="createUserId" />
    <result column="CREATE_USER" jdbcType="VARCHAR" property="createUser" />
    <result column="STATUS" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    LIMIT_ID, COMP_ID, USER_ID, BUILD_ID, BUILD_NAME, RULE_REG_EX, RULE_STR, START_TIME, 
    END_TIME, CREATE_USER_ID, CREATE_USER, [STATUS]
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimitExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from FUN_BUILDRULEQUERYLIMIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_BUILDRULEQUERYLIMIT
    where LIMIT_ID = #{limitId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_BUILDRULEQUERYLIMIT
    where LIMIT_ID = #{limitId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimitExample">
    <!--@mbggenerated-->
    delete from FUN_BUILDRULEQUERYLIMIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimit">
    <!--@mbggenerated-->
    <selectKey keyProperty="limitId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_BUILDRULEQUERYLIMIT_LIMIT_ID
    </selectKey>
    insert into FUN_BUILDRULEQUERYLIMIT (LIMIT_ID, COMP_ID, USER_ID, 
      BUILD_ID, BUILD_NAME, RULE_REG_EX, 
      RULE_STR, START_TIME, END_TIME, 
      CREATE_USER_ID, CREATE_USER, [STATUS]
      )
    values (#{limitId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{buildId,jdbcType=INTEGER}, #{buildName,jdbcType=VARCHAR}, #{ruleRegEx,jdbcType=VARCHAR}, 
      #{ruleStr,jdbcType=VARCHAR}, #{startTime,jdbcType=VARCHAR}, #{endTime,jdbcType=VARCHAR}, 
      #{createUserId,jdbcType=INTEGER}, #{createUser,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimit">
    <!--@mbggenerated-->
    <selectKey keyProperty="limitId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_BUILDRULEQUERYLIMIT_LIMIT_ID
    </selectKey>
    insert into FUN_BUILDRULEQUERYLIMIT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      LIMIT_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="buildName != null">
        BUILD_NAME,
      </if>
      <if test="ruleRegEx != null">
        RULE_REG_EX,
      </if>
      <if test="ruleStr != null">
        RULE_STR,
      </if>
      <if test="startTime != null">
        START_TIME,
      </if>
      <if test="endTime != null">
        END_TIME,
      </if>
      <if test="createUserId != null">
        CREATE_USER_ID,
      </if>
      <if test="createUser != null">
        CREATE_USER,
      </if>
      <if test="status != null">
        [STATUS],
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{limitId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildName != null">
        #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="ruleRegEx != null">
        #{ruleRegEx,jdbcType=VARCHAR},
      </if>
      <if test="ruleStr != null">
        #{ruleStr,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=VARCHAR},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimitExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_BUILDRULEQUERYLIMIT
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BUILDRULEQUERYLIMIT
    <set>
      <if test="record.limitId != null">
        LIMIT_ID = #{record.limitId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.buildName != null">
        BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      </if>
      <if test="record.ruleRegEx != null">
        RULE_REG_EX = #{record.ruleRegEx,jdbcType=VARCHAR},
      </if>
      <if test="record.ruleStr != null">
        RULE_STR = #{record.ruleStr,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null">
        START_TIME = #{record.startTime,jdbcType=VARCHAR},
      </if>
      <if test="record.endTime != null">
        END_TIME = #{record.endTime,jdbcType=VARCHAR},
      </if>
      <if test="record.createUserId != null">
        CREATE_USER_ID = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.createUser != null">
        CREATE_USER = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        [STATUS] = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BUILDRULEQUERYLIMIT
    set LIMIT_ID = #{record.limitId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      RULE_REG_EX = #{record.ruleRegEx,jdbcType=VARCHAR},
      RULE_STR = #{record.ruleStr,jdbcType=VARCHAR},
      START_TIME = #{record.startTime,jdbcType=VARCHAR},
      END_TIME = #{record.endTime,jdbcType=VARCHAR},
      CREATE_USER_ID = #{record.createUserId,jdbcType=INTEGER},
      CREATE_USER = #{record.createUser,jdbcType=VARCHAR},
      [STATUS] = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimit">
    <!--@mbggenerated-->
    update FUN_BUILDRULEQUERYLIMIT
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildName != null">
        BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="ruleRegEx != null">
        RULE_REG_EX = #{ruleRegEx,jdbcType=VARCHAR},
      </if>
      <if test="ruleStr != null">
        RULE_STR = #{ruleStr,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        START_TIME = #{startTime,jdbcType=VARCHAR},
      </if>
      <if test="endTime != null">
        END_TIME = #{endTime,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        CREATE_USER_ID = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        CREATE_USER = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        [STATUS] = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where LIMIT_ID = #{limitId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimit">
    <!--@mbggenerated-->
    update FUN_BUILDRULEQUERYLIMIT
    set COMP_ID = #{compId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      RULE_REG_EX = #{ruleRegEx,jdbcType=VARCHAR},
      RULE_STR = #{ruleStr,jdbcType=VARCHAR},
      START_TIME = #{startTime,jdbcType=VARCHAR},
      END_TIME = #{endTime,jdbcType=VARCHAR},
      CREATE_USER_ID = #{createUserId,jdbcType=INTEGER},
      CREATE_USER = #{createUser,jdbcType=VARCHAR},
      [STATUS] = #{status,jdbcType=TINYINT}
    where LIMIT_ID = #{limitId,jdbcType=INTEGER}
  </update>
	<resultMap extends="BaseResultMap" id="ErpFunBuildrulequerylimitDtoMap" type="com.myfun.erpWeb.managecenter.buildData.vo.ErpFunBuildrulequerylimitDto">
	</resultMap>
	
	<select id="getQueryLimitList" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select top 50  <include refid="Base_Column_List" />
		from FUN_BUILDRULEQUERYLIMIT
		where END_TIME &gt;= '2017-07-05 23:00:00'
		<if test="limitId != null and limitId &gt; 0">AND LIMIT_ID &lt; #{limitId}</if>
		order by LIMIT_ID desc
	</select>
	
	<select id="getUserViewBuilds" resultMap="BaseResultMap">
		SELECT BUILD_ID,BUILD_NAME
		FROM FUN_BUILDRULEQUERYLIMIT
		WHERE START_TIME &lt;= GETDATE() AND END_TIME &gt;= GETDATE() AND USER_ID=#{userId}
		GROUP BY BUILD_ID,BUILD_NAME
	</select>

	<select id="getBuildrulequerylimitList" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" /> FROM FUN_BUILDRULEQUERYLIMIT
		WHERE USER_ID = #{param.userId} AND COMP_ID = #{param.compId} AND START_TIME &lt;= #{param.nowTime} AND END_TIME
		&gt;= #{param.nowTime}
		<if test="param.buildId != null">
			and BUILD_ID=#{param.buildId}
		</if>
	</select>

	<select id="getBuildrulequerylimitDtoList" resultMap="ErpFunBuildrulequerylimitDtoMap">
		select <include refid="Base_Column_List" /> from FUN_BUILDRULEQUERYLIMIT
		where 
<!-- 		START_TIME &lt;= #{nowTime} AND  -->
		END_TIME &gt;= #{nowTime}
		and	 USER_ID IN
		<foreach close=")" collection="userIds" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
		ORDER BY USER_ID,BUILD_ID
	</select>

	<select id="getBuildrulequerylimit" parameterType="com.myfun.repository.erpdb.po.ErpFunBuildrulequerylimit" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" /> FROM FUN_BUILDRULEQUERYLIMIT WHERE USER_ID = #{userId} AND BUILD_ID = #{buildId} AND COMP_ID = #{compId} AND RULE_STR = #{ruleStr}
	</select>

	<delete id="deleteBuildrulequerylimits">
		delete  from FUN_BUILDRULEQUERYLIMIT
		where comp_id=#{compId}
		and LIMIT_ID IN
		<foreach close=")" collection="ids" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</delete>
	<select id="getBuildByUserId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_BUILDRULEQUERYLIMIT
		where  comp_Id =#{compId} and user_Id =#{userId} and end_time &gt;=getdate()
	</select>

  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.erpWeb.managecenter.buildData.vo.ErpFunBuildrulequerylimitDto">

  </resultMap>
  <select id="getBuildrulequerylimitDtoByNoOper" resultMap="extBaseResultMap">
    SELECT  <include refid="Base_Column_List" /> from FUN_BUILDRULEQUERYLIMIT
    WHERE COMP_ID = #{compId} and BUILD_ID = #{param.buildId}
    <if test="param.byUserId != null">
      and USER_ID = #{param.byUserId}
    </if>
    <if test="param.status != null and param.status != 2">
      and STATUS = #{param.status}
    </if>
     <if test="param.status != null and param.status == 2">
          and END_TIME &lt; GETDATE()
     </if>
    <if test="param.startTime != null and param.startTime != ''">
      and START_TIME &gt;= #{param.startTime}
    </if>
    <if test="param.endTime != null and param.endTime != ''">
      and START_TIME &lt;= #{param.endTime}
    </if>
    order by LIMIT_ID desc
  </select>
  <select id="getBuildrulequerylimitDtoByDifferentOper" resultMap="extBaseResultMap">
    SELECT DISTINCT A.LIMIT_ID, A.COMP_ID,A.USER_ID,A.BUILD_ID,A.BUILD_NAME,A.RULE_REG_EX,A.RULE_STR,A.START_TIME,A.END_TIME,A.CREATE_USER_ID,A.CREATE_USER,A.STATUS
    from FUN_BUILDRULEQUERYLIMIT A
    <if test="oper == 2">
      JOIN  build_allot B ON A.COMP_ID = B.COMP_ID AND A.BUILD_ID = B.BUILD_ID
    </if>
    WHERE A.COMP_ID = #{compId}
    <if test="param.byUserId != null">
      and A.USER_ID = #{param.byUserId}
    </if>
    <if test="param.status != null and param.status != 2">
      and A.STATUS = #{param.status}
    </if>
    <if test="param.status != null and param.status == 2">
      and A.END_TIME &lt; GETDATE()
    </if>
    <if test="param.startTime != null and param.startTime != ''">
      and A.START_TIME &gt;= #{param.startTime}
    </if>
    <if test="param.endTime != null and param.endTime != ''">
      and A.START_TIME &lt;= #{param.endTime}
    </if>
    <if test="oper == 2">
     and B.DEPT_ID = #{param.deptId}
   </if>
    <if test="oper == 3">
      and USER_ID = #{param.userId}
    </if>
    order by LIMIT_ID desc
  </select>
    <select id="getBuildLimitByBuildId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM FUN_BUILDRULEQUERYLIMIT WHERE COMP_ID = #{compId} and BUILD_ID = #{buildId}
    </select>
    <select id="getMgrUserViewBuilds" resultMap="BaseResultMap">
      select BUILD_ID, BUILD_NAME FROM FUN_BUILDRULEQUERYLIMIT
      WHERE COMP_ID = #{compId} and USER_ID = #{userId} and START_TIME &lt;=#{nowTime} and END_TIME &gt;=#{nowTime}
      GROUP BY BUILD_ID, BUILD_NAME
    </select>
</mapper>