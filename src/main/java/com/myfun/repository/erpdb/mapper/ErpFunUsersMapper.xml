<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunUsersMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunUsers">
    <!--@mbggenerated-->
    <id column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CITY_ID" jdbcType="SMALLINT" property="cityId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="USER_NO" jdbcType="VARCHAR" property="userNo" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="LOGIN_USERID" jdbcType="VARCHAR" property="loginUserid" />
    <result column="LOGIN_PASSWORD" jdbcType="VARCHAR" property="loginPassword" />
    <result column="USER_SEX" jdbcType="BIT" property="userSex" />
    <result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
    <result column="USER_JOB_DATE" jdbcType="VARCHAR" property="userJobDate" />
    <result column="USER_POSITION" jdbcType="VARCHAR" property="userPosition" />
    <result column="USER_STATUS" jdbcType="TINYINT" property="userStatus" />
    <result column="STATUS_TIME" jdbcType="VARCHAR" property="statusTime" />
    <result column="USER_WRITEOFF" jdbcType="BIT" property="userWriteoff" />
    <result column="WRITEOFF_TIME" jdbcType="VARCHAR" property="writeoffTime" />
    <result column="WAGE_FLAG" jdbcType="BIT" property="wageFlag" />
    <result column="BUILD_RULE_FLAG" jdbcType="BIT" property="buildRuleFlag" />
    <result column="USER_PID" jdbcType="VARCHAR" property="userPid" />
    <result column="USER_LOGTIME" jdbcType="VARCHAR" property="userLogtime" />
    <result column="USER_EDITION" jdbcType="INTEGER" property="userEdition" />
    <result column="ALLDEPT_FLAG" jdbcType="BIT" property="alldeptFlag" />
    <result column="USER_ROAM" jdbcType="BIT" property="userRoam" />
    <result column="UPDATE_UID" jdbcType="INTEGER" property="updateUid" />
    <result column="UPDATE_TIME" jdbcType="VARCHAR" property="updateTime" />
    <result column="USER_PHOTO_MIN" jdbcType="VARCHAR" property="userPhotoMin" />
    <result column="VERTIFY_CODE" jdbcType="VARCHAR" property="vertifyCode" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="USER_CODE" jdbcType="VARCHAR" property="userCode" />
    <result column="YOUJIA_PHONE" jdbcType="VARCHAR" property="youjiaPhone" />
    <result column="USE_YOUJIA_PHONE" jdbcType="TINYINT" property="useYoujiaPhone" />
    <result column="DEVELOPER_ADMIN" jdbcType="TINYINT" property="developerAdmin" />
    <result column="TOPBUILDING_ADMIN" jdbcType="TINYINT" property="topbuildingAdmin" />
    <result column="PERSONNEL_LEVELS" jdbcType="VARCHAR" property="personnelLevels" />
    <result column="RECRUITMENT_CHANNEL" jdbcType="VARCHAR" property="recruitmentChannel" />
    <result column="LEVELS_ID" jdbcType="INTEGER" property="levelsId" />
    <result column="CHANNEL_ID" jdbcType="INTEGER" property="channelId" />
    <result column="WRITEOFF_TYPE" jdbcType="TINYINT" property="writeoffType" />
    <result column="APARTMENT_USE_FLAG" jdbcType="TINYINT" property="apartmentUseFlag" />
    <result column="SALARY_PLAN_MANAGER" jdbcType="TINYINT" property="salaryPlanManager" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="JOIN_DEPT_TIME" jdbcType="TIMESTAMP" property="joinDeptTime" />
    <result column="PROMPT_TIME" jdbcType="TIMESTAMP" property="promptTime" />
    <result column="BESPOKE_MANAGER" jdbcType="TINYINT" property="bespokeManager" />
    <result column="SUPER_LEADER" jdbcType="INTEGER" property="superLeader" />
    <result column="USER_PHOTO" jdbcType="VARCHAR" property="userPhoto" />
    <result column="EXPERIENCE_USER" jdbcType="TINYINT" property="experienceUser" />
    <result column="PROPERTY_MANAGER" jdbcType="TINYINT" property="propertyManager" />
    <result column="USER_SOURCE" jdbcType="TINYINT" property="userSource" />
    <result column="ROLE_LEVEL_ID" jdbcType="INTEGER" property="roleLevelId" />
    <result column="INVITE_USER_ID" jdbcType="INTEGER" property="inviteUserId" />
    <result column="CURRENT_P_ID" jdbcType="INTEGER" property="currentPId" />
    <result column="TISSUE_LINE" jdbcType="VARCHAR" property="tissueLine" />
    <result column="D_ASSESSMENT_TIME" jdbcType="TIMESTAMP" property="dAssessmentTime" />
    <result column="D_ASSESSMENT_FLAG" jdbcType="TINYINT" property="dAssessmentFlag" />
    <result column="USER_LEVEL" jdbcType="INTEGER" property="userLevel" />
    <result column="WORK_YEAR" jdbcType="NUMERIC" property="workYear" />
    <result column="EMERGENCY_CONTACT" jdbcType="VARCHAR" property="emergencyContact" />
    <result column="USER_TEAM_NUMBER" jdbcType="INTEGER" property="userTeamNumber" />
    <result column="PARTNER_ID" jdbcType="INTEGER" property="partnerId" />
    <result column="ORG_1" jdbcType="INTEGER" property="org1" />
    <result column="ORG_2" jdbcType="INTEGER" property="org2" />
    <result column="ORG_3" jdbcType="INTEGER" property="org3" />
    <result column="ORG_4" jdbcType="INTEGER" property="org4" />
    <result column="ORG_5" jdbcType="INTEGER" property="org5" />
    <result column="ORG_6" jdbcType="INTEGER" property="org6" />
    <result column="ORG_7" jdbcType="INTEGER" property="org7" />
    <result column="ORG_8" jdbcType="INTEGER" property="org8" />
    <result column="ORG_9" jdbcType="INTEGER" property="org9" />
    <result column="ORG_10" jdbcType="INTEGER" property="org10" />
    <result column="ORG_11" jdbcType="INTEGER" property="org11" />
    <result column="ORG_12" jdbcType="INTEGER" property="org12" />
    <result column="ORG_13" jdbcType="INTEGER" property="org13" />
    <result column="ORG_14" jdbcType="INTEGER" property="org14" />
    <result column="ORGANIZATION_ID" jdbcType="INTEGER" property="organizationId" />
    <result column="SERVICE_TYPE" jdbcType="VARCHAR" property="serviceType" />
    <result column="KNOW_GARDEN_NAME" jdbcType="VARCHAR" property="knowGardenName" />
    <result column="TITLE" jdbcType="VARCHAR" property="title" />
    <result column="PROGRAMA_ITEM_NAME" jdbcType="VARCHAR" property="programaItemName" />
    <result column="INDEX" jdbcType="INTEGER" property="index" />
    <result column="CONTENT" jdbcType="VARCHAR" property="content" />
    <result column="BELONG_ADDRESS" jdbcType="VARCHAR" property="belongAddress" />
    <result column="LAST_THREE_MONTH_BAND_SAW_COUNT" jdbcType="INTEGER" property="lastThreeMonthBandSawCount" />
    <result column="GARDEN_NAME" jdbcType="VARCHAR" property="gardenName" />
    <result column="SYNC_HFT_FLAG" jdbcType="INTEGER" property="syncHftFlag" />
    <result column="KNOW_GARDEN_IDS" jdbcType="VARCHAR" property="knowGardenIds" />
    <result column="USER_ICCODE" jdbcType="VARCHAR" property="userIccode" />
    <result column="ML_USER_ID" jdbcType="INTEGER" property="mlUserId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    USER_ID, CITY_ID, COMP_ID, REG_ID, DEPT_ID, GR_ID, ARCHIVE_ID, USER_NO, USER_NAME, 
    LOGIN_USERID, LOGIN_PASSWORD, USER_SEX, USER_MOBILE, USER_JOB_DATE, USER_POSITION, 
    USER_STATUS, STATUS_TIME, USER_WRITEOFF, WRITEOFF_TIME, WAGE_FLAG, BUILD_RULE_FLAG, 
    USER_PID, USER_LOGTIME, USER_EDITION, ALLDEPT_FLAG, USER_ROAM, UPDATE_UID, UPDATE_TIME, 
    USER_PHOTO_MIN, VERTIFY_CODE, AREA_ID, USER_CODE, YOUJIA_PHONE, USE_YOUJIA_PHONE, 
    DEVELOPER_ADMIN, TOPBUILDING_ADMIN, PERSONNEL_LEVELS, RECRUITMENT_CHANNEL, LEVELS_ID, 
    CHANNEL_ID, WRITEOFF_TYPE, APARTMENT_USE_FLAG, SALARY_PLAN_MANAGER, CREATION_TIME, 
    JOIN_DEPT_TIME, PROMPT_TIME, BESPOKE_MANAGER, SUPER_LEADER, USER_PHOTO, EXPERIENCE_USER, 
    PROPERTY_MANAGER, USER_SOURCE, ROLE_LEVEL_ID, INVITE_USER_ID, CURRENT_P_ID, TISSUE_LINE, 
    D_ASSESSMENT_TIME, D_ASSESSMENT_FLAG, USER_LEVEL, WORK_YEAR, EMERGENCY_CONTACT, USER_TEAM_NUMBER, 
    PARTNER_ID, ORG_1, ORG_2, ORG_3, ORG_4, ORG_5, ORG_6, ORG_7, ORG_8, ORG_9, ORG_10, 
    ORG_11, ORG_12, ORG_13, ORG_14, ORGANIZATION_ID, SERVICE_TYPE, KNOW_GARDEN_NAME, 
    TITLE, PROGRAMA_ITEM_NAME, [INDEX], CONTENT, BELONG_ADDRESS, LAST_THREE_MONTH_BAND_SAW_COUNT, 
    GARDEN_NAME, SYNC_HFT_FLAG, KNOW_GARDEN_IDS, USER_ICCODE, ML_USER_ID
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunUsersExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_USERS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_USERS
    where USER_ID = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_USERS
    where USER_ID = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunUsersExample">
    <!--@mbggenerated-->
    delete from FUN_USERS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
    <!--@mbggenerated-->
    <selectKey keyProperty="userId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_USERS_USER_ID
    </selectKey>
    insert into FUN_USERS (USER_ID, CITY_ID, COMP_ID, 
      REG_ID, DEPT_ID, GR_ID, 
      ARCHIVE_ID, USER_NO, USER_NAME, 
      LOGIN_USERID, LOGIN_PASSWORD, USER_SEX, 
      USER_MOBILE, USER_JOB_DATE, USER_POSITION, 
      USER_STATUS, STATUS_TIME, USER_WRITEOFF, 
      WRITEOFF_TIME, WAGE_FLAG, BUILD_RULE_FLAG, 
      USER_PID, USER_LOGTIME, USER_EDITION, 
      ALLDEPT_FLAG, USER_ROAM, UPDATE_UID, 
      UPDATE_TIME, USER_PHOTO_MIN, VERTIFY_CODE, 
      AREA_ID, USER_CODE, YOUJIA_PHONE, 
      USE_YOUJIA_PHONE, DEVELOPER_ADMIN, TOPBUILDING_ADMIN, 
      PERSONNEL_LEVELS, RECRUITMENT_CHANNEL, LEVELS_ID, 
      CHANNEL_ID, WRITEOFF_TYPE, APARTMENT_USE_FLAG, 
      SALARY_PLAN_MANAGER, CREATION_TIME, JOIN_DEPT_TIME, 
      PROMPT_TIME, BESPOKE_MANAGER, SUPER_LEADER, 
      USER_PHOTO, EXPERIENCE_USER, PROPERTY_MANAGER, 
      USER_SOURCE, ROLE_LEVEL_ID, INVITE_USER_ID, 
      CURRENT_P_ID, TISSUE_LINE, D_ASSESSMENT_TIME, 
      D_ASSESSMENT_FLAG, USER_LEVEL, WORK_YEAR, 
      EMERGENCY_CONTACT, USER_TEAM_NUMBER, PARTNER_ID, 
      ORG_1, ORG_2, ORG_3, ORG_4, 
      ORG_5, ORG_6, ORG_7, ORG_8, 
      ORG_9, ORG_10, ORG_11, 
      ORG_12, ORG_13, ORG_14, 
      ORGANIZATION_ID, SERVICE_TYPE, KNOW_GARDEN_NAME, 
      TITLE, PROGRAMA_ITEM_NAME, [INDEX], 
      CONTENT, BELONG_ADDRESS, LAST_THREE_MONTH_BAND_SAW_COUNT, 
      GARDEN_NAME, SYNC_HFT_FLAG, KNOW_GARDEN_IDS, 
      USER_ICCODE, ML_USER_ID)
    values (#{userId,jdbcType=INTEGER}, #{cityId,jdbcType=SMALLINT}, #{compId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, 
      #{archiveId,jdbcType=INTEGER}, #{userNo,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{loginUserid,jdbcType=VARCHAR}, #{loginPassword,jdbcType=VARCHAR}, #{userSex,jdbcType=BIT}, 
      #{userMobile,jdbcType=VARCHAR}, #{userJobDate,jdbcType=VARCHAR}, #{userPosition,jdbcType=VARCHAR}, 
      #{userStatus,jdbcType=TINYINT}, #{statusTime,jdbcType=VARCHAR}, #{userWriteoff,jdbcType=BIT}, 
      #{writeoffTime,jdbcType=VARCHAR}, #{wageFlag,jdbcType=BIT}, #{buildRuleFlag,jdbcType=BIT}, 
      #{userPid,jdbcType=VARCHAR}, #{userLogtime,jdbcType=VARCHAR}, #{userEdition,jdbcType=INTEGER}, 
      #{alldeptFlag,jdbcType=BIT}, #{userRoam,jdbcType=BIT}, #{updateUid,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=VARCHAR}, #{userPhotoMin,jdbcType=VARCHAR}, #{vertifyCode,jdbcType=VARCHAR}, 
      #{areaId,jdbcType=INTEGER}, #{userCode,jdbcType=VARCHAR}, #{youjiaPhone,jdbcType=VARCHAR}, 
      #{useYoujiaPhone,jdbcType=TINYINT}, #{developerAdmin,jdbcType=TINYINT}, #{topbuildingAdmin,jdbcType=TINYINT}, 
      #{personnelLevels,jdbcType=VARCHAR}, #{recruitmentChannel,jdbcType=VARCHAR}, #{levelsId,jdbcType=INTEGER}, 
      #{channelId,jdbcType=INTEGER}, #{writeoffType,jdbcType=TINYINT}, #{apartmentUseFlag,jdbcType=TINYINT}, 
      #{salaryPlanManager,jdbcType=TINYINT}, #{creationTime,jdbcType=TIMESTAMP}, #{joinDeptTime,jdbcType=TIMESTAMP}, 
      #{promptTime,jdbcType=TIMESTAMP}, #{bespokeManager,jdbcType=TINYINT}, #{superLeader,jdbcType=INTEGER}, 
      #{userPhoto,jdbcType=VARCHAR}, #{experienceUser,jdbcType=TINYINT}, #{propertyManager,jdbcType=TINYINT}, 
      #{userSource,jdbcType=TINYINT}, #{roleLevelId,jdbcType=INTEGER}, #{inviteUserId,jdbcType=INTEGER}, 
      #{currentPId,jdbcType=INTEGER}, #{tissueLine,jdbcType=VARCHAR}, #{dAssessmentTime,jdbcType=TIMESTAMP}, 
      #{dAssessmentFlag,jdbcType=TINYINT}, #{userLevel,jdbcType=INTEGER}, #{workYear,jdbcType=NUMERIC}, 
      #{emergencyContact,jdbcType=VARCHAR}, #{userTeamNumber,jdbcType=INTEGER}, #{partnerId,jdbcType=INTEGER}, 
      #{org1,jdbcType=INTEGER}, #{org2,jdbcType=INTEGER}, #{org3,jdbcType=INTEGER}, #{org4,jdbcType=INTEGER}, 
      #{org5,jdbcType=INTEGER}, #{org6,jdbcType=INTEGER}, #{org7,jdbcType=INTEGER}, #{org8,jdbcType=INTEGER}, 
      #{org9,jdbcType=INTEGER}, #{org10,jdbcType=INTEGER}, #{org11,jdbcType=INTEGER}, 
      #{org12,jdbcType=INTEGER}, #{org13,jdbcType=INTEGER}, #{org14,jdbcType=INTEGER}, 
      #{organizationId,jdbcType=INTEGER}, #{serviceType,jdbcType=VARCHAR}, #{knowGardenName,jdbcType=VARCHAR}, 
      #{title,jdbcType=VARCHAR}, #{programaItemName,jdbcType=VARCHAR}, #{index,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{belongAddress,jdbcType=VARCHAR}, #{lastThreeMonthBandSawCount,jdbcType=INTEGER}, 
      #{gardenName,jdbcType=VARCHAR}, #{syncHftFlag,jdbcType=INTEGER}, #{knowGardenIds,jdbcType=VARCHAR}, 
      #{userIccode,jdbcType=VARCHAR}, #{mlUserId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
    <!--@mbggenerated-->
    <selectKey keyProperty="userId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_USERS_USER_ID
    </selectKey>
    insert into FUN_USERS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      USER_ID,
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="userNo != null">
        USER_NO,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="loginUserid != null">
        LOGIN_USERID,
      </if>
      <if test="loginPassword != null">
        LOGIN_PASSWORD,
      </if>
      <if test="userSex != null">
        USER_SEX,
      </if>
      <if test="userMobile != null">
        USER_MOBILE,
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE,
      </if>
      <if test="userPosition != null">
        USER_POSITION,
      </if>
      <if test="userStatus != null">
        USER_STATUS,
      </if>
      <if test="statusTime != null">
        STATUS_TIME,
      </if>
      <if test="userWriteoff != null">
        USER_WRITEOFF,
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME,
      </if>
      <if test="wageFlag != null">
        WAGE_FLAG,
      </if>
      <if test="buildRuleFlag != null">
        BUILD_RULE_FLAG,
      </if>
      <if test="userPid != null">
        USER_PID,
      </if>
      <if test="userLogtime != null">
        USER_LOGTIME,
      </if>
      <if test="userEdition != null">
        USER_EDITION,
      </if>
      <if test="alldeptFlag != null">
        ALLDEPT_FLAG,
      </if>
      <if test="userRoam != null">
        USER_ROAM,
      </if>
      <if test="updateUid != null">
        UPDATE_UID,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="userPhotoMin != null">
        USER_PHOTO_MIN,
      </if>
      <if test="vertifyCode != null">
        VERTIFY_CODE,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="userCode != null">
        USER_CODE,
      </if>
      <if test="youjiaPhone != null">
        YOUJIA_PHONE,
      </if>
      <if test="useYoujiaPhone != null">
        USE_YOUJIA_PHONE,
      </if>
      <if test="developerAdmin != null">
        DEVELOPER_ADMIN,
      </if>
      <if test="topbuildingAdmin != null">
        TOPBUILDING_ADMIN,
      </if>
      <if test="personnelLevels != null">
        PERSONNEL_LEVELS,
      </if>
      <if test="recruitmentChannel != null">
        RECRUITMENT_CHANNEL,
      </if>
      <if test="levelsId != null">
        LEVELS_ID,
      </if>
      <if test="channelId != null">
        CHANNEL_ID,
      </if>
      <if test="writeoffType != null">
        WRITEOFF_TYPE,
      </if>
      <if test="apartmentUseFlag != null">
        APARTMENT_USE_FLAG,
      </if>
      <if test="salaryPlanManager != null">
        SALARY_PLAN_MANAGER,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="joinDeptTime != null">
        JOIN_DEPT_TIME,
      </if>
      <if test="promptTime != null">
        PROMPT_TIME,
      </if>
      <if test="bespokeManager != null">
        BESPOKE_MANAGER,
      </if>
      <if test="superLeader != null">
        SUPER_LEADER,
      </if>
      <if test="userPhoto != null">
        USER_PHOTO,
      </if>
      <if test="experienceUser != null">
        EXPERIENCE_USER,
      </if>
      <if test="propertyManager != null">
        PROPERTY_MANAGER,
      </if>
      <if test="userSource != null">
        USER_SOURCE,
      </if>
      <if test="roleLevelId != null">
        ROLE_LEVEL_ID,
      </if>
      <if test="inviteUserId != null">
        INVITE_USER_ID,
      </if>
      <if test="currentPId != null">
        CURRENT_P_ID,
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE,
      </if>
      <if test="dAssessmentTime != null">
        D_ASSESSMENT_TIME,
      </if>
      <if test="dAssessmentFlag != null">
        D_ASSESSMENT_FLAG,
      </if>
      <if test="userLevel != null">
        USER_LEVEL,
      </if>
      <if test="workYear != null">
        WORK_YEAR,
      </if>
      <if test="emergencyContact != null">
        EMERGENCY_CONTACT,
      </if>
      <if test="userTeamNumber != null">
        USER_TEAM_NUMBER,
      </if>
      <if test="partnerId != null">
        PARTNER_ID,
      </if>
      <if test="org1 != null">
        ORG_1,
      </if>
      <if test="org2 != null">
        ORG_2,
      </if>
      <if test="org3 != null">
        ORG_3,
      </if>
      <if test="org4 != null">
        ORG_4,
      </if>
      <if test="org5 != null">
        ORG_5,
      </if>
      <if test="org6 != null">
        ORG_6,
      </if>
      <if test="org7 != null">
        ORG_7,
      </if>
      <if test="org8 != null">
        ORG_8,
      </if>
      <if test="org9 != null">
        ORG_9,
      </if>
      <if test="org10 != null">
        ORG_10,
      </if>
      <if test="org11 != null">
        ORG_11,
      </if>
      <if test="org12 != null">
        ORG_12,
      </if>
      <if test="org13 != null">
        ORG_13,
      </if>
      <if test="org14 != null">
        ORG_14,
      </if>
      <if test="organizationId != null">
        ORGANIZATION_ID,
      </if>
      <if test="serviceType != null">
        SERVICE_TYPE,
      </if>
      <if test="knowGardenName != null">
        KNOW_GARDEN_NAME,
      </if>
      <if test="title != null">
        TITLE,
      </if>
      <if test="programaItemName != null">
        PROGRAMA_ITEM_NAME,
      </if>
      <if test="index != null">
        [INDEX],
      </if>
      <if test="content != null">
        CONTENT,
      </if>
      <if test="belongAddress != null">
        BELONG_ADDRESS,
      </if>
      <if test="lastThreeMonthBandSawCount != null">
        LAST_THREE_MONTH_BAND_SAW_COUNT,
      </if>
      <if test="gardenName != null">
        GARDEN_NAME,
      </if>
      <if test="syncHftFlag != null">
        SYNC_HFT_FLAG,
      </if>
      <if test="knowGardenIds != null">
        KNOW_GARDEN_IDS,
      </if>
      <if test="userIccode != null">
        USER_ICCODE,
      </if>
      <if test="mlUserId != null">
        ML_USER_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{userId,jdbcType=INTEGER},
      <if test="cityId != null">
        #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="userNo != null">
        #{userNo,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginUserid != null">
        #{loginUserid,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        #{userSex,jdbcType=BIT},
      </if>
      <if test="userMobile != null">
        #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="userJobDate != null">
        #{userJobDate,jdbcType=VARCHAR},
      </if>
      <if test="userPosition != null">
        #{userPosition,jdbcType=VARCHAR},
      </if>
      <if test="userStatus != null">
        #{userStatus,jdbcType=TINYINT},
      </if>
      <if test="statusTime != null">
        #{statusTime,jdbcType=VARCHAR},
      </if>
      <if test="userWriteoff != null">
        #{userWriteoff,jdbcType=BIT},
      </if>
      <if test="writeoffTime != null">
        #{writeoffTime,jdbcType=VARCHAR},
      </if>
      <if test="wageFlag != null">
        #{wageFlag,jdbcType=BIT},
      </if>
      <if test="buildRuleFlag != null">
        #{buildRuleFlag,jdbcType=BIT},
      </if>
      <if test="userPid != null">
        #{userPid,jdbcType=VARCHAR},
      </if>
      <if test="userLogtime != null">
        #{userLogtime,jdbcType=VARCHAR},
      </if>
      <if test="userEdition != null">
        #{userEdition,jdbcType=INTEGER},
      </if>
      <if test="alldeptFlag != null">
        #{alldeptFlag,jdbcType=BIT},
      </if>
      <if test="userRoam != null">
        #{userRoam,jdbcType=BIT},
      </if>
      <if test="updateUid != null">
        #{updateUid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="userPhotoMin != null">
        #{userPhotoMin,jdbcType=VARCHAR},
      </if>
      <if test="vertifyCode != null">
        #{vertifyCode,jdbcType=VARCHAR},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="userCode != null">
        #{userCode,jdbcType=VARCHAR},
      </if>
      <if test="youjiaPhone != null">
        #{youjiaPhone,jdbcType=VARCHAR},
      </if>
      <if test="useYoujiaPhone != null">
        #{useYoujiaPhone,jdbcType=TINYINT},
      </if>
      <if test="developerAdmin != null">
        #{developerAdmin,jdbcType=TINYINT},
      </if>
      <if test="topbuildingAdmin != null">
        #{topbuildingAdmin,jdbcType=TINYINT},
      </if>
      <if test="personnelLevels != null">
        #{personnelLevels,jdbcType=VARCHAR},
      </if>
      <if test="recruitmentChannel != null">
        #{recruitmentChannel,jdbcType=VARCHAR},
      </if>
      <if test="levelsId != null">
        #{levelsId,jdbcType=INTEGER},
      </if>
      <if test="channelId != null">
        #{channelId,jdbcType=INTEGER},
      </if>
      <if test="writeoffType != null">
        #{writeoffType,jdbcType=TINYINT},
      </if>
      <if test="apartmentUseFlag != null">
        #{apartmentUseFlag,jdbcType=TINYINT},
      </if>
      <if test="salaryPlanManager != null">
        #{salaryPlanManager,jdbcType=TINYINT},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="joinDeptTime != null">
        #{joinDeptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="promptTime != null">
        #{promptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bespokeManager != null">
        #{bespokeManager,jdbcType=TINYINT},
      </if>
      <if test="superLeader != null">
        #{superLeader,jdbcType=INTEGER},
      </if>
      <if test="userPhoto != null">
        #{userPhoto,jdbcType=VARCHAR},
      </if>
      <if test="experienceUser != null">
        #{experienceUser,jdbcType=TINYINT},
      </if>
      <if test="propertyManager != null">
        #{propertyManager,jdbcType=TINYINT},
      </if>
      <if test="userSource != null">
        #{userSource,jdbcType=TINYINT},
      </if>
      <if test="roleLevelId != null">
        #{roleLevelId,jdbcType=INTEGER},
      </if>
      <if test="inviteUserId != null">
        #{inviteUserId,jdbcType=INTEGER},
      </if>
      <if test="currentPId != null">
        #{currentPId,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="dAssessmentTime != null">
        #{dAssessmentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dAssessmentFlag != null">
        #{dAssessmentFlag,jdbcType=TINYINT},
      </if>
      <if test="userLevel != null">
        #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="workYear != null">
        #{workYear,jdbcType=NUMERIC},
      </if>
      <if test="emergencyContact != null">
        #{emergencyContact,jdbcType=VARCHAR},
      </if>
      <if test="userTeamNumber != null">
        #{userTeamNumber,jdbcType=INTEGER},
      </if>
      <if test="partnerId != null">
        #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="org1 != null">
        #{org1,jdbcType=INTEGER},
      </if>
      <if test="org2 != null">
        #{org2,jdbcType=INTEGER},
      </if>
      <if test="org3 != null">
        #{org3,jdbcType=INTEGER},
      </if>
      <if test="org4 != null">
        #{org4,jdbcType=INTEGER},
      </if>
      <if test="org5 != null">
        #{org5,jdbcType=INTEGER},
      </if>
      <if test="org6 != null">
        #{org6,jdbcType=INTEGER},
      </if>
      <if test="org7 != null">
        #{org7,jdbcType=INTEGER},
      </if>
      <if test="org8 != null">
        #{org8,jdbcType=INTEGER},
      </if>
      <if test="org9 != null">
        #{org9,jdbcType=INTEGER},
      </if>
      <if test="org10 != null">
        #{org10,jdbcType=INTEGER},
      </if>
      <if test="org11 != null">
        #{org11,jdbcType=INTEGER},
      </if>
      <if test="org12 != null">
        #{org12,jdbcType=INTEGER},
      </if>
      <if test="org13 != null">
        #{org13,jdbcType=INTEGER},
      </if>
      <if test="org14 != null">
        #{org14,jdbcType=INTEGER},
      </if>
      <if test="organizationId != null">
        #{organizationId,jdbcType=INTEGER},
      </if>
      <if test="serviceType != null">
        #{serviceType,jdbcType=VARCHAR},
      </if>
      <if test="knowGardenName != null">
        #{knowGardenName,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="programaItemName != null">
        #{programaItemName,jdbcType=VARCHAR},
      </if>
      <if test="index != null">
        #{index,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="belongAddress != null">
        #{belongAddress,jdbcType=VARCHAR},
      </if>
      <if test="lastThreeMonthBandSawCount != null">
        #{lastThreeMonthBandSawCount,jdbcType=INTEGER},
      </if>
      <if test="gardenName != null">
        #{gardenName,jdbcType=VARCHAR},
      </if>
      <if test="syncHftFlag != null">
        #{syncHftFlag,jdbcType=INTEGER},
      </if>
      <if test="knowGardenIds != null">
        #{knowGardenIds,jdbcType=VARCHAR},
      </if>
      <if test="userIccode != null">
        #{userIccode,jdbcType=VARCHAR},
      </if>
      <if test="mlUserId != null">
        #{mlUserId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunUsersExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_USERS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_USERS
    <set>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=SMALLINT},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.userNo != null">
        USER_NO = #{record.userNo,jdbcType=VARCHAR},
      </if>
      <if test="record.userName != null">
        USER_NAME = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.loginUserid != null">
        LOGIN_USERID = #{record.loginUserid,jdbcType=VARCHAR},
      </if>
      <if test="record.loginPassword != null">
        LOGIN_PASSWORD = #{record.loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.userSex != null">
        USER_SEX = #{record.userSex,jdbcType=BIT},
      </if>
      <if test="record.userMobile != null">
        USER_MOBILE = #{record.userMobile,jdbcType=VARCHAR},
      </if>
      <if test="record.userJobDate != null">
        USER_JOB_DATE = #{record.userJobDate,jdbcType=VARCHAR},
      </if>
      <if test="record.userPosition != null">
        USER_POSITION = #{record.userPosition,jdbcType=VARCHAR},
      </if>
      <if test="record.userStatus != null">
        USER_STATUS = #{record.userStatus,jdbcType=TINYINT},
      </if>
      <if test="record.statusTime != null">
        STATUS_TIME = #{record.statusTime,jdbcType=VARCHAR},
      </if>
      <if test="record.userWriteoff != null">
        USER_WRITEOFF = #{record.userWriteoff,jdbcType=BIT},
      </if>
      <if test="record.writeoffTime != null">
        WRITEOFF_TIME = #{record.writeoffTime,jdbcType=VARCHAR},
      </if>
      <if test="record.wageFlag != null">
        WAGE_FLAG = #{record.wageFlag,jdbcType=BIT},
      </if>
      <if test="record.buildRuleFlag != null">
        BUILD_RULE_FLAG = #{record.buildRuleFlag,jdbcType=BIT},
      </if>
      <if test="record.userPid != null">
        USER_PID = #{record.userPid,jdbcType=VARCHAR},
      </if>
      <if test="record.userLogtime != null">
        USER_LOGTIME = #{record.userLogtime,jdbcType=VARCHAR},
      </if>
      <if test="record.userEdition != null">
        USER_EDITION = #{record.userEdition,jdbcType=INTEGER},
      </if>
      <if test="record.alldeptFlag != null">
        ALLDEPT_FLAG = #{record.alldeptFlag,jdbcType=BIT},
      </if>
      <if test="record.userRoam != null">
        USER_ROAM = #{record.userRoam,jdbcType=BIT},
      </if>
      <if test="record.updateUid != null">
        UPDATE_UID = #{record.updateUid,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=VARCHAR},
      </if>
      <if test="record.userPhotoMin != null">
        USER_PHOTO_MIN = #{record.userPhotoMin,jdbcType=VARCHAR},
      </if>
      <if test="record.vertifyCode != null">
        VERTIFY_CODE = #{record.vertifyCode,jdbcType=VARCHAR},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.userCode != null">
        USER_CODE = #{record.userCode,jdbcType=VARCHAR},
      </if>
      <if test="record.youjiaPhone != null">
        YOUJIA_PHONE = #{record.youjiaPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.useYoujiaPhone != null">
        USE_YOUJIA_PHONE = #{record.useYoujiaPhone,jdbcType=TINYINT},
      </if>
      <if test="record.developerAdmin != null">
        DEVELOPER_ADMIN = #{record.developerAdmin,jdbcType=TINYINT},
      </if>
      <if test="record.topbuildingAdmin != null">
        TOPBUILDING_ADMIN = #{record.topbuildingAdmin,jdbcType=TINYINT},
      </if>
      <if test="record.personnelLevels != null">
        PERSONNEL_LEVELS = #{record.personnelLevels,jdbcType=VARCHAR},
      </if>
      <if test="record.recruitmentChannel != null">
        RECRUITMENT_CHANNEL = #{record.recruitmentChannel,jdbcType=VARCHAR},
      </if>
      <if test="record.levelsId != null">
        LEVELS_ID = #{record.levelsId,jdbcType=INTEGER},
      </if>
      <if test="record.channelId != null">
        CHANNEL_ID = #{record.channelId,jdbcType=INTEGER},
      </if>
      <if test="record.writeoffType != null">
        WRITEOFF_TYPE = #{record.writeoffType,jdbcType=TINYINT},
      </if>
      <if test="record.apartmentUseFlag != null">
        APARTMENT_USE_FLAG = #{record.apartmentUseFlag,jdbcType=TINYINT},
      </if>
      <if test="record.salaryPlanManager != null">
        SALARY_PLAN_MANAGER = #{record.salaryPlanManager,jdbcType=TINYINT},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.joinDeptTime != null">
        JOIN_DEPT_TIME = #{record.joinDeptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.promptTime != null">
        PROMPT_TIME = #{record.promptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.bespokeManager != null">
        BESPOKE_MANAGER = #{record.bespokeManager,jdbcType=TINYINT},
      </if>
      <if test="record.superLeader != null">
        SUPER_LEADER = #{record.superLeader,jdbcType=INTEGER},
      </if>
      <if test="record.userPhoto != null">
        USER_PHOTO = #{record.userPhoto,jdbcType=VARCHAR},
      </if>
      <if test="record.experienceUser != null">
        EXPERIENCE_USER = #{record.experienceUser,jdbcType=TINYINT},
      </if>
      <if test="record.propertyManager != null">
        PROPERTY_MANAGER = #{record.propertyManager,jdbcType=TINYINT},
      </if>
      <if test="record.userSource != null">
        USER_SOURCE = #{record.userSource,jdbcType=TINYINT},
      </if>
      <if test="record.roleLevelId != null">
        ROLE_LEVEL_ID = #{record.roleLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.inviteUserId != null">
        INVITE_USER_ID = #{record.inviteUserId,jdbcType=INTEGER},
      </if>
      <if test="record.currentPId != null">
        CURRENT_P_ID = #{record.currentPId,jdbcType=INTEGER},
      </if>
      <if test="record.tissueLine != null">
        TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="record.dAssessmentTime != null">
        D_ASSESSMENT_TIME = #{record.dAssessmentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dAssessmentFlag != null">
        D_ASSESSMENT_FLAG = #{record.dAssessmentFlag,jdbcType=TINYINT},
      </if>
      <if test="record.userLevel != null">
        USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      </if>
      <if test="record.workYear != null">
        WORK_YEAR = #{record.workYear,jdbcType=NUMERIC},
      </if>
      <if test="record.emergencyContact != null">
        EMERGENCY_CONTACT = #{record.emergencyContact,jdbcType=VARCHAR},
      </if>
      <if test="record.userTeamNumber != null">
        USER_TEAM_NUMBER = #{record.userTeamNumber,jdbcType=INTEGER},
      </if>
      <if test="record.partnerId != null">
        PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      </if>
      <if test="record.org1 != null">
        ORG_1 = #{record.org1,jdbcType=INTEGER},
      </if>
      <if test="record.org2 != null">
        ORG_2 = #{record.org2,jdbcType=INTEGER},
      </if>
      <if test="record.org3 != null">
        ORG_3 = #{record.org3,jdbcType=INTEGER},
      </if>
      <if test="record.org4 != null">
        ORG_4 = #{record.org4,jdbcType=INTEGER},
      </if>
      <if test="record.org5 != null">
        ORG_5 = #{record.org5,jdbcType=INTEGER},
      </if>
      <if test="record.org6 != null">
        ORG_6 = #{record.org6,jdbcType=INTEGER},
      </if>
      <if test="record.org7 != null">
        ORG_7 = #{record.org7,jdbcType=INTEGER},
      </if>
      <if test="record.org8 != null">
        ORG_8 = #{record.org8,jdbcType=INTEGER},
      </if>
      <if test="record.org9 != null">
        ORG_9 = #{record.org9,jdbcType=INTEGER},
      </if>
      <if test="record.org10 != null">
        ORG_10 = #{record.org10,jdbcType=INTEGER},
      </if>
      <if test="record.org11 != null">
        ORG_11 = #{record.org11,jdbcType=INTEGER},
      </if>
      <if test="record.org12 != null">
        ORG_12 = #{record.org12,jdbcType=INTEGER},
      </if>
      <if test="record.org13 != null">
        ORG_13 = #{record.org13,jdbcType=INTEGER},
      </if>
      <if test="record.org14 != null">
        ORG_14 = #{record.org14,jdbcType=INTEGER},
      </if>
      <if test="record.organizationId != null">
        ORGANIZATION_ID = #{record.organizationId,jdbcType=INTEGER},
      </if>
      <if test="record.serviceType != null">
        SERVICE_TYPE = #{record.serviceType,jdbcType=VARCHAR},
      </if>
      <if test="record.knowGardenName != null">
        KNOW_GARDEN_NAME = #{record.knowGardenName,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null">
        TITLE = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.programaItemName != null">
        PROGRAMA_ITEM_NAME = #{record.programaItemName,jdbcType=VARCHAR},
      </if>
      <if test="record.index != null">
        [INDEX] = #{record.index,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        CONTENT = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.belongAddress != null">
        BELONG_ADDRESS = #{record.belongAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.lastThreeMonthBandSawCount != null">
        LAST_THREE_MONTH_BAND_SAW_COUNT = #{record.lastThreeMonthBandSawCount,jdbcType=INTEGER},
      </if>
      <if test="record.gardenName != null">
        GARDEN_NAME = #{record.gardenName,jdbcType=VARCHAR},
      </if>
      <if test="record.syncHftFlag != null">
        SYNC_HFT_FLAG = #{record.syncHftFlag,jdbcType=INTEGER},
      </if>
      <if test="record.knowGardenIds != null">
        KNOW_GARDEN_IDS = #{record.knowGardenIds,jdbcType=VARCHAR},
      </if>
      <if test="record.userIccode != null">
        USER_ICCODE = #{record.userIccode,jdbcType=VARCHAR},
      </if>
      <if test="record.mlUserId != null">
        ML_USER_ID = #{record.mlUserId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_USERS
    set USER_ID = #{record.userId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=SMALLINT},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      USER_NO = #{record.userNo,jdbcType=VARCHAR},
      USER_NAME = #{record.userName,jdbcType=VARCHAR},
      LOGIN_USERID = #{record.loginUserid,jdbcType=VARCHAR},
      LOGIN_PASSWORD = #{record.loginPassword,jdbcType=VARCHAR},
      USER_SEX = #{record.userSex,jdbcType=BIT},
      USER_MOBILE = #{record.userMobile,jdbcType=VARCHAR},
      USER_JOB_DATE = #{record.userJobDate,jdbcType=VARCHAR},
      USER_POSITION = #{record.userPosition,jdbcType=VARCHAR},
      USER_STATUS = #{record.userStatus,jdbcType=TINYINT},
      STATUS_TIME = #{record.statusTime,jdbcType=VARCHAR},
      USER_WRITEOFF = #{record.userWriteoff,jdbcType=BIT},
      WRITEOFF_TIME = #{record.writeoffTime,jdbcType=VARCHAR},
      WAGE_FLAG = #{record.wageFlag,jdbcType=BIT},
      BUILD_RULE_FLAG = #{record.buildRuleFlag,jdbcType=BIT},
      USER_PID = #{record.userPid,jdbcType=VARCHAR},
      USER_LOGTIME = #{record.userLogtime,jdbcType=VARCHAR},
      USER_EDITION = #{record.userEdition,jdbcType=INTEGER},
      ALLDEPT_FLAG = #{record.alldeptFlag,jdbcType=BIT},
      USER_ROAM = #{record.userRoam,jdbcType=BIT},
      UPDATE_UID = #{record.updateUid,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=VARCHAR},
      USER_PHOTO_MIN = #{record.userPhotoMin,jdbcType=VARCHAR},
      VERTIFY_CODE = #{record.vertifyCode,jdbcType=VARCHAR},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      USER_CODE = #{record.userCode,jdbcType=VARCHAR},
      YOUJIA_PHONE = #{record.youjiaPhone,jdbcType=VARCHAR},
      USE_YOUJIA_PHONE = #{record.useYoujiaPhone,jdbcType=TINYINT},
      DEVELOPER_ADMIN = #{record.developerAdmin,jdbcType=TINYINT},
      TOPBUILDING_ADMIN = #{record.topbuildingAdmin,jdbcType=TINYINT},
      PERSONNEL_LEVELS = #{record.personnelLevels,jdbcType=VARCHAR},
      RECRUITMENT_CHANNEL = #{record.recruitmentChannel,jdbcType=VARCHAR},
      LEVELS_ID = #{record.levelsId,jdbcType=INTEGER},
      CHANNEL_ID = #{record.channelId,jdbcType=INTEGER},
      WRITEOFF_TYPE = #{record.writeoffType,jdbcType=TINYINT},
      APARTMENT_USE_FLAG = #{record.apartmentUseFlag,jdbcType=TINYINT},
      SALARY_PLAN_MANAGER = #{record.salaryPlanManager,jdbcType=TINYINT},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      JOIN_DEPT_TIME = #{record.joinDeptTime,jdbcType=TIMESTAMP},
      PROMPT_TIME = #{record.promptTime,jdbcType=TIMESTAMP},
      BESPOKE_MANAGER = #{record.bespokeManager,jdbcType=TINYINT},
      SUPER_LEADER = #{record.superLeader,jdbcType=INTEGER},
      USER_PHOTO = #{record.userPhoto,jdbcType=VARCHAR},
      EXPERIENCE_USER = #{record.experienceUser,jdbcType=TINYINT},
      PROPERTY_MANAGER = #{record.propertyManager,jdbcType=TINYINT},
      USER_SOURCE = #{record.userSource,jdbcType=TINYINT},
      ROLE_LEVEL_ID = #{record.roleLevelId,jdbcType=INTEGER},
      INVITE_USER_ID = #{record.inviteUserId,jdbcType=INTEGER},
      CURRENT_P_ID = #{record.currentPId,jdbcType=INTEGER},
      TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      D_ASSESSMENT_TIME = #{record.dAssessmentTime,jdbcType=TIMESTAMP},
      D_ASSESSMENT_FLAG = #{record.dAssessmentFlag,jdbcType=TINYINT},
      USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      WORK_YEAR = #{record.workYear,jdbcType=NUMERIC},
      EMERGENCY_CONTACT = #{record.emergencyContact,jdbcType=VARCHAR},
      USER_TEAM_NUMBER = #{record.userTeamNumber,jdbcType=INTEGER},
      PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      ORG_1 = #{record.org1,jdbcType=INTEGER},
      ORG_2 = #{record.org2,jdbcType=INTEGER},
      ORG_3 = #{record.org3,jdbcType=INTEGER},
      ORG_4 = #{record.org4,jdbcType=INTEGER},
      ORG_5 = #{record.org5,jdbcType=INTEGER},
      ORG_6 = #{record.org6,jdbcType=INTEGER},
      ORG_7 = #{record.org7,jdbcType=INTEGER},
      ORG_8 = #{record.org8,jdbcType=INTEGER},
      ORG_9 = #{record.org9,jdbcType=INTEGER},
      ORG_10 = #{record.org10,jdbcType=INTEGER},
      ORG_11 = #{record.org11,jdbcType=INTEGER},
      ORG_12 = #{record.org12,jdbcType=INTEGER},
      ORG_13 = #{record.org13,jdbcType=INTEGER},
      ORG_14 = #{record.org14,jdbcType=INTEGER},
      ORGANIZATION_ID = #{record.organizationId,jdbcType=INTEGER},
      SERVICE_TYPE = #{record.serviceType,jdbcType=VARCHAR},
      KNOW_GARDEN_NAME = #{record.knowGardenName,jdbcType=VARCHAR},
      TITLE = #{record.title,jdbcType=VARCHAR},
      PROGRAMA_ITEM_NAME = #{record.programaItemName,jdbcType=VARCHAR},
      [INDEX] = #{record.index,jdbcType=INTEGER},
      CONTENT = #{record.content,jdbcType=VARCHAR},
      BELONG_ADDRESS = #{record.belongAddress,jdbcType=VARCHAR},
      LAST_THREE_MONTH_BAND_SAW_COUNT = #{record.lastThreeMonthBandSawCount,jdbcType=INTEGER},
      GARDEN_NAME = #{record.gardenName,jdbcType=VARCHAR},
      SYNC_HFT_FLAG = #{record.syncHftFlag,jdbcType=INTEGER},
      KNOW_GARDEN_IDS = #{record.knowGardenIds,jdbcType=VARCHAR},
      USER_ICCODE = #{record.userIccode,jdbcType=VARCHAR},
      ML_USER_ID = #{record.mlUserId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
    <!--@mbggenerated-->
    update FUN_USERS
    <set>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="userNo != null">
        USER_NO = #{userNo,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginUserid != null">
        LOGIN_USERID = #{loginUserid,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        LOGIN_PASSWORD = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        USER_SEX = #{userSex,jdbcType=BIT},
      </if>
      <if test="userMobile != null">
        USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE = #{userJobDate,jdbcType=VARCHAR},
      </if>
      <if test="userPosition != null">
        USER_POSITION = #{userPosition,jdbcType=VARCHAR},
      </if>
      <if test="userStatus != null">
        USER_STATUS = #{userStatus,jdbcType=TINYINT},
      </if>
      <if test="statusTime != null">
        STATUS_TIME = #{statusTime,jdbcType=VARCHAR},
      </if>
      <if test="userWriteoff != null">
        USER_WRITEOFF = #{userWriteoff,jdbcType=BIT},
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME = #{writeoffTime,jdbcType=VARCHAR},
      </if>
      <if test="wageFlag != null">
        WAGE_FLAG = #{wageFlag,jdbcType=BIT},
      </if>
      <if test="buildRuleFlag != null">
        BUILD_RULE_FLAG = #{buildRuleFlag,jdbcType=BIT},
      </if>
      <if test="userPid != null">
        USER_PID = #{userPid,jdbcType=VARCHAR},
      </if>
      <if test="userLogtime != null">
        USER_LOGTIME = #{userLogtime,jdbcType=VARCHAR},
      </if>
      <if test="userEdition != null">
        USER_EDITION = #{userEdition,jdbcType=INTEGER},
      </if>
      <if test="alldeptFlag != null">
        ALLDEPT_FLAG = #{alldeptFlag,jdbcType=BIT},
      </if>
      <if test="userRoam != null">
        USER_ROAM = #{userRoam,jdbcType=BIT},
      </if>
      <if test="updateUid != null">
        UPDATE_UID = #{updateUid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="userPhotoMin != null">
        USER_PHOTO_MIN = #{userPhotoMin,jdbcType=VARCHAR},
      </if>
      <if test="vertifyCode != null">
        VERTIFY_CODE = #{vertifyCode,jdbcType=VARCHAR},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="userCode != null">
        USER_CODE = #{userCode,jdbcType=VARCHAR},
      </if>
      <if test="youjiaPhone != null">
        YOUJIA_PHONE = #{youjiaPhone,jdbcType=VARCHAR},
      </if>
      <if test="useYoujiaPhone != null">
        USE_YOUJIA_PHONE = #{useYoujiaPhone,jdbcType=TINYINT},
      </if>
      <if test="developerAdmin != null">
        DEVELOPER_ADMIN = #{developerAdmin,jdbcType=TINYINT},
      </if>
      <if test="topbuildingAdmin != null">
        TOPBUILDING_ADMIN = #{topbuildingAdmin,jdbcType=TINYINT},
      </if>
      <if test="personnelLevels != null">
        PERSONNEL_LEVELS = #{personnelLevels,jdbcType=VARCHAR},
      </if>
      <if test="recruitmentChannel != null">
        RECRUITMENT_CHANNEL = #{recruitmentChannel,jdbcType=VARCHAR},
      </if>
      <if test="levelsId != null">
        LEVELS_ID = #{levelsId,jdbcType=INTEGER},
      </if>
      <if test="channelId != null">
        CHANNEL_ID = #{channelId,jdbcType=INTEGER},
      </if>
      <if test="writeoffType != null">
        WRITEOFF_TYPE = #{writeoffType,jdbcType=TINYINT},
      </if>
      <if test="apartmentUseFlag != null">
        APARTMENT_USE_FLAG = #{apartmentUseFlag,jdbcType=TINYINT},
      </if>
      <if test="salaryPlanManager != null">
        SALARY_PLAN_MANAGER = #{salaryPlanManager,jdbcType=TINYINT},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="joinDeptTime != null">
        JOIN_DEPT_TIME = #{joinDeptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="promptTime != null">
        PROMPT_TIME = #{promptTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bespokeManager != null">
        BESPOKE_MANAGER = #{bespokeManager,jdbcType=TINYINT},
      </if>
      <if test="superLeader != null">
        SUPER_LEADER = #{superLeader,jdbcType=INTEGER},
      </if>
      <if test="userPhoto != null">
        USER_PHOTO = #{userPhoto,jdbcType=VARCHAR},
      </if>
      <if test="experienceUser != null">
        EXPERIENCE_USER = #{experienceUser,jdbcType=TINYINT},
      </if>
      <if test="propertyManager != null">
        PROPERTY_MANAGER = #{propertyManager,jdbcType=TINYINT},
      </if>
      <if test="userSource != null">
        USER_SOURCE = #{userSource,jdbcType=TINYINT},
      </if>
      <if test="roleLevelId != null">
        ROLE_LEVEL_ID = #{roleLevelId,jdbcType=INTEGER},
      </if>
      <if test="inviteUserId != null">
        INVITE_USER_ID = #{inviteUserId,jdbcType=INTEGER},
      </if>
      <if test="currentPId != null">
        CURRENT_P_ID = #{currentPId,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="dAssessmentTime != null">
        D_ASSESSMENT_TIME = #{dAssessmentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dAssessmentFlag != null">
        D_ASSESSMENT_FLAG = #{dAssessmentFlag,jdbcType=TINYINT},
      </if>
      <if test="userLevel != null">
        USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="workYear != null">
        WORK_YEAR = #{workYear,jdbcType=NUMERIC},
      </if>
      <if test="emergencyContact != null">
        EMERGENCY_CONTACT = #{emergencyContact,jdbcType=VARCHAR},
      </if>
      <if test="userTeamNumber != null">
        USER_TEAM_NUMBER = #{userTeamNumber,jdbcType=INTEGER},
      </if>
      <if test="partnerId != null">
        PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="org1 != null">
        ORG_1 = #{org1,jdbcType=INTEGER},
      </if>
      <if test="org2 != null">
        ORG_2 = #{org2,jdbcType=INTEGER},
      </if>
      <if test="org3 != null">
        ORG_3 = #{org3,jdbcType=INTEGER},
      </if>
      <if test="org4 != null">
        ORG_4 = #{org4,jdbcType=INTEGER},
      </if>
      <if test="org5 != null">
        ORG_5 = #{org5,jdbcType=INTEGER},
      </if>
      <if test="org6 != null">
        ORG_6 = #{org6,jdbcType=INTEGER},
      </if>
      <if test="org7 != null">
        ORG_7 = #{org7,jdbcType=INTEGER},
      </if>
      <if test="org8 != null">
        ORG_8 = #{org8,jdbcType=INTEGER},
      </if>
      <if test="org9 != null">
        ORG_9 = #{org9,jdbcType=INTEGER},
      </if>
      <if test="org10 != null">
        ORG_10 = #{org10,jdbcType=INTEGER},
      </if>
      <if test="org11 != null">
        ORG_11 = #{org11,jdbcType=INTEGER},
      </if>
      <if test="org12 != null">
        ORG_12 = #{org12,jdbcType=INTEGER},
      </if>
      <if test="org13 != null">
        ORG_13 = #{org13,jdbcType=INTEGER},
      </if>
      <if test="org14 != null">
        ORG_14 = #{org14,jdbcType=INTEGER},
      </if>
      <if test="organizationId != null">
        ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER},
      </if>
      <if test="serviceType != null">
        SERVICE_TYPE = #{serviceType,jdbcType=VARCHAR},
      </if>
      <if test="knowGardenName != null">
        KNOW_GARDEN_NAME = #{knowGardenName,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        TITLE = #{title,jdbcType=VARCHAR},
      </if>
      <if test="programaItemName != null">
        PROGRAMA_ITEM_NAME = #{programaItemName,jdbcType=VARCHAR},
      </if>
      <if test="index != null">
        [INDEX] = #{index,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        CONTENT = #{content,jdbcType=VARCHAR},
      </if>
      <if test="belongAddress != null">
        BELONG_ADDRESS = #{belongAddress,jdbcType=VARCHAR},
      </if>
      <if test="lastThreeMonthBandSawCount != null">
        LAST_THREE_MONTH_BAND_SAW_COUNT = #{lastThreeMonthBandSawCount,jdbcType=INTEGER},
      </if>
      <if test="gardenName != null">
        GARDEN_NAME = #{gardenName,jdbcType=VARCHAR},
      </if>
      <if test="syncHftFlag != null">
        SYNC_HFT_FLAG = #{syncHftFlag,jdbcType=INTEGER},
      </if>
      <if test="knowGardenIds != null">
        KNOW_GARDEN_IDS = #{knowGardenIds,jdbcType=VARCHAR},
      </if>
      <if test="userIccode != null">
        USER_ICCODE = #{userIccode,jdbcType=VARCHAR},
      </if>
      <if test="mlUserId != null">
        ML_USER_ID = #{mlUserId,jdbcType=INTEGER},
      </if>
    </set>
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
    <!--@mbggenerated-->
    update FUN_USERS
    set CITY_ID = #{cityId,jdbcType=SMALLINT},
      COMP_ID = #{compId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      USER_NO = #{userNo,jdbcType=VARCHAR},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      LOGIN_USERID = #{loginUserid,jdbcType=VARCHAR},
      LOGIN_PASSWORD = #{loginPassword,jdbcType=VARCHAR},
      USER_SEX = #{userSex,jdbcType=BIT},
      USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      USER_JOB_DATE = #{userJobDate,jdbcType=VARCHAR},
      USER_POSITION = #{userPosition,jdbcType=VARCHAR},
      USER_STATUS = #{userStatus,jdbcType=TINYINT},
      STATUS_TIME = #{statusTime,jdbcType=VARCHAR},
      USER_WRITEOFF = #{userWriteoff,jdbcType=BIT},
      WRITEOFF_TIME = #{writeoffTime,jdbcType=VARCHAR},
      WAGE_FLAG = #{wageFlag,jdbcType=BIT},
      BUILD_RULE_FLAG = #{buildRuleFlag,jdbcType=BIT},
      USER_PID = #{userPid,jdbcType=VARCHAR},
      USER_LOGTIME = #{userLogtime,jdbcType=VARCHAR},
      USER_EDITION = #{userEdition,jdbcType=INTEGER},
      ALLDEPT_FLAG = #{alldeptFlag,jdbcType=BIT},
      USER_ROAM = #{userRoam,jdbcType=BIT},
      UPDATE_UID = #{updateUid,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      USER_PHOTO_MIN = #{userPhotoMin,jdbcType=VARCHAR},
      VERTIFY_CODE = #{vertifyCode,jdbcType=VARCHAR},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      USER_CODE = #{userCode,jdbcType=VARCHAR},
      YOUJIA_PHONE = #{youjiaPhone,jdbcType=VARCHAR},
      USE_YOUJIA_PHONE = #{useYoujiaPhone,jdbcType=TINYINT},
      DEVELOPER_ADMIN = #{developerAdmin,jdbcType=TINYINT},
      TOPBUILDING_ADMIN = #{topbuildingAdmin,jdbcType=TINYINT},
      PERSONNEL_LEVELS = #{personnelLevels,jdbcType=VARCHAR},
      RECRUITMENT_CHANNEL = #{recruitmentChannel,jdbcType=VARCHAR},
      LEVELS_ID = #{levelsId,jdbcType=INTEGER},
      CHANNEL_ID = #{channelId,jdbcType=INTEGER},
      WRITEOFF_TYPE = #{writeoffType,jdbcType=TINYINT},
      APARTMENT_USE_FLAG = #{apartmentUseFlag,jdbcType=TINYINT},
      SALARY_PLAN_MANAGER = #{salaryPlanManager,jdbcType=TINYINT},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      JOIN_DEPT_TIME = #{joinDeptTime,jdbcType=TIMESTAMP},
      PROMPT_TIME = #{promptTime,jdbcType=TIMESTAMP},
      BESPOKE_MANAGER = #{bespokeManager,jdbcType=TINYINT},
      SUPER_LEADER = #{superLeader,jdbcType=INTEGER},
      USER_PHOTO = #{userPhoto,jdbcType=VARCHAR},
      EXPERIENCE_USER = #{experienceUser,jdbcType=TINYINT},
      PROPERTY_MANAGER = #{propertyManager,jdbcType=TINYINT},
      USER_SOURCE = #{userSource,jdbcType=TINYINT},
      ROLE_LEVEL_ID = #{roleLevelId,jdbcType=INTEGER},
      INVITE_USER_ID = #{inviteUserId,jdbcType=INTEGER},
      CURRENT_P_ID = #{currentPId,jdbcType=INTEGER},
      TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      D_ASSESSMENT_TIME = #{dAssessmentTime,jdbcType=TIMESTAMP},
      D_ASSESSMENT_FLAG = #{dAssessmentFlag,jdbcType=TINYINT},
      USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      WORK_YEAR = #{workYear,jdbcType=NUMERIC},
      EMERGENCY_CONTACT = #{emergencyContact,jdbcType=VARCHAR},
      USER_TEAM_NUMBER = #{userTeamNumber,jdbcType=INTEGER},
      PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      ORG_1 = #{org1,jdbcType=INTEGER},
      ORG_2 = #{org2,jdbcType=INTEGER},
      ORG_3 = #{org3,jdbcType=INTEGER},
      ORG_4 = #{org4,jdbcType=INTEGER},
      ORG_5 = #{org5,jdbcType=INTEGER},
      ORG_6 = #{org6,jdbcType=INTEGER},
      ORG_7 = #{org7,jdbcType=INTEGER},
      ORG_8 = #{org8,jdbcType=INTEGER},
      ORG_9 = #{org9,jdbcType=INTEGER},
      ORG_10 = #{org10,jdbcType=INTEGER},
      ORG_11 = #{org11,jdbcType=INTEGER},
      ORG_12 = #{org12,jdbcType=INTEGER},
      ORG_13 = #{org13,jdbcType=INTEGER},
      ORG_14 = #{org14,jdbcType=INTEGER},
      ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER},
      SERVICE_TYPE = #{serviceType,jdbcType=VARCHAR},
      KNOW_GARDEN_NAME = #{knowGardenName,jdbcType=VARCHAR},
      TITLE = #{title,jdbcType=VARCHAR},
      PROGRAMA_ITEM_NAME = #{programaItemName,jdbcType=VARCHAR},
      [INDEX] = #{index,jdbcType=INTEGER},
      CONTENT = #{content,jdbcType=VARCHAR},
      BELONG_ADDRESS = #{belongAddress,jdbcType=VARCHAR},
      LAST_THREE_MONTH_BAND_SAW_COUNT = #{lastThreeMonthBandSawCount,jdbcType=INTEGER},
      GARDEN_NAME = #{gardenName,jdbcType=VARCHAR},
      SYNC_HFT_FLAG = #{syncHftFlag,jdbcType=INTEGER},
      KNOW_GARDEN_IDS = #{knowGardenIds,jdbcType=VARCHAR},
      USER_ICCODE = #{userIccode,jdbcType=VARCHAR},
      ML_USER_ID = #{mlUserId,jdbcType=INTEGER}
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>

	<resultMap id="BaseDtoResultMap" type="com.myfun.repository.erpdb.dto.ErpFunUsersDto">
		<id column="USER_ID" jdbcType="INTEGER" property="userId" />
		<result column="CITY_ID" jdbcType="SMALLINT" property="cityId" />
		<result column="COMP_ID" jdbcType="INTEGER" property="compId" />
		<result column="REG_ID" jdbcType="INTEGER" property="regId" />
		<result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
		<result column="GR_ID" jdbcType="INTEGER" property="grId" />
		<result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
		<result column="USER_NO" jdbcType="VARCHAR" property="userNo" />
		<result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
		<result column="LOGIN_USERID" jdbcType="VARCHAR" property="loginUserid" />
		<result column="LOGIN_PASSWORD" jdbcType="VARCHAR" property="loginPassword" />
		<result column="USER_SEX" jdbcType="BIT" property="userSex" />
		<result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
		<result column="USER_JOB_DATE" jdbcType="VARCHAR" property="userJobDate" />
		<result column="USER_POSITION" jdbcType="VARCHAR" property="userPosition" />
		<result column="USER_STATUS" jdbcType="TINYINT" property="userStatus" />
		<result column="STATUS_TIME" jdbcType="VARCHAR" property="statusTime" />
		<result column="USER_WRITEOFF" jdbcType="BIT" property="userWriteoff" />
		<result column="WRITEOFF_TIME" jdbcType="VARCHAR" property="writeoffTime" />
		<result column="WAGE_FLAG" jdbcType="BIT" property="wageFlag" />
		<result column="BUILD_RULE_FLAG" jdbcType="BIT" property="buildRuleFlag" />
		<result column="USER_PID" jdbcType="VARCHAR" property="userPid" />
		<result column="USER_LOGTIME" jdbcType="VARCHAR" property="userLogtime" />
		<result column="USER_EDITION" jdbcType="INTEGER" property="userEdition" />
		<result column="ALLDEPT_FLAG" jdbcType="BIT" property="alldeptFlag" />
		<result column="USER_ROAM" jdbcType="BIT" property="userRoam" />
		<result column="UPDATE_UID" jdbcType="INTEGER" property="updateUid" />
		<result column="UPDATE_TIME" jdbcType="VARCHAR" property="updateTime" />
		<result column="USER_PHOTO_MIN" jdbcType="VARCHAR" property="userPhotoMin" />
		<result column="VERTIFY_CODE" jdbcType="VARCHAR" property="vertifyCode" />
		<result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
		<result column="USER_CODE" jdbcType="VARCHAR" property="userCode" />
		<result column="YOUJIA_PHONE" jdbcType="VARCHAR" property="youjiaPhone" />
		<result column="USE_YOUJIA_PHONE" jdbcType="TINYINT" property="useYoujiaPhone" />
		<result column="DEVELOPER_ADMIN" jdbcType="TINYINT" property="developerAdmin" />
		<result column="TOPBUILDING_ADMIN" jdbcType="TINYINT" property="topbuildingAdmin" />
		<result column="PERSONNEL_LEVELS" jdbcType="VARCHAR" property="personnelLevels" />
		<result column="RECRUITMENT_CHANNEL" jdbcType="VARCHAR" property="recruitmentChannel" />
		<result column="LEVELS_ID" jdbcType="INTEGER" property="levelsId" />
		<result column="CHANNEL_ID" jdbcType="INTEGER" property="channelId" />
		<result column="WRITEOFF_TYPE" jdbcType="TINYINT" property="writeoffType" />
		<result column="APARTMENT_USE_FLAG" jdbcType="TINYINT" property="apartmentUseFlag" />
		<result column="SALARY_PLAN_MANAGER" jdbcType="TINYINT" property="salaryPlanManager" />
		<result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
		<result column="JOIN_DEPT_TIME" jdbcType="TIMESTAMP" property="joinDeptTime" />
		<result column="PROMPT_TIME" jdbcType="TIMESTAMP" property="promptTime" />
		<result column="BESPOKE_MANAGER" jdbcType="TINYINT" property="bespokeManager" />
		<result column="SUPER_LEADER" jdbcType="INTEGER" property="superLeader" />
		<result column="USER_PHOTO" jdbcType="VARCHAR" property="userPhoto" />
		<result column="COUNT_USERS" jdbcType="INTEGER" property="countUsers" />
		<result column="ROLE_LEVEL_ID" jdbcType="INTEGER" property="roleLevelId" />
        <result column="USER_TEAM_NUMBER" jdbcType="INTEGER" property="userTeamNumber" />
        <result column="CURRENT_P_ID" jdbcType="INTEGER" property="currentPId" />
	</resultMap>
   <resultMap extends="BaseResultMap" id="exResultMapManagerUser" type="com.myfun.repository.erpdb.dto.ErpFunUsersDto">
  	<result column="MANAGE_USERID" jdbcType="INTEGER" property="manageUserId" />
  	<result column="MANAGE_ARCHIVEID" jdbcType="INTEGER" property="manageArchiveId" />
  	<result column="USER_BIRTHDAY" jdbcType="VARCHAR" property="userBirthday" />
  	<result column="USER_SCHOOL" jdbcType="VARCHAR" property="userSchool" />
  	<result column="workingYears" jdbcType="INTEGER" property="workingYears" />
  	<result column="PLACE_OF_ORIGIN" jdbcType="INTEGER" property="placeOfOrigin" />
  	<result column="ID" jdbcType="INTEGER" property="employeeDocId" />
  </resultMap>
  <resultMap id="userInfoResultMap" type="com.myfun.repository.erpdb.dto.ErpUsersInfoDto">
  	<result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
  	<result column="AREA_NAME" jdbcType="VARCHAR" property="areaName" />
  	<result column="REG_NAME" jdbcType="VARCHAR" property="regName" />
  	<result column="GR_NAME" jdbcType="VARCHAR" property="grName" />
  </resultMap>
  	<resultMap id="DtoBaseResultMap" type="com.myfun.repository.admindb.dto.AdminFunPaidDto">
	    <result column="INVOICE_ID" jdbcType="INTEGER" property="invoiceId" />
	    <result column="PT_TYPE" jdbcType="INTEGER" property="ptType" />
	    <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
	    <result column="INVOICE_STATUS" jdbcType="TINYINT" property="invoiceStatus" />
	    <result column="INVOICE_TYPE" jdbcType="TINYINT" property="invoiceType" />
	    <result column="INVOICE_HEADER" jdbcType="VARCHAR" property="invoiceHeader" />
	    <result column="CREATION_TIME" jdbcType="VARCHAR" property="creationTime" />
	    <result column="CONSUMPTION_AMOUNT" jdbcType="NUMERIC" property="amount" />
	    <result column="ORDER_FIELD" jdbcType="INTEGER" property="orderField" />
	    <result column="HAS_RECEIPT" jdbcType="INTEGER" property="hasReceipt" />
	    <result column="PADI_TIME" jdbcType="INTEGER" property="padiTime" />
	    <result column="PAID_ID" jdbcType="INTEGER" property="paidId" />
	    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
	    <result column="AMOUNT" jdbcType="INTEGER" property="amount" />
	    <result column="PAID_TYPE" jdbcType="INTEGER" property="paidType" />
        <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="exResultMap" type="com.myfun.repository.erpdb.dto.ErpFunUsersDto">
  	<result column="COMP_NO" jdbcType="VARCHAR" property="compNo" />
    <result column="DEPT_NO" jdbcType="VARCHAR" property="deptNo" />
    <result column="PROCESS_BY_NAME" jdbcType="VARCHAR" property="processByName" />
    <result column="ERP_COMP_NAME" jdbcType="VARCHAR" property="erpCompName" />
    <result column="BASE_MONEY" jdbcType="INTEGER" property="baseMoney" />
    <result column="GR_NAME" jdbcType="VARCHAR" property="grName" />
    <result column="PERSONNEL_LEVELS" jdbcType="VARCHAR" property="personnelLevels" />
    <result column="RECRUITMENT_CHANNEL" jdbcType="VARCHAR" property="recruitmentChannel" />
    <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
  </resultMap>

  <resultMap id="DtoChangeUserResultMap" type="com.myfun.repository.erpdb.dto.ErpFunChangeUsersDto">
  	<result column="USER_ID" jdbcType="INTEGER" property="userId" />
  	<result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
  </resultMap>
  <select id="selectUserNameByUserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    USER_NAME,DEPT_ID,ARCHIVE_ID,ORGANIZATION_ID,COMP_ID
    from FUN_USERS
    where USER_ID = #{userId,jdbcType=INTEGER}
  </select>
  <select id="getCurrUserName" resultType="java.lang.String">
    select
    <if test="deptId == null">
    	A.USER_NAME as USER_INFO
    </if>
    <if test="deptId!=null">
    (B.DEPT_NAME+' '+A.USER_NAME) as USER_INFO
    </if>
    from FUN_USERS A
    <if test="deptId != null">
    left join FUN_DEPTS B ON A.DEPT_ID = B.DEPT_ID
    </if>
    where A.USER_ID = #{userId,jdbcType=INTEGER}
    <if test="deptId != null">
    and B.DEPT_ID = #{deptId,jdbcType=INTEGER}
    </if>
  </select>
  <select id="selectUserByUserMobile" resultMap="BaseResultMap">
    select
    top 1
    ARCHIVE_ID
    from FUN_USERS
    where COMP_ID = #{compId}
     and USER_WRITEOFF = 0
     and USER_MOBILE in
    <foreach close=")" collection="phoneArr" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </select>
  <!-- business -->
  <select id="getUserListByNotNull" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS
    <where>
      <if test="userId != null">
        AND USER_ID = #{userId,jdbcType=INTEGER}
      </if>
      <if test="cityId != null">
        AND CITY_ID = #{cityId,jdbcType=SMALLINT}
      </if>
      <if test="compId != null">
        AND COMP_ID = #{compId,jdbcType=INTEGER}
      </if>
      <if test="regId != null">
        AND REG_ID = #{regId,jdbcType=INTEGER}
      </if>
      <if test="grId != null">
        AND GR_ID = #{grId,jdbcType=INTEGER}
      </if>
      <if test="archiveId != null">
        AND ARCHIVE_ID = #{archiveId,jdbcType=INTEGER}
      </if>
      <if test="userNo != null and userNo != ''">
        AND USER_NO = #{userNo,jdbcType=VARCHAR}
      </if>
      <if test="userName != null and userName != ''">
        AND USER_NAME = #{userName,jdbcType=VARCHAR}
      </if>
      <if test="loginUserid != null and loginUserid != ''">
        AND LOGIN_USERID = #{loginUserid,jdbcType=VARCHAR}
      </if>
      <if test="userSex != null">
        AND USER_SEX = #{userSex,jdbcType=BIT}
      </if>
      <if test="userMobile != null and userMobile != ''">
        AND USER_MOBILE = #{userMobile,jdbcType=VARCHAR}
      </if>
      <if test="userJobDate != null and userJobDate != ''">
        AND USER_JOB_DATE = #{userJobDate,jdbcType=VARCHAR}
      </if>
      <if test="userPosition != null and userPosition != ''">
        AND USER_POSITION = #{userPosition,jdbcType=VARCHAR}
      </if>
      <if test="userStatus != null">
        AND USER_STATUS = #{userStatus,jdbcType=TINYINT}
      </if>
      <if test="userWriteoff != null">
        AND USER_WRITEOFF = #{userWriteoff,jdbcType=BIT}
      </if>
      <if test="wageFlag != null">
        AND WAGE_FLAG = #{wageFlag,jdbcType=BIT}
      </if>
      <if test="buildRuleFlag != null">
        AND BUILD_RULE_FLAG = #{buildRuleFlag,jdbcType=BIT}
      </if>
      <if test="userPid != null and userPid != ''">
        AND USER_PID = #{userPid,jdbcType=VARCHAR}
      </if>
      <if test="userLogtime != null and userLogtime != ''">
        AND USER_LOGTIME = #{userLogtime,jdbcType=VARCHAR}
      </if>
      <if test="userEdition != null">
        AND USER_EDITION = #{userEdition,jdbcType=INTEGER}
      </if>
      <if test="alldeptFlag != null">
        AND ALLDEPT_FLAG = #{alldeptFlag,jdbcType=BIT}
      </if>
      <if test="userRoam != null">
        AND USER_ROAM = #{userRoam,jdbcType=BIT}
      </if>
      <if test="updateUid != null">
        AND UPDATE_UID = #{updateUid,jdbcType=INTEGER}
      </if>
      <if test="updateTime != null and updateTime != ''">
        AND UPDATE_TIME = #{updateTime,jdbcType=VARCHAR}
      </if>
      <if test="vertifyCode != null and vertifyCode != ''">
        AND VERTIFY_CODE = #{vertifyCode,jdbcType=VARCHAR}
      </if>
      <if test="areaId != null">
        AND AREA_ID = #{areaId,jdbcType=INTEGER}
      </if>
      <if test="userCode != null and userCode != ''">
        AND USER_CODE = #{userCode,jdbcType=VARCHAR}
      </if>
      <if test="alldeptFlag != null">
        AND ALLDEPT_FLAG = #{alldeptFlag,jdbcType=BIT}
      </if>
      <if test="deptId != null">
        AND DEPT_ID = #{deptId,jdbcType=INTEGER}
      </if>
    </where>
  </select>
  <select id="getUserListByAllDept" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS
    <where>
      <if test="userId != null">
        AND USER_ID = #{userId,jdbcType=INTEGER}
      </if>
      <if test="cityId != null">
        AND CITY_ID = #{cityId,jdbcType=SMALLINT}
      </if>
      <if test="compId != null">
        AND COMP_ID = #{compId,jdbcType=INTEGER}
      </if>
      <if test="regId != null">
        AND REG_ID = #{regId,jdbcType=INTEGER}
      </if>
      <if test="grId != null">
        AND GR_ID = #{grId,jdbcType=INTEGER}
      </if>
      <if test="archiveId != null">
        AND ARCHIVE_ID = #{archiveId,jdbcType=INTEGER}
      </if>
      <if test="userNo != null and userNo != ''">
        AND USER_NO = #{userNo,jdbcType=VARCHAR}
      </if>
      <if test="userName != null and userName != ''">
        AND USER_NAME = #{userName,jdbcType=VARCHAR}
      </if>
      <if test="loginUserid != null and loginUserid != ''">
        AND LOGIN_USERID = #{loginUserid,jdbcType=VARCHAR}
      </if>
      <if test="userSex != null">
        AND USER_SEX = #{userSex,jdbcType=BIT}
      </if>
      <if test="userMobile != null and userMobile != ''">
        AND USER_MOBILE = #{userMobile,jdbcType=VARCHAR}
      </if>
      <if test="userJobDate != null and userJobDate != ''">
        AND USER_JOB_DATE = #{userJobDate,jdbcType=VARCHAR}
      </if>
      <if test="userPosition != null and userPosition != ''">
        AND USER_POSITION = #{userPosition,jdbcType=VARCHAR}
      </if>
      <if test="userStatus != null">
        AND USER_STATUS = #{userStatus,jdbcType=TINYINT}
      </if>
      <if test="userWriteoff != null">
        AND USER_WRITEOFF = #{userWriteoff,jdbcType=BIT}
      </if>
      <if test="wageFlag != null">
        AND WAGE_FLAG = #{wageFlag,jdbcType=BIT}
      </if>
      <if test="buildRuleFlag != null">
        AND BUILD_RULE_FLAG = #{buildRuleFlag,jdbcType=BIT}
      </if>
      <if test="userPid != null and userPid != ''">
        AND USER_PID = #{userPid,jdbcType=VARCHAR}
      </if>
      <if test="userLogtime != null and userLogtime != ''">
        AND USER_LOGTIME = #{userLogtime,jdbcType=VARCHAR}
      </if>
      <if test="userEdition != null">
        AND USER_EDITION = #{userEdition,jdbcType=INTEGER}
      </if>
      <if test="userRoam != null">
        AND USER_ROAM = #{userRoam,jdbcType=BIT}
      </if>
      <if test="updateUid != null">
        AND UPDATE_UID = #{updateUid,jdbcType=INTEGER}
      </if>
      <if test="updateTime != null and updateTime != ''">
        AND UPDATE_TIME = #{updateTime,jdbcType=VARCHAR}
      </if>
      <if test="vertifyCode != null and vertifyCode != ''">
        AND VERTIFY_CODE = #{vertifyCode,jdbcType=VARCHAR}
      </if>
      <if test="areaId != null">
        AND AREA_ID = #{areaId,jdbcType=INTEGER}
      </if>
      <if test="userCode != null and userCode != ''">
        AND USER_CODE = #{userCode,jdbcType=VARCHAR}
      </if>
      <choose>
	    <when test="alldeptFlag != null">
    		AND (
    		<if test="deptId != null">
	        	DEPT_ID = #{deptId,jdbcType=INTEGER} OR
	        </if>
    		 ALLDEPT_FLAG = #{alldeptFlag,jdbcType=BIT})
	    </when>
	    <otherwise>
	    	<if test="deptId != null">
	    		AND DEPT_ID = #{deptId,jdbcType=INTEGER}
	        </if>
	    </otherwise>
      </choose>
    </where>
  </select>
  <select id="getValidUserByArchiveId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS
    where ARCHIVE_ID=#{shardArchiveId,jdbcType=INTEGER} and USER_WRITEOFF = 0
  </select>

  <select id="selectObjectByMobile" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS where USER_MOBILE = #{userMobile} and USER_STATUS = 1 and USER_WRITEOFF = 0
  </select>
  <select id="getUserInfoByUserId" resultMap="BaseResultMap">
	  select
	   <include refid="Base_Column_List" />
	   from FUN_USERS
	   where USER_ID = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectObjectByMobileAndCompId" resultMap="BaseResultMap">
   select
    <include refid="Base_Column_List" />
    from FUN_USERS where USER_MOBILE = #{userMobile} and COMP_ID = #{compId} and USER_WRITEOFF = 0
  </select>

  <select id="queryinfoByArchiveId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  	select
    <include refid="Base_Column_List" />
    from FUN_USERS where ARCHIVE_ID = #{archiveId,jdbcType=INTEGER} AND USER_WRITEOFF = 0
  </select>
  <select id="getUsersByCompIdDeptIdAndachiveIDs" resultMap="BaseResultMap">
  	 select
	 <include refid="Base_Column_List" />
	 from FUN_USERS
  	 where
	 <![CDATA[ USER_EDITION <> 2 ]]>
	 <if test="compId !=null">
 		and COMP_ID = #{compId}
	 </if>
  </select>

  <select id="selectByObj" resultMap="BaseResultMap">
  	 select
	 <include refid="Base_Column_List" />
	 from FUN_USERS
	 where COMP_ID = #{compId}
	 and ARCHIVE_ID = #{archiveId}
  </select>
  <update id="updatePhoneNum" parameterType="java.util.Map">
  	update FUN_USERS 
  	set user_mobile = #{newNum} 
  	where user_mobile =#{oldNum} 
  </update>

  <select id="selectByCompIdAndDeptidAndUserWOff" resultMap="BaseResultMap">
  	 select
	 <include refid="Base_Column_List" />
	 from FUN_USERS
	 where COMP_ID = #{erpCompId}
	 and DEPT_ID = #{erpDeptId}
	 <if test="userOff != null and userOff != ''">
	 	and USER_WRITEOFF = #{userOff}
	 </if>
  </select>

  <insert id="batchInsert">
  	INSERT INTO FUN_USERS(USER_ID,CITY_ID,COMP_ID,AREA_ID,REG_ID,DEPT_ID,GR_ID,ARCHIVE_ID,USER_NO,
	USER_NAME,LOGIN_USERID,LOGIN_PASSWORD,USER_SEX,USER_MOBILE,USER_POSITION,USER_STATUS,STATUS_TIME,
		USER_WRITEOFF,WAGE_FLAG,BUILD_RULE_FLAG,USER_PID,USER_LOGTIME,USER_EDITION,ALLDEPT_FLAG,USER_ROAM
		)SELECT (NEXT VALUE FOR dbo.SEQ_FUN_USERS_USER_ID) as USER_ID,CITY_ID,CITY_ID,CITY_ID,CITY_ID,CITY_ID,NULL,ARCHIVE_ID,
		   '+${compNo}+'+right('0000000'+cast(USER_ID as VARCHAR),7) as USER_NO,
		USER_NAME,LOGIN_USERID,LOGIN_PASSWORD,USER_SEX,USER_MOBILE,'COMMON_BIZ',
		1 ,STATUS_TIME,0,0,0,USER_PID,USER_LOGTIME,2,1,0 
		FROM FUN_USERS  WHERE COMP_ID=#{erpCompId} AND DEPT_ID=#{erpDeptId} AND USER_WRITEOFF = 0
  </insert>

  <update id="updateByCompIdAndDeptIdAndWuserOff">
  	UPDATE FUN_USERS SET USER_WRITEOFF = 1, WRITEOFF_TIME = getdate() WHERE COMP_ID = #{erpCompId} and DEPT_ID = #{erpDeptId} and USER_WRITEOFF = #{userOff}
  </update>
  <select id="insertSysMsg" parameterType="com.myfun.repository.admindb.param.AdminCrmPresentParam">
  	{CALL proc_SysMsg(#{userId},#{msgContent})}
  </select>

	<select id="selectByArchiveId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE ARCHIVE_ID = #{shardArchiveId} and USER_WRITEOFF = 0
	</select>

  <update id="updateByArchiveIdSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
    update FUN_USERS
    <set>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userNo != null">
        USER_NO = #{userNo,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginUserid != null">
        LOGIN_USERID = #{loginUserid,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        LOGIN_PASSWORD = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        USER_SEX = #{userSex,jdbcType=BIT},
      </if>
      <if test="userMobile != null">
        USER_MOBILE = #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE = #{userJobDate,jdbcType=VARCHAR},
      </if>
      <if test="userPosition != null">
        USER_POSITION = #{userPosition,jdbcType=VARCHAR},
      </if>
      <if test="userStatus != null">
        USER_STATUS = #{userStatus,jdbcType=TINYINT},
      </if>
      <if test="statusTime != null">
        STATUS_TIME = #{statusTime,jdbcType=VARCHAR},
      </if>
      <if test="userWriteoff != null">
        USER_WRITEOFF = #{userWriteoff,jdbcType=BIT},
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME = #{writeoffTime,jdbcType=VARCHAR},
      </if>
      <if test="wageFlag != null">
        WAGE_FLAG = #{wageFlag,jdbcType=BIT},
      </if>
      <if test="buildRuleFlag != null">
        BUILD_RULE_FLAG = #{buildRuleFlag,jdbcType=BIT},
      </if>
      <if test="userPid != null">
        USER_PID = #{userPid,jdbcType=VARCHAR},
      </if>
      <if test="userLogtime != null">
        USER_LOGTIME = #{userLogtime,jdbcType=VARCHAR},
      </if>
      <if test="userEdition != null">
        USER_EDITION = #{userEdition,jdbcType=INTEGER},
      </if>
      <if test="alldeptFlag != null">
        ALLDEPT_FLAG = #{alldeptFlag,jdbcType=BIT},
      </if>
      <if test="userRoam != null">
        USER_ROAM = #{userRoam,jdbcType=BIT},
      </if>
      <if test="updateUid != null">
        UPDATE_UID = #{updateUid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="userPhotoMin != null">
        USER_PHOTO_MIN = #{userPhotoMin,jdbcType=VARCHAR},
      </if>
      <if test="vertifyCode != null">
        VERTIFY_CODE = #{vertifyCode,jdbcType=VARCHAR},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},updateByPrimaryKeySelective
      </if>
      <if test="userCode != null">
        USER_CODE = #{userCode,jdbcType=VARCHAR},
      </if>
    </set>
    where ARCHIVE_ID = #{archiveId,jdbcType=INTEGER} and USER_WRITEOFF = 0
  </update>
  <select id="getCountByUserNo" parameterType="java.lang.String" resultType="java.lang.Integer">
  	select count(*) count from FUN_USERS where USER_NO = #{userNo,jdbcType=VARCHAR}
  </select>
  <update id="updateByMobile" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
  	update FUN_USERS 
  	set USER_NO = #{userNo,jdbcType=VARCHAR}
  	where USER_MOBILE = #{userMobile,jdbcType=VARCHAR}
  </update>
  <select id="getManagerUser" parameterType="java.lang.Integer" resultMap="exResultMapManagerUser">
  	SELECT FUA.USER_ID USER_ID,FUB.USER_ID MANAGE_USERID, FUB.DEPT_ID, FUB.AREA_ID, FUB.REG_ID, FUB.ARCHIVE_ID MANAGE_ARCHIVEID FROM FUN_USERS FUA 
  	LEFT JOIN FUN_USERS FUB ON FUA.COMP_ID = FUB.COMP_ID 
  	WHERE FUA.ARCHIVE_ID = #{archiveId} 
  	AND FUA.USER_WRITEOFF = 0 AND FUB.USER_POSITION = 'GENERAL_MANAGER'
  </select>
  <insert id="createUser" parameterType="java.util.Map">
  	INSERT INTO FUN_USERS(USER_ID,CITY_ID,COMP_ID,AREA_ID,REG_ID,DEPT_ID,GR_ID,ARCHIVE_ID,USER_NO,
  	USER_NAME,LOGIN_USERID,LOGIN_PASSWORD,USER_SEX,USER_MOBILE,USER_POSITION,USER_STATUS,STATUS_TIME,
  	USER_WRITEOFF,WAGE_FLAG,BUILD_RULE_FLAG,USER_PID,USER_LOGTIME,USER_EDITION,ALLDEPT_FLAG,USER_ROAM)
  	SELECT #{map.userId},
  	CITY_ID,CITY_ID,CITY_ID,CITY_ID,CITY_ID,NULL,ARCHIVE_ID,
  	#{map.cityNo}+right('0000000'+cast(USER_ID as VARCHAR),7) as USER_NO,
  	USER_NAME,LOGIN_USERID,LOGIN_PASSWORD,USER_SEX,USER_MOBILE,'COMMON_BIZ',
  	#{map.userStatus}
  	,STATUS_TIME,
  	0,0,0,USER_PID,USER_LOGTIME,2,1,0 
  	FROM FUN_USERS WHERE ARCHIVE_ID=#{map.archiveId} AND USER_WRITEOFF = 0
  </insert>
  <select id="getId" resultType="java.lang.Integer">
  	SELECT next value for SEQ_FUN_USERS_USER_ID
  </select>
  <update id="writeOffUser" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
  	UPDATE FUN_USERS SET USER_WRITEOFF = 1, WRITEOFF_TIME = GETDATE() 
  	WHERE ARCHIVE_ID= #{archiveId}
  	and USER_ID <![CDATA[ < ]]> #{userId}
  	AND USER_WRITEOFF = 0
  </update>
  <select id="getUsersByArchiveId" parameterType="java.lang.Integer" resultMap="exResultMap">
  	SELECT 
	FUN_DEPTS.COMP_NO,
	FUN_DEPTS.DEPT_NO,
	FUN_USERS.USER_NAME AS PROCESS_BY_NAME,
	FUN_USERS.USER_NO,
	FUN_DEPTS.DEPT_NAME AS ERP_COMP_NAME,
	FUN_USERS.USER_MOBILE
	FROM FUN_USERS
	LEFT JOIN FUN_DEPTS ON FUN_USERS.DEPT_ID = FUN_DEPTS.DEPT_ID
	WHERE FUN_USERS.ARCHIVE_ID = #{archiveId} AND FUN_USERS.USER_WRITEOFF= 0
  </select>

   <select id="getRecordsByCompIdAndUserWriteOff" resultMap="BaseResultMap">
  	 select
	 <include refid="Base_Column_List" />
	 from FUN_USERS
	 where COMP_ID = #{compId}
	 <if test="userWriteOff != null">
	 	and user_writeoff = #{userWriteOff}
	 </if>
  </select>

  <select id="getRecordsByCompIdAndUserWriteOffByPartner" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS
    where COMP_ID = #{compId}
   <if test="null != partnerId">
     	<choose>
           <when test="partnerId&gt;0">
              AND PARTNER_ID = #{partnerId,jdbcType=INTEGER}
           </when>
           <otherwise>
               AND PARTNER_ID IN ('0','-1')
           </otherwise>
       </choose>
    </if>
    <if test="userWriteOff != null">
      and user_writeoff = #{userWriteOff}
    </if>
  </select>

	<select id="getCompUserIds" resultType="java.lang.Integer">
		select
			USER_ID
		from FUN_USERS
		where COMP_ID = #{compId}
		<if test="userWriteOff != null">
			and user_writeoff = #{userWriteOff}
		</if>
	</select>

  <update id="updateUserEditionByCompId">
  	UPDATE FUN_USERS SET USER_EDITION = #{userEdition} WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0
  </update>

  <update id="updateRecordsByCompId">
	  	UPDATE FUN_USERS SET USER_POSITION = 'COMMON_BIZ' WHERE 
	  	COMP_ID = #{shardCompId} AND USER_WRITEOFF = 0 AND USER_POSITION != 'GENERAL_MANAGER' AND USER_POSITION != 'BRANCH_MANAGER'
  </update>

  <delete id="batchDeleteUserOpers">
  	delete USER_OPERS from USER_OPERS, FUN_USERS, ROLE_OPERS where USER_OPERS.OPER_ID = ROLE_OPERS.OPER_ID 
  	and USER_OPERS.USER_ID = FUN_USERS.USER_ID and FUN_USERS.COMP_ID = #{shardCompId} AND USER_WRITEOFF = 0
  	and FUN_USERS.USER_POSITION = ROLE_OPERS.ROLE_ID and ROLE_OPERS.SMP_ROLE = 0
  </delete>

    <select id="writeSysMsg" parameterType="java.lang.String">
  	{CALL proc_SysMsg(#{userId}, #{msg})}
  </select>

  <select id="getUserByCompIdAndUserPositionAndUserWriteoff" resultMap="BaseResultMap">
  		 select
	 <include refid="Base_Column_List" />
	 from FUN_USERS
	 where COMP_ID = #{erpCompId}
	 	and USER_POSITION = #{userpostion}
	 	and USER_WRITEOFF = #{writeOff}
  </select>
  <select id="selectSeqUserId" resultType="java.lang.Integer">
    SELECT next value for SEQ_FUN_USERS_USER_ID
  </select>
  <insert id="insertSelectiveNotSeq" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers">
    insert into FUN_USERS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="userNo != null">
        USER_NO,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="loginUserid != null">
        LOGIN_USERID,
      </if>
      <if test="loginPassword != null">
        LOGIN_PASSWORD,
      </if>
      <if test="userSex != null">
        USER_SEX,
      </if>
      <if test="userMobile != null">
        USER_MOBILE,
      </if>
      <if test="userJobDate != null">
        USER_JOB_DATE,
      </if>
      <if test="userPosition != null">
        USER_POSITION,
      </if>
      <if test="userStatus != null">
        USER_STATUS,
      </if>
      <if test="statusTime != null">
        STATUS_TIME,
      </if>
      <if test="userWriteoff != null">
        USER_WRITEOFF,
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME,
      </if>
      <if test="wageFlag != null">
        WAGE_FLAG,
      </if>
      <if test="buildRuleFlag != null">
        BUILD_RULE_FLAG,
      </if>
      <if test="userPid != null">
        USER_PID,
      </if>
      <if test="userLogtime != null">
        USER_LOGTIME,
      </if>
      <if test="userEdition != null">
        USER_EDITION,
      </if>
      <if test="alldeptFlag != null">
        ALLDEPT_FLAG,
      </if>
      <if test="userRoam != null">
        USER_ROAM,
      </if>
      <if test="updateUid != null">
        UPDATE_UID,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="userPhotoMin != null">
        USER_PHOTO_MIN,
      </if>
      <if test="vertifyCode != null">
        VERTIFY_CODE,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="userCode != null">
        USER_CODE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=SMALLINT},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="userNo != null">
        #{userNo,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginUserid != null">
        #{loginUserid,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        #{userSex,jdbcType=BIT},
      </if>
      <if test="userMobile != null">
        #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="userJobDate != null">
        #{userJobDate,jdbcType=VARCHAR},
      </if>
      <if test="userPosition != null">
        #{userPosition,jdbcType=VARCHAR},
      </if>
      <if test="userStatus != null">
        #{userStatus,jdbcType=TINYINT},
      </if>
      <if test="statusTime != null">
        #{statusTime,jdbcType=VARCHAR},
      </if>
      <if test="userWriteoff != null">
        #{userWriteoff,jdbcType=BIT},
      </if>
      <if test="writeoffTime != null">
        #{writeoffTime,jdbcType=VARCHAR},
      </if>
      <if test="wageFlag != null">
        #{wageFlag,jdbcType=BIT},
      </if>
      <if test="buildRuleFlag != null">
        #{buildRuleFlag,jdbcType=BIT},
      </if>
      <if test="userPid != null">
        #{userPid,jdbcType=VARCHAR},
      </if>
      <if test="userLogtime != null">
        #{userLogtime,jdbcType=VARCHAR},
      </if>
      <if test="userEdition != null">
        #{userEdition,jdbcType=INTEGER},
      </if>
      <if test="alldeptFlag != null">
        #{alldeptFlag,jdbcType=BIT},
      </if>
      <if test="userRoam != null">
        #{userRoam,jdbcType=BIT},
      </if>
      <if test="updateUid != null">
        #{updateUid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="userPhotoMin != null">
        #{userPhotoMin,jdbcType=VARCHAR},
      </if>
      <if test="vertifyCode != null">
        #{vertifyCode,jdbcType=VARCHAR},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="userCode != null">
        #{userCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
   <update id="updateRelevantBusiness" parameterType="com.myfun.repository.erpdb.param.ErpFunUsersParam">
   update FUN_KEY  set COMP_ID=#{compId}, DEPT_ID=#{deptId} where USER_ID=#{userId} 
   update FUN_KEY_LOG  set COMP_ID=#{compId} where borrow_user=#{userId}  or lend_user=#{userId}  or return_user=#{userId}  or confirm_USER=#{userId}  
   update FUN_BUY_CUSTOMER set COMP_ID=#{compId}, AREA_ID=#{areaId}, REG_ID=#{regId}, DEPT_ID=#{deptId} where USER_ID=#{userId}  and ARCHIVE_ID=#{archiveId}  
   update FUN_RENT_CUSTOMER set COMP_ID=#{compId}, AREA_ID=#{areaId}, REG_ID=#{regId}, DEPT_ID=#{deptId} where USER_ID=#{userId}  and ARCHIVE_ID=#{archiveId} 
   update FUN_TRACK set COMP_ID=#{compId}, DEPT_ID=#{deptId} where CREATOR_UID=#{userId}  
   update FUN_TASK set COMP_ID=#{compId}, DEPT_ID=#{deptId} where CREATOR_UID=#{userId}  
   update COLL_REQ set TARGET_COMP_ID=#{compId}, TARGET_DEPT_ID=#{deptId}, TARGET_DEPT_NAME=#{deptName} where  TARGET_USER_ID=#{userId}  
   update COLL_REQ set SOURCE_COMP_ID=#{compId}, SOURCE_DEPT_ID=#{deptId}, SOURCE_DEPT_NAME=#{deptName}  where  SOURCE_USER_ID=#{userId}  
  </update>
  <insert id="eliteUser">
  	INSERT INTO FUN_USERS(USER_ID,CITY_ID,COMP_ID,AREA_ID,REG_ID,DEPT_ID,GR_ID,ARCHIVE_ID,USER_NO,
	USER_NAME,LOGIN_USERID,LOGIN_PASSWORD,USER_SEX,USER_MOBILE,USER_POSITION,USER_STATUS,STATUS_TIME,
	USER_WRITEOFF,WAGE_FLAG,BUILD_RULE_FLAG,USER_PID,USER_LOGTIME,USER_EDITION,ALLDEPT_FLAG,USER_ROAM
	)SELECT (NEXT VALUE FOR dbo.SEQ_FUN_USERS_USER_ID) as USER_ID,CITY_ID,CITY_ID,CITY_ID,CITY_ID,CITY_ID,NULL,ARCHIVE_ID,
	#{cityNo}+right('0000000'+cast(USER_ID as VARCHAR),7) as USER_NO,
	USER_NAME,LOGIN_USERID,LOGIN_PASSWORD,USER_SEX,USER_MOBILE,'COMMON_BIZ',
	1 ,STATUS_TIME,0,0,0,USER_PID,USER_LOGTIME,2,1,0 
	FROM FUN_USERS  WHERE COMP_ID=#{erpCompId} AND DEPT_ID=#{erpDeptId} AND USER_WRITEOFF = 0
  </insert>

  <select id="getAgentNum" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  		select count(1) from FUN_USERS where COMP_ID = FUN_DEPTS.COMP_ID and DEPT_ID = FUN_DEPTS.DEPT_ID and USER_WRITEOFF = 0
  </select>

  <select id="selectByUserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" /> from FUN_USERS where USER_ID=#{userId,jdbcType=INTEGER}
  </select>
  <select id="getCompNoByArchiveId" parameterType="java.lang.Integer" resultType="java.lang.String">
  	select COMP_NO from fun_comp where comp_id = (
  		select top 1 COMP_ID from FUN_USERS where ARCHIVE_ID=#{archiveId,jdbcType=INTEGER} AND USER_WRITEOFF = 0
	)
  </select>

  <select id="getFunUserIds" resultType="java.lang.String">
  	 SELECT USER_ID
  	 FROM FUN_USERS
  	 <where>
  	 	<if test="null != areaId and '' != areaId">
  	 		AND AREA_ID = #{areaId}
  	 	</if>
  	 	<if test="null != compId">
  	 		AND COMP_ID = #{compId}
  	 	</if>
  	 	<if test="null != regId and '' != regId">
  	 		AND REG_ID = #{regId}
  	 	</if>
  	 	<if test="null != grId and '' != grId">
  	 		AND GR_ID = #{grId}
  	 	</if>
  	 </where>
  </select>
  <select id="getDeveloperAdmin" resultMap="BaseResultMap">
  	SELECT COMP_ID, DEPT_ID, USER_NAME,USER_ID,ARCHIVE_ID
  	FROM FUN_USERS
  	<where>
  		<if test="1==1">
  			AND USER_WRITEOFF = 0 AND COMP_ID = #{compId}
  		</if>
  		<choose>
  			<when test="type == 1">
  				AND DEVELOPER_ADMIN = 1
  			</when>
  			<when test="type == 2">
  			 	AND TOPBUILDING_ADMIN = 1
  			</when>
  		</choose>
  	</where>
  </select>
  <select id="getFunUsersBaseInfo" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  	SELECT USER_ID,COMP_ID,DEPT_ID,USER_NAME, USER_MOBILE, ARCHIVE_ID
  	FROM FUN_USERS
  	WHERE USER_ID = #{userId}
  </select>
  <select id="getFunUserByArchiveId" resultMap="exResultMap">
    SELECT FU.USER_ID, FU.CITY_ID, FU.COMP_ID, FU.REG_ID, FU.DEPT_ID, FU.GR_ID, FU.ARCHIVE_ID, FU.USER_NO, FU.USER_NAME,
           FU.LOGIN_USERID, FU.LOGIN_PASSWORD, FU.USER_SEX, FU.USER_MOBILE, FU.USER_JOB_DATE, FU.USER_POSITION,
           FU.USER_STATUS, FU.STATUS_TIME, FU.USER_WRITEOFF, FU.WRITEOFF_TIME, FU.WAGE_FLAG, FU.BUILD_RULE_FLAG,
           FU.USER_PID, FU.USER_LOGTIME, FU.USER_EDITION, FU.ALLDEPT_FLAG, FU.USER_ROAM, FU.UPDATE_UID, FU.UPDATE_TIME,
           FU.USER_PHOTO_MIN, FU.VERTIFY_CODE, FU.AREA_ID, FU.USER_CODE, FU.YOUJIA_PHONE, FU.USE_YOUJIA_PHONE,
           FU.DEVELOPER_ADMIN, FU.TOPBUILDING_ADMIN, FU.PERSONNEL_LEVELS, FU.RECRUITMENT_CHANNEL, FU.LEVELS_ID,
           FU.CHANNEL_ID, FU.WRITEOFF_TYPE, FU.APARTMENT_USE_FLAG, FU.SALARY_PLAN_MANAGER, FU.CREATION_TIME,
           FU.JOIN_DEPT_TIME, FU.PROMPT_TIME, FU.BESPOKE_MANAGER, FU.SUPER_LEADER, FU.USER_PHOTO, FU.EXPERIENCE_USER,
           FB.BASE_MONEY,FUN_DEPTSGROUP.GR_NAME
  	FROM FUN_USERS FU
  	LEFT JOIN FUN_BASEWAGE FB ON FU.USER_ID = FB.USER_ID
  	LEFT JOIN FUN_DEPTSGROUP  ON FUN_DEPTSGROUP.GR_ID = FU.GR_ID
	WHERE FU.ARCHIVE_ID =#{archiveId} AND USER_WRITEOFF = 0
  </select>
  <select id="count" resultType="java.lang.Integer">
  	select count(1) from FUN_USERS where DEPT_ID = #{deptId} AND USER_WRITEOFF = 0
  </select>
  <select id="getUserCount" resultType="java.lang.Integer">
  	select count(1) from FUN_USERS where COMP_ID = #{param.compId}
  	<if test="param.serchRange == 'AREA'">
		and AREA_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'REG'">
		and REG_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'DEPT'">
		and DEPT_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'GROUP'">
		and GR_ID = #{param.serchRangeId}
	</if>
	<if test="param.serchRange == 'USER'">
		and USER_ID = #{param.serchRangeId}
	</if>
	AND (JOIN_DEPT_TIME &lt;= #{endTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{startTime})))
  </select>
  <update id="updateGroupMember">
  	UPDATE FUN_USERS set GR_ID = #{pMap.nGrId} ,UPDATE_TIME = GETDATE()
  	WHERE GR_ID = #{pMap.grId} and DEPT_ID = #{pMap.deptId} and COMP_ID = #{pMap.compId}
  </update>
  <update id="addMemberGroup">
  	UPDATE FUN_USERS set GR_ID = #{pMap.grId} ,UPDATE_TIME = GETDATE()
  	WHERE USER_ID in (${pMap.grMember}) and COMP_ID = #{pMap.compId}
  </update>
  <select id="getRegistManagerUser" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	SELECT FUN_USERS.USER_ID FROM FUN_USERS LEFT JOIN USER_OPERS ON FUN_USERS.USER_ID = USER_OPERS.USER_ID 
	WHERE OPER_ID = 'REGIST_MANAGE' AND COMP_ID = #{compId};
  </select>
  <select id="getRangeUserList" resultMap="BaseResultMap">
  	SELECT  <include refid="Base_Column_List" /> FROM FUN_USERS
    where COMP_ID = #{param.compId}  AND USER_WRITEOFF = 0
     <if test="null != param.areaId">
       AND AREA_ID = #{param.areaId}
     </if>
     <if test="null != param.deptId">
       AND DEPT_ID = #{param.deptId}
     </if>
     <if test="null != param.regId">
       AND REG_ID = #{param.regId}
     </if>
     <if test="null != param.grId">
       AND GR_ID = #{param.grId}
     </if>

  </select>
  <select id="getRangeUserNotUserWriteoffList" resultMap="BaseResultMap">
  	SELECT  <include refid="Base_Column_List" /> FROM FUN_USERS
    where COMP_ID = #{param.compId}
    and USER_WRITEOFF !=1
    <if test="null != param.areaId">
      AND AREA_ID = #{param.areaId}
    </if>
    <if test="null != param.deptId">
      AND DEPT_ID = #{param.deptId}
    </if>
    <if test="null != param.regId">
      AND REG_ID = #{param.regId}
    </if>
    <if test="null != param.grId">
      AND GR_ID = #{param.grId}
    </if>
  </select>
  <select id="getFunUsersListByCondition" parameterType="com.myfun.repository.erpdb.po.ErpFunUsers" resultMap="BaseResultMap">

  </select>

  <update id="updateHouseForReg">
    update FUN_USERS set AREA_ID = #{pMap.areaId}, REG_ID = #{pMap.regId},UPDATE_TIME = GETDATE()  where COMP_ID = #{pMap.compId} and DEPT_ID= #{pMap.deptId} and USER_WRITEOFF = 0
  </update>

	<select id="getUserListByUserIds" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE  USER_ID IN
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
	</select>

  <select id="getManagerUserListForOrg" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_USERS WHERE COMP_ID = #{compId}
    <if test="partnerIds != null and partnerIds.size &gt;0 ">
      and PARTNER_ID in
      <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
        #{id}
      </foreach>
    </if>
    <if test="whereCause != null and whereCause != ''">
      AND ${whereCause}
    </if>
    and USER_WRITEOFF = 0
  </select>

	<select id="getUserListByUserIdsNotWriteOff" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE USER_ID IN
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
		AND (JOIN_DEPT_TIME &lt;= #{startTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{endTime})))
	</select>

	<select id="getChangeUsersNewDeptIds" resultMap="DtoChangeUserResultMap">
		With t_change_user as(
		select USER_ID,ARCHIVE_ID,DEPT_ID from fun_users where COMP_ID = #{compId}
		and USER_ID in
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
		),t_change_archive as(
		select MIN(B.USER_ID),A.ARCHIVE_ID,B.DEPT_ID from t_change_user A join
		FUN_USERS B ON A.ARCHIVE_ID = B.ARCHIVE_ID where B.COMP_ID = #{compId}
		and A.DEPT_ID != B.DEPT_ID group by A.ARCHIVE_ID,B.DEPT_ID
		)select
		A.USER_ID,B.DEPT_ID from t_change_user A join t_change_archive B ON
		A.ARCHIVE_ID = B.ARCHIVE_ID
	</select>

	<select id="getSalaryPlanManager" resultMap="BaseResultMap">
		SELECT USER_ID,ARCHIVE_ID, USER_MOBILE
		FROM FUN_USERS
		WHERE COMP_ID = #{compId}
		and SALARY_PLAN_MANAGER = 1
		and USER_WRITEOFF != 1
	</select>

	<select id="getUserListByTime" resultMap="BaseResultMap">
		SELECT DEPT_ID,USER_ID,ARCHIVE_ID,REG_ID,AREA_ID,GR_ID,USER_WRITEOFF FROM FUN_USERS
		WHERE
		COMP_ID = #{compId}
		AND ( ( UPDATE_TIME &gt;= #{startTime}
		AND UPDATE_TIME &lt;= #{endTime} AND USER_WRITEOFF = '1' ) OR (
		USER_WRITEOFF != '1' ) )
		ORDER BY CREATION_TIME DESC
	</select>

	<select id="getUsersCountData" resultType="java.lang.Integer">
		SELECT
		COUNT (0) AS USER_COUNT
		FROM
		FUN_USERS
		<where>
		<if test="param.compId != null and '' != param.compId">
		AND COMP_ID = #{param.compId}
		</if>
		<if test="param.serchRange != null and '' != param.serchRange">
		AND ${param.serchRange}_ID = #{param.serchRangeId}
		</if>
		AND USER_WRITEOFF = '0'
		</where>
	</select>

	<select id="getUserListByArchiveIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where ARCHIVE_ID IN
		<foreach close=")" collection="archiveIds" item="archiveId" open="(" separator=",">
			#{archiveId}
		</foreach>
		AND USER_WRITEOFF=0
	</select>

	<select id="getUserCountByRange" resultType="java.util.Map">
		select count(1) counts,
		<include refid="dimensionGrAndOtherSql" /> as dim
		from FUN_USERS
		WHERE COMP_ID = #{compId}
		<if test="serchRange != null and serchRangeId != null"><!-- 搜索范围 -->
			AND ${serchRange}=#{serchRangeId}
		</if>
		<if test="userId!= null and '' != userId">
		AND USER_ID = #{userId}
		</if>
		<if test="writeoff == 1">AND USER_WRITEOFF != 0</if><!-- 有效 -->
		group by
		<include refid="dimensionGrAndOtherSql" />
	</select>

	<select id="getUserCountByRangeAndDate" resultType="java.util.Map">
		select
		<include refid="dimensionGrAndOtherSql" /> as dim,
		${dateListSql}
		from FUN_USERS where COMP_ID = #{compId}
		<if test="serchRange != null and 'COMP'!= serchRange and serchRangeId != null">
			AND ${serchRange}_ID=#{serchRangeId}<!-- 搜索范围 -->
		</if>
		AND (JOIN_DEPT_TIME &lt;= #{startTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{endTime})))
		group by
		<include refid="dimensionGrAndOtherSql" />
	</select>

	<select id="getUserCountByTimeRange" resultType="java.lang.Integer">
		select count(1)
		from FUN_USERS where COMP_ID = #{compId}
		<if test="serchRange != null and 'COMP'!= serchRange and serchRangeId != null">
			AND ${serchRange}_ID=#{serchRangeId}<!-- 搜索范围 -->
		</if>
		AND (JOIN_DEPT_TIME &lt;= #{endTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{startTime})))
	</select>
	<select id="getUserListNotWriteOffOnTime" resultType="java.util.Map">
		select DEPT_ID as deptId,USER_POSITION as roleId,USER_ID as userId
		from FUN_USERS where COMP_ID = #{param.compId}
		<if test="param.areaId != null and ''!= param.areaId">
			AND AREA_ID=#{param.areaId}<!-- 搜索范围 -->
		</if>
		<if test="param.regId != null and ''!= param.regId">
			AND REG_ID=#{param.regId}<!-- 搜索范围 -->
		</if>
		<if test="param.deptId != null and ''!= param.deptId">
			AND DEPT_ID=#{param.deptId}<!-- 搜索范围 -->
		</if>
		<if test="param.grId != null and ''!= param.grId">
			AND GR_ID={param.grId}<!-- 搜索范围 -->
		</if>
		<if test="param.userId != null and '' != param.userId">
			and USER_ID = #{param.userId}
		</if>
		<if test="param.roleId != null and '' != param.roleId">
			and USER_POSITION = #{param.roleId}
		</if>
		AND (JOIN_DEPT_TIME &lt;= #{param.endTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{param.startTime})))
	</select>

	<select id="getTotalUserCountOffRangeList" resultType="int">
		select count(1)
		from FUN_USERS where COMP_ID = #{compId}
		and ${rangeColumn} IN
		<foreach close=")" collection="rangeList" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
		AND (JOIN_DEPT_TIME &lt;= #{endTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{startTime})))
	</select>

	<sql id="dimensionGrAndOtherSql">
		<choose>
			<when test="dimension == &quot;GR_ID&quot;">CONVERT(VARCHAR,isnull(DEPT_ID,0))+'_'+CONVERT(VARCHAR,isnull(GR_ID,0))</when>
			<otherwise>isnull(${dimension},0)</otherwise>
		</choose>
	</sql>

	<select id="getUserListByCompId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where
		COMP_ID=#{param.compId}
		AND USER_WRITEOFF=0
		ORDER BY USER_ID ASC
	</select>

	<select id="getUserInfoList" resultMap="BaseResultMap">
		SELECT
		DEPT_ID,USER_ID,REG_ID,AREA_ID,GR_ID,USER_WRITEOFF
		FROM
		FUN_USERS
		WHERE
		COMP_ID = #{param.compId}
		AND
		((UPDATE_TIME &gt;= #{param.startTime} AND UPDATE_TIME &lt;= #{param.endTime} AND
		USER_WRITEOFF = '1' )
		OR ( USER_WRITEOFF != '1' ))
	</select>

	<select id="getFunUserByUserId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where USER_ID = #{userId}
	</select>
	
	<select id="getFunUserByUserIdNew" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where USER_ID = #{userId} AND COMP_ID = #{compId}
	</select>

	<select id="getFunUsersBydept" resultMap="BaseResultMap">
		select
		ARCHIVE_ID as archiveId,USER_NAME as userName,USER_POSITION as userPosition
		from fun_users
		where USER_Writeoff =0 and ARCHIVE_ID in
		<foreach close=")" collection="archiveIdList" index="index" item="archiveIdList" open="(" separator=",">
			#{archiveIdList}
		</foreach>
	</select>

	<select id="getUserListByRole" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE USER_WRITEOFF = 0
		AND COMP_ID = #{compId}
		AND USER_POSITION=#{roleId}
		<if test="null != areaId">AND AREA_ID = #{areaId}</if>
		<if test="null != deptId">AND DEPT_ID = #{deptId}</if>
		<if test="null != regId">AND REG_ID = #{regId}</if>
		<if test="null != grId">AND GR_ID = #{grId}</if>
	</select>
	
	<select id="getUserListForRole" resultMap="BaseResultMap">
		select COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, USER_NAME, USER_POSITION, ROLE_LEVEL_ID,ORGANIZATION_ID
		from FUN_USERS
		where USER_WRITEOFF = 0
			and COMP_ID = #{compId}
			and USER_POSITION = #{roleId}
			<if test="null != userId">
	          and user_id=#{userId}
	        </if>
	</select>

	<select id="getMgrRegistManagerUser" resultMap="BaseResultMap">
		SELECT FUN_USERS.USER_ID,USER_NAME,USER_POSITION 
		FROM FUN_USERS LEFT JOIN USER_OPERS ON FUN_USERS.USER_ID = USER_OPERS.USER_ID 
		WHERE OPER_ID = 'REGIST_MANAGE' AND COMP_ID = #{compId} AND FUN_USERS.USER_WRITEOFF = 0
	</select>
	<select id="getUserInfoByUserIdForDeal" parameterType="java.lang.String" resultMap="userInfoResultMap">
	    <if test="areaFlagVal == 1">
	    select distinct A.USER_NAME,B.AREA_NAME,C.REG_NAME,D.GR_NAME from FUN_USERS A left join FUN_AREA B on A.AREA_ID = B.AREA_ID left join FUN_REGION C ON A.REG_ID=C.REG_ID left join FUN_DEPTSGROUP D ON A.GR_ID=D.GR_ID where A.COMP_ID=#{compId,jdbcType=INTEGER} and A.USER_ID=#{userId,jdbcType=INTEGER}
	  	</if>
	  	<if test="areaFlagVal != 1">
	    select distinct A.USER_NAME,C.REG_NAME,D.GR_NAME from FUN_USERS A left join FUN_REGION C ON A.REG_ID=C.REG_ID left join FUN_DEPTSGROUP D ON A.GR_ID=D.GR_ID where A.COMP_ID=#{compId,jdbcType=INTEGER} and A.USER_ID=#{userId,jdbcType=INTEGER}
	  	</if>
	</select>

	<select id="getCommunicationList" resultMap="exResultMapManagerUser">
		SELECT
		USER_NAME, USER_POSITION, USER_MOBILE, CITY_ID, COMP_ID,
		AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID,
		USER_STATUS, USER_WRITEOFF, WRITEOFF_TYPE
		FROM FUN_USERS
		WHERE COMP_ID = #{param.compId} AND ${param.serchRange} = #{param.serchRangeId}
		AND (USER_WRITEOFF = 0 OR (USER_WRITEOFF = 1 AND WRITEOFF_TYPE != 1))<!-- 未注销或不是调店注销的 -->
		<if test="param.userStatus == 1">AND USER_STATUS = 1 AND USER_WRITEOFF = 0</if><!-- 有效 -->
		<if test="param.userStatus == 2">AND USER_WRITEOFF = 1 AND WRITEOFF_TYPE = 0</if><!-- 注销 -->
		<if test="param.matchStr != null and param.matchStr != ''">
			AND (USER_NAME like #{param.matchStr} or USER_MOBILE like #{param.matchStr})
		</if>
		ORDER BY JOIN_DEPT_TIME,USER_ID
	</select>

	<select id="selectSalaryManager" resultType="int">
		select
		top 1 USER_ID
		from FUN_USERS
		where COMP_ID = #{compId} and USER_WRITEOFF!=1 and SALARY_PLAN_MANAGER = 1
	</select>

	<select id="getInvoiceNotWritedListForGeneral" resultType="com.myfun.erpWeb.usercenter.vo.InvoiceNotWritedVo">
		SELECT DISTINCT
			fp.HAS_RECEIPT AS hasReceipt,
			fp.PADI_TIME AS padiTime,
			fp.PAID_ID AS paidId,
			fd.DEPT_CNAME AS deptName,
			fi.INVOICE_ID AS invoiceId,
			cpt.PT_TYPE AS ptType,
			fp.ARCHIVE_ID AS archiveId,
			fp.AMOUNT AS amount,
			fp.PAID_TYPE AS paidType,
			fd.DEPT_ID AS deptId
		FROM
			hft_admindb.dbo.FUN_PAID fp
		JOIN hft_admindb.dbo.CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN hft_admindb.dbo.FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE fi ON fr.INVOICE_ID = fi.INVOICE_ID
		WHERE
		fp.REAL_WEIXIN != '1'
		AND fp.PADI_TIME &gt;= #{param.dateData}
		AND (fp.ARCHIVE_ID IN (SELECT archive_Id FROM fun_users WHERE user_writeoff = 0 AND comp_id = #{param.compId} AND archive_id != #{param.archiveId})
		AND fp.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','DEPT_RENT') OR (fp.ARCHIVE_ID = #{param.archiveId} AND fp.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV','DEPT_RENT')))
		AND (((fi.INVOICE_ID IS NULL OR fi.INVOICE_STATUS = '6')) OR ((fi.INVOICE_ID &gt; '0' AND fp.HAS_RECEIPT = '1' AND fi.INVOICE_TYPE = '2' )))
		ORDER BY
			fp.PADI_TIME DESC
	</select>

	<select id="getInvoiceNotWritedListForUser" resultType="com.myfun.erpWeb.usercenter.vo.InvoiceNotWritedVo">
		SELECT DISTINCT
            fp.HAS_RECEIPT AS hasReceipt,
			fp.PADI_TIME AS padiTime,
			fp.PAID_ID AS paidId,
			fd.DEPT_CNAME AS deptName,
			fi.INVOICE_ID AS invoiceId,
			cpt.PT_TYPE AS ptType,
			fp.ARCHIVE_ID AS archiveId,
			fp.AMOUNT AS amount,
			fp.PAID_TYPE AS paidType,
			fd.DEPT_ID AS deptId
		FROM hft_admindb.dbo.FUN_PAID fp
		JOIN hft_admindb.dbo.CRM_PAYMENT_TASKS cpt ON cpt.pt_id = fp.pt_id AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_DEPTS fd ON cpt.DEPT_ID = fd.DEPT_ID
		LEFT JOIN hft_admindb.dbo.FUN_PAID_INVOICERELATIVE fr ON fp.PAID_ID = fr.PAID_ID AND fp.AMOUNT &gt; 0
		LEFT JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE fi ON fr.INVOICE_ID = fi.INVOICE_ID
		WHERE
			fp.REAL_WEIXIN != '1'
		AND fp.PADI_TIME  &gt;= #{param.dateData}
		AND fp.ARCHIVE_ID = #{param.archiveId}
		AND fp.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV')
		AND (((fi.INVOICE_ID IS NULL OR fi.INVOICE_STATUS = '6')) OR ((fi.INVOICE_ID &gt; '0' AND fp.HAS_RECEIPT = '1' AND fi.INVOICE_TYPE = '2')))
		ORDER BY
			fp.PADI_TIME DESC 
	</select>

	<select id="getHaveAuditUserList" resultType="java.lang.Integer">
		SELECT A.USER_ID FROM FUN_USERS A
		JOIN USER_OPERS B ON A.USER_ID=B.USER_ID
		WHERE A.COMP_ID=#{compId} AND A.USER_WRITEOFF=0
		AND (
			B.OPER_ID='BIZ_DATA_EXAMIN_COMP'
			OR (A.AREA_ID=#{areaId} AND B.OPER_ID='BIZ_DATA_EXAMIN_AREA')
			OR (A.REG_ID=#{regId} AND B.OPER_ID='BIZ_DATA_EXAMIN_REG')
			OR (A.DEPT_ID=#{deptId} AND B.OPER_ID='BIZ_DATA_EXAMIN_DEPT')
			<if test="grId != null and grId != 0">
				OR (A.GR_ID=#{grId} AND B.OPER_ID='BIZ_DATA_EXAMIN_GROUP')
			</if>
		)
		GROUP BY A.USER_ID
	</select>
	<select id="getBespokeModuleManager" resultMap="BaseResultMap">
      select a.USER_NAME, a.DEPT_ID, a.USER_ID from FUN_USERS a
      left join FUN_DEPTS b on a.DEPT_ID = b.DEPT_ID
      where b.COMP_ID=#{compId} and a.BESPOKE_MANAGER = 1 AND A.USER_WRITEOFF=0
    </select>

	<update id="setBespokerManage">
      update  a set a.BESPOKE_MANAGER=0 from FUN_USERS a
      left join FUN_DEPTS b on a.DEPT_ID = b.DEPT_ID
      where b.COMP_ID=#{compId} and a.BESPOKE_MANAGER = 1;
      update FUN_USERS set  BESPOKE_MANAGER=1 where user_id=#{userId}
    </update>

	<select id="getEmployeeFilesList" resultMap="exResultMapManagerUser">
		SELECT
		A.COMP_ID,A.AREA_ID,A.REG_ID,A.DEPT_ID,A.GR_ID,A.USER_NAME, A.USER_POSITION, A.USER_STATUS, A.SUPER_LEADER, A.USER_JOB_DATE,A.USER_MOBILE,A.USER_ID,A.ARCHIVE_ID
		,B.PLACE_OF_ORIGIN,B.USER_SCHOOL,B.NATION,B.ID,A.USER_WRITEOFF
		FROM FUN_USERS A left join FUN_EMPLOYEE_DOC B on A.ARCHIVE_ID = B.ARCHIVE_ID and B.COMP_ID = A.COMP_ID
		WHERE A.COMP_ID = #{param.compId}  and (A.WRITEOFF_TYPE !=1 OR A.WRITEOFF_TYPE is null)
		<if test="param.areaId != null and param.areaId != ''">AND A.AREA_ID =#{param.areaId} </if>
		<if test="param.regId != null and param.regId != ''">AND A.REG_ID =#{param.regId} </if>
		<if test="param.deptId != null and param.deptId != ''">AND A.DEPT_ID =#{param.deptId} </if>
		<if test="param.grId != null and param.grId != ''">AND A.GR_ID =#{param.grId} </if>
		<if test="param.userId != null and param.userId != ''">AND A.USER_ID =#{param.userId} </if>
		<if test="param.userStatus == 1">AND A.USER_WRITEOFF = 0 </if><!-- 有效 -->
		<if test="param.userStatus == 2">AND A.USER_WRITEOFF = 1 </if><!-- 离职-->
		<if test="param.userSchlrecord !=null and param.userSchlrecord != '' ">AND B.USER_SCHLRECORD = #{param.userSchlrecord}</if>
		<if test="param.matchStr != null and param.matchStr != ''">
			AND (A.USER_NAME like #{param.matchStr} or A.USER_MOBILE like #{param.matchStr} or B.USER_SCHOOL like #{param.matchStr} )
		</if>


        <if test="param.startTime !=null and param.startTime != '' and param.endTime !=null and param.endTime != ''">

          <choose>
            <when test="param.inOrOut == 1">
              and A.USER_JOB_DATE  &gt;= #{param.startTime} and A.USER_JOB_DATE &lt;= #{param.endTime}
            </when>
            <otherwise>
              and A.WRITEOFF_TIME  &gt;= #{param.startTime} and A.WRITEOFF_TIME &lt;= #{param.endTime}
            </otherwise>
          </choose>
        </if>

		<choose>
          <when test="param.inOrOut == 1">
              ORDER BY A.USER_JOB_DATE DESC
          </when>
          <otherwise>
              ORDER BY A.WRITEOFF_TIME DESC
          </otherwise>
		</choose>

	</select>

	<select id="getUserListByAudit" resultMap="BaseResultMap">
	  SELECT A.USER_ID, A.CITY_ID, A.COMP_ID, A.REG_ID, A.DEPT_ID, A.GR_ID, A.ARCHIVE_ID, A.USER_NO, A.USER_NAME,
      A.LOGIN_USERID, A.LOGIN_PASSWORD, A.USER_SEX, A.USER_MOBILE, A.USER_JOB_DATE, A.USER_POSITION,
      A.USER_STATUS, A.STATUS_TIME, A.USER_WRITEOFF, A.WRITEOFF_TIME, A.WAGE_FLAG, A.BUILD_RULE_FLAG,
      A.USER_PID, A.USER_LOGTIME, A.USER_EDITION, A.ALLDEPT_FLAG, A.USER_ROAM, A.UPDATE_UID, A.UPDATE_TIME,
      A.USER_PHOTO_MIN, A.VERTIFY_CODE, A.AREA_ID, A.USER_CODE, A.YOUJIA_PHONE, A.USE_YOUJIA_PHONE,
      A.DEVELOPER_ADMIN, A.TOPBUILDING_ADMIN, A.PERSONNEL_LEVELS, A.RECRUITMENT_CHANNEL, A.LEVELS_ID,
      A.CHANNEL_ID, A.WRITEOFF_TYPE, A.APARTMENT_USE_FLAG, A.SALARY_PLAN_MANAGER, A.CREATION_TIME,
      A.JOIN_DEPT_TIME, A.PROMPT_TIME, A.BESPOKE_MANAGER, A.SUPER_LEADER, A.USER_PHOTO, A.EXPERIENCE_USER
		FROM FUN_USERS A
		JOIN USER_OPERS B ON A.USER_ID=B.USER_ID
		WHERE A.COMP_ID=#{compId} AND A.USER_WRITEOFF=0
		AND (
			<choose>
				<when test="null != grId and grId != 0">
					A.GR_ID=#{grId} AND B.OPER_ID=#{operMap.group}
				</when>
				<when test="null != deptId">
					A.DEPT_ID=#{deptId} AND B.OPER_ID=#{operMap.dept}
				</when>
				<when test="null != regId">
					A.REG_ID=#{regId} AND B.OPER_ID=#{operMap.reg}
				</when>
				<when test="null != areaId">
					A.AREA_ID=#{areaId} AND B.OPER_ID=#{operMap.area}
				</when>
				<otherwise>B.OPER_ID=#{operMap.comp}</otherwise>
			</choose>
		)
	</select>

	<select id="getLastUserByUpForAudit" resultMap="BaseResultMap">
		SELECT TOP 1
		IIF(A.GR_ID != 0 and GR_ID=#{grId},0,1) GR_ID,
		IIF(A.DEPT_ID=#{deptId},0,1) DEPT_ID,IIF(A.REG_ID=#{regId},0,1) REG_ID,
		IIF(A.AREA_ID=#{areaId},0,1) AREA_ID
		FROM FUN_USERS A
		JOIN USER_OPERS B ON A.USER_ID=B.USER_ID
		WHERE A.COMP_ID=#{compId} AND A.USER_WRITEOFF=0
		AND (
			B.OPER_ID=#{operMap.comp}
			OR (A.AREA_ID=#{areaId} AND B.OPER_ID=#{operMap.area})
			OR (A.REG_ID=#{regId} AND B.OPER_ID=#{operMap.reg})
			OR (A.DEPT_ID=#{deptId} AND B.OPER_ID=#{operMap.dept})
			<if test="grId != null and grId != 0">
				OR (A.GR_ID=#{grId} AND B.OPER_ID=#{operMap.group})
			</if>
		)
		ORDER BY GR_ID,DEPT_ID,REG_ID,AREA_ID
	</select>

	<select id="getLastUserByUp" resultMap="BaseResultMap">
		SELECT TOP 1
		IIF(GR_ID != 0 and GR_ID=#{grId},0,1) GR_ID,
		IIF(DEPT_ID=#{deptId},0,1) DEPT_ID,IIF(REG_ID=#{regId},0,1) REG_ID,
		IIF(AREA_ID=#{areaId},0,1) AREA_ID
		FROM FUN_USERS WHERE COMP_ID=#{compId} AND USER_WRITEOFF=0
		AND USER_POSITION=#{roleId}
		ORDER BY GR_ID,DEPT_ID,REG_ID,AREA_ID
	</select>

	<select id="getFunUsersDtoByUserId" resultMap="exResultMapManagerUser">
		select
		<include refid="Base_Column_List" />
		,iif(USER_WRITEOFF=1,DATEDIFF(day,USER_JOB_DATE,WRITEOFF_TIME)+1,DATEDIFF(day,USER_JOB_DATE,#{nowTime})+1) as workingYears
		from FUN_USERS
		where COMP_ID= #{compId} and USER_ID = #{userId}
	</select>

	<select id="getFunUsersDtoById" resultMap="BaseDtoResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where COMP_ID= #{compId} and USER_ID = #{userId}
	</select>

	<select id="getErpFunUsersList" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where USER_ID in
		<foreach close=")" collection="userIdList" item="userIdList" open="(" separator=",">
		 #{userIdList}
    </foreach>
	</select>

	<select id="getGeneralManagerByCompId" resultMap="BaseResultMap">
		select
		top 1
		<include refid="Base_Column_List" />
		from FUN_USERS
		where COMP_ID= #{compId} and USER_POSITION = 'GENERAL_MANAGER' and USER_WRITEOFF !='1'
	</select>

  <select id="getUserListByScopeType" resultMap="BaseResultMap">
    SELECT USER_ID, USER_NAME, DEPT_ID, COMP_ID
    FROM FUN_USERS
    <where>
      <if test="1 == 1">
        AND COMP_ID=#{compId} AND USER_WRITEOFF = 0 AND ${mappingDbFiled} = #{bizId}
      </if>
    </where>
  </select>
  <select id="getUserListByTimeRange" resultType="map">
      SELECT USER_ID as userId, AREA_ID as areaId,DEPT_ID as deptId, GR_ID as grId,CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID,'_',GR_ID,'_',USER_ID) as userRangeKey
      FROM FUN_USERS
      where COMP_ID = #{compId}
      <choose>
       <when test="'AREA' == searchRange">
        AND AREA_ID=#{searchRangeId}
       </when>
       <when test="'REG' == searchRange">
        AND REG_ID=#{searchRangeId}
       </when>
       <when test="'DEPT' == searchRange">
        AND DEPT_ID=#{searchRangeId}
       </when>
       <when test="'GROUP' == searchRange">
        AND GR_ID=#{searchRangeId}
       </when>
       <when test="'USER' == userId">
        AND USER_ID=#{searchRangeId}
       </when>
       </choose>
      AND (JOIN_DEPT_TIME &lt;= #{endTime} and (USER_WRITEOFF=0 or (USER_WRITEOFF !=0 and WRITEOFF_TIME &gt; #{startTime})))
  </select>

	<select id="getDeptBranchManager" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE COMP_ID = #{compId} AND USER_POSITION = #{userPosition}
		AND USER_WRITEOFF=0
		<if test="null != areaId and deptId != ''">AND AREA_ID=#{areaId}</if>
		<if test="null != regId and deptId != ''">AND REG_ID=#{regId}</if>
		<if test="null != deptId and deptId != ''">AND DEPT_ID=#{deptId}</if>
	</select>

	<select id="getUserNameAndDeptNameByIds" resultMap="extBaseResultMap">
		SELECT A.USER_ID,A.USER_NAME,B.DEPT_NAME,B.DEPT_ID
		FROM FUN_USERS A
		JOIN FUN_DEPTS B ON A.DEPT_ID=B.DEPT_ID
		WHERE USER_ID IN
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
	</select>

      <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunUsersDto">
        <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
        <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
        <result column="USER_ID" jdbcType="INTEGER" property="userId" />
        <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
      </resultMap>
      <select id="getHasWriteOffUserListByArchiveIds" resultMap="extBaseResultMap">
        select t.ARCHIVE_ID,t.user_id,t.DEPT_ID, d.dept_name, t.USER_POSITION
        from (select row_number()over(partition by ARCHIVE_ID order by WRITEOFF_TIME desc)rn,
          FUN_USERS.ARCHIVE_ID, FUN_USERS.user_id, FUN_USERS.DEPT_ID, FUN_USERS.USER_POSITION
        from FUN_USERS
          where comp_id=#{compId} and USER_WRITEOFF != 0 and ARCHIVE_ID in <foreach close=")" collection="archiveIds" item="archiveId" open="(" separator=",">
                  #{archiveId}
            </foreach> ) t
          join fun_depts d on t.DEPT_ID=d.dept_id
          where t.rn=1;
      </select>

  <resultMap extends="BaseResultMap" id="wageExtBaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunAssessmentStatistics">
  </resultMap>
  <select id="getWageCountUserList" resultMap="wageExtBaseResultMap">
    SELECT a.COMP_ID, a.AREA_ID, a.REG_ID, a.DEPT_ID, a.GR_ID, a.USER_ID
    <if test="null != param.organizationId and param.organizationId &gt; 0">
      , b.ORGANIZATION_ID
    </if>
    FROM FUN_ASSESSMENT_STATISTICS a
    JOIN FUN_USERS b on a.user_id=b.user_id
    <where>
      <if test="null != compId">
        AND b.COMP_ID=#{compId} and a.DEAL_FLAG=0
      </if>
      <if test="param.newOrganization == false">
          <if test="null != param.areaId">
            AND b.AREA_ID=#{param.areaId}
          </if>
          <if test="null != param.regId">
            AND b.REG_ID=#{param.regId}
          </if>
          <if test="null != param.deptId">
            AND b.DEPT_ID=#{param.deptId}
          </if>
          <if test="null != param.grId">
            AND b.GR_ID=#{param.grId}
          </if>
      </if>
      <if test="null != param.organizationId  and param.organizationId &gt; 0">
           AND b.TISSUE_LINE like '%:${param.organizationId}:%'
      </if>
      <if test="null != param.userId">
        AND b.USER_ID=#{param.userId}
      </if>
      <if test="null != param.assessmentMonth and '' != param.assessmentMonth">
        AND a.ASSESSMENT_MONTH=#{param.assessmentMonth}
      </if>
      <if test="null != param.roleId and '' != param.roleId">
        AND b.USER_POSITION=#{param.roleId}
      </if>
    </where>
    GROUP by a.COMP_ID, a.AREA_ID, a.REG_ID, a.DEPT_ID, a.GR_ID, a.USER_ID
    <if test="null != param.organizationId  and param.organizationId &gt; 0">
      , b.ORGANIZATION_ID
    </if>
    ORDER BY USER_ID ASC
  </select>

	<select id="getUserPosition" resultType="java.util.Map">
		SELECT A.GR_ID as grId,A.DEPT_ID as deptId, A.USER_POSITION as roleName,A.USER_ID as userId
		FROM FUN_USERS A
		WHERE
		A.USER_ID IN
		<foreach close=")" collection="userIdSet" index="index" item="item" open="(" separator=",">
        	#{item}
    	</foreach>
	</select>

  <select id="getAllUserByDeptId" resultMap="BaseResultMap">
      select <include refid="Base_Column_List" />
      from fun_users where comp_id=#{compId} and dept_id=#{deptId} and (user_writeoff=0 or (user_writeoff=1 and WRITEOFF_TIME &gt;= #{startTime}))
  </select>

  <select id="selectUserList" resultMap="BaseResultMap">
    SELECT a.USER_ID, a.CITY_ID, a.COMP_ID, a.REG_ID, a.DEPT_ID, a.GR_ID, a.ARCHIVE_ID, a.USER_NO, a.USER_NAME,
    a.LOGIN_USERID, a.LOGIN_PASSWORD, a.USER_SEX, a.USER_MOBILE, a.USER_JOB_DATE, a.USER_POSITION,
    a.USER_STATUS, a.STATUS_TIME, a.USER_WRITEOFF, a.WRITEOFF_TIME, a.WAGE_FLAG, a.BUILD_RULE_FLAG,
    a.USER_PID, a.USER_LOGTIME, a.USER_EDITION, a.ALLDEPT_FLAG, a.USER_ROAM, a.UPDATE_UID, a.UPDATE_TIME,
    a.USER_PHOTO_MIN, a.VERTIFY_CODE, a.AREA_ID, a.USER_CODE, a.YOUJIA_PHONE, a.USE_YOUJIA_PHONE,
    a.DEVELOPER_ADMIN, a.TOPBUILDING_ADMIN, a.PERSONNEL_LEVELS, a.RECRUITMENT_CHANNEL, a.LEVELS_ID,
    a.CHANNEL_ID, a.WRITEOFF_TYPE, a.APARTMENT_USE_FLAG, a.SALARY_PLAN_MANAGER, a.CREATION_TIME,
    a.JOIN_DEPT_TIME, a.PROMPT_TIME, a.BESPOKE_MANAGER, a.SUPER_LEADER, a.USER_PHOTO, a.EXPERIENCE_USER,a.PARTNER_ID
    from fun_users a
    JOIN FUN_DEPTS b on a.DEPT_ID= b.DEPT_ID and DEPT_FLAG &gt; 0
    WHERE b.COMP_ID=#{compId}  and (a.USER_WRITEOFF = 0 or (a.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime})) and
    <choose>
      <when test="manageRangeRangeType == 1">a.COMP_ID </when>
      <when test="manageRangeRangeType == 2">a.AREA_ID </when>
      <when test="manageRangeRangeType == 3">a.REG_ID </when>
      <when test="manageRangeRangeType == 4">a.DEPT_ID </when>
      <when test="manageRangeRangeType == 5">GR_ID </when>
      <when test="manageRangeRangeType == 6">USER_ID </when>
    </choose>
    IN
    <foreach close=")" collection="userManageRangeIds" item="userManageRangeId" open="(" separator=",">
      #{userManageRangeId}
    </foreach>
    <if test="manageRangeRangeType == 5 and null != deptId">
    	AND A.DEPT_ID = #{deptId}
    </if>
    ORDER BY A.CREATION_TIME DESC
  </select>

  <select id="selectOrgUserList" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from fun_users a
    WHERE a.COMP_ID=#{compId}  and (a.USER_WRITEOFF = 0 or (a.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime}))
    <if test="whereCause!=null and whereCause!=''">
      and ${whereCause}
    </if>
    ORDER BY A.CREATION_TIME DESC
  </select>

  <select id="selectUserListForOrg" resultMap="BaseResultMap">
    SELECT a.USER_ID, a.CITY_ID, a.COMP_ID, a.REG_ID, a.DEPT_ID, a.GR_ID, a.ARCHIVE_ID, a.USER_NO, a.USER_NAME,
    a.LOGIN_USERID, a.LOGIN_PASSWORD, a.USER_SEX, a.USER_MOBILE, a.USER_JOB_DATE, a.USER_POSITION,
    a.USER_STATUS, a.STATUS_TIME, a.USER_WRITEOFF, a.WRITEOFF_TIME, a.WAGE_FLAG, a.BUILD_RULE_FLAG,
    a.USER_PID, a.USER_LOGTIME, a.USER_EDITION, a.ALLDEPT_FLAG, a.USER_ROAM, a.UPDATE_UID, a.UPDATE_TIME,
    a.USER_PHOTO_MIN, a.VERTIFY_CODE, a.AREA_ID, a.USER_CODE, a.YOUJIA_PHONE, a.USE_YOUJIA_PHONE,
    a.DEVELOPER_ADMIN, a.TOPBUILDING_ADMIN, a.PERSONNEL_LEVELS, a.RECRUITMENT_CHANNEL, a.LEVELS_ID,
    a.CHANNEL_ID, a.WRITEOFF_TYPE, a.APARTMENT_USE_FLAG, a.SALARY_PLAN_MANAGER, a.CREATION_TIME,
    a.JOIN_DEPT_TIME, a.PROMPT_TIME, a.BESPOKE_MANAGER, a.SUPER_LEADER, a.USER_PHOTO, a.EXPERIENCE_USER,a.PARTNER_ID
    from fun_users a
    WHERE a.COMP_ID=#{compId}  and (a.USER_WRITEOFF = 0 or (a.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime}))
    <if test="orgIds!=null and orgIds.size&gt;0">
      and ${dbField} in
      <foreach close=")" collection="orgIds" index="index" item="rangeId" open="(" separator=",">
        #{rangeId}
      </foreach>
    </if>
    ORDER BY a.CREATION_TIME DESC
  </select>

  <select id="getUserArchiveList" resultType="com.myfun.repository.erpdb.dto.ErpFunUsersDto">
    SELECT USER_ID userId,ARCHIVE_ID archiveId
    FROM
    FUN_USERS
    WHERE USER_ID IN
    <foreach close=")" collection="userIds" index="index" item="userId" open="(" separator=",">
      #{userId}
    </foreach>
    AND COMP_ID = #{compId}
  </select>

	<update id="modifyPwd">
		UPDATE FUN_USERS SET LOGIN_PASSWORD = #{loginPassword} WHERE USER_ID = #{userId}
	</update>

  <select id="getBuildManagerUsersList" resultMap="BaseResultMap">
    select
      <include refid="Base_Column_List" />
    from
    FUN_USERS
    where
    COMP_ID = #{compId} AND BUILD_RULE_FLAG = '1' AND USER_WRITEOFF = '0'
    <if test="deptId != null and deptId != ''">
      AND DEPT_ID = #{deptId}
    </if>

  </select>

  <select id="getFunUsersListByMap" resultMap="BaseResultMap">
    select USER_ID from FUN_USERS
    where COMP_ID=#{param.compId}
    <if test="param.deptId != null"> and DEPT_ID=#{param.deptId} </if>
    <if test="param.grId != null"> and GR_ID=#{param.grId} </if>
    <if test="null != param.organizationId and param.organizationId != 0 "> and ORGANIZATION_PATH LIKE '%:${param.organizationId}:%' </if>
    and ( USER_WRITEOFF = 0 or ( USER_WRITEOFF != 0 and  WRITEOFF_TIME &gt;= #{param.writeOffTimeStart} and WRITEOFF_TIME &lt;= #{param.writeOffTimeEnd} ) )
  </select>

	<select id="getDeptUserCount" resultType="java.lang.Integer">
		SELECT COUNT(1) FROM FUN_USERS
		WHERE
		COMP_ID=#{compId} and DEPT_ID=#{deptId} and USER_WRITEOFF = 0
		<if test="userPosition != null and userPosition != ''">
			AND USER_POSITION=#{userPosition}
		</if>
	</select>

	<update id="updateDeptByChangeDept">
		UPDATE ATTENDANCE SET DEPT_ID = #{newDeptId} WHERE ATT_USER = #{userId}
		UPDATE FINE SET DEPT_ID = #{newDeptId} WHERE FINE_DEST = #{userId}
		UPDATE WORK_LOG SET DEPT_ID = #{newDeptId} WHERE WL_USER = #{userId}
		UPDATE FUN_ECARDS SET DEPT_ID = #{newDeptId} WHERE ARCHIVE_ID = #{archiveId}
		UPDATE FUN_BASEWAGE SET DEPT_ID = #{newDeptId} WHERE USER_ID = #{userId}
		UPDATE FUN_WAGE SET DEPT_ID = #{newDeptId} WHERE USER_ID = #{userId} AND CREATE_DATE &gt;=#{startTime} and CREATE_DATE &lt;=#{endTime}
		UPDATE FUN_TASK SET DEPT_ID = #{newDeptId} WHERE TASK_OWNER = #{userId} AND DEPT_ID=#{oldDeptId}
	</update>

	<update id="updateUserForArea">
		update FUN_USERS
		set AREA_ID=#{areaId},UPDATE_TIME = GETDATE()
		where COMP_ID=#{compId} AND REG_ID = #{regId}
	</update>

	<select id="getSalaryManger" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE COMP_ID = #{compId} AND USER_WRITEOFF !=1 AND SALARY_PLAN_MANAGER = 1
	</select>

	<select id="selectDataByUserId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE USER_ID = #{userId} and comp_id=#{compId}
	</select>

	<select id="getUserListByDeptId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE DEPT_ID = #{deptId} AND USER_WRITEOFF = 0
	    ORDER BY CREATION_TIME DESC
	</select>

	<select id="getUserListByOrganizationId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE USER_WRITEOFF = 0 and comp_id = #{compId}
		<if test="null != organizationId and organizationId &gt; 0">
			AND TISSUE_LINE LIKE '%:${organizationId}:%' 
		</if>
	    ORDER BY CREATION_TIME DESC
	</select>

  <select id="getUserListByDeptIdAndInWriteOffTime" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_USERS
    WHERE DEPT_ID = #{deptId} AND (USER_WRITEOFF = 0 OR (USER_WRITEOFF = 1 AND WRITEOFF_TIME between #{startTime} AND #{endTime}))
    ORDER BY CREATION_TIME DESC
  </select>

	<update id="clearUserForGroup">
		UPDATE FUN_USERS
		SET GR_ID = #{updateGrId} ,UPDATE_TIME = GETDATE()
		WHERE
		COMP_ID = #{compId}
		<if test="null != grId and grId != ''">
			AND GR_ID = #{grId}
		</if>
		<if test="null != deptId and deptId != ''">
			AND DEPT_ID = #{deptId}
		</if>
		<if test="null != userIdsList">
			AND USER_ID IN
			<foreach close=")" collection="userIdsList" index="userIds" item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
	</update>

  <select id="getByUserIdAndDeptId" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_USERS
    WHERE DEPT_ID = #{deptId} AND USER_ID = #{userId}
  </select>

	<select id="getIsOperator" resultMap="BaseResultMap">
		SELECT TOP 1 <include refid="Base_Column_List" />
      FROM FUN_USERS
		WHERE COMP_ID= #{compId}
		AND ${range} =
		<choose>
			<when test="operQueryLevel == 0">#{userId}</when>
			<when test="operQueryLevel == 1">#{grId}</when>
			<when test="operQueryLevel == 2">#{deptId}</when>
			<when test="operQueryLevel == 3">#{regId}</when>
			<when test="operQueryLevel == 4">#{areaId}</when>
			<when test="operQueryLevel == 5">#{compId}</when>
		</choose>
		AND ${queryRange} = #{queryRangeId}
		<if test="1 == operQueryLevel">
			AND DEPT_ID = #{deptId}
		</if>
	</select>
	<select id="getFunUsersByGrId" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" />
        FROM FUN_USERS WHERE COMP_ID = #{compId} and GR_ID = #{grId}
		<if test="null != userIdsList">
		OR USER_ID IN
			<foreach close=")" collection="userIdsList" item="userId" open=" (" separator=",">
				#{userId}
			</foreach>
		</if>
	</select>
	<select id="getFunUsersDtoList" resultMap="BaseDtoResultMap">
		SELECT
        	A.ROLE_LEVEL_ID,A.USER_PHOTO,A.USER_ID,A.CITY_ID,A.COMP_ID,A.REG_ID,A.DEPT_ID,
        	A.GR_ID,A.ARCHIVE_ID,A.USER_NAME,A.USER_SEX,A.USER_MOBILE,A.USER_JOB_DATE,
        	A.USER_POSITION,A.USER_STATUS,A.USER_WRITEOFF,A.WRITEOFF_TIME,A.AREA_ID,
        	A.USER_CODE,A.CREATION_TIME,A.YOUJIA_PHONE,A.USER_TEAM_NUMBER,A.CURRENT_P_ID,A.INVITE_USER_ID, A.ORGANIZATION_ID,A.USER_NO
       	<if test="null != sortType and sortType == 2">
       		,B.MANAGE_LEVEL
       	</if>
        FROM FUN_USERS A
        <choose>
        	<when test="null != isHeadquarters and !param.userWriteoff and sortType != 2">
        		join fun_depts C ON  A.dept_id = C.dept_id  and C.IS_HEADQUARTERS = #{isHeadquarters}
        	</when>
        	<when test="null != sortType and sortType == 2">
        		LEFT JOIN COMP_ROLES B ON A.USER_POSITION = B.ROLE_ID AND B.COMP_ID = #{param.compId}
        	</when>
        	<when test="param.userWriteoff">
        		JOIN FUN_EMPLOYEE_DOC D ON A.USER_ID = D.USER_ID AND D.COMP_ID = #{param.compId}
        	</when>
        </choose>
		where A.COMP_ID = #{param.compId}
		<if test="null != sortType and sortType == 2 and param.userWriteoff">
			and A.USER_ID IN (SELECT MAX(USER_ID) FROM dbo.FUN_USERS WHERE COMP_ID = #{param.compId} AND USER_WRITEOFF = 'true' GROUP BY ARCHIVE_ID )
			AND A.ARCHIVE_ID NOT IN (SELECT DISTINCT ARCHIVE_ID FROM dbo.FUN_USERS WHERE COMP_ID = #{param.compId}  AND USER_WRITEOFF = 0)
		</if>
        <if test="null!=param.userWriteoff">
          AND A.USER_WRITEOFF = #{param.userWriteoff}
        </if>
        <if test="null!=param.userWriteoff and param.userWriteoff == 1">
          AND A.WRITEOFF_TYPE = 0
        </if>
		<if test="null != param.areaId and allUsersFlag == 0">
			AND A.AREA_ID = #{param.areaId}
		</if>
		<if test="null != param.deptId and allUsersFlag == 0">
			AND A.DEPT_ID = #{param.deptId}
		</if>
		<if test="null != param.regId and allUsersFlag == 0">
			AND A.REG_ID = #{param.regId}
		</if>
		<if test="null != param.grId and allUsersFlag == 0">
			AND A.GR_ID = #{param.grId}
		</if>
		<if test="null != teamUserFlag and 1 == teamUserFlag">
			AND A.TISSUE_LINE LIKE '%:${userId}:%' AND A.USER_LEVEL &lt;= #{userLevel}
		</if>
		<if test="null != notInviteRole and '' != notInviteRole">
			AND A.CURRENT_P_ID IS NULL
		</if>
		<if test="param.userPosition!=null and param.userPosition!=''">
			and A.USER_POSITION = #{param.userPosition}
		</if>
		<if test="param.userId!=null">
			and A.USER_ID != #{param.userId}
		</if>
		<if test="param.userName!=null and param.userName!=''">
			and (A.USER_NAME LIKE CONCAT(CONCAT('%',#{param.userName}),'%') or A.USER_CODE LIKE CONCAT(CONCAT('%',#{param.userName}),'%'))
		</if>
		<if test="null != headCharacter and headCharacter != ''">
			and A.USER_CODE LIKE #{headCharacter}
		</if>
        <if test="null != param.organizationId and param.organizationId &gt; 0">
            AND A.TISSUE_LINE like '%:${param.organizationId}:%'
        </if>
		<choose>
			<when test="sortType == 1">
				order by A.USER_CODE ${orderBy}
			</when>
			<when test="sortType == 2">
				order by B.SEQ_NO ${orderBy}
			</when>
			<when test="sortType == 3">
				order by A.USER_JOB_DATE ${orderBy}
			</when>
			<when test="sortType == 4">
				order by A.WRITEOFF_TIME ${orderBy}
			</when>
			<when test="sortType == 5">
				order by A.USER_STATUS ${orderBy}
			</when>
			<when test="param.userWriteoff">
				order by A.WRITEOFF_TIME ${orderBy}
			</when>
			<when test="!param.userWriteoff">
				order by A.USER_JOB_DATE ${orderBy}
			</when>
			<otherwise>
				order by A.area_id,A.reg_id,A.dept_id,A.gr_id,A.CREATION_TIME
				<if test="null != orderBy and orderBy != ''">
					${orderBy}
				</if>
			</otherwise>
		</choose>

	</select>

	<update id="updateByUserIdAndDeptId">
		UPDATE FUN_USERS
		SET WRITEOFF_TIME = GETDATE(),USER_WRITEOFF = 1,WRITEOFF_TYPE = 0 ,UPDATE_TIME = GETDATE()
		WHERE USER_ID = #{userId}
	</update>

	<update id="updateUserAllDeptFlag">
		update FUN_USERS set ALLDEPT_FLAG = 1,UPDATE_TIME = GETDATE() from USER_OPERS b where b.USER_ID = #{userId} and OPER_ID = #{operId} and COMP_ID = #{compId} and FUN_USERS.USER_ID = b.USER_ID
	</update>

	<update id="updateDataToGeneralManager">
		UPDATE FUN_SALE SET COMP_ID=#{newUser.compId},AREA_ID=#{newUser.areaId},REG_ID=#{newUser.regId},DEPT_ID=#{newUser.deptId},GR_ID=#{newUser.grId},USER_ID = #{newUser.userId},ARCHIVE_ID = #{newUser.archiveId} WHERE USER_ID = #{userId} AND COMP_ID = #{newUser.compId}
		UPDATE FUN_LEASE SET COMP_ID=#{newUser.compId},AREA_ID=#{newUser.areaId},REG_ID=#{newUser.regId},DEPT_ID=#{newUser.deptId},GR_ID=#{newUser.grId},USER_ID = #{newUser.userId},ARCHIVE_ID = #{newUser.archiveId} WHERE USER_ID = #{userId} AND COMP_ID = #{newUser.compId}
		UPDATE FUN_BUY_CUSTOMER SET COMP_ID=#{newUser.compId},AREA_ID=#{newUser.areaId},REG_ID=#{newUser.regId},DEPT_ID=#{newUser.deptId},GR_ID=#{newUser.grId},USER_ID = #{newUser.userId},ARCHIVE_ID = #{newUser.archiveId} WHERE USER_ID = #{userId} AND COMP_ID = #{newUser.compId}
		UPDATE FUN_RENT_CUSTOMER SET COMP_ID=#{newUser.compId},AREA_ID=#{newUser.areaId},REG_ID=#{newUser.regId},DEPT_ID=#{newUser.deptId},GR_ID=#{newUser.grId},USER_ID = #{newUser.userId},ARCHIVE_ID = #{newUser.archiveId} WHERE USER_ID = #{userId} AND COMP_ID = #{newUser.compId}
		UPDATE CITYSHARE_HOUSE SET COMP_ID=#{newUser.compId},DEPT_ID=#{newUser.deptId},USER_ID = #{newUser.userId},ARCHIVE_ID = #{newUser.archiveId} WHERE USER_ID = #{userId} AND COMP_ID = #{newUser.compId}
		UPDATE FUN_PHONE SET COMP_ID=#{newUser.compId},AREA_ID=#{newUser.areaId},REG_ID=#{newUser.regId},DEPT_ID=#{newUser.deptId},GR_ID=#{newUser.grId},USER_ID = #{newUser.userId} WHERE USER_ID = #{userId} AND COMP_ID = #{newUser.compId}
	</update>

	<update id="updateDataToPersonal">
		UPDATE FUN_SALE SET USER_ID = #{newUser} WHERE ARCHIVE_ID = #{archiveId} AND COMP_ID = #{shardCityId} AND CITY_ID = #{shardCityId}
		UPDATE FUN_LEASE SET USER_ID = #{newUser} WHERE ARCHIVE_ID = #{archiveId} AND COMP_ID = #{shardCityId} AND CITY_ID = #{shardCityId}
		UPDATE FUN_BUY_CUSTOMER SET USER_ID = #{newUser} WHERE ARCHIVE_ID = #{archiveId} AND COMP_ID = #{shardCityId} AND CITY_ID = #{shardCityId}
		UPDATE FUN_RENT_CUSTOMER SET USER_ID = #{newUser} WHERE ARCHIVE_ID = #{archiveId} AND COMP_ID = #{shardCityId} AND CITY_ID = #{shardCityId}
	</update>

	<update id="updateForMarketCompData">
		UPDATE FUN_SALE SET COMP_ID=#{shardCityId},AREA_ID=#{shardCityId},REG_ID=#{shardCityId},DEPT_ID=#{shardCityId},GR_ID=0,USER_ID = #{newUserId} WHERE USER_ID = #{userId}
		UPDATE FUN_LEASE SET COMP_ID=#{shardCityId},AREA_ID=#{shardCityId},REG_ID=#{shardCityId},DEPT_ID=#{shardCityId},GR_ID=0,USER_ID = #{newUserId} WHERE USER_ID = #{userId}
		UPDATE FUN_BUY_CUSTOMER SET COMP_ID=#{shardCityId},AREA_ID=#{shardCityId},REG_ID=#{shardCityId},DEPT_ID=#{shardCityId},GR_ID=0,USER_ID = #{newUserId} WHERE USER_ID = #{userId}
		UPDATE FUN_RENT_CUSTOMER SET COMP_ID=#{shardCityId},AREA_ID=#{shardCityId},REG_ID=#{shardCityId},DEPT_ID=#{shardCityId},GR_ID=0,USER_ID = #{newUserId} WHERE USER_ID = #{userId}
		UPDATE CITYSHARE_HOUSE SET COMP_ID=#{shardCityId},DEPT_ID=#{shardCityId},USER_ID = #{newUserId} WHERE USER_ID = #{userId}
		UPDATE FUN_PHONE SET COMP_ID=#{shardCityId},AREA_ID=#{shardCityId},REG_ID=#{shardCityId},DEPT_ID=#{shardCityId},GR_ID=0,USER_ID = #{newUserId} WHERE USER_ID = #{userId}
		UPDATE A SET A.COMP_ID = #{shardCityId},A.DEPT_ID =#{shardCityId} FROM FUN_TRACK A JOIN FUN_SALE B ON A.CASE_ID = B.SALE_ID WHERE A.CASE_TYPE = 1 AND B.USER_ID = #{newUserId}
		UPDATE A SET A.COMP_ID = #{shardCityId},A.DEPT_ID =#{shardCityId} FROM FUN_TRACK A JOIN FUN_LEASE B ON A.CASE_ID = B.LEASE_ID WHERE A.CASE_TYPE = 2 AND B.USER_ID = #{newUserId}
		UPDATE A SET A.COMP_ID = #{shardCityId},A.DEPT_ID =#{shardCityId} FROM FUN_TRACK A JOIN FUN_BUY_CUSTOMER B ON A.CASE_ID = B.BUY_CUST_ID WHERE A.CASE_TYPE = 3 AND B.USER_ID = #{newUserId}
		UPDATE A SET A.COMP_ID = #{shardCityId},A.DEPT_ID =#{shardCityId} FROM FUN_TRACK A JOIN FUN_RENT_CUSTOMER B ON A.CASE_ID = B.RENT_CUST_ID WHERE A.CASE_TYPE = 4 AND B.USER_ID = #{newUserId}
	</update>

	<update id="updateDataForArea">
		update FUN_SALE set AREA_ID = #{areaId} where COMP_ID = #{compId} and REG_ID= #{regId}
		update FUN_LEASE set AREA_ID = #{areaId} where COMP_ID = #{compId} and REG_ID= #{regId}
		update FUN_RENT_CUSTOMER set AREA_ID = #{areaId} where COMP_ID = #{compId} and REG_ID= #{regId}
		update FUN_BUY_CUSTOMER set AREA_ID = #{areaId} where COMP_ID = #{compId} and REG_ID= #{regId}
	</update>

	<select id="getGeneralUserByArchiveId" resultMap="BaseResultMap">
		SELECT top 1 <include refid="Base_Column_List" />
        FROM FUN_USERS WHERE COMP_ID = (SELECT COMP_ID FROM FUN_USERS WHERE ARCHIVE_ID = #{archiveId} AND USER_WRITEOFF = 0 ) AND USER_POSITION ='GENERAL_MANAGER'
	</select>

	<select id="getUserPositionAndLevelDtoByUserId" resultType="com.myfun.erpWeb.managecenter.constract.vo.UserPositionAndLevelDto">
		select DISTINCT A.DEPT_ID deptId,A.ARCHIVE_ID archiveId,A.AREA_ID areaId,A.REG_ID regId,A.GR_ID grId,
		B.ROLE_ID roleId ,B.ROLE_NAME roleName,C.LEVELS_ID levelsId,C.LEVELS_NAME levelsName,A.TISSUE_LINE tissueLine
		from FUN_USERS A
		left join COMP_ROLES B on A.USER_POSITION = B.ROLE_ID and A.COMP_ID = B.COMP_ID
		left join FUN_PERSONNEL_LEVELS C on A.LEVELS_ID = C.LEVELS_ID
		where A.USER_ID = #{userId}
	</select>

	<select id="getFunUsersListByAreaIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where USER_WRITEOFF=0
		<if test="null != areaIds">
			and ARCHIVE_ID IN
			<foreach close=")" collection="areaIds" item="areaId" open=" (" separator=",">
				#{areaId}
			</foreach>
		</if>
	</select>

	<select id="getAuthRoamUserList" resultMap="BaseResultMap">
		select DISTINCT A.USER_ID,A.COMP_ID,A.REG_ID,A.DEPT_ID,A.GR_ID,A.USER_NAME
		FROM FUN_USERS A
		join FUN_USER_MANAGE_RANGE B ON A.USER_ID=B.USER_ID
		WHERE USER_WRITEOFF=0 and A.COMP_ID = #{compId}
	</select>

	<select id="getUserListByShenHe" resultMap="BaseResultMap">
		SELECT USER_ID,USER_NAME,DEPT_ID,WAGE_FLAG,ORGANIZATION_ID
		FROM FUN_USERS
		WHERE USER_STATUS = 1 AND USER_WRITEOFF = 0 AND COMP_ID = #{compId}
		<if test="deptId!=null">
			and DEPT_ID = #{deptId}
		</if>
		order by DEPT_ID, USER_ID
	</select>

	<update id="updateUserFlag">
		update FUN_USERS set WAGE_FLAG = 0 ,UPDATE_TIME = GETDATE()
		where COMP_ID = #{compId} and WAGE_FLAG = 1
	</update>

	<update id="updateShenheUserFlag">
		update FUN_USERS set WAGE_FLAG = 1 ,UPDATE_TIME = GETDATE()
		where COMP_ID = #{compId} and USER_ID in
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
	</update>

	<select id="getUserCountByRangeId" resultType="java.lang.Integer">
		SELECT COUNT(1)
		FROM FUN_USERS
		where COMP_ID = #{compId}
		AND USER_WRITEOFF = 0
		<if test="null != areaId">
			AND AREA_ID = #{areaId}
		</if>
		<if test="null != deptId">
			AND DEPT_ID = #{deptId}
		</if>
		<if test="null != regId">
			AND REG_ID = #{regId}
		</if>
		<if test="null != param.grId">
			AND GR_ID = #{grId}
		</if>
	</select>

	<select id="getFunUsersDtoListWriteOff" resultMap="BaseDtoResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		where COMP_ID = #{param.compId} AND (USER_WRITEOFF = 0  or (USER_WRITEOFF=1 AND WRITEOFF_TIME&gt;#{param.writeoffTime}))
		<if test="null != param.areaId">
			AND AREA_ID = #{param.areaId}
		</if>
		<if test="null != param.deptId">
			AND DEPT_ID = #{param.deptId}
		</if>
		<if test="null != param.regId">
			AND REG_ID = #{param.regId}
		</if>
		<if test="null != param.grId">
			AND GR_ID = #{param.grId}
		</if>
		<if test="param.userPosition!=null and param.userPosition!=''">
			and USER_POSITION = #{param.userPosition}
		</if>
		<if test="param.userId!=null">
			and USER_ID = #{param.userId}
		</if>
	</select>

	<select id="getFunUsersListByCompId" resultMap="BaseDtoResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where COMP_ID = #{compId}
	</select>

	<select id="getFunUsersByMobile" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" />
        FROM FUN_USERS WHERE  USER_MOBILE=#{userMobile} and USER_WRITEOFF = 0
	</select>

	<select id="getInvoiceList" resultMap="DtoBaseResultMap">
		SELECT
		<choose>
			<when test="2 == invoiceType">
				DISTINCT E.INVOICE_ID,CASE WHEN E.INVOICE_STATUS=1 THEN 100 ELSE 1000 END as ORDER_FIELD,E.INVOICE_TYPE,E.INVOICE_HEADER,E.CREATION_TIME,E.INVOICE_STATUS,E.CONSUMPTION_AMOUNT as AMOUNT
			</when>
			<otherwise>
				DISTINCT A.HAS_RECEIPT,A.PADI_TIME,A.PAID_ID,C.DEPT_CNAME as DEPT_NAME,E.INVOICE_ID,B.PT_TYPE,A.ARCHIVE_ID,A.AMOUNT,A.PAID_TYPE
			</otherwise>
		</choose>
		FROM hft_admindb.dbo.FUN_PAID A 
		left join hft_admindb.dbo.CRM_PAYMENT_TASKS B 
		on B.pt_id=A.pt_id AND A.AMOUNT&gt;0 
		left join hft_admindb.dbo.FUN_DEPTS C ON B.DEPT_ID = C.DEPT_ID 
		left join hft_admindb.dbo.FUN_PAID_INVOICERELATIVE D ON A.PAID_ID = D.PAID_ID AND A.AMOUNT&gt;0 
		left JOIN hft_admindb.dbo.FUN_ISSUE_INVOICE E on D.INVOICE_ID = E.INVOICE_ID 
		<where>
			<choose>
				<when test="2 == invoiceType">
					<choose>
						<when test="generalManagerFlag">
							<include refid="getConditionManager" />
						</when>
						<otherwise>
							AND E.ARCHIVE_ID = #{shardArchiveId}
						</otherwise>
					</choose>
					AND E.INVOICE_ID IS NOT NULL AND E.INVOICE_STATUS != 6
				</when>
				<otherwise>
					<choose>
						<when test="generalManagerFlag">
							<include refid="getConditionManager" />
						</when>
						<otherwise>
							AND A.ARCHIVE_ID = #{shardArchiveId} AND A.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV')
						</otherwise>
					</choose>
					AND ((E.INVOICE_ID IS NULL OR E.INVOICE_STATUS = 6) OR (E.INVOICE_ID &gt;0 AND A.HAS_RECEIPT = 1 AND E.INVOICE_TYPE = 2))
					<if test="null != padiTimeStart">
						AND A.PADI_TIME &gt;= #{padiTimeStart}
					</if>
				</otherwise>
			</choose>
		</where>
		<choose>
			<when test="2 == invoiceType">
				ORDER BY CASE WHEN E.INVOICE_STATUS=1 THEN 100 ELSE 1000 END ,E.CREATION_TIME DESC
			</when>
			<otherwise>
				ORDER BY A.PADI_TIME DESC
			</otherwise>
		</choose>
	</select>

	<sql id="getConditionManager">
		(( A.ARCHIVE_ID IN (SELECT ARCHIVE_ID FROM FUN_USERS F WHERE F.USER_WRITEOFF = 0 AND F.COMP_ID = #{compId} AND F.ARCHIVE_ID != #{shardArchiveId})
		AND A.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT', 'DEPT_RENT'))
		OR (A.ARCHIVE_ID = #{shardArchiveId} and A.PAID_TYPE IN ('O2O','UPGRADE_SRV','PAY_WEIXIN','BUYDEPT','SRV', 'DEPT_RENT')))
	</sql>

	<update id="updatesBuildRuleFalg">
		update FUN_USERS set BUILD_RULE_FLAG = 0 ,UPDATE_TIME = GETDATE()
		where BUILD_RULE_FLAG = 1 and COMP_ID = #{compId} and DEPT_ID in
		<foreach close=")" collection="deptIds" item="deptId" open="(" separator=",">
			#{deptId}
		</foreach>
	</update>

	<update id="updatesBuildRuleFalgByUserId">
		update FUN_USERS set BUILD_RULE_FLAG = 1 ,UPDATE_TIME = GETDATE()
		where COMP_ID = #{compId} and USER_ID in
		<foreach close=")" collection="userIds" item="userId" open="(" separator=",">
			#{userId}
		</foreach>
	</update>

	<select id="getUserInfoByArchiveId" resultMap="BaseResultMap">
		SELECT TOP 1
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE ARCHIVE_ID= #{archiveId} AND USER_WRITEOFF = 0
	</select>
	<select id="countUserByArea" resultType="java.util.Map">
		SELECT u.area_id areaId,isnull(count(u.user_id),0) count from FUN_USERS u
		join fun_area a ON u.area_id = a.area_id
		join fun_depts d on u.dept_id = d.dept_id and d.IS_HEADQUARTERS != 1  where u.user_writeoff=0
        AND u.comp_id = #{compId}
        GROUP BY u.area_id
	</select>
	<select id="countUserByRegion" resultType="java.util.Map">
        select u.reg_id regId,isnull(count(u.user_id),0) count from fun_users u
        join FUN_REGION r on u.reg_id = r.reg_id
        join fun_depts d on u.dept_id = d.dept_id and d.IS_HEADQUARTERS != 1
        where  user_writeoff=0
        <if test="null != compId">AND u.comp_id = #{compId}</if>
        <if test="null != areaId">AND u.area_id = #{areaId}</if>
        GROUP BY u.reg_id

    </select>
	<select id="countUserByDept" resultType="java.util.Map">
		select isnull(count(1), 0) count, u.DEPT_ID deptId
		from fun_users u  join  fun_depts d ON  u.dept_id = d.dept_id and d.IS_HEADQUARTERS = #{isHeadquarters}
		where u.comp_id=#{compId}
		<if test="null != regId">AND u.REG_ID = #{regId}</if>
		and u.user_writeoff=0
		GROUP BY u.DEPT_ID
	</select>

	<select id="countUserByGroup" resultType="java.util.Map">
		select isnull(count(1), 0) count, GR_ID grId
		from fun_users
		where comp_id=#{compId}
		<if test="null != deptId">AND DEPT_ID = #{deptId}</if>
		and user_writeoff=0
		GROUP BY GR_ID
	</select>

	<select id="countFunUsers" resultType="java.lang.Integer">
		select count(*)
		from fun_users
		where COMP_ID = #{compId} and USER_WRITEOFF = 0 and USER_POSITION = #{roleId}
	</select>


	<select id="getSpecifiedTimeUserList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE COMP_ID = #{compId}
		<choose>
			<when test="rangeType == 5">and DEPT_ID=#{deptId}</when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		= #{rangeId}
		AND (USER_WRITEOFF = 0 OR (USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{startTime}))
	</select>

	<select id="selectUserListRank" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" /> from fun_users
		where  COMP_ID = #{compId}  and GR_ID=#{grId}
      <if test="null != deptId ">
        and DEPT_ID=#{deptId}
      </if>
		AND ( USER_WRITEOFF = 0
		<if test="null != writeoffTime and writeoffTime != ''">
			OR ( USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{writeoffTime})
		</if>
		)
	</select>

	<select id="getDeptUngroupUsers" resultMap="BaseResultMap">
		select USER_ID from fun_users
		where  COMP_ID = #{compId} and DEPT_ID=#{deptId} and GR_ID=0
		AND ( USER_WRITEOFF = 0
		<if test="null != writeoffTime and writeoffTime != ''">
			OR ( USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{writeoffTime})
		</if>
		)
	</select>

	<select id="getCountUsersByDeptIds" resultMap="BaseDtoResultMap">
		SELECT COUNT(1) AS COUNT_USERS,DEPT_ID FROM FUN_USERS
		WHERE COMP_ID = #{compId} and USER_WRITEOFF = 0 AND
		DEPT_ID IN
		<foreach close=")" collection="deptIds" index="index" item="deptId" open="(" separator=",">
			#{deptId}
		</foreach>
		GROUP BY DEPT_ID
		ORDER BY COUNT_USERS DESC
	</select>

	<select id="getUserListByRangeColumn" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE COMP_ID =#{compId} AND  ${rangeColumn} IN (${rangeIds}) AND USER_WRITEOFF=0
	</select>

	<!-- 总经理查询经纪人账户数 -->
	<select id="getAgentOnlineCount" resultType="java.lang.Integer">
		SELECT COUNT(1) count
		FROM FUN_USERS
		WHERE COMP_ID = #{compId}
		and USER_WRITEOFF = 0
		<if test="null != roleIds">
			and USER_POSITION NOT IN
				<foreach close=")" collection="roleIds" index="index" item="roleId" open="(" separator=",">
					#{roleId}
				</foreach>
		</if>
	</select>
	<select id="countUserNumberForRentDept" resultType="java.lang.Integer">
       select count(user_id) from fun_users where dept_id=#{deptId} and USER_WRITEOFF = 0 and user_position not in ('GENERAL_MANAGER', 'COMMON_ADMIN')
    </select>

	<select id="getUserCountByRangeIdAndColumn" resultType="java.lang.Integer">
		SELECT COUNT(1) FROM FUN_USERS WHERE  COMP_ID = #{compId} AND ${rangeColumn} IN (${rangeIds}) AND USER_WRITEOFF =0
	</select>

    <select id="getCountUsersByCompId" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM FUN_USERS
        WHERE COMP_ID = #{compId} and USER_WRITEOFF = 0
    </select>

	<select id="getUsersByGrIds" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE COMP_ID =#{compId} AND DEPT_ID = #{deptId} AND USER_WRITEOFF=0
		AND GR_ID IN
		<foreach close=")" collection="grIds" index="index" item="grId" open="(" separator=",">
			#{grId}
		</foreach>
	</select>
  <select id="getArchiveIdListByDeptNo" resultType="java.lang.Integer">
    select archive_id from fun_users a
    join fun_depts b on a.dept_id = b.dept_id and a.comp_id = b.comp_id
    where user_writeoff=0 and b.comp_no=#{shardCompNo}
    <if test="null != deptNo and ''!=deptNo">
      and dept_no=#{deptNo}
    </if>
    <if test="isPartner">
     and a.PARTNER_ID=#{partnerId}
    </if>
  </select>

  <select id="getUsersByOrganization" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from  FUN_USERS WHERE COMP_ID = #{compId} and CITY_ID = #{shardCityId} and USER_WRITEOFF = 0
    <if test="areaId != null">
      AND AREA_ID = #{areaId}
    </if>
    <if test="regId != null">
      AND REG_ID = #{regId}
    </if>
    <if test="deptId != null">
      AND DEPT_ID = #{deptId}
    </if>
    <if test="grId != null">
      AND GR_ID = #{grId}
    </if>
    <if test="userPosition != null and userPosition != ''">
      AND USER_POSITION = #{userPosition}
    </if>
  </select>
  
  
  <select id="selectAllUserArchiveId" resultMap="BaseResultMap">
  	select ARCHIVE_ID from FUN_USERS where COMP_ID = #{compId} and USER_WRITEOFF = 0
  </select>
  
  <select id="countByRangeIds" resultType="java.lang.Integer">
  	select count(*) from FUN_USERS
  	WHERE COMP_ID=#{compId} and USER_WRITEOFF = 0 and
  	<choose>
      <when test="manageRangeRangeType == 1">COMP_ID </when>
      <when test="manageRangeRangeType == 2">AREA_ID </when>
      <when test="manageRangeRangeType == 3">REG_ID </when>
      <when test="manageRangeRangeType == 4">DEPT_ID </when>
      <when test="manageRangeRangeType == 5">GR_ID </when>
      <when test="manageRangeRangeType == 6">USER_ID </when>
    </choose>
    IN
    <foreach close=")" collection="userManageRangeIds" item="userManageRangeId" open="(" separator=",">
      #{userManageRangeId}
    </foreach>
  </select>
  <select id="getUsersCountOffRangeList" resultMap="BaseDtoResultMap">
    SELECT COUNT(1) AS userCount FROM FUN_USERS
    WHERE ${rangeColumn} = #{rangeList}
    <choose>
      <when test="null != startDate and startDate != ''">
          AND ( USER_WRITEOFF = 0 OR ( USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{startDate}))
      </when>
      <otherwise>
        AND  USER_WRITEOFF = 0
      </otherwise>
    </choose>
  </select>
  <select id="getUserListByStringUserIds" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List" />
    FROM  FUN_USERS  WHERE  USER_WRITEOFF = 0
    <choose>
    <when test="null != userIds and userIds.size() &gt; 0">
      and user_id IN
      <foreach close=")" collection="userIds" item="userId" open="(" separator=",">
        #{userId}
      </foreach>
    </when>
     <otherwise>
       1 != 1
     </otherwise>
    </choose>
  </select>
  <select id="getUserListBySearchRang" resultMap="BaseResultMap">
    SELECT  DEPT_ID,GR_ID,USER_ID
    FROM FUN_USERS
    WHERE  (
    COMP_ID = #{param.compId} and
    USER_WRITEOFF = 0
    <choose>
      <when test="param.level == 2">and AREA_ID = #{param.searchRangeId}  </when>
      <when test="param.level == 3">and REG_ID = #{param.searchRangeId}  </when>
      <when test="param.level == 4">and DEPT_ID = #{param.searchRangeId}  </when>
      <when test="param.level == 5">and GR_ID = #{param.searchRangeId}  </when>
      <when test="param.level == 6">and ARCHIVE_ID = #{param.searchRangeId}   </when>
    </choose>
    ) or (COMP_ID = #{param.compId} and USER_WRITEOFF = 1
      <choose>
          <when test="param.level == 2">and AREA_ID = #{param.searchRangeId}  </when>
          <when test="param.level == 3">and REG_ID = #{param.searchRangeId}  </when>
          <when test="param.level == 4">and DEPT_ID = #{param.searchRangeId}  </when>
          <when test="param.level == 5">and GR_ID = #{param.searchRangeId}  </when>
          <when test="param.level == 6">and ARCHIVE_ID = #{param.searchRangeId}   </when>
      </choose>
      and WRITEOFF_TIME &gt;= #{param.startTime} and WRITEOFF_TIME &lt;= GETDATE())
    GROUP BY DEPT_ID,GR_ID,USER_ID
    ORDER BY DEPT_ID,GR_ID,USER_ID DESC
  </select>

  <select id="getGeneralUser" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS WHERE  COMP_ID = #{compId} AND USER_WRITEOFF = 0 AND USER_POSITION ='GENERAL_MANAGER'
  </select>

  <select id="countByRoleId" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM FUN_USERS WHERE COMP_ID = #{compId} AND DEPT_ID = #{deptId} AND USER_WRITEOFF = 0 AND USER_POSITION =#{roleId}
  </select>
  
  <select id="getAllUserName" resultMap="BaseResultMap">
  	SELECT COMP_ID, DEPT_ID, GR_ID, USER_ID, USER_NAME 
  	FROM FUN_USERS 
  	WHERE  (COMP_ID = #{compId} AND USER_WRITEOFF = 0) 
  	OR (COMP_ID = #{compId} AND USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{startTime} AND WRITEOFF_TIME &lt;= GETDATE())
  </select>
  
  <select id="getAuditList" resultType="java.lang.Integer">
  	SELECT A.ARCHIVE_ID FROM FUN_USERS A 
	JOIN FUN_USER_MANAGE_RANGE B ON A.USER_ID = B.USER_ID AND RANGE_TYPE= #{rangeType} AND RANGE_ID=#{grId}
	JOIN USER_OPERS B ON B.USER_ID = A.USER_ID AND B.OPER_ID=#{operId}
  </select>
  
    <select id="selectByUserNameExample" parameterType="com.myfun.repository.erpdb.po.ErpFunUsersExample" resultMap="BaseResultMap">
    SELECT
     USER_ID,USER_NAME
    FROM FUN_USERS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  
  
    <select id="getCompUserRole" resultType="com.myfun.erpWeb.managecenter.sysmanager.vo.GetCompNotInviteUserRoleVo">
  	SELECT USER_POSITION userPosition,USER_NAME userName,USER_ID userId FROM dbo.FUN_USERS
		WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0
  </select>
  <select id="getAllCompUser" resultType="com.myfun.erpWeb.managecenter.sysmanager.vo.GetAllCompUserVo">
  		SELECT DEPT_ID deptId,GR_ID grId,USER_POSITION userPosition,USER_NAME userName,USER_ID userId FROM dbo.FUN_USERS
		WHERE USER_WRITEOFF = 0  AND COMP_ID = #{compId} AND USER_POSITION NOT IN ('GENERAL_MANAGER','COMMON_ADMIN','${roleId}') AND USER_NAME LIKE '%${userName}%'
  </select>
  
  <select id="getTeamNum" resultType="java.lang.Integer">
  	SELECT COUNT(*) FROM FUN_USERS WHERE   TISSUE_LINE LIKE '%:${userId}:%' AND USER_LEVEL &lt;= #{userLevel}
  </select>
  
  <update id="updateAssessment">
  	UPDATE FUN_USERS SET D_ASSESSMENT_FLAG = #{assessmentFlag},D_ASSESSMENT_TIME = #{assessmentTime} WHERE USER_ID = #{userId}
  </update>
  
  <select id="getDeptNameByUserIds" resultType="com.myfun.erpWeb.managecenter.transaction.vo.ErpUserDeptNameVo">
  	select A.USER_ID userId,B.DEPT_NAME deptName FROM 
  	FUN_USERS A 
  	LEFT JOIN FUN_DEPTS B ON A.DEPT_ID=B.DEPT_ID
  	WHERE A.COMP_ID = #{compId}
  	<choose>
	  	<when test="null != userIdList and userIdList.size() &gt; 0">
	      and A.USER_ID IN
	      <foreach close=")" collection="userIdList" item="userId" open="(" separator=",">
	        #{userId}
	      </foreach>
	    </when>
    </choose>
  </select>
  <select id="getAuditGroupList" resultType="java.lang.Integer">
    SELECT A.ARCHIVE_ID FROM FUN_USERS A
    JOIN USER_OPERS B ON B.USER_ID = A.USER_ID AND B.OPER_ID=#{operId}  AND A.COMP_ID = #{compId} AND A.GR_ID = #{grId}
  </select>
  <select id="getAuditDeptList" resultType="java.lang.Integer">
    SELECT A.ARCHIVE_ID FROM FUN_USERS A
    JOIN USER_OPERS B ON B.USER_ID = A.USER_ID AND B.OPER_ID=#{operId}  AND A.COMP_ID = #{compId} AND A.DEPT_ID = #{deptId}
  </select>
  <select id="getAuditAreaList" resultType="java.lang.Integer">
    SELECT A.ARCHIVE_ID FROM FUN_USERS A
    JOIN USER_OPERS B ON B.USER_ID = A.USER_ID AND B.OPER_ID=#{operId}  AND A.COMP_ID = #{compId} AND A.AREA_ID = #{areaId}
  </select>
  <select id="getAuditRegList" resultType="java.lang.Integer">
    SELECT A.ARCHIVE_ID FROM FUN_USERS A
    JOIN USER_OPERS B ON B.USER_ID = A.USER_ID AND B.OPER_ID=#{operId}  AND A.COMP_ID = #{compId} AND A.REG_ID = #{regId}
  </select>
  <select id="getAuditCompList" resultType="java.lang.Integer">
    SELECT A.ARCHIVE_ID FROM FUN_USERS A
    JOIN USER_OPERS B ON B.USER_ID = A.USER_ID AND B.OPER_ID=#{operId}  AND A.COMP_ID = #{compId}
  </select>
  
  <select id="getUserTeamList" resultType="com.myfun.erpWeb.managecenter.profit.vo.AssessRoleCountDataVo">
 	 SELECT ARCHIVE_ID archiveId, USER_ID userId, USER_NAME userName, USER_POSITION roleId, CURRENT_P_ID recommendUserId, 
 	 CREATION_TIME registerDate, USER_TEAM_NUMBER teamPeopleReach
  	 FROM FUN_USERS 
  	 WHERE COMP_ID = #{paramData.compId} AND USER_WRITEOFF = 0 
  	 <if test="paramData.userId != null ">
  	 	AND TISSUE_LINE LIKE '%:${paramData.userId}:%'
  	 </if>
  	 
  	 <if test="paramData.userLevel != null ">
  	 	AND USER_LEVEL &lt;= #{paramData.userLevel}
  	 </if>
  	 <if test="userIdData !=null">
  	 	AND USER_ID = #{userIdData}
  	 </if>
  	 ORDER BY CREATION_TIME DESC 
  </select>
  
   <select id="getAllCompUserIds" resultType="java.lang.Integer">
  	SELECT USER_ID FROM FUN_USERS WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0
  </select>
  <select id="getFunUserByUserLevelAndTissueLine" resultType="java.lang.Integer">
  	SELECT USER_ID FROM FUN_USERS WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0 AND USER_LEVEL &lt;= #{userLevel} AND TISSUE_LINE LIKE '%:${userId}:%'
  </select>

  <update id="updateChangeUserRoleProccess">
    update FUN_USERS set USER_POSITION = #{roleId}, ROLE_LEVEL_ID = null, ALLDEPT_FLAG = 0, USER_LOGTIME = getdate(), UPDATE_TIME = getdate() where COMP_ID = #{compId} and USER_ID = #{userId}
  </update>
  
  <select id="selectUserListByIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS where comp_id = #{compId}
    <if test="ids != null and ids.size&gt;0">
      and user_id in
      <foreach close=")" collection="ids" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
    and USER_WRITEOFF = 0
  </select>
  <select id="selectUserListByArchiveIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS where comp_id = #{compId}
    <if test="ids != null and ids.size&gt;0">
      and ARCHIVE_ID in
      <foreach close=")" collection="ids" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
    and USER_WRITEOFF = 0
  </select>
  
  <select id="selectUserListByUserName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_USERS where comp_id = #{compId}
    <if test="names != null and names.size&gt;0">
      and USER_NAME in
      <foreach close=")" collection="names" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
    and USER_WRITEOFF = 0
  </select>
  
  <select id="getUserAllTeamList" resultMap="BaseResultMap">
  	SELECT TOP 1500 ARCHIVE_ID FROM FUN_USERS WHERE 
  	COMP_ID = #{compId} AND  TISSUE_LINE LIKE '%:${userId}:%' 
  	<if test="userLevel !=null">
  		AND USER_LEVEL &lt;= #{userLevel}
  	</if>
  </select>
  <select id="getObtainingTheNumberOfInServiceSeparations" resultType="java.util.Map">
    SELECT SUM(iif(A.USER_WRITEOFF=0,1,0)) working,SUM(iif(A.USER_WRITEOFF=1 AND A.WRITEOFF_TYPE=0 ,1,0)) leave
    FROM FUN_USERS A JOIN FUN_EMPLOYEE_DOC D ON A.USER_ID = D.USER_ID
    where A.COMP_ID=#{compId} AND A.CITY_ID=#{shardCityId}
    <if test="null != headCharacter and headCharacter != ''">
      and A.USER_CODE LIKE #{headCharacter}
    </if>
    <if test="keyWord!=null and keyWord!=''">
      and (A.USER_NAME LIKE CONCAT(CONCAT('%',#{keyWord}),'%') or A.USER_CODE LIKE CONCAT(CONCAT('%',#{keyWord}),'%'))
    </if>
    GROUP BY A.COMP_ID
  </select>
 
  <select id="getUserListByRoleAndRoleLevel" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_USERS
		where USER_WRITEOFF = 0
		and COMP_ID = #{compId}
		and USER_POSITION= #{roleId}
		<choose>
           <when test="roleLevelId != null and roleLevelId &gt; 0">
             and ROLE_LEVEL_ID = #{roleLevelId}
           </when>
           <otherwise>
             and (ROLE_LEVEL_ID is null or ROLE_LEVEL_ID = 0)
           </otherwise>
		</choose>
	</select>
	
	<select id="selectByRoleNotWrriteUserList" resultType="int">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_USERS
    WHERE comp_id=#{compId} and USER_POSITION = #{roleId} and USER_WRITEOFF = 0
  </select>
  <select id="selectUserPartnerInfo" resultType="com.myfun.repository.erpdb.dto.PartnerInfoDto">
    select iif(B.OPEN_PARTNER is null,0,B.OPEN_PARTNER) openPartner,iif(A.PARTNER_ID is null,-1,A.PARTNER_ID) as partnerId
    from  FUN_USERS A
    left join FUN_COMP B on B.COMP_ID = A.COMP_ID
    where A.USER_ID =#{userId} and B.COMP_ID = #{compId} and A.USER_WRITEOFF = 0
    </select>
    
    <select id="countUserByPartnerId" resultType="java.util.Map">
		select isnull(count(1), 0) count, u.DEPT_ID deptId
		from fun_users u  join  fun_depts d ON  u.dept_id = d.dept_id and d.IS_HEADQUARTERS = 0
		where u.comp_id=#{compId}
		AND u.partner_id = #{partnerId}
		and u.user_writeoff=0
		GROUP BY u.DEPT_ID
	</select>

  <resultMap id="BrokerOrganizationVOMap" type="com.myfun.erpWeb.house.vo.BrokerOrganizationVO">
    <id column="USER_ID" jdbcType="INTEGER" property="userId" />
    <id column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="REG_NAME" jdbcType="VARCHAR" property="regName" />
    <result column="DEPT_NAME" jdbcType="VARCHAR" property="deptName" />
    <result column="GR_NAME" jdbcType="VARCHAR" property="grName" />
  </resultMap>
  <select id="selectBrokerOrganizationByUserIds" resultMap="BrokerOrganizationVOMap">
	SELECT USER_ID, ARCHIVE_ID, USER_NAME, DEPT_NAME, GR_NAME, REG_NAME FROM FUN_USERS A 
	LEFT JOIN FUN_REG B ON A.REG_ID =B.REG_ID 
	LEFT JOIN FUN_DEPTS C ON A.DEPT_ID = C.DEPT_ID  
	LEFT JOIN FUN_DEPTSGROUP D ON A .GR_ID = D.GR_ID  
	WHERE A.COMP_ID = #{compId}
	</select>
	
  <select id="getCompPartnerCount" resultType="com.myfun.repository.erpdb.dto.CompPartnerCountVO">
	SELECT count(1) as userCount,PARTNER_ID as partnerId from fun_users 
	WHERE COMP_ID = #{compId} and user_writeoff=0 and PARTNER_ID in
	<foreach close=")" collection="partnerIdList" item="partnerId" open="(" separator=",">
	 #{partnerId}
	</foreach>
	group by PARTNER_ID
	</select>

  <update id="updateOrg1To14ByTissueLine">
  	UPDATE FUN_USERS SET ${updateSql} WHERE USER_ID = #{userId}
  </update>

  <select id="getUserOrgNameByUserIds" resultType="com.myfun.erpWeb.managecenter.constract.vo.FunUserOrgVo">
      select A.USER_ID userId, B.ORGANIZATION_NAME orgName
      from FUN_USER A  LEFT JOIN  FUN_ORGANIZATION B ON  A.ORGANIZATION_ID=B.ORGANIZATION_ID
      where A.COMP_ID=#{compId}
      <foreach close=")" collection="userIdList" item="userId" open="(" separator=",">
        #{userId}
      </foreach>
  </select>
  
  <!-- new Organization -->
  <select id="getUserCountByRangeIdAndColumnNewOrg" resultType="java.lang.Integer">
  	SELECT COUNT(1) FROM FUN_USERS WHERE  COMP_ID = #{compId}  AND USER_WRITEOFF =0
  	<if test="null != rangeIds and rangeIds.size() &gt; 0">
  	    AND
       <foreach close=")" collection="rangeIds" item="orgId" open="(" separator="or">
         TISSUE_LINE LIKE '%:${orgId}:%'
       </foreach>
    </if>
  </select>
  <select id="getArchiveIdSetByCondition" resultType="java.lang.Integer">
  	SELECT ARCHIVE_ID FROM FUN_USERS 
	WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0 
	<if test="isPartner">
		AND PARTNER_ID = #{partnerId}
	</if>
	<if test="null != bulletBound and bulletBound == 1 and null != pubOrganizationId and pubOrganizationId != ''">
		AND TISSUE_LINE LIKE '%:${pubOrganizationId}:%'
	</if>
  </select>
  
	<select id="getUserListByRangeColumnNewOrg" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_USERS
		WHERE COMP_ID =#{compId} AND USER_WRITEOFF=0
		<if test="null != rangeIds and rangeIds.size() &gt; 0">
	  	    AND
	       <foreach close=")" collection="rangeIds" item="orgId" open="(" separator="or">
	         TISSUE_LINE LIKE '%:${orgId}:%'
	       </foreach>
	    </if>
	</select>
	
	<select id="selectUserByOrgDefinitionLevel" resultMap="BaseResultMap">
		select top 500  A.USER_ID, A.CITY_ID, A.COMP_ID, A.REG_ID, A.DEPT_ID, A.GR_ID, A.ARCHIVE_ID, A.USER_NO, A.USER_NAME, A.
	    LOGIN_USERID, A.LOGIN_PASSWORD, A.USER_SEX, A.USER_MOBILE, A.USER_JOB_DATE, A.USER_POSITION, A.
	    USER_STATUS, A.STATUS_TIME, A.USER_WRITEOFF, A.WRITEOFF_TIME, A.WAGE_FLAG, A.BUILD_RULE_FLAG, A.
	    USER_PID, A.USER_LOGTIME, A.USER_EDITION, A.ALLDEPT_FLAG, A.USER_ROAM, A.UPDATE_UID, A.UPDATE_TIME, A.
	    USER_PHOTO_MIN, A.VERTIFY_CODE, A.AREA_ID, A.USER_CODE, A.YOUJIA_PHONE, A.USE_YOUJIA_PHONE, A.
	    DEVELOPER_ADMIN, A.TOPBUILDING_ADMIN, A.PERSONNEL_LEVELS, A.RECRUITMENT_CHANNEL, A.LEVELS_ID, A.
	    CHANNEL_ID, A.WRITEOFF_TYPE, A.APARTMENT_USE_FLAG, A.SALARY_PLAN_MANAGER, A.CREATION_TIME, A.
	    JOIN_DEPT_TIME, A.PROMPT_TIME, A.BESPOKE_MANAGER, A.SUPER_LEADER, A.USER_PHOTO, A.EXPERIENCE_USER, A.
	    PROPERTY_MANAGER, A.USER_SOURCE, A.ROLE_LEVEL_ID, A.INVITE_USER_ID, A.CURRENT_P_ID, A.TISSUE_LINE, A.
	    D_ASSESSMENT_TIME, A.D_ASSESSMENT_FLAG,C.USER_LEVEL as USER_LEVEL, A.WORK_YEAR, A.EMERGENCY_CONTACT, A.USER_TEAM_NUMBER, A.
	    PARTNER_ID, A.ORG_1, A.ORG_2, A.ORG_3, A.ORG_4, A.ORG_5, A.ORG_6, A.ORG_7, A.ORG_8, A.ORG_9, A.ORG_10, A.
	    ORG_11, A.ORG_12, A.ORG_13, A.ORG_14, A.ORGANIZATION_ID from FUN_USERS A left join FUN_ORGANIZATION_MANAGER B ON A.USER_ID= B.USER_ID join 
		(select  C.ORGANIZATION_ID,ROW_NUMBER() OVER(ORDER BY D.DEFINITION_LEVEL desc) AS USER_LEVEL from FUN_ORGANIZATION C  left join FUN_ORGANIZATION_DEFINITION D ON 
		C.ORGANIZATION_DEFINITION_ID = D.DEFINITION_ID where C.COMP_ID = #{compId}    and
		C.ORGANIZATION_ID in 
		<foreach close=")" collection="dealOrgList" item="orgId" open="(" separator=",">
			#{orgId}
		</foreach> ) as C ON B.ORGANIZATION_ID = C.ORGANIZATION_ID
		where A.COMP_ID = #{compId}
		and A.USER_WRITEOFF = 0 and C.USER_LEVEL &gt;= #{defLevel}
		order by C.USER_LEVEL asc
    </select>
    
	<select id="selectUserByOrgDefinitionLevelAndMangeRange" resultMap="BaseResultMap">
		select top 500  C.USER_ID, C.CITY_ID, C.COMP_ID, C.REG_ID, C.DEPT_ID, C.GR_ID, C.ARCHIVE_ID, C.USER_NO, C.USER_NAME, C.LOGIN_USERID,
		 C.LOGIN_PASSWORD, C.USER_SEX, C.USER_MOBILE, C.USER_JOB_DATE, C.USER_POSITION, C.USER_STATUS, C.STATUS_TIME, C.USER_WRITEOFF, 
		 C.WRITEOFF_TIME, C.WAGE_FLAG, C.BUILD_RULE_FLAG, C.USER_PID, C.USER_LOGTIME, C.USER_EDITION, C.ALLDEPT_FLAG, C.USER_ROAM, C.UPDATE_UID,
		  C.UPDATE_TIME, C.USER_PHOTO_MIN, C.VERTIFY_CODE, C.AREA_ID, C.USER_CODE, C.YOUJIA_PHONE, C.USE_YOUJIA_PHONE, C.DEVELOPER_ADMIN, 
		  C.TOPBUILDING_ADMIN, C.PERSONNEL_LEVELS, C.RECRUITMENT_CHANNEL, C.LEVELS_ID, C.CHANNEL_ID, C.WRITEOFF_TYPE, C.APARTMENT_USE_FLAG, 
		  C.SALARY_PLAN_MANAGER, C.CREATION_TIME, C.JOIN_DEPT_TIME, C.PROMPT_TIME, C.BESPOKE_MANAGER, C.SUPER_LEADER, C.USER_PHOTO, C.EXPERIENCE_USER, 
		  C.PROPERTY_MANAGER, C.USER_SOURCE, C.ROLE_LEVEL_ID, C.INVITE_USER_ID, C.CURRENT_P_ID, C.TISSUE_LINE,
		   C.D_ASSESSMENT_TIME, C.D_ASSESSMENT_FLAG,C.USER_LEVEL, C.WORK_YEAR, C.EMERGENCY_CONTACT, 
		   C.USER_TEAM_NUMBER, C.PARTNER_ID, C.ORG_1, C.ORG_2, C.ORG_3, C.ORG_4, C.ORG_5, C.ORG_6, C.ORG_7, C.ORG_8, C.ORG_9, C.ORG_10, C.ORG_11, C.ORG_12, C.ORG_13, C.ORG_14, C.ORGANIZATION_ID from (
		select  A.USER_ID, A.CITY_ID, A.COMP_ID, A.REG_ID, A.DEPT_ID, A.GR_ID, A.ARCHIVE_ID, A.USER_NO, A.USER_NAME, A.LOGIN_USERID,
		 A.LOGIN_PASSWORD, A.USER_SEX, A.USER_MOBILE, A.USER_JOB_DATE, A.USER_POSITION, A.USER_STATUS, A.STATUS_TIME, A.USER_WRITEOFF, 
		 A.WRITEOFF_TIME, A.WAGE_FLAG, A.BUILD_RULE_FLAG, A.USER_PID, A.USER_LOGTIME, A.USER_EDITION, A.ALLDEPT_FLAG, A.USER_ROAM, A.UPDATE_UID,
		  A.UPDATE_TIME, A.USER_PHOTO_MIN, A.VERTIFY_CODE, A.AREA_ID, A.USER_CODE, A.YOUJIA_PHONE, A.USE_YOUJIA_PHONE, A.DEVELOPER_ADMIN, 
		  A.TOPBUILDING_ADMIN, A.PERSONNEL_LEVELS, A.RECRUITMENT_CHANNEL, A.LEVELS_ID, A.CHANNEL_ID, A.WRITEOFF_TYPE, A.APARTMENT_USE_FLAG, 
		  A.SALARY_PLAN_MANAGER, A.CREATION_TIME, A.JOIN_DEPT_TIME, A.PROMPT_TIME, A.BESPOKE_MANAGER, A.SUPER_LEADER, A.USER_PHOTO, A.EXPERIENCE_USER, 
		  A.PROPERTY_MANAGER, A.USER_SOURCE, A.ROLE_LEVEL_ID, A.INVITE_USER_ID, A.CURRENT_P_ID, A.TISSUE_LINE,
		   A.D_ASSESSMENT_TIME, A.D_ASSESSMENT_FLAG,D.DEFINITION_LEVEL as USER_LEVEL, A.WORK_YEAR, A.EMERGENCY_CONTACT, 
		   A.USER_TEAM_NUMBER, A.PARTNER_ID, A.ORG_1, A.ORG_2, A.ORG_3, A.ORG_4, A.ORG_5, A.ORG_6, A.ORG_7, A.ORG_8, A.ORG_9, A.ORG_10, A.ORG_11, A.ORG_12, A.ORG_13, A.ORG_14, A.ORGANIZATION_ID
				 from FUN_USERS A left join FUN_USER_MANAGE_RANGE B ON A.USER_ID = B.USER_ID 
				 LEFT JOIN FUN_ORGANIZATION C ON B.RANGE_ID = C.ORGANIZATION_ID AND B.RANGE_ID&gt;0 
				 left join FUN_ORGANIZATION_DEFINITION D ON C.ORGANIZATION_DEFINITION_ID = D.DEFINITION_ID 
				 where A.COMP_ID = #{compId} and A.USER_WRITEOFF = 0 and B.RANGE_ID in 
				 <foreach close=")" collection="dealOrgList" item="orgId" open="(" separator=",">
						#{orgId}
				</foreach> 
				and A.USER_POSITION = #{roleId} and D.DEFINITION_LEVEL&gt;0
				UNION select A.USER_ID, A.CITY_ID, A.COMP_ID, A.REG_ID, A.DEPT_ID, A.GR_ID, A.ARCHIVE_ID, A.USER_NO, A.USER_NAME, A.LOGIN_USERID,
		 A.LOGIN_PASSWORD, A.USER_SEX, A.USER_MOBILE, A.USER_JOB_DATE, A.USER_POSITION, A.USER_STATUS, A.STATUS_TIME, A.USER_WRITEOFF, 
		 A.WRITEOFF_TIME, A.WAGE_FLAG, A.BUILD_RULE_FLAG, A.USER_PID, A.USER_LOGTIME, A.USER_EDITION, A.ALLDEPT_FLAG, A.USER_ROAM, A.UPDATE_UID,
		  A.UPDATE_TIME, A.USER_PHOTO_MIN, A.VERTIFY_CODE, A.AREA_ID, A.USER_CODE, A.YOUJIA_PHONE, A.USE_YOUJIA_PHONE, A.DEVELOPER_ADMIN, 
		  A.TOPBUILDING_ADMIN, A.PERSONNEL_LEVELS, A.RECRUITMENT_CHANNEL, A.LEVELS_ID, A.CHANNEL_ID, A.WRITEOFF_TYPE, A.APARTMENT_USE_FLAG, 
		  A.SALARY_PLAN_MANAGER, A.CREATION_TIME, A.JOIN_DEPT_TIME, A.PROMPT_TIME, A.BESPOKE_MANAGER, A.SUPER_LEADER, A.USER_PHOTO, A.EXPERIENCE_USER, 
		  A.PROPERTY_MANAGER, A.USER_SOURCE, A.ROLE_LEVEL_ID, A.INVITE_USER_ID, A.CURRENT_P_ID, A.TISSUE_LINE,
		   A.D_ASSESSMENT_TIME, A.D_ASSESSMENT_FLAG,0 as USER_LEVEL, A.WORK_YEAR, A.EMERGENCY_CONTACT, 
		   A.USER_TEAM_NUMBER, A.PARTNER_ID, A.ORG_1, A.ORG_2, A.ORG_3, A.ORG_4, A.ORG_5, A.ORG_6, A.ORG_7, A.ORG_8, A.ORG_9, A.ORG_10, A.ORG_11, A.ORG_12, A.ORG_13, A.ORG_14, A.ORGANIZATION_ID
				 from FUN_USERS A  join FUN_USER_MANAGE_RANGE B ON A.USER_ID = B.USER_ID AND B.RANGE_ID =0 where A.COMP_ID = #{compId}  and A.USER_POSITION = #{roleId} and  A.USER_WRITEOFF = 0 ) C ORDER BY C.USER_LEVEL DESC	
    </select>

  <select id="selectByOrg" resultType="java.util.Map">
    SELECT A.USER_ID AS range FROM FUN_USERS A join COMP_ROLES B on A.COMP_ID = B.COMP_ID and A.USER_POSITION=B.ROLE_ID and B.PART_STATIST_COUNT=1
    WHERE A.COMP_ID=#{compId} AND A.USER_WRITEOFF=0
    <if test="null != rangeColumn and '' != rangeColumn">
      AND A.${rangeColumn} = #{rangeId}
    </if>
  </select>

  <select id="selectByDynamicOrg" resultType="java.lang.Integer">
    SELECT ${mappingDbField} FROM dbo.FUN_USERS WHERE USER_ID = #{userId}
  </select>


  <select id="selectMLUserInfoByUserId" resultType="com.myfun.repository.erpdb.dto.PartnerInfoDto">
    select iif(B.OPEN_PARTNER is null,0,B.BUSINESS_APART) businessApart,A.ORGANIZATION_ID as organizationId
    from  FUN_USERS A
    left join FUN_COMP B on B.COMP_ID = A.COMP_ID
    where A.USER_ID =#{userId} and A.COMP_ID = #{compId} and A.USER_WRITEOFF = 0
    </select>
    
  <select id="getOrganizationAllUser" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List" /> FROM dbo.FUN_USERS WHERE TISSUE_LINE LIKE '%:${organizationId}:%' AND COMP_ID = #{compId} AND USER_WRITEOFF = 0
  </select>
  
  <select id="selectUserRoleByUserID" parameterType="java.lang.Integer" resultType="com.myfun.erpWeb.managecenter.userOpers.vo.GetCrossCompUserVO">
  	select a.USER_ID,a.USER_NAME,USER_PHOTO,b.ROLE_NAME,a.COMP_ID,c.COMP_NAME 
  	from FUN_USERS a LEFT JOIN dbo.COMP_ROLES b ON a.USER_POSITION = b.ROLE_ID and a.COMP_ID = b.COMP_ID LEFT JOIN FUN_COMP c ON a.COMP_ID = c.COMP_ID 
  	where USER_ID=#{userId,jdbcType=INTEGER}
  </select>
  <select id="getUserOrganizationInfoByUserIds" resultType="com.myfun.service.business.erpdb.bean.vo.UserOrganizationInfoVO">
	SELECT a.USER_ID as userId, a.USER_NAME as userName, b.ORGANIZATION_ID as organizationId, b.ORGANIZATION_NAME as organizationName, c.COMP_CNAME as compName 
	FROM FUN_USERS a LEFT JOIN FUN_ORGANIZATION b ON a.ORGANIZATION_ID = b.ORGANIZATION_ID 
	LEFT JOIN FUN_COMP c ON a.COMP_ID = c.COMP_ID 
	WHERE USER_ID IN <foreach close=")" collection="userIdList" item="userId" open="(" separator=",">#{userId}</foreach>
  </select>
  <select id="countOrganizationAllUser" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM dbo.FUN_USERS WHERE TISSUE_LINE LIKE '%:${organizationId}:%' AND COMP_ID = #{compId} AND USER_WRITEOFF = 0
  </select>


  <resultMap id="UserByOrganizationIdMap" type="com.myfun.erpWeb.usercenter.vo.GetOrganizationUserVo">
    <id column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="USER_MOBILE" jdbcType="VARCHAR" property="userMobile" />
    <result column="ORGANIZATION_NAME" jdbcType="VARCHAR" property="orgName" />
    <result column="ORGANIZATION_ID" jdbcType="INTEGER" property="organizationId" />
  </resultMap>
  <select id="getUserByOrganizationId" resultMap="UserByOrganizationIdMap">
    SELECT a.USER_ID, a.ARCHIVE_ID, a.USER_NAME, a.USER_MOBILE, b.ORGANIZATION_ID, b.ORGANIZATION_NAME FROM FUN_USERS a LEFT JOIN FUN_ORGANIZATION b ON a.ORGANIZATION_ID = b.ORGANIZATION_ID  WHERE TISSUE_LINE LIKE '%:${organizationId}:%' AND a.COMP_ID = #{compId} AND a.USER_WRITEOFF = 0
  </select>


  <select id="getRecordsByCompIdAndUserNotWriteOff" resultMap="BaseResultMap">
    select
    USER_ID,ARCHIVE_ID,AREA_ID,CITY_ID,COMP_ID,DEPT_ID,GR_ID,PERSONNEL_LEVELS,REG_ID,USER_MOBILE,
    USER_NAME,USER_PHOTO,USER_POSITION,USER_STATUS,WAGE_FLAG,CURRENT_P_ID,USER_LEVEL,ORGANIZATION_ID,TISSUE_LINE
    from FUN_USERS
    where COMP_ID = #{compId} and user_writeoff = #{userWriteOff}
  </select>


  <select id="selectWriteoffUserList" resultType="com.myfun.erpWeb.managecenter.sysmanager.vo.WriteoffUserListVO">
     SELECT A.COMP_ID compId,A.CITY_ID cityId,A.AREA_ID areaId,A.REG_ID regId,A.DEPT_ID deptId,A.GR_ID grId,A.USER_ID userId,A.ARCHIVE_ID archiveId,
      A.PERSONNEL_LEVELS personnelLevels,A.USER_MOBILE userMobile,A.USER_NAME userName,A.USER_PHOTO userPhoto,A.USER_POSITION userPosition,A.USER_STATUS userStatus,A.WAGE_FLAG wageFlag,
      A.CURRENT_P_ID currentPId,A.USER_LEVEL userLevel,A.ORGANIZATION_ID organizationId,
      CONVERT(VARCHAR(10),WRITEOFF_TIME,102) writeoffTime,A.USER_NO userNo,B.ORGANIZATION_NAME organizationName
     FROM dbo.FUN_USERS A LEFT JOIN dbo.FUN_ORGANIZATION B ON A.ORGANIZATION_ID = B.ORGANIZATION_ID
     WHERE A.USER_WRITEOFF = 1 AND A.WRITEOFF_TIME &gt;= #{date} AND A.COMP_ID = #{compId}
      ORDER BY A.WRITEOFF_TIME DESC
  </select>
</mapper>