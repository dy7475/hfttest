<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunTaskTimedMapper" >
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunTaskTimed" >
    <!--@mbggenerated-->
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="COMP_ID" property="compId" jdbcType="INTEGER" />
    <result column="AREA_ID" property="areaId" jdbcType="INTEGER" />
    <result column="REG_ID" property="regId" jdbcType="INTEGER" />
    <result column="DEPT_ID" property="deptId" jdbcType="INTEGER" />
    <result column="GR_ID" property="grId" jdbcType="INTEGER" />
    <result column="USER_ID" property="userId" jdbcType="INTEGER" />
    <result column="ARCHIVE_ID" property="archiveId" jdbcType="INTEGER" />
    <result column="TASK_ID" property="taskId" jdbcType="INTEGER" />
    <result column="TASK_TIME" property="taskTime" jdbcType="TIMESTAMP" />
    <result column="TASK_OWNER" property="taskOwner" jdbcType="INTEGER" />
    <result column="TASK_CREATE" property="taskCreate" jdbcType="INTEGER" />
    <result column="READ_FLAG" property="readFlag" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--@mbggenerated-->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--@mbggenerated-->
    ID, COMP_ID, AREA_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, TASK_ID, TASK_TIME, 
    TASK_OWNER, TASK_CREATE, READ_FLAG
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimedExample" >
    <!--@mbggenerated-->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_TASK_TIMED
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_TASK_TIMED
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--@mbggenerated-->
    delete from FUN_TASK_TIMED
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimedExample" >
    <!--@mbggenerated-->
    delete from FUN_TASK_TIMED
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimed" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_TASK_TIMED (COMP_ID, AREA_ID, REG_ID, 
      DEPT_ID, GR_ID, USER_ID, 
      ARCHIVE_ID, TASK_ID, TASK_TIME, 
      TASK_OWNER, TASK_CREATE, READ_FLAG
      )
    values (#{compId,jdbcType=INTEGER}, #{areaId,jdbcType=INTEGER}, #{regId,jdbcType=INTEGER}, 
      #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{archiveId,jdbcType=INTEGER}, #{taskId,jdbcType=INTEGER}, #{taskTime,jdbcType=TIMESTAMP}, 
      #{taskOwner,jdbcType=INTEGER}, #{taskCreate,jdbcType=INTEGER}, #{readFlag,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimed" useGeneratedKeys="true" keyProperty="id" >
    <!--@mbggenerated-->
    insert into FUN_TASK_TIMED
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="compId != null" >
        COMP_ID,
      </if>
      <if test="areaId != null" >
        AREA_ID,
      </if>
      <if test="regId != null" >
        REG_ID,
      </if>
      <if test="deptId != null" >
        DEPT_ID,
      </if>
      <if test="grId != null" >
        GR_ID,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="archiveId != null" >
        ARCHIVE_ID,
      </if>
      <if test="taskId != null" >
        TASK_ID,
      </if>
      <if test="taskTime != null" >
        TASK_TIME,
      </if>
      <if test="taskOwner != null" >
        TASK_OWNER,
      </if>
      <if test="taskCreate != null" >
        TASK_CREATE,
      </if>
      <if test="readFlag != null" >
        READ_FLAG,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="compId != null" >
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null" >
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null" >
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null" >
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null" >
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="taskId != null" >
        #{taskId,jdbcType=INTEGER},
      </if>
      <if test="taskTime != null" >
        #{taskTime,jdbcType=TIMESTAMP},
      </if>
      <if test="taskOwner != null" >
        #{taskOwner,jdbcType=INTEGER},
      </if>
      <if test="taskCreate != null" >
        #{taskCreate,jdbcType=INTEGER},
      </if>
      <if test="readFlag != null" >
        #{readFlag,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimedExample" resultType="java.lang.Integer" >
    <!--@mbggenerated-->
    select count(*) from FUN_TASK_TIMED
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_TASK_TIMED
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null" >
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null" >
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null" >
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null" >
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null" >
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null" >
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.taskId != null" >
        TASK_ID = #{record.taskId,jdbcType=INTEGER},
      </if>
      <if test="record.taskTime != null" >
        TASK_TIME = #{record.taskTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.taskOwner != null" >
        TASK_OWNER = #{record.taskOwner,jdbcType=INTEGER},
      </if>
      <if test="record.taskCreate != null" >
        TASK_CREATE = #{record.taskCreate,jdbcType=INTEGER},
      </if>
      <if test="record.readFlag != null" >
        READ_FLAG = #{record.readFlag,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--@mbggenerated-->
    update FUN_TASK_TIMED
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      TASK_ID = #{record.taskId,jdbcType=INTEGER},
      TASK_TIME = #{record.taskTime,jdbcType=TIMESTAMP},
      TASK_OWNER = #{record.taskOwner,jdbcType=INTEGER},
      TASK_CREATE = #{record.taskCreate,jdbcType=INTEGER},
      READ_FLAG = #{record.readFlag,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimed" >
    <!--@mbggenerated-->
    update FUN_TASK_TIMED
    <set >
      <if test="compId != null" >
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="areaId != null" >
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null" >
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null" >
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null" >
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="taskId != null" >
        TASK_ID = #{taskId,jdbcType=INTEGER},
      </if>
      <if test="taskTime != null" >
        TASK_TIME = #{taskTime,jdbcType=TIMESTAMP},
      </if>
      <if test="taskOwner != null" >
        TASK_OWNER = #{taskOwner,jdbcType=INTEGER},
      </if>
      <if test="taskCreate != null" >
        TASK_CREATE = #{taskCreate,jdbcType=INTEGER},
      </if>
      <if test="readFlag != null" >
        READ_FLAG = #{readFlag,jdbcType=TINYINT},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunTaskTimed" >
    <!--@mbggenerated-->
    update FUN_TASK_TIMED
    set COMP_ID = #{compId,jdbcType=INTEGER},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      TASK_ID = #{taskId,jdbcType=INTEGER},
      TASK_TIME = #{taskTime,jdbcType=TIMESTAMP},
      TASK_OWNER = #{taskOwner,jdbcType=INTEGER},
      TASK_CREATE = #{taskCreate,jdbcType=INTEGER},
      READ_FLAG = #{readFlag,jdbcType=TINYINT}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <insert id="insertList" >
    insert into FUN_TASK_TIMED (COMP_ID, AREA_ID, REG_ID, 
      DEPT_ID, GR_ID, USER_ID, 
      ARCHIVE_ID, TASK_ID, TASK_TIME, 
      TASK_OWNER, TASK_CREATE, READ_FLAG
      )
    values 
    <foreach collection="list" item="item" separator=",">
	     (
	     #{item.compId,jdbcType=INTEGER}, #{item.areaId,jdbcType=INTEGER}, #{item.regId,jdbcType=INTEGER}, 
	      #{item.deptId,jdbcType=INTEGER}, #{item.grId,jdbcType=INTEGER}, #{item.userId,jdbcType=INTEGER}, 
	      #{item.archiveId,jdbcType=INTEGER}, #{item.taskId,jdbcType=INTEGER}, #{item.taskTime,jdbcType=TIMESTAMP}, 
	      #{item.taskOwner,jdbcType=INTEGER}, #{item.taskCreate,jdbcType=INTEGER}, #{item.readFlag,jdbcType=TINYINT}
	     )
	</foreach>
  </insert>
  <select id="selectTaskTimedUserInfoListByTaskId"  resultType="map" >
    select A.READ_FLAG as isRead,A.ARCHIVE_ID as archiveId,B.USER_NAME as userName,C.DEPT_NAME as deptName from FUN_TASK_TIMED A left join FUN_USERS B ON A.USER_ID = B.USER_ID left join FUN_DEPTS C ON A.DEPT_ID = C.DEPT_ID
    where A.COMP_ID = #{compId} and A.TASK_ID = #{taskId}
  </select>
	
	<update id="updateTaskTimedByCondition">
		update FUN_TASK_TIMED set READ_FLAG = 1
		where COMP_ID = #{param.compId} and USER_ID = #{param.userId}
		<if test="param.operType == 'BAT_TASK'">
			and TASK_ID in
			<foreach collection="param.taskIds" open="(" close=")" item="taskId" separator=",">
				#{taskId}
			</foreach>
		</if>
		<if test="param.operType == 'BAT_USER_TASK'">
			and TASK_TIME &lt;= #{param.warmTime}
		</if>
	</update>
 
</mapper>