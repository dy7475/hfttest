<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunSelfbuildMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunSelfbuild">
    <!--@mbggenerated-->
    <id column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <id column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="BUILD_CODE" jdbcType="VARCHAR" property="buildCode" />
    <result column="ROOFS" jdbcType="INTEGER" property="roofs" />
    <result column="ROOMS" jdbcType="INTEGER" property="rooms" />
    <result column="YET_IN" jdbcType="INTEGER" property="yetIn" />
    <result column="change_sale" jdbcType="INTEGER" property="changeSale" />
    <result column="change_rent" jdbcType="INTEGER" property="changeRent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    COMP_ID, BUILD_ID, BUILD_NAME, BUILD_CODE, ROOFS, ROOMS, YET_IN, change_sale, change_rent
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuildExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from FUN_SELFBUILD
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_SELFBUILD
    where COMP_ID = #{compId,jdbcType=INTEGER}
      and BUILD_ID = #{buildId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    <!--@mbggenerated-->
    delete from FUN_SELFBUILD
    where COMP_ID = #{compId,jdbcType=INTEGER}
      and BUILD_ID = #{buildId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuildExample">
    <!--@mbggenerated-->
    delete from FUN_SELFBUILD
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuild">
    <!--@mbggenerated-->
    insert into FUN_SELFBUILD (COMP_ID, BUILD_ID, BUILD_NAME, 
      BUILD_CODE, ROOFS, ROOMS, 
      YET_IN, change_sale, change_rent
      )
    values (#{compId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, #{buildName,jdbcType=VARCHAR}, 
      #{buildCode,jdbcType=VARCHAR}, #{roofs,jdbcType=INTEGER}, #{rooms,jdbcType=INTEGER}, 
      #{yetIn,jdbcType=INTEGER}, #{changeSale,jdbcType=INTEGER}, #{changeRent,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuild">
    <!--@mbggenerated-->
    insert into FUN_SELFBUILD
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="buildName != null">
        BUILD_NAME,
      </if>
      <if test="buildCode != null">
        BUILD_CODE,
      </if>
      <if test="roofs != null">
        ROOFS,
      </if>
      <if test="rooms != null">
        ROOMS,
      </if>
      <if test="yetIn != null">
        YET_IN,
      </if>
      <if test="changeSale != null">
        change_sale,
      </if>
      <if test="changeRent != null">
        change_rent,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="buildName != null">
        #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="buildCode != null">
        #{buildCode,jdbcType=VARCHAR},
      </if>
      <if test="roofs != null">
        #{roofs,jdbcType=INTEGER},
      </if>
      <if test="rooms != null">
        #{rooms,jdbcType=INTEGER},
      </if>
      <if test="yetIn != null">
        #{yetIn,jdbcType=INTEGER},
      </if>
      <if test="changeSale != null">
        #{changeSale,jdbcType=INTEGER},
      </if>
      <if test="changeRent != null">
        #{changeRent,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuildExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_SELFBUILD
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_SELFBUILD
    <set>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.buildName != null">
        BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      </if>
      <if test="record.buildCode != null">
        BUILD_CODE = #{record.buildCode,jdbcType=VARCHAR},
      </if>
      <if test="record.roofs != null">
        ROOFS = #{record.roofs,jdbcType=INTEGER},
      </if>
      <if test="record.rooms != null">
        ROOMS = #{record.rooms,jdbcType=INTEGER},
      </if>
      <if test="record.yetIn != null">
        YET_IN = #{record.yetIn,jdbcType=INTEGER},
      </if>
      <if test="record.changeSale != null">
        change_sale = #{record.changeSale,jdbcType=INTEGER},
      </if>
      <if test="record.changeRent != null">
        change_rent = #{record.changeRent,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_SELFBUILD
    set COMP_ID = #{record.compId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      BUILD_CODE = #{record.buildCode,jdbcType=VARCHAR},
      ROOFS = #{record.roofs,jdbcType=INTEGER},
      ROOMS = #{record.rooms,jdbcType=INTEGER},
      YET_IN = #{record.yetIn,jdbcType=INTEGER},
      change_sale = #{record.changeSale,jdbcType=INTEGER},
      change_rent = #{record.changeRent,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuild">
    <!--@mbggenerated-->
    update FUN_SELFBUILD
    <set>
      <if test="buildName != null">
        BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="buildCode != null">
        BUILD_CODE = #{buildCode,jdbcType=VARCHAR},
      </if>
      <if test="roofs != null">
        ROOFS = #{roofs,jdbcType=INTEGER},
      </if>
      <if test="rooms != null">
        ROOMS = #{rooms,jdbcType=INTEGER},
      </if>
      <if test="yetIn != null">
        YET_IN = #{yetIn,jdbcType=INTEGER},
      </if>
      <if test="changeSale != null">
        change_sale = #{changeSale,jdbcType=INTEGER},
      </if>
      <if test="changeRent != null">
        change_rent = #{changeRent,jdbcType=INTEGER},
      </if>
    </set>
    where COMP_ID = #{compId,jdbcType=INTEGER}
      and BUILD_ID = #{buildId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunSelfbuild">
    <!--@mbggenerated-->
    update FUN_SELFBUILD
    set BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      BUILD_CODE = #{buildCode,jdbcType=VARCHAR},
      ROOFS = #{roofs,jdbcType=INTEGER},
      ROOMS = #{rooms,jdbcType=INTEGER},
      YET_IN = #{yetIn,jdbcType=INTEGER},
      change_sale = #{changeSale,jdbcType=INTEGER},
      change_rent = #{changeRent,jdbcType=INTEGER}
    where COMP_ID = #{compId,jdbcType=INTEGER}
      and BUILD_ID = #{buildId,jdbcType=INTEGER}
  </update>
	<resultMap extends="BaseResultMap" id="BaseResultDtoMap" type="com.myfun.erpWeb.managecenter.buildData.vo.ErpFunSelfbuildDto">
	</resultMap>
	<delete id="deleteSelfbuildByBuild">
		DELETE A from FUN_SELFBUILD A left join FUN_BUILD_RULE B ON A.BUILD_ID = B.BUILD_ID and A.COMP_ID = B.COMP_ID
		where A.COMP_ID = #{param.compId} and B.BUILD_ID is null
	</delete>

	<select id="getFunSelfBuildList" resultMap="BaseResultDtoMap">
		SELECT BUILD_ID,BUILD_NAME
		FROM FUN_SELFBUILD WHERE COMP_ID = #{compId}
		<if test="buildNameOrCode != null and buildNameOrCode != '' ">
			and ( BUILD_CODE LIKE '%${buildNameOrCode}%' OR BUILD_NAME LIKE '%${buildNameOrCode}%' )
		</if>
		<if test="buildIds != null and buildIds != '' ">
			and BUILD_ID IN (${buildIds})
		</if>
		ORDER BY ${orderBy}
	</select>
	
	<select id="getFunSelfOneByBuildId" resultMap="BaseResultMap">
		select top 1 COMP_ID, BUILD_ID 
		from FUN_SELFBUILD
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
	</select>
	
	<delete id="deleteSelfBuild">
		DELETE A from FUN_SELFBUILD A left join FUN_BUILD_RULE B ON A.BUILD_ID = B.BUILD_ID and A.COMP_ID = B.COMP_ID
		where A.COMP_ID = #{compId} and B.BUILD_ID is null
	</delete>

  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.erpWeb.managecenter.buildData.vo.ErpFunSelfbuildDto">
    <result column="PROMOTION_NAME" jdbcType="VARCHAR" property="promotionName" />
  </resultMap>

  <select id="getFunBuildListByDiffrentOper" resultMap="extBaseResultMap">
    SELECT DISTINCT  A.COMP_ID,A.BUILD_ID,A.BUILD_NAME,A.BUILD_CODE
     FROM  FUN_SELFBUILD A
    <choose>
      <when test="oper == 3">
        JOIN FUN_BUILDRULEQUERYLIMIT B ON  A.COMP_ID = B.COMP_ID AND A.build_id=B.build_id WHERE A.COMP_ID = #{compId} and B.USER_ID = #{userId} and B.END_TIME &gt; #{nowTime}
        <if test="buildNameOrCode != null and buildNameOrCode != '' ">
          and ( A.BUILD_CODE LIKE '%${buildNameOrCode}%' OR A.BUILD_NAME LIKE '%${buildNameOrCode}%' )
        </if>
      </when>
      <when test="oper == 2">
        JOIN Build_allot B ON  A.COMP_ID = B.COMP_ID AND A.build_id=B.build_id WHERE A.COMP_ID = #{compId} and B.dept_id = #{deptId}
        <if test="buildNameOrCode != null and buildNameOrCode != '' ">
          and ( A.BUILD_CODE LIKE '%${buildNameOrCode}%' OR A.BUILD_NAME LIKE '%${buildNameOrCode}%' )
        </if>
      </when>
      <otherwise>
        where A.COMP_ID = #{compId}
        <if test="buildNameOrCode != null and buildNameOrCode != '' ">
          and ( A.BUILD_CODE LIKE '%${buildNameOrCode}%' OR A.BUILD_NAME LIKE '%${buildNameOrCode}%' )
        </if>
      </otherwise>
    </choose>
    order by A.build_id desc
  </select>
  <select id="getFunBuildList" resultMap="extBaseResultMap">
     SELECT  A.COMP_ID,A.BUILD_ID,A.BUILD_NAME,A.BUILD_CODE,A.ROOFS,A.ROOMS,A.YET_IN,A.CHANGE_SALE,A.CHANGE_RENT
      ,B.BUILD_REGION AS regId, B.PROMOTION_NAME 
    FROM  FUN_SELFBUILD A  join BUILDING_INFO B on  A.build_id = B.build_id
    <choose>
      <when test="sectionIdList != null and sectionIdList.size() > 0">
        WHERE  A.COMP_ID = #{compId}  AND A.build_id = #{param.buildId} AND B.SECTION_ID in
        <foreach collection="sectionIdList" item="sectionId" separator="," open="(" close=")" >
          #{sectionId}
        </foreach>
      </when>
      <otherwise>
        WHERE A.COMP_ID = #{compId} and A.build_id = #{param.buildId}
      </otherwise>
    </choose>
    order by A.build_id desc
  </select>

  <select id="getBuildListByDiffrentOper" resultMap="extBaseResultMap">
    SELECT DISTINCT A.COMP_ID,A.BUILD_ID,A.BUILD_NAME,A.BUILD_CODE,A.ROOFS,A.ROOMS,A.YET_IN,A.CHANGE_SALE,A.CHANGE_RENT
     ,C.BUILD_REGION AS regId, C.PROMOTION_NAME 
    FROM  FUN_SELFBUILD A  join BUILDING_INFO C on  A.build_id = C.build_id
    <choose>
      <when test="oper == 2">
        JOIN build_allot B ON  A.COMP_ID = B.COMP_ID AND A.build_id=B.build_id
        WHERE A.COMP_ID = #{compId} and B.dept_id = #{deptId} AND C.CITY_ID = #{shardCityId}
        <if test="sectionIdList != null and sectionIdList.size() > 0">
             and C.SECTION_ID in
            <foreach collection="sectionIdList" item="sectionId" separator="," open="(" close=")" >
              #{sectionId}
            </foreach>
        </if>
      </when>
      <when test="oper == 1">
          where A.COMP_ID = #{compId} AND C.CITY_ID = #{shardCityId}
          <if test="sectionIdList != null and sectionIdList.size() > 0">
             and C.SECTION_ID in
            <foreach collection="sectionIdList" item="sectionId" separator="," open="(" close=")" >
              #{sectionId}
            </foreach>
          </if>
      </when>
      <otherwise>
        where 1 != 1
      </otherwise>
    </choose>
    order by A.build_id desc
  </select>
  <select id="getFunSelfBuildListByBuildIds" resultMap="extBaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM  FUN_SELFBUILD WHERE  COMP_ID = #{compId} and BUILD_ID IN
    <foreach collection="builldList" close=")" open="(" separator="," item="buildId">
      #{buildId}
    </foreach>
  </select>
</mapper>