<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunOutdealMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunOutdeal">
    <!--@mbggenerated-->
    <id column="DEAL_ID" jdbcType="INTEGER" property="dealId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="AGREEMENT_NO" jdbcType="VARCHAR" property="agreementNo" />
    <result column="CREATOR_DATE" jdbcType="VARCHAR" property="creatorDate" />
    <result column="CREATOR_USER_ID" jdbcType="INTEGER" property="creatorUserId" />
    <result column="DEAL_TYPE" jdbcType="TINYINT" property="dealType" />
    <result column="DEAL_STATUS" jdbcType="TINYINT" property="dealStatus" />
    <result column="CASE_ID" jdbcType="INTEGER" property="caseId" />
    <result column="CASE_TYPE" jdbcType="TINYINT" property="caseType" />
    <result column="HOUSE_USEAGE" jdbcType="TINYINT" property="houseUseage" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEAL_TOTAL_PRICE" jdbcType="NUMERIC" property="dealTotalPrice" />
    <result column="DEAL_COMMISSION" jdbcType="NUMERIC" property="dealCommission" />
    <result column="TOTAL_PRICE_UNIT" jdbcType="TINYINT" property="totalPriceUnit" />
    <result column="CASE_CHARACTER" jdbcType="VARCHAR" property="caseCharacter" />
    <result column="CASE_USER" jdbcType="INTEGER" property="caseUser" />
    <result column="CASE_DEAL_TYPE" jdbcType="INTEGER" property="caseDealType" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="ORGANIZATION_PATH" jdbcType="VARCHAR" property="organizationPath" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    DEAL_ID, COMP_ID, DEPT_ID, AGREEMENT_NO, CREATOR_DATE, CREATOR_USER_ID, DEAL_TYPE, 
    DEAL_STATUS, CASE_ID, CASE_TYPE, HOUSE_USEAGE, AREA_ID, REG_ID, DEAL_TOTAL_PRICE, 
    DEAL_COMMISSION, TOTAL_PRICE_UNIT, CASE_CHARACTER, CASE_USER, CASE_DEAL_TYPE, ARCHIVE_ID, 
    GR_ID, ORGANIZATION_PATH
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdealExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_OUTDEAL
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_OUTDEAL
    where DEAL_ID = #{dealId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_OUTDEAL
    where DEAL_ID = #{dealId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdealExample">
    <!--@mbggenerated-->
    delete from FUN_OUTDEAL
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdeal">
    <!--@mbggenerated-->
    <selectKey keyProperty="dealId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_OUTDEAL_DEAL_ID
    </selectKey>
    insert into FUN_OUTDEAL (DEAL_ID, COMP_ID, DEPT_ID, 
      AGREEMENT_NO, CREATOR_DATE, CREATOR_USER_ID, 
      DEAL_TYPE, DEAL_STATUS, CASE_ID, 
      CASE_TYPE, HOUSE_USEAGE, AREA_ID, 
      REG_ID, DEAL_TOTAL_PRICE, DEAL_COMMISSION, 
      TOTAL_PRICE_UNIT, CASE_CHARACTER, CASE_USER, 
      CASE_DEAL_TYPE, ARCHIVE_ID, GR_ID, 
      ORGANIZATION_PATH)
    values (#{dealId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{agreementNo,jdbcType=VARCHAR}, #{creatorDate,jdbcType=VARCHAR}, #{creatorUserId,jdbcType=INTEGER}, 
      #{dealType,jdbcType=TINYINT}, #{dealStatus,jdbcType=TINYINT}, #{caseId,jdbcType=INTEGER}, 
      #{caseType,jdbcType=TINYINT}, #{houseUseage,jdbcType=TINYINT}, #{areaId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{dealTotalPrice,jdbcType=NUMERIC}, #{dealCommission,jdbcType=NUMERIC}, 
      #{totalPriceUnit,jdbcType=TINYINT}, #{caseCharacter,jdbcType=VARCHAR}, #{caseUser,jdbcType=INTEGER}, 
      #{caseDealType,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, 
      #{organizationPath,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdeal">
    <!--@mbggenerated-->
    <selectKey keyProperty="dealId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_OUTDEAL_DEAL_ID
    </selectKey>
    insert into FUN_OUTDEAL
    <trim prefix="(" suffix=")" suffixOverrides=",">
      DEAL_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="agreementNo != null">
        AGREEMENT_NO,
      </if>
      <if test="creatorDate != null">
        CREATOR_DATE,
      </if>
      <if test="creatorUserId != null">
        CREATOR_USER_ID,
      </if>
      <if test="dealType != null">
        DEAL_TYPE,
      </if>
      <if test="dealStatus != null">
        DEAL_STATUS,
      </if>
      <if test="caseId != null">
        CASE_ID,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="houseUseage != null">
        HOUSE_USEAGE,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="dealTotalPrice != null">
        DEAL_TOTAL_PRICE,
      </if>
      <if test="dealCommission != null">
        DEAL_COMMISSION,
      </if>
      <if test="totalPriceUnit != null">
        TOTAL_PRICE_UNIT,
      </if>
      <if test="caseCharacter != null">
        CASE_CHARACTER,
      </if>
      <if test="caseUser != null">
        CASE_USER,
      </if>
      <if test="caseDealType != null">
        CASE_DEAL_TYPE,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="organizationPath != null">
        ORGANIZATION_PATH,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{dealId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="agreementNo != null">
        #{agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="creatorDate != null">
        #{creatorDate,jdbcType=VARCHAR},
      </if>
      <if test="creatorUserId != null">
        #{creatorUserId,jdbcType=INTEGER},
      </if>
      <if test="dealType != null">
        #{dealType,jdbcType=TINYINT},
      </if>
      <if test="dealStatus != null">
        #{dealStatus,jdbcType=TINYINT},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=TINYINT},
      </if>
      <if test="houseUseage != null">
        #{houseUseage,jdbcType=TINYINT},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="dealTotalPrice != null">
        #{dealTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="dealCommission != null">
        #{dealCommission,jdbcType=NUMERIC},
      </if>
      <if test="totalPriceUnit != null">
        #{totalPriceUnit,jdbcType=TINYINT},
      </if>
      <if test="caseCharacter != null">
        #{caseCharacter,jdbcType=VARCHAR},
      </if>
      <if test="caseUser != null">
        #{caseUser,jdbcType=INTEGER},
      </if>
      <if test="caseDealType != null">
        #{caseDealType,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="organizationPath != null">
        #{organizationPath,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdealExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_OUTDEAL
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_OUTDEAL
    <set>
      <if test="record.dealId != null">
        DEAL_ID = #{record.dealId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.agreementNo != null">
        AGREEMENT_NO = #{record.agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="record.creatorDate != null">
        CREATOR_DATE = #{record.creatorDate,jdbcType=VARCHAR},
      </if>
      <if test="record.creatorUserId != null">
        CREATOR_USER_ID = #{record.creatorUserId,jdbcType=INTEGER},
      </if>
      <if test="record.dealType != null">
        DEAL_TYPE = #{record.dealType,jdbcType=TINYINT},
      </if>
      <if test="record.dealStatus != null">
        DEAL_STATUS = #{record.dealStatus,jdbcType=TINYINT},
      </if>
      <if test="record.caseId != null">
        CASE_ID = #{record.caseId,jdbcType=INTEGER},
      </if>
      <if test="record.caseType != null">
        CASE_TYPE = #{record.caseType,jdbcType=TINYINT},
      </if>
      <if test="record.houseUseage != null">
        HOUSE_USEAGE = #{record.houseUseage,jdbcType=TINYINT},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.dealTotalPrice != null">
        DEAL_TOTAL_PRICE = #{record.dealTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.dealCommission != null">
        DEAL_COMMISSION = #{record.dealCommission,jdbcType=NUMERIC},
      </if>
      <if test="record.totalPriceUnit != null">
        TOTAL_PRICE_UNIT = #{record.totalPriceUnit,jdbcType=TINYINT},
      </if>
      <if test="record.caseCharacter != null">
        CASE_CHARACTER = #{record.caseCharacter,jdbcType=VARCHAR},
      </if>
      <if test="record.caseUser != null">
        CASE_USER = #{record.caseUser,jdbcType=INTEGER},
      </if>
      <if test="record.caseDealType != null">
        CASE_DEAL_TYPE = #{record.caseDealType,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.organizationPath != null">
        ORGANIZATION_PATH = #{record.organizationPath,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_OUTDEAL
    set DEAL_ID = #{record.dealId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      AGREEMENT_NO = #{record.agreementNo,jdbcType=VARCHAR},
      CREATOR_DATE = #{record.creatorDate,jdbcType=VARCHAR},
      CREATOR_USER_ID = #{record.creatorUserId,jdbcType=INTEGER},
      DEAL_TYPE = #{record.dealType,jdbcType=TINYINT},
      DEAL_STATUS = #{record.dealStatus,jdbcType=TINYINT},
      CASE_ID = #{record.caseId,jdbcType=INTEGER},
      CASE_TYPE = #{record.caseType,jdbcType=TINYINT},
      HOUSE_USEAGE = #{record.houseUseage,jdbcType=TINYINT},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEAL_TOTAL_PRICE = #{record.dealTotalPrice,jdbcType=NUMERIC},
      DEAL_COMMISSION = #{record.dealCommission,jdbcType=NUMERIC},
      TOTAL_PRICE_UNIT = #{record.totalPriceUnit,jdbcType=TINYINT},
      CASE_CHARACTER = #{record.caseCharacter,jdbcType=VARCHAR},
      CASE_USER = #{record.caseUser,jdbcType=INTEGER},
      CASE_DEAL_TYPE = #{record.caseDealType,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      ORGANIZATION_PATH = #{record.organizationPath,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdeal">
    <!--@mbggenerated-->
    update FUN_OUTDEAL
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="agreementNo != null">
        AGREEMENT_NO = #{agreementNo,jdbcType=VARCHAR},
      </if>
      <if test="creatorDate != null">
        CREATOR_DATE = #{creatorDate,jdbcType=VARCHAR},
      </if>
      <if test="creatorUserId != null">
        CREATOR_USER_ID = #{creatorUserId,jdbcType=INTEGER},
      </if>
      <if test="dealType != null">
        DEAL_TYPE = #{dealType,jdbcType=TINYINT},
      </if>
      <if test="dealStatus != null">
        DEAL_STATUS = #{dealStatus,jdbcType=TINYINT},
      </if>
      <if test="caseId != null">
        CASE_ID = #{caseId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=TINYINT},
      </if>
      <if test="houseUseage != null">
        HOUSE_USEAGE = #{houseUseage,jdbcType=TINYINT},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="dealTotalPrice != null">
        DEAL_TOTAL_PRICE = #{dealTotalPrice,jdbcType=NUMERIC},
      </if>
      <if test="dealCommission != null">
        DEAL_COMMISSION = #{dealCommission,jdbcType=NUMERIC},
      </if>
      <if test="totalPriceUnit != null">
        TOTAL_PRICE_UNIT = #{totalPriceUnit,jdbcType=TINYINT},
      </if>
      <if test="caseCharacter != null">
        CASE_CHARACTER = #{caseCharacter,jdbcType=VARCHAR},
      </if>
      <if test="caseUser != null">
        CASE_USER = #{caseUser,jdbcType=INTEGER},
      </if>
      <if test="caseDealType != null">
        CASE_DEAL_TYPE = #{caseDealType,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="organizationPath != null">
        ORGANIZATION_PATH = #{organizationPath,jdbcType=VARCHAR},
      </if>
    </set>
    where DEAL_ID = #{dealId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunOutdeal">
    <!--@mbggenerated-->
    update FUN_OUTDEAL
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      AGREEMENT_NO = #{agreementNo,jdbcType=VARCHAR},
      CREATOR_DATE = #{creatorDate,jdbcType=VARCHAR},
      CREATOR_USER_ID = #{creatorUserId,jdbcType=INTEGER},
      DEAL_TYPE = #{dealType,jdbcType=TINYINT},
      DEAL_STATUS = #{dealStatus,jdbcType=TINYINT},
      CASE_ID = #{caseId,jdbcType=INTEGER},
      CASE_TYPE = #{caseType,jdbcType=TINYINT},
      HOUSE_USEAGE = #{houseUseage,jdbcType=TINYINT},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEAL_TOTAL_PRICE = #{dealTotalPrice,jdbcType=NUMERIC},
      DEAL_COMMISSION = #{dealCommission,jdbcType=NUMERIC},
      TOTAL_PRICE_UNIT = #{totalPriceUnit,jdbcType=TINYINT},
      CASE_CHARACTER = #{caseCharacter,jdbcType=VARCHAR},
      CASE_USER = #{caseUser,jdbcType=INTEGER},
      CASE_DEAL_TYPE = #{caseDealType,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      ORGANIZATION_PATH = #{organizationPath,jdbcType=VARCHAR}
    where DEAL_ID = #{dealId,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="BaseResultMapDto" type="com.myfun.repository.erpdb.dto.ErpFunDealDto">
    <result column="TRANSFER_DEAL_PROFIT" jdbcType="NUMERIC" property="transferDealProfit" />
    <result column="TRANSFER_TOTAL_PROFIT" jdbcType="NUMERIC" property="transferTotalProfit" />
    <result column="SECONDHAND_DEAL_PROFIT" jdbcType="NUMERIC" property="secondhandDealProfit" />
    <result column="SECONDHAND_TOTAL_PROFIT" jdbcType="NUMERIC" property="secondhandTotalProfit" />
    <result column="NEWHOUSE_DEAL_PROFIT" jdbcType="NUMERIC" property="newhouseDealProfit" />
    <result column="NEWHOUSE_TOTAL_PROFIT" jdbcType="NUMERIC" property="newhouseTotalProfit" />
    <result column="LEASE_DEAL_PROFITL" jdbcType="NUMERIC" property="leaseDealProfitl" />
    <result column="LEASE_TOTAL_PROFIT" jdbcType="NUMERIC" property="leaseTotalProfit" />
    <result column="FINACE_DEAL_PROFIT" jdbcType="NUMERIC" property="financeDealProfit" />
    <result column="FINANCE_TOTAL_PROFIT" jdbcType="NUMERIC" property="financeTotalProfit" />
    <result column="TOTAL_PROFIT" jdbcType="NUMERIC" property="totalProfit" />
    <result column="DEAL_TOTAL_PROFIT" jdbcType="NUMERIC" property="dealTotalProfit" />
    <result column="SECONDHAND_DEAL_COUNT" jdbcType="NUMERIC" property="secondhandDealCount" />
    <result column="NEWHOUSE_DEAL_COUNT" jdbcType="NUMERIC" property="newhouseDealCount" />
    <result column="LEASE_DEAL_COUNT" jdbcType="NUMERIC" property="leaseDealCount" />
    <result column="TOTAL_DEAL_COUNT" jdbcType="NUMERIC" property="totalDealCount" />
    <result column="TRANSFER_COUNT" jdbcType="NUMERIC" property="transferCount" />
    <result column="TARGET_PROFIT" jdbcType="NUMERIC" property="targetProfit" />
    <result column="RANGE" jdbcType="VARCHAR" property="range" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
  </resultMap>
  <select id="getOutDealId" resultType="java.lang.Integer"> 
   	SELECT next value for SEQ_FUN_OUTDEAL_DEAL_ID
  </select>
  
  
	<select id="getOutDealListByCondition" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_OUTDEAL
		<where>
			<if test="param.creationTimeStart != null and '' != param.creationTimeStart">
				AND CREATOR_DATE &gt;= #{param.creationTimeStart}
			</if>
			<if test="param.creationTimeEnd != null and '' != param.creationTimeEnd">
				AND CREATOR_DATE &lt;= #{param.creationTimeEnd}
			</if>
			<if test="param.compId != null">
				AND COMP_ID = #{param.compId}
			</if>
			<if test="param.compIds != null">
				AND COMP_ID IN
				<foreach close=")" collection="param.compIds" item="compId" open="(" separator=",">
					#{compId}
				</foreach>
			</if>
			<if test="param.dealStatus != null">
				AND DEAL_STATUS = #{param.dealStatus}
			</if>
			<if test="param.dealType != null">
				AND DEAL_TYPE = #{param.dealType}
			</if>
			<if test="param.userId != null">
				AND CREATOR_USER_ID = #{param.userId}
			</if>
			<choose>
				<when test="param.deptId != null">
					AND DEPT_ID = #{param.deptId}
				</when>
				<when test="param.regId != null">
					AND REG_ID = #{param.regId}
				</when>
				<when test="param.areaId != null">
					AND AREA_ID = #{param.areaId}
				</when>
			</choose>
		</where>
		ORDER BY CREATOR_DATE DESC
	</select>
	
	<select id="getOutDealStatisticsRank" resultType="java.util.Map">
		SELECT 
		<choose>
			<when test="2 == lookType">
				COMP_ID,AREA_ID,CONCAT(AREA_ID,'','') AS RANGE,TOTAL_PRICE_UNIT,
			</when>
			<when test="3 == lookType">
				AREA_ID,REG_ID,CONCAT(AREA_ID,'_',REG_ID,'') AS RANGE,TOTAL_PRICE_UNIT,
			</when>
			<when test="4 == lookType">
				AREA_ID,REG_ID,DEPT_ID,CONCAT(AREA_ID,'_',REG_ID,'_',DEPT_ID) AS RANGE,TOTAL_PRICE_UNIT,
			</when>
			<when test="5 == lookType">
				COMP_ID,AREA_ID,REG_ID,DEPT_ID,GR_ID,CONCAT(DEPT_ID,'_',GR_ID) AS DEPT_GR,TOTAL_PRICE_UNIT,
			</when>
			<when test="6 == lookType">
				COMP_ID,CREATOR_USER_ID AS USER_ID,DEPT_ID,CREATOR_USER_ID AS RANGE,TOTAL_PRICE_UNIT,
			</when>
		</choose>
		sum(iif(DEAL_COMMISSION &gt; 0,1,0)) as DEAL_TOTAL_PROFIT 
		FROM dbo.FUN_OUTDEAL 
		WHERE COMP_ID = #{compId} and CREATOR_DATE &gt;= #{startTime} AND CREATOR_DATE &lt;= #{endTime} AND DEAL_STATUS = 1
		<if test="rangeType == 2 or rangeType == 3 or rangeType == 4">
			<choose>
				<when test="rangeType == 2">AND AREA_ID</when>
				<when test="rangeType == 3">AND REG_ID</when>
				<when test="rangeType == 4">AND DEPT_ID</when>
			</choose>
			in
			<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
		<choose>
			<when test="isFjdFlag">
				<if test="rangeType == 6">
					AND CREATOR_USER_ID IN 
					<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
						#{rangeId}
					</foreach>
				</if>
			</when>
			<otherwise>
				<if test="rangeType == 5 or rangeType == 6">
					and DEPT_ID = #{selfDeptId}
				</if>
			</otherwise>
		</choose>
		GROUP BY 
		<choose>
			<when test="2 == lookType">
				COMP_ID,AREA_ID,TOTAL_PRICE_UNIT
			</when>
			<when test="3 == lookType">
				AREA_ID,REG_ID,TOTAL_PRICE_UNIT
			</when>
			<when test="4 == lookType">
				AREA_ID,REG_ID,DEPT_ID,TOTAL_PRICE_UNIT
			</when>
			<when test="5 == lookType">
				COMP_ID,AREA_ID,REG_ID,DEPT_ID,GR_ID,TOTAL_PRICE_UNIT
			</when>
			<when test="6 == lookType">
				COMP_ID,CREATOR_USER_ID,DEPT_ID,TOTAL_PRICE_UNIT
			</when>
		</choose>
		having sum(iif(DEAL_COMMISSION &gt; 0,1,0))&gt;0
		ORDER BY DEAL_TOTAL_PROFIT DESC
	</select>


  <select id="getOutDealStatisticsRankForOrg" resultType="java.util.Map">
    SELECT
    (case when ${groupByCause} is null then 0 else ${groupByCause} end) as rangeId,
    sum(iif(DEAL_COMMISSION &gt; 0,DEAL_COMMISSION,0)) as num
    FROM dbo.FUN_OUTDEAL a
    left join FUN_USERS b on a.COMP_ID=b.COMP_ID and a.CASE_USER = b.USER_ID
    WHERE a.COMP_ID = #{compId} and a.CREATOR_DATE &gt;= #{startTime} AND a.CREATOR_DATE &lt;= #{endTime} AND a.DEAL_STATUS = 1
    <if test="whereCause != null and whereCause != ''">
      AND ${whereCause}
    </if>
    GROUP BY
     ${groupByCause}
    having sum(iif(DEAL_COMMISSION &gt; 0,1,0))&gt;0
    ORDER BY rangeId
  </select>
	
	<select id="getAppCompProfit" resultType="java.util.Map">
		select 0 as actualProfit, ISNULL(SUM(DEAL_TOTAL_PRICE),0) as receivableProfit from FUN_OUTDEAL
		where COMP_ID = #{compId} and DEAL_STATUS = 1
		<choose>
			<when test="rangeType == 5">
				<if test="deptId != null">
					AND DEPT_ID=#{deptId}
				</if>
			</when>
		</choose>
		<choose>
			<when test="rangeType == 2">AND AREA_ID</when>
			<when test="rangeType == 3">AND REG_ID</when>
			<when test="rangeType == 4">AND DEPT_ID</when>
			<when test="rangeType == 5">AND GR_ID</when>
			<when test="rangeType == 6">AND CREATOR_USER_ID</when>
		</choose>
		<if test="rangeType != 1">
		in
			<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
				#{rangeId}
			</foreach>
		</if>
		and CREATOR_DATE &gt;= #{startTime}
	</select>

	<select id="getProfitCountList" resultMap="BaseResultMapDto">
		select ${param.queryStr},
		<choose>
			<when test="dealCount">
				SUM ( iif ( DEAL_TYPE = 101, 1, 0 )) AS SECONDHAND_DEAL_COUNT,
				SUM ( iif ( DEAL_TYPE = 102, 1, 0 )) AS LEASE_DEAL_COUNT,
				COUNT(DEAL_ID) AS TOTAL_DEAL_COUNT
			</when>
			<otherwise>
				SUM ( iif ( DEAL_TYPE = 101, DEAL_COMMISSION, 0 )) AS SECONDHAND_TOTAL_PROFIT,
				SUM ( iif ( DEAL_TYPE = 101, DEAL_COMMISSION, 0 )) AS SECONDHAND_DEAL_PROFIT,
				SUM ( iif ( DEAL_TYPE = 102, DEAL_COMMISSION, 0 )) AS LEASE_TOTAL_PROFIT,
				SUM ( iif ( DEAL_TYPE = 102, DEAL_COMMISSION, 0 )) AS LEASE_DEAL_PROFIT,
				isnull(SUM ( DEAL_COMMISSION), 0) AS DEAL_TOTAL_PROFIT ,
				isnull(SUM ( DEAL_COMMISSION), 0) AS TOTAL_PROFIT
			</otherwise>
		</choose>
		from FUN_OUTDEAL b
		where COMP_ID=#{param.compId} and CREATOR_DATE &gt;= #{param.startTime} and CREATOR_DATE &lt;=#{param.endTime}
		<if test="!param.isHome">
			<choose>
				<when test="param.serchRange == 'USER_ID'">
					AND b.ARCHIVE_ID=#{param.archiveId}
				</when>
				<otherwise>
					AND b.${param.serchRange}=#{serchRangeId}
				</otherwise>
			</choose>
		</if>
		GROUP BY ${param.queryStr}
	</select>
</mapper>