<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunBrokerageMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunBrokerage">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="BROKERAGE_RATE" jdbcType="NUMERIC" property="brokerageRate" />
    <result column="BROKERAGE_COUNT_TYPE" jdbcType="INTEGER" property="brokerageCountType" />
    <result column="SALE_LEASE" jdbcType="INTEGER" property="saleLease" />
    <result column="CHARGE_HOUSE_RATE" jdbcType="NUMERIC" property="chargeHouseRate" />
    <result column="CHARGE_CUST_RATE" jdbcType="NUMERIC" property="chargeCustRate" />
    <result column="BROKER_HOUSE_RATE" jdbcType="NUMERIC" property="brokerHouseRate" />
    <result column="BROKER_CUST_RATE" jdbcType="NUMERIC" property="brokerCustRate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, BROKERAGE_RATE, BROKERAGE_COUNT_TYPE, SALE_LEASE, CHARGE_HOUSE_RATE, 
    CHARGE_CUST_RATE, BROKER_HOUSE_RATE, BROKER_CUST_RATE
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerageExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_BROKERAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_BROKERAGE
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_BROKERAGE
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerageExample">
    <!--@mbggenerated-->
    delete from FUN_BROKERAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerage">
    <!--@mbggenerated-->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_BROKERAGE (COMP_ID, BROKERAGE_RATE, BROKERAGE_COUNT_TYPE, 
      SALE_LEASE, CHARGE_HOUSE_RATE, CHARGE_CUST_RATE, 
      BROKER_HOUSE_RATE, BROKER_CUST_RATE)
    values (#{compId,jdbcType=INTEGER}, #{brokerageRate,jdbcType=NUMERIC}, #{brokerageCountType,jdbcType=INTEGER}, 
      #{saleLease,jdbcType=INTEGER}, #{chargeHouseRate,jdbcType=NUMERIC}, #{chargeCustRate,jdbcType=NUMERIC}, 
      #{brokerHouseRate,jdbcType=NUMERIC}, #{brokerCustRate,jdbcType=NUMERIC})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerage">
    <!--@mbggenerated-->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT SCOPE_IDENTITY()
    </selectKey>
    insert into FUN_BROKERAGE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="brokerageRate != null">
        BROKERAGE_RATE,
      </if>
      <if test="brokerageCountType != null">
        BROKERAGE_COUNT_TYPE,
      </if>
      <if test="saleLease != null">
        SALE_LEASE,
      </if>
      <if test="chargeHouseRate != null">
        CHARGE_HOUSE_RATE,
      </if>
      <if test="chargeCustRate != null">
        CHARGE_CUST_RATE,
      </if>
      <if test="brokerHouseRate != null">
        BROKER_HOUSE_RATE,
      </if>
      <if test="brokerCustRate != null">
        BROKER_CUST_RATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="brokerageRate != null">
        #{brokerageRate,jdbcType=NUMERIC},
      </if>
      <if test="brokerageCountType != null">
        #{brokerageCountType,jdbcType=INTEGER},
      </if>
      <if test="saleLease != null">
        #{saleLease,jdbcType=INTEGER},
      </if>
      <if test="chargeHouseRate != null">
        #{chargeHouseRate,jdbcType=NUMERIC},
      </if>
      <if test="chargeCustRate != null">
        #{chargeCustRate,jdbcType=NUMERIC},
      </if>
      <if test="brokerHouseRate != null">
        #{brokerHouseRate,jdbcType=NUMERIC},
      </if>
      <if test="brokerCustRate != null">
        #{brokerCustRate,jdbcType=NUMERIC},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerageExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_BROKERAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BROKERAGE
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.brokerageRate != null">
        BROKERAGE_RATE = #{record.brokerageRate,jdbcType=NUMERIC},
      </if>
      <if test="record.brokerageCountType != null">
        BROKERAGE_COUNT_TYPE = #{record.brokerageCountType,jdbcType=INTEGER},
      </if>
      <if test="record.saleLease != null">
        SALE_LEASE = #{record.saleLease,jdbcType=INTEGER},
      </if>
      <if test="record.chargeHouseRate != null">
        CHARGE_HOUSE_RATE = #{record.chargeHouseRate,jdbcType=NUMERIC},
      </if>
      <if test="record.chargeCustRate != null">
        CHARGE_CUST_RATE = #{record.chargeCustRate,jdbcType=NUMERIC},
      </if>
      <if test="record.brokerHouseRate != null">
        BROKER_HOUSE_RATE = #{record.brokerHouseRate,jdbcType=NUMERIC},
      </if>
      <if test="record.brokerCustRate != null">
        BROKER_CUST_RATE = #{record.brokerCustRate,jdbcType=NUMERIC},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BROKERAGE
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      BROKERAGE_RATE = #{record.brokerageRate,jdbcType=NUMERIC},
      BROKERAGE_COUNT_TYPE = #{record.brokerageCountType,jdbcType=INTEGER},
      SALE_LEASE = #{record.saleLease,jdbcType=INTEGER},
      CHARGE_HOUSE_RATE = #{record.chargeHouseRate,jdbcType=NUMERIC},
      CHARGE_CUST_RATE = #{record.chargeCustRate,jdbcType=NUMERIC},
      BROKER_HOUSE_RATE = #{record.brokerHouseRate,jdbcType=NUMERIC},
      BROKER_CUST_RATE = #{record.brokerCustRate,jdbcType=NUMERIC}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerage">
    <!--@mbggenerated-->
    update FUN_BROKERAGE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="brokerageRate != null">
        BROKERAGE_RATE = #{brokerageRate,jdbcType=NUMERIC},
      </if>
      <if test="brokerageCountType != null">
        BROKERAGE_COUNT_TYPE = #{brokerageCountType,jdbcType=INTEGER},
      </if>
      <if test="saleLease != null">
        SALE_LEASE = #{saleLease,jdbcType=INTEGER},
      </if>
      <if test="chargeHouseRate != null">
        CHARGE_HOUSE_RATE = #{chargeHouseRate,jdbcType=NUMERIC},
      </if>
      <if test="chargeCustRate != null">
        CHARGE_CUST_RATE = #{chargeCustRate,jdbcType=NUMERIC},
      </if>
      <if test="brokerHouseRate != null">
        BROKER_HOUSE_RATE = #{brokerHouseRate,jdbcType=NUMERIC},
      </if>
      <if test="brokerCustRate != null">
        BROKER_CUST_RATE = #{brokerCustRate,jdbcType=NUMERIC},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunBrokerage">
    <!--@mbggenerated-->
    update FUN_BROKERAGE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      BROKERAGE_RATE = #{brokerageRate,jdbcType=NUMERIC},
      BROKERAGE_COUNT_TYPE = #{brokerageCountType,jdbcType=INTEGER},
      SALE_LEASE = #{saleLease,jdbcType=INTEGER},
      CHARGE_HOUSE_RATE = #{chargeHouseRate,jdbcType=NUMERIC},
      CHARGE_CUST_RATE = #{chargeCustRate,jdbcType=NUMERIC},
      BROKER_HOUSE_RATE = #{brokerHouseRate,jdbcType=NUMERIC},
      BROKER_CUST_RATE = #{brokerCustRate,jdbcType=NUMERIC}
    where ID = #{id,jdbcType=INTEGER}
  </update>

  <insert id ="insertBatch" parameterType="java.util.List" >
    insert into FUN_BROKERAGE
    (COMP_ID, BROKERAGE_RATE, BROKERAGE_COUNT_TYPE, SALE_LEASE,CHARGE_HOUSE_RATE, CHARGE_CUST_RATE, BROKER_HOUSE_RATE, BROKER_CUST_RATE)
    values
    <foreach collection ="paramList" item="funBrokerageIncome" index= "index" separator =",">
      (
      #{funBrokerageIncome.compId}, #{funBrokerageIncome.brokerageRate},
      #{funBrokerageIncome.brokerageCountType},#{funBrokerageIncome.saleLease},
      #{funBrokerageIncome.chargeHouseRate},#{funBrokerageIncome.chargeCustRate},
      #{funBrokerageIncome.brokerHouseRate},#{funBrokerageIncome.brokerCustRate}
      )
    </foreach >
  </insert >

	<insert id="initBrokerageModel">
		INSERT INTO FUN_BROKERAGE
		(COMP_ID,BROKERAGE_RATE,BROKERAGE_COUNT_TYPE,SALE_LEASE,CHARGE_HOUSE_RATE,CHARGE_CUST_RATE,BROKER_HOUSE_RATE,BROKER_CUST_RATE)
		VALUES(0,2,1,101,50,50,50,50),(0,1,2,102,50,50,50,50)
	</insert>
	
	<select id="getBrokerageByCompId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"/>
		FROM FUN_BROKERAGE WHRE COMP_ID = #{compId}
		<if test="null != saleLease">
			and SALE_LEASE = #{saleLease,jdbcType=INTEGER}
		</if>
	</select>
</mapper>