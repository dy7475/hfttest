<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunWorkcountTargetMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunWorkcountTarget">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="GJ_HOUSE_COUNT" jdbcType="INTEGER" property="gjHouseCount" />
    <result column="GJ_CUSTOMER_COUNT" jdbcType="INTEGER" property="gjCustomerCount" />
    <result column="VR_COUNT" jdbcType="INTEGER" property="vrCount" />
    <result column="SP_COUNT" jdbcType="INTEGER" property="spCount" />
    <result column="KK_COUNT" jdbcType="INTEGER" property="kkCount" />
    <result column="HOUSE_FAFA_COUNT" jdbcType="INTEGER" property="houseFafaCount" />
    <result column="POST_SHARE_COUNT" jdbcType="INTEGER" property="postShareCount" />
    <result column="HOUSE_ADD" jdbcType="INTEGER" property="houseAdd" />
    <result column="CUSTOMER_ADD" jdbcType="INTEGER" property="customerAdd" />
    <result column="DK_COUNT" jdbcType="INTEGER" property="dkCount" />
    <result column="FK_COUNT" jdbcType="INTEGER" property="fkCount" />
    <result column="YS_COUNT" jdbcType="INTEGER" property="ysCount" />
    <result column="DJWT_COUNT" jdbcType="INTEGER" property="djwtCount" />
    <result column="SIGN_DEAL_COUNT" jdbcType="INTEGER" property="signDealCount" />
    <result column="TARGET_TYPE" jdbcType="TINYINT" property="targetType" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="TPSC_COUNT" jdbcType="INTEGER" property="tpscCount" />
    <result column="CKDH_COUNT" jdbcType="INTEGER" property="ckdhCount" />
    <result column="XSWT_COUNT" jdbcType="INTEGER" property="xswtCount" />
    <result column="BZWT_COUNT" jdbcType="INTEGER" property="bzwtCount" />
    <result column="WT_COUNT" jdbcType="INTEGER" property="wtCount" />
    <result column="MT_HOUSE_COUNT" jdbcType="INTEGER" property="mtHouseCount" />
    <result column="MT_CUSTOMER_COUNT" jdbcType="INTEGER" property="mtCustomerCount" />
    <result column="KYYK_COUNT" jdbcType="INTEGER" property="kyykCount" />
    <result column="YJ_COUNT" jdbcType="INTEGER" property="yjCount" />
    <result column="IPCALL_COUNT" jdbcType="INTEGER" property="ipcallCount" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, COMP_ID, USER_ID, GJ_HOUSE_COUNT, GJ_CUSTOMER_COUNT, VR_COUNT, SP_COUNT, KK_COUNT, 
    HOUSE_FAFA_COUNT, POST_SHARE_COUNT, HOUSE_ADD, CUSTOMER_ADD, DK_COUNT, FK_COUNT, 
    YS_COUNT, DJWT_COUNT, SIGN_DEAL_COUNT, TARGET_TYPE, CREATE_TIME, ARCHIVE_ID, TPSC_COUNT, 
    CKDH_COUNT, XSWT_COUNT, BZWT_COUNT, WT_COUNT, MT_HOUSE_COUNT, MT_CUSTOMER_COUNT, 
    KYYK_COUNT, YJ_COUNT, IPCALL_COUNT
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTargetExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_WORKCOUNT_TARGET
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_WORKCOUNT_TARGET
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_WORKCOUNT_TARGET
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTargetExample">
    <!--@mbggenerated-->
    delete from FUN_WORKCOUNT_TARGET
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTarget" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_WORKCOUNT_TARGET (COMP_ID, USER_ID, GJ_HOUSE_COUNT, 
      GJ_CUSTOMER_COUNT, VR_COUNT, SP_COUNT, 
      KK_COUNT, HOUSE_FAFA_COUNT, POST_SHARE_COUNT, 
      HOUSE_ADD, CUSTOMER_ADD, DK_COUNT, 
      FK_COUNT, YS_COUNT, DJWT_COUNT, 
      SIGN_DEAL_COUNT, TARGET_TYPE, CREATE_TIME, 
      ARCHIVE_ID, TPSC_COUNT, CKDH_COUNT, 
      XSWT_COUNT, BZWT_COUNT, WT_COUNT, 
      MT_HOUSE_COUNT, MT_CUSTOMER_COUNT, KYYK_COUNT, 
      YJ_COUNT, IPCALL_COUNT)
    values (#{compId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{gjHouseCount,jdbcType=INTEGER}, 
      #{gjCustomerCount,jdbcType=INTEGER}, #{vrCount,jdbcType=INTEGER}, #{spCount,jdbcType=INTEGER}, 
      #{kkCount,jdbcType=INTEGER}, #{houseFafaCount,jdbcType=INTEGER}, #{postShareCount,jdbcType=INTEGER}, 
      #{houseAdd,jdbcType=INTEGER}, #{customerAdd,jdbcType=INTEGER}, #{dkCount,jdbcType=INTEGER}, 
      #{fkCount,jdbcType=INTEGER}, #{ysCount,jdbcType=INTEGER}, #{djwtCount,jdbcType=INTEGER}, 
      #{signDealCount,jdbcType=INTEGER}, #{targetType,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{archiveId,jdbcType=INTEGER}, #{tpscCount,jdbcType=INTEGER}, #{ckdhCount,jdbcType=INTEGER}, 
      #{xswtCount,jdbcType=INTEGER}, #{bzwtCount,jdbcType=INTEGER}, #{wtCount,jdbcType=INTEGER}, 
      #{mtHouseCount,jdbcType=INTEGER}, #{mtCustomerCount,jdbcType=INTEGER}, #{kyykCount,jdbcType=INTEGER}, 
      #{yjCount,jdbcType=INTEGER}, #{ipcallCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTarget" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into FUN_WORKCOUNT_TARGET
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="gjHouseCount != null">
        GJ_HOUSE_COUNT,
      </if>
      <if test="gjCustomerCount != null">
        GJ_CUSTOMER_COUNT,
      </if>
      <if test="vrCount != null">
        VR_COUNT,
      </if>
      <if test="spCount != null">
        SP_COUNT,
      </if>
      <if test="kkCount != null">
        KK_COUNT,
      </if>
      <if test="houseFafaCount != null">
        HOUSE_FAFA_COUNT,
      </if>
      <if test="postShareCount != null">
        POST_SHARE_COUNT,
      </if>
      <if test="houseAdd != null">
        HOUSE_ADD,
      </if>
      <if test="customerAdd != null">
        CUSTOMER_ADD,
      </if>
      <if test="dkCount != null">
        DK_COUNT,
      </if>
      <if test="fkCount != null">
        FK_COUNT,
      </if>
      <if test="ysCount != null">
        YS_COUNT,
      </if>
      <if test="djwtCount != null">
        DJWT_COUNT,
      </if>
      <if test="signDealCount != null">
        SIGN_DEAL_COUNT,
      </if>
      <if test="targetType != null">
        TARGET_TYPE,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="tpscCount != null">
        TPSC_COUNT,
      </if>
      <if test="ckdhCount != null">
        CKDH_COUNT,
      </if>
      <if test="xswtCount != null">
        XSWT_COUNT,
      </if>
      <if test="bzwtCount != null">
        BZWT_COUNT,
      </if>
      <if test="wtCount != null">
        WT_COUNT,
      </if>
      <if test="mtHouseCount != null">
        MT_HOUSE_COUNT,
      </if>
      <if test="mtCustomerCount != null">
        MT_CUSTOMER_COUNT,
      </if>
      <if test="kyykCount != null">
        KYYK_COUNT,
      </if>
      <if test="yjCount != null">
        YJ_COUNT,
      </if>
      <if test="ipcallCount != null">
        IPCALL_COUNT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="gjHouseCount != null">
        #{gjHouseCount,jdbcType=INTEGER},
      </if>
      <if test="gjCustomerCount != null">
        #{gjCustomerCount,jdbcType=INTEGER},
      </if>
      <if test="vrCount != null">
        #{vrCount,jdbcType=INTEGER},
      </if>
      <if test="spCount != null">
        #{spCount,jdbcType=INTEGER},
      </if>
      <if test="kkCount != null">
        #{kkCount,jdbcType=INTEGER},
      </if>
      <if test="houseFafaCount != null">
        #{houseFafaCount,jdbcType=INTEGER},
      </if>
      <if test="postShareCount != null">
        #{postShareCount,jdbcType=INTEGER},
      </if>
      <if test="houseAdd != null">
        #{houseAdd,jdbcType=INTEGER},
      </if>
      <if test="customerAdd != null">
        #{customerAdd,jdbcType=INTEGER},
      </if>
      <if test="dkCount != null">
        #{dkCount,jdbcType=INTEGER},
      </if>
      <if test="fkCount != null">
        #{fkCount,jdbcType=INTEGER},
      </if>
      <if test="ysCount != null">
        #{ysCount,jdbcType=INTEGER},
      </if>
      <if test="djwtCount != null">
        #{djwtCount,jdbcType=INTEGER},
      </if>
      <if test="signDealCount != null">
        #{signDealCount,jdbcType=INTEGER},
      </if>
      <if test="targetType != null">
        #{targetType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="tpscCount != null">
        #{tpscCount,jdbcType=INTEGER},
      </if>
      <if test="ckdhCount != null">
        #{ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="xswtCount != null">
        #{xswtCount,jdbcType=INTEGER},
      </if>
      <if test="bzwtCount != null">
        #{bzwtCount,jdbcType=INTEGER},
      </if>
      <if test="wtCount != null">
        #{wtCount,jdbcType=INTEGER},
      </if>
      <if test="mtHouseCount != null">
        #{mtHouseCount,jdbcType=INTEGER},
      </if>
      <if test="mtCustomerCount != null">
        #{mtCustomerCount,jdbcType=INTEGER},
      </if>
      <if test="kyykCount != null">
        #{kyykCount,jdbcType=INTEGER},
      </if>
      <if test="yjCount != null">
        #{yjCount,jdbcType=INTEGER},
      </if>
      <if test="ipcallCount != null">
        #{ipcallCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTargetExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_WORKCOUNT_TARGET
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_WORKCOUNT_TARGET
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.gjHouseCount != null">
        GJ_HOUSE_COUNT = #{record.gjHouseCount,jdbcType=INTEGER},
      </if>
      <if test="record.gjCustomerCount != null">
        GJ_CUSTOMER_COUNT = #{record.gjCustomerCount,jdbcType=INTEGER},
      </if>
      <if test="record.vrCount != null">
        VR_COUNT = #{record.vrCount,jdbcType=INTEGER},
      </if>
      <if test="record.spCount != null">
        SP_COUNT = #{record.spCount,jdbcType=INTEGER},
      </if>
      <if test="record.kkCount != null">
        KK_COUNT = #{record.kkCount,jdbcType=INTEGER},
      </if>
      <if test="record.houseFafaCount != null">
        HOUSE_FAFA_COUNT = #{record.houseFafaCount,jdbcType=INTEGER},
      </if>
      <if test="record.postShareCount != null">
        POST_SHARE_COUNT = #{record.postShareCount,jdbcType=INTEGER},
      </if>
      <if test="record.houseAdd != null">
        HOUSE_ADD = #{record.houseAdd,jdbcType=INTEGER},
      </if>
      <if test="record.customerAdd != null">
        CUSTOMER_ADD = #{record.customerAdd,jdbcType=INTEGER},
      </if>
      <if test="record.dkCount != null">
        DK_COUNT = #{record.dkCount,jdbcType=INTEGER},
      </if>
      <if test="record.fkCount != null">
        FK_COUNT = #{record.fkCount,jdbcType=INTEGER},
      </if>
      <if test="record.ysCount != null">
        YS_COUNT = #{record.ysCount,jdbcType=INTEGER},
      </if>
      <if test="record.djwtCount != null">
        DJWT_COUNT = #{record.djwtCount,jdbcType=INTEGER},
      </if>
      <if test="record.signDealCount != null">
        SIGN_DEAL_COUNT = #{record.signDealCount,jdbcType=INTEGER},
      </if>
      <if test="record.targetType != null">
        TARGET_TYPE = #{record.targetType,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.tpscCount != null">
        TPSC_COUNT = #{record.tpscCount,jdbcType=INTEGER},
      </if>
      <if test="record.ckdhCount != null">
        CKDH_COUNT = #{record.ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="record.xswtCount != null">
        XSWT_COUNT = #{record.xswtCount,jdbcType=INTEGER},
      </if>
      <if test="record.bzwtCount != null">
        BZWT_COUNT = #{record.bzwtCount,jdbcType=INTEGER},
      </if>
      <if test="record.wtCount != null">
        WT_COUNT = #{record.wtCount,jdbcType=INTEGER},
      </if>
      <if test="record.mtHouseCount != null">
        MT_HOUSE_COUNT = #{record.mtHouseCount,jdbcType=INTEGER},
      </if>
      <if test="record.mtCustomerCount != null">
        MT_CUSTOMER_COUNT = #{record.mtCustomerCount,jdbcType=INTEGER},
      </if>
      <if test="record.kyykCount != null">
        KYYK_COUNT = #{record.kyykCount,jdbcType=INTEGER},
      </if>
      <if test="record.yjCount != null">
        YJ_COUNT = #{record.yjCount,jdbcType=INTEGER},
      </if>
      <if test="record.ipcallCount != null">
        IPCALL_COUNT = #{record.ipcallCount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_WORKCOUNT_TARGET
    set ID = #{record.id,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      GJ_HOUSE_COUNT = #{record.gjHouseCount,jdbcType=INTEGER},
      GJ_CUSTOMER_COUNT = #{record.gjCustomerCount,jdbcType=INTEGER},
      VR_COUNT = #{record.vrCount,jdbcType=INTEGER},
      SP_COUNT = #{record.spCount,jdbcType=INTEGER},
      KK_COUNT = #{record.kkCount,jdbcType=INTEGER},
      HOUSE_FAFA_COUNT = #{record.houseFafaCount,jdbcType=INTEGER},
      POST_SHARE_COUNT = #{record.postShareCount,jdbcType=INTEGER},
      HOUSE_ADD = #{record.houseAdd,jdbcType=INTEGER},
      CUSTOMER_ADD = #{record.customerAdd,jdbcType=INTEGER},
      DK_COUNT = #{record.dkCount,jdbcType=INTEGER},
      FK_COUNT = #{record.fkCount,jdbcType=INTEGER},
      YS_COUNT = #{record.ysCount,jdbcType=INTEGER},
      DJWT_COUNT = #{record.djwtCount,jdbcType=INTEGER},
      SIGN_DEAL_COUNT = #{record.signDealCount,jdbcType=INTEGER},
      TARGET_TYPE = #{record.targetType,jdbcType=TINYINT},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      TPSC_COUNT = #{record.tpscCount,jdbcType=INTEGER},
      CKDH_COUNT = #{record.ckdhCount,jdbcType=INTEGER},
      XSWT_COUNT = #{record.xswtCount,jdbcType=INTEGER},
      BZWT_COUNT = #{record.bzwtCount,jdbcType=INTEGER},
      WT_COUNT = #{record.wtCount,jdbcType=INTEGER},
      MT_HOUSE_COUNT = #{record.mtHouseCount,jdbcType=INTEGER},
      MT_CUSTOMER_COUNT = #{record.mtCustomerCount,jdbcType=INTEGER},
      KYYK_COUNT = #{record.kyykCount,jdbcType=INTEGER},
      YJ_COUNT = #{record.yjCount,jdbcType=INTEGER},
      IPCALL_COUNT = #{record.ipcallCount,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTarget">
    <!--@mbggenerated-->
    update FUN_WORKCOUNT_TARGET
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="gjHouseCount != null">
        GJ_HOUSE_COUNT = #{gjHouseCount,jdbcType=INTEGER},
      </if>
      <if test="gjCustomerCount != null">
        GJ_CUSTOMER_COUNT = #{gjCustomerCount,jdbcType=INTEGER},
      </if>
      <if test="vrCount != null">
        VR_COUNT = #{vrCount,jdbcType=INTEGER},
      </if>
      <if test="spCount != null">
        SP_COUNT = #{spCount,jdbcType=INTEGER},
      </if>
      <if test="kkCount != null">
        KK_COUNT = #{kkCount,jdbcType=INTEGER},
      </if>
      <if test="houseFafaCount != null">
        HOUSE_FAFA_COUNT = #{houseFafaCount,jdbcType=INTEGER},
      </if>
      <if test="postShareCount != null">
        POST_SHARE_COUNT = #{postShareCount,jdbcType=INTEGER},
      </if>
      <if test="houseAdd != null">
        HOUSE_ADD = #{houseAdd,jdbcType=INTEGER},
      </if>
      <if test="customerAdd != null">
        CUSTOMER_ADD = #{customerAdd,jdbcType=INTEGER},
      </if>
      <if test="dkCount != null">
        DK_COUNT = #{dkCount,jdbcType=INTEGER},
      </if>
      <if test="fkCount != null">
        FK_COUNT = #{fkCount,jdbcType=INTEGER},
      </if>
      <if test="ysCount != null">
        YS_COUNT = #{ysCount,jdbcType=INTEGER},
      </if>
      <if test="djwtCount != null">
        DJWT_COUNT = #{djwtCount,jdbcType=INTEGER},
      </if>
      <if test="signDealCount != null">
        SIGN_DEAL_COUNT = #{signDealCount,jdbcType=INTEGER},
      </if>
      <if test="targetType != null">
        TARGET_TYPE = #{targetType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="tpscCount != null">
        TPSC_COUNT = #{tpscCount,jdbcType=INTEGER},
      </if>
      <if test="ckdhCount != null">
        CKDH_COUNT = #{ckdhCount,jdbcType=INTEGER},
      </if>
      <if test="xswtCount != null">
        XSWT_COUNT = #{xswtCount,jdbcType=INTEGER},
      </if>
      <if test="bzwtCount != null">
        BZWT_COUNT = #{bzwtCount,jdbcType=INTEGER},
      </if>
      <if test="wtCount != null">
        WT_COUNT = #{wtCount,jdbcType=INTEGER},
      </if>
      <if test="mtHouseCount != null">
        MT_HOUSE_COUNT = #{mtHouseCount,jdbcType=INTEGER},
      </if>
      <if test="mtCustomerCount != null">
        MT_CUSTOMER_COUNT = #{mtCustomerCount,jdbcType=INTEGER},
      </if>
      <if test="kyykCount != null">
        KYYK_COUNT = #{kyykCount,jdbcType=INTEGER},
      </if>
      <if test="yjCount != null">
        YJ_COUNT = #{yjCount,jdbcType=INTEGER},
      </if>
      <if test="ipcallCount != null">
        IPCALL_COUNT = #{ipcallCount,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunWorkcountTarget">
    <!--@mbggenerated-->
    update FUN_WORKCOUNT_TARGET
    set COMP_ID = #{compId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      GJ_HOUSE_COUNT = #{gjHouseCount,jdbcType=INTEGER},
      GJ_CUSTOMER_COUNT = #{gjCustomerCount,jdbcType=INTEGER},
      VR_COUNT = #{vrCount,jdbcType=INTEGER},
      SP_COUNT = #{spCount,jdbcType=INTEGER},
      KK_COUNT = #{kkCount,jdbcType=INTEGER},
      HOUSE_FAFA_COUNT = #{houseFafaCount,jdbcType=INTEGER},
      POST_SHARE_COUNT = #{postShareCount,jdbcType=INTEGER},
      HOUSE_ADD = #{houseAdd,jdbcType=INTEGER},
      CUSTOMER_ADD = #{customerAdd,jdbcType=INTEGER},
      DK_COUNT = #{dkCount,jdbcType=INTEGER},
      FK_COUNT = #{fkCount,jdbcType=INTEGER},
      YS_COUNT = #{ysCount,jdbcType=INTEGER},
      DJWT_COUNT = #{djwtCount,jdbcType=INTEGER},
      SIGN_DEAL_COUNT = #{signDealCount,jdbcType=INTEGER},
      TARGET_TYPE = #{targetType,jdbcType=TINYINT},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      TPSC_COUNT = #{tpscCount,jdbcType=INTEGER},
      CKDH_COUNT = #{ckdhCount,jdbcType=INTEGER},
      XSWT_COUNT = #{xswtCount,jdbcType=INTEGER},
      BZWT_COUNT = #{bzwtCount,jdbcType=INTEGER},
      WT_COUNT = #{wtCount,jdbcType=INTEGER},
      MT_HOUSE_COUNT = #{mtHouseCount,jdbcType=INTEGER},
      MT_CUSTOMER_COUNT = #{mtCustomerCount,jdbcType=INTEGER},
      KYYK_COUNT = #{kyykCount,jdbcType=INTEGER},
      YJ_COUNT = #{yjCount,jdbcType=INTEGER},
      IPCALL_COUNT = #{ipcallCount,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>

  <resultMap extends="BaseResultMap" id="extBaseResultMap" type="com.myfun.repository.erpdb.dto.ErpFunWorkCountTargetDto">
    <result column="USER_POSITION" jdbcType="VARCHAR" property="userPosition" />
  </resultMap>
  <select id="getWorkCountTargetList" resultMap="extBaseResultMap">
      SELECT c.COMP_ID, c.USER_ID, c.ID,b.USER_POSITION, GJ_HOUSE_COUNT, GJ_CUSTOMER_COUNT,
        VR_COUNT, SP_COUNT, KK_COUNT, HOUSE_FAFA_COUNT, POST_SHARE_COUNT, HOUSE_ADD, CUSTOMER_ADD,
        DK_COUNT, FK_COUNT, YS_COUNT, SIGN_DEAL_COUNT, TARGET_TYPE,b.AREA_ID,b.REG_ID,b.DEPT_ID,b.GR_ID, c.CREATE_TIME,TPSC_COUNT,CKDH_COUNT,WT_COUNT
      FROM ( select user_id, max(id) maxId from FUN_WORKCOUNT_TARGET a
            where a.comp_id=#{param.compId}
            <if test="null != param.targetType">
                and a.TARGET_TYPE = #{param.targetType}
            </if>
            group by user_id
            ) a
      JOIN FUN_USERS b on a.user_id = b.USER_ID
      JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
      WHERE  b.COMP_ID=#{param.compId} and b.user_writeoff=0
      <if test="null != param.areaId">
          and b.area_id = #{param.areaId}
      </if>
      <if test="null != param.regId">
          and b.REG_ID = #{param.regId}
      </if>
      <if test="null != param.deptId">
          and b.DEPT_ID = #{param.deptId}
      </if>
      <if test="null != param.grId">
          and b.GR_ID = #{param.grId}
      </if>
      <if test="null != param.userId">
          and b.USER_ID = #{param.userId}
      </if>
      <if test="null != param.userPosition and '' != param.userPosition">
          and b.USER_POSITION = #{param.userPosition}
      </if>
      <if test="null != param.targetType">
          and TARGET_TYPE = #{param.targetType}
      </if>
      <if test="param.partnerIds!=null and partnerIds.size>0">
            and b.PARTNER_ID in
        <foreach close=")" collection="partnerIds" index="index" item="id" open="(" separator=",">
          #{id}
        </foreach>
      </if>
      GROUP by c.COMP_ID, c.USER_ID, c.ID,b.USER_POSITION, GJ_HOUSE_COUNT, GJ_CUSTOMER_COUNT,
        VR_COUNT, SP_COUNT, KK_COUNT, HOUSE_FAFA_COUNT, POST_SHARE_COUNT, HOUSE_ADD, CUSTOMER_ADD,
        DK_COUNT, FK_COUNT, YS_COUNT, SIGN_DEAL_COUNT, TARGET_TYPE,b.AREA_ID,b.REG_ID,b.DEPT_ID,b.GR_ID,
        CREATE_TIME,TPSC_COUNT,CKDH_COUNT,WT_COUNT
      ORDER BY c.USER_ID
  </select>

    <select id="getSumWorkCountTargetList" resultType="java.util.Map">
        SELECT sum(GJ_HOUSE_COUNT) gjHouseCountT, sum(GJ_CUSTOMER_COUNT) gjCustomerCountT,
            sum(VR_COUNT) vrCountT, sum(SP_COUNT) spCountT, sum(KK_COUNT) kkCountT, sum(HOUSE_FAFA_COUNT) houseFafaCountT, sum(POST_SHARE_COUNT) postShareCountT, sum(HOUSE_ADD) houseAddT, sum(CUSTOMER_ADD) customerAddT,
            sum(DK_COUNT) dkCountT, sum(FK_COUNT) fkCountT, sum(YS_COUNT) ysCountT,  sum(SIGN_DEAL_COUNT) signDealCountT,sum(TPSC_COUNT) tpscCountT,sum(CKDH_COUNT) ckdhCountT,sum(WT_COUNT) wtCountT
        FROM ( select user_id, max(id) maxId from FUN_WORKCOUNT_TARGET a
            where a.comp_id=#{compId}
            <if test="null != targetType">
                and a.TARGET_TYPE = #{targetType}
            </if>
            group by user_id
        ) a
        JOIN FUN_USERS b on a.user_id = b.USER_ID
        JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
        WHERE b.COMP_ID=#{compId} and (b.USER_WRITEOFF = 0 or (b.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime}))
        AND
        <choose>
          <when test="rangeType == 1">b.COMP_ID = #{manageRangId}</when>
          <when test="rangeType == 2">AREA_ID = #{manageRangId}</when>
          <when test="rangeType == 3">REG_ID  = #{manageRangId}</when>
          <when test="rangeType == 4">DEPT_ID  = #{manageRangId}</when>
          <when test="rangeType == 5">GR_ID  = #{manageRangId}</when>
          <when test="rangeType == 6">a.USER_ID  = #{manageRangId}</when>
        </choose>
    </select>

	<select id="getAppSumWorkCountTargetList" resultType="java.util.Map">
		SELECT sum(GJ_HOUSE_COUNT) gjHouseCountT, sum(GJ_CUSTOMER_COUNT) gjCustomerCountT,
			sum(VR_COUNT) vrCountT, sum(SP_COUNT) spscCountT, sum(KK_COUNT) kfdpCountT, sum(HOUSE_FAFA_COUNT) qftgCountT, 
			sum(POST_SHARE_COUNT) pyqCountT, sum(HOUSE_ADD) houseAddT, sum(CUSTOMER_ADD) customerAddT,
			sum(DK_COUNT) fdkCountT, sum(FK_COUNT) fkCountT, sum(YS_COUNT) ystjCountT,  sum(SIGN_DEAL_COUNT) cjCountT, 
			sum(TPSC_COUNT) tpscCountT,sum(WT_COUNT) wtCountT,
            sum(MT_HOUSE_COUNT) mtHouseCountT, sum(MT_CUSTOMER_COUNT) mtCustomerCountT, sum(KYYK_COUNT) kyykCountT,
            sum(IPCALL_COUNT) ipcallCountT,sum(YJ_COUNT) yjCountT
		FROM ( select user_id, max(id) maxId FROM FUN_WORKCOUNT_TARGET a
          WHERE a.comp_id=#{compId} AND a.CREATE_TIME &lt;= #{endTime}
          <if test="null != targetType">
            AND a.TARGET_TYPE = #{targetType}
          </if>
          GROUP BY user_id
          ) a
		JOIN FUN_USERS b ON a.user_id = b.USER_ID
        JOIN FUN_WORKCOUNT_TARGET c ON a.maxId = c.id
		WHERE b.COMP_ID=#{compId} AND (b.USER_WRITEOFF = 0 OR (b.USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{startTime}))
<!-- 		and a.CREATE_TIME &gt;= #{startTime} and a.CREATE_TIME &lt;= #{endTime} -->
<!--         and a.CREATE_TIME &lt;= #{endTime} -->
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                AND DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">b.COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID </when>
			<when test="rangeType == 4">DEPT_ID </when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">a.USER_ID</when>
		</choose>
		IN 
		<foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
      <if test="separationConfig">
        <choose>
          <when test="partnerIdRange &lt; 0"> AND b.PARTNER_ID = -1 </when>
          <when test="partnerIdRange == 0"> AND b.PARTNER_ID in(-1,0) </when>
          <when test="partnerIdRange &gt; 0"> AND b.PARTNER_ID = #{partnerIdRange} </when>
        </choose>
      </if>
	</select>
    <select id="getAppSumWorkCountTargetListForOrg" resultType="java.util.Map">
      SELECT sum(GJ_HOUSE_COUNT) gjHouseCountT, sum(GJ_CUSTOMER_COUNT) gjCustomerCountT,
      sum(VR_COUNT) vrCountT, sum(SP_COUNT) spscCountT, sum(KK_COUNT) kfdpCountT, sum(HOUSE_FAFA_COUNT) qftgCountT,
      sum(POST_SHARE_COUNT) pyqCountT, sum(HOUSE_ADD) houseAddT, sum(CUSTOMER_ADD) customerAddT,
      sum(DK_COUNT) fdkCountT, sum(FK_COUNT) fkCountT, sum(YS_COUNT) ystjCountT,  sum(SIGN_DEAL_COUNT) cjCountT,
      sum(TPSC_COUNT) tpscCountT,sum(WT_COUNT) wtCountT,
      sum(MT_HOUSE_COUNT) mtHouseCountT, sum(MT_CUSTOMER_COUNT) mtCustomerCountT, sum(KYYK_COUNT) kyykCountT,
      sum(IPCALL_COUNT) ipcallCountT,sum(YJ_COUNT) yjCountT
      FROM ( select user_id, max(id) maxId FROM FUN_WORKCOUNT_TARGET a
      WHERE a.comp_id=#{compId} AND a.CREATE_TIME &lt;= #{endTime}
      <if test="null != targetType">
        AND a.TARGET_TYPE = #{targetType}
      </if>
      GROUP BY user_id
      ) a
      JOIN FUN_USERS b ON a.user_id = b.USER_ID
      JOIN FUN_WORKCOUNT_TARGET c ON a.maxId = c.id
      WHERE b.COMP_ID=#{compId} AND (b.USER_WRITEOFF = 0 OR (b.USER_WRITEOFF = 1 AND WRITEOFF_TIME &gt;= #{startTime}))
      <if test="whereCause != null and whereCause != ''">
        AND ${whereCause}
      </if>
      <if test="separationConfig">
        <choose>
          <when test="partnerIdRange &lt; 0"> AND b.PARTNER_ID = -1 </when>
          <when test="partnerIdRange == 0"> AND b.PARTNER_ID in(-1,0) </when>
          <when test="partnerIdRange &gt; 0"> AND b.PARTNER_ID = #{partnerIdRange} </when>
        </choose>
      </if>
    </select>
	<select id="getSumWorkCountTargetListReport" resultType="java.util.Map">
		SELECT c.USER_ID as userId,
        <if test="param.dateType==1">
          GJ_HOUSE_COUNT AS gjHouseCountT,
          GJ_CUSTOMER_COUNT AS gjCustomerCountT,
          VR_COUNT AS vrCountT,
          SP_COUNT AS spCountT,
          HOUSE_FAFA_COUNT AS houseFafaCountT,
          POST_SHARE_COUNT AS pyqCountT,
          TPSC_COUNT AS tpscCountT,
          CKDH_COUNT AS ckdhCountT
        </if>
        <if test="param.dateType==2">
          KK_COUNT AS kkCountT,
          HOUSE_ADD AS houseAddT,
          CUSTOMER_ADD AS customerAddT,
          DK_COUNT AS dkCountT,
          FK_COUNT AS fkCountT,
          YS_COUNT AS ysCountT,
          SIGN_DEAL_COUNT AS signDealCountT,
          WT_COUNT AS wtCountT
        </if>
		
		FROM ( select user_id, max(id) maxId from FUN_WORKCOUNT_TARGET a
		where a.TARGET_TYPE = #{param.dateType} and a.comp_id=#{param.compId}
		<if test="param.endTime != null and param.endTime != ''">
			AND a.CREATE_TIME &lt;= #{param.endTime}
		</if>
         group by user_id
      ) a
      JOIN FUN_USERS b on a.USER_ID = b.USER_ID
      JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
      WHERE b.COMP_ID = #{param.compId}  and b.user_writeoff=0
        <if test="null != param.areaId">
          and area_id = #{param.areaId}
        </if>
        <if test="null != param.regId">
          and REG_ID = #{param.regId}
        </if>
        <if test="param.deptId!=null">
          and DEPT_ID=#{param.deptId}
        </if>
        <if test="null != param.grId">
          and GR_ID = #{param.grId}
        </if>
        <if test="param.userPosition!=null and param.userPosition!=''">
            AND B.USER_POSITION = #{param.userPosition}
        </if>
		<if test="null != param.dateType">
			and TARGET_TYPE = #{param.dateType}
		</if>
        <if test="param.userIds != null and param.userIds.size&gt;0">
          and c.USER_ID in
          <foreach close=")" collection="param.userIds" item="userId" open="(" separator=",">
            #{userId}
          </foreach>
        </if>
        GROUP by c.USER_ID
        <if test="param.dateType==1">
          ,GJ_HOUSE_COUNT,GJ_CUSTOMER_COUNT,VR_COUNT,SP_COUNT,HOUSE_FAFA_COUNT,POST_SHARE_COUNT,TPSC_COUNT,CKDH_COUNT
        </if>
        <if test="param.dateType==2">
          ,KK_COUNT,
          HOUSE_ADD,
          CUSTOMER_ADD,
          DK_COUNT,
          FK_COUNT,
          YS_COUNT,
          SIGN_DEAL_COUNT,
          WT_COUNT
        </if>
        ORDER BY c.USER_ID
    </select>

	<select id="getUcenterWorkCountTarget" resultType="java.util.Map">
		SELECT
		ISNULL(${workColumns},0) AS countT,	ISNULL(COUNT (c.user_id), 0) countUser
		FROM (select user_id, max(id) maxId from FUN_WORKCOUNT_TARGET a
            where  a.comp_id=#{compId}
			<if test="null != targetType">
				and a.TARGET_TYPE = #{targetType}
			</if>
			<if test="param.endTime != null and param.endTime != ''">
				AND a.CREATE_TIME &lt;= #{param.endTime}
			</if>
           group by user_id
		) a
		JOIN FUN_USERS b on a.user_id = b.USER_ID
        JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
		WHERE  b.COMP_ID=#{compId} and (b.USER_WRITEOFF = 0 or (b.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime}))
		AND
		<choose>
			<when test="rangeType == 1">b.COMP_ID = #{manageRangId}</when>
			<when test="rangeType == 2">AREA_ID = #{manageRangId}</when>
			<when test="rangeType == 3">REG_ID  = #{manageRangId}</when>
			<when test="rangeType == 4">DEPT_ID  = #{manageRangId}</when>
			<when test="rangeType == 5">GR_ID  = #{manageRangId}</when>
			<when test="rangeType == 6">a.USER_ID  = #{manageRangId}</when>
		</choose>
	</select>

	<select id="getRangeNameList" resultType="java.util.Map">
		SELECT
		<choose>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose> as rangeId,
		<choose>
			<when test="rangeType == 2">AREA_NAME</when>
			<when test="rangeType == 3">REG_NAME</when>
			<when test="rangeType == 4">DEPT_NAME</when>
			<when test="rangeType == 5">GR_NAME</when>
			<when test="rangeType == 6">USER_NAME</when>
		</choose> as rangeName
		FROM (select user_id, max(id) maxId from FUN_WORKCOUNT_TARGET a
            where a.comp_id=#{compId}
			<if test="null != targetType">
				and a.TARGET_TYPE = #{targetType}
			</if>
            group by user_id
		) a
		JOIN FUN_USERS b on a.user_id = b.USER_ID
        JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
		WHERE b.COMP_ID=#{compId} and (b.USER_WRITEOFF = 0 or (b.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime}))
		AND
		<choose>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
	</select>

	<select id="getUcenterWorkCountTargetList" resultType="java.util.Map">
		SELECT
		ISNULL(${workColumns},0) AS countT,	ISNULL(COUNT (c.user_id), 0) countUser,
		<choose>
			<when test="rangeType == 1">a.COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">b.USER_ID</when>
		</choose> as rangeId
		FROM ( select user_id, max(id) maxId from FUN_WORKCOUNT_TARGET a
            where a.comp_id=#{compId}
			<if test="null != targetType">
				and a.TARGET_TYPE = #{targetType}
			</if>
            group by user_id
		) a
		JOIN FUN_USERS b on a.user_id = b.USER_ID
        JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
		WHERE  b.COMP_ID=#{compId} and (b.USER_WRITEOFF = 0 or (b.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime}))  and c.CREATE_TIME &lt;=#{startTime}
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">a.COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">a.USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
        <if test="partnerIds != null and partnerIds.size >0 ">
          and b.PARTNER_ID in
          <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
            #{id}
          </foreach>
        </if>
		GROUP BY
		<choose>
			<when test="rangeType == 1">a.COMP_ID</when>
			<when test="rangeType == 2">AREA_ID</when>
			<when test="rangeType == 3">REG_ID</when>
			<when test="rangeType == 4">DEPT_ID</when>
			<when test="rangeType == 5">GR_ID</when>
			<when test="rangeType == 6">b.USER_ID</when>
		</choose>
	</select>
	
	<select id="getTargetList" resultType="java.util.Map">
		SELECT
		ISNULL(${workColumns},0) AS countT,	
<!-- 		ISNULL(COUNT (a.user_id), 0) countUser, -->
<!-- 		<choose> -->
<!-- 			<when test="rangeType == 1">COMP_ID</when> -->
<!-- 			<when test="rangeType == 2">AREA_ID</when> -->
<!-- 			<when test="rangeType == 3">REG_ID</when> -->
<!-- 			<when test="rangeType == 4">DEPT_ID</when> -->
<!-- 			<when test="rangeType == 5">GR_ID</when> -->
<!-- 			<when test="rangeType == 6">b.USER_ID</when> -->
<!-- 		</choose> as rangeId -->
		<if test="lookType == 2">
			B.AREA_ID
		</if>
		<if test="lookType == 3">
			B.AREA_ID, B.REG_ID
		</if>
		<if test="lookType == 4">
			B.AREA_ID, B.REG_ID, B.DEPT_ID
		</if>
		<if test="lookType == 5">
			B.AREA_ID, B.REG_ID, B.DEPT_ID, B.GR_ID AS rangId , CONCAT(B.DEPT_ID,  '_', B.GR_ID ) AS GR_ID
		</if>
		<if test="lookType == 6">
			B.AREA_ID, B.REG_ID, B.DEPT_ID, B.GR_ID, B.USER_ID
		</if>
		FROM (
		SELECT USER_ID,MAX(id) x FROM FUN_WORKCOUNT_TARGET
		where comp_id=#{compId}
		<if test="null != targetType">
			and TARGET_TYPE = #{targetType}
		</if> GROUP BY user_id
		) a
		JOIN FUN_WORKCOUNT_TARGET on a.x = FUN_WORKCOUNT_TARGET.ID
		JOIN FUN_USERS b on a.user_id = b.USER_ID AND b.COMP_ID= #{compId}
		and (b.USER_WRITEOFF = 0 or (b.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime})) and FUN_WORKCOUNT_TARGET.CREATE_TIME &lt;=#{startTime}
		<choose>
			<when test="rangeType == 5">
              <if test="deptId != null">
                and b.DEPT_ID=#{deptId}
              </if>
            </when>
		</choose>
		AND
		<choose>
			<when test="rangeType == 1">b.COMP_ID</when>
			<when test="rangeType == 2">b.AREA_ID</when>
			<when test="rangeType == 3">b.REG_ID</when>
			<when test="rangeType == 4">b.DEPT_ID</when>
			<when test="rangeType == 5">b.GR_ID</when>
			<when test="rangeType == 6">b.USER_ID</when>
		</choose>
		IN
		<foreach close=")" collection="rangeIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
		<if test="partnerIds != null and partnerIds.size >0 ">
		    and b.PARTNER_ID in
          <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
            #{id}
          </foreach>
        </if>
		GROUP BY
<!-- 		<choose> -->
<!-- 			<when test="rangeType == 1">b.COMP_ID</when> -->
<!-- 			<when test="rangeType == 2">b.AREA_ID</when> -->
<!-- 			<when test="rangeType == 3">b.REG_ID</when> -->
<!-- 			<when test="rangeType == 4">b.DEPT_ID</when> -->
<!-- 			<when test="rangeType == 5">b.GR_ID</when> -->
<!-- 			<when test="rangeType == 6">b.USER_ID</when> -->
<!-- 		</choose> -->
		<if test="lookType == 2">
			b.AREA_ID
		</if>
		<if test="lookType == 3">
			b.AREA_ID, b.REG_ID
		</if>
		<if test="lookType == 4">
			b.AREA_ID, b.REG_ID, b.DEPT_ID
		</if>
		<if test="lookType == 5">
			b.AREA_ID, b.REG_ID, b.DEPT_ID, b.GR_ID,CONCAT(B.DEPT_ID,  '_', B.GR_ID )
		</if>
		<if test="lookType == 6">
			b.AREA_ID, b.REG_ID, b.DEPT_ID, b.GR_ID, b.USER_ID
		</if>
	</select>
    <select id="getTargetListForOrg" resultType="java.util.Map">
      SELECT
      ISNULL(${workColumns},0) AS countT,b.${groupByColumn} as rangeId
      FROM (
      SELECT USER_ID,MAX(id) x FROM FUN_WORKCOUNT_TARGET
      where comp_id=#{compId}
      <if test="null != targetType">
        and TARGET_TYPE = #{targetType}
      </if>
       GROUP BY user_id
      ) a
      JOIN FUN_WORKCOUNT_TARGET on a.x = FUN_WORKCOUNT_TARGET.ID
      JOIN FUN_USERS b on a.user_id = b.USER_ID AND b.COMP_ID= #{compId}
      and (b.USER_WRITEOFF = 0 or (b.USER_WRITEOFF = 1 and WRITEOFF_TIME &gt;= #{startTime})) and FUN_WORKCOUNT_TARGET.CREATE_TIME &lt;=#{startTime}
      <if test="partnerIds != null and partnerIds.size >0 ">
        and b.PARTNER_ID in
        <foreach close=")" collection="partnerIds" item="id" open="(" separator=",">
          #{id}
        </foreach>
      </if>
      <if test="whereCause != null and whereCause != ''">
        AND ${whereCause}
      </if>
      GROUP BY
      b.${groupByColumn}
    </select>
	<insert id="createTarget">
		INSERT INTO FUN_WORKCOUNT_TARGET ( [COMP_ID], [USER_ID], [GJ_HOUSE_COUNT], [GJ_CUSTOMER_COUNT], [VR_COUNT], [SP_COUNT], [KK_COUNT], [HOUSE_FAFA_COUNT], [POST_SHARE_COUNT], [HOUSE_ADD], [CUSTOMER_ADD], [DK_COUNT], [FK_COUNT], [YS_COUNT], [DJWT_COUNT], [SIGN_DEAL_COUNT], [TARGET_TYPE], [CREATE_TIME], [ARCHIVE_ID], [TPSC_COUNT], [CKDH_COUNT], [XSWT_COUNT], [BZWT_COUNT], [WT_COUNT],[MT_HOUSE_COUNT],[MT_CUSTOMER_COUNT],[KYYK_COUNT],[YJ_COUNT],[IPCALL_COUNT])
		SELECT COMP_ID, USER_ID, #{param.gjHouseCount}, #{param.gjCustomerCount}, #{param.vrCount}, #{param.spCount}, #{param.kkCount}, #{param.houseFafaCount}, #{param.postShareCount}, #{param.houseAdd}, #{param.customerAdd}, #{param.dkCount}, #{param.fkCount}, #{param.ysCount}, #{param.djwtCount}, #{param.signDealCount}, #{targetType}, GETDATE(), ARCHIVE_ID, #{param.tpscCount}, #{param.ckdhCount}, #{param.xswtCount}, #{param.bzwtCount}, #{param.wtCount}, #{param.mtHouseCount},#{param.mtCustomerCount},#{param.kyykCount},#{param.yjCount},#{param.ipcallCount} 
		FROM dbo.FUN_USERS WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0
		<if test="null != areaId">
			AND AREA_ID = #{areaId}
		</if>
        <if test="null != partnerIds and partnerIds.size>0">
        AND PARTNER_ID in
        <foreach collection="partnerIds" item="id" index="index" open="(" close=")" separator=",">
          #{id}
        </foreach>
      </if>
		<if test="null != regId">
			AND REG_ID = #{regId}
		</if>
		<if test="null != deptId and 0 != deptId">
			AND DEPT_ID = #{deptId}
		</if>
		<if test="grId != null">
			AND GR_ID = #{grId}
		</if>
		<if test="null != userPosition">
			AND USER_POSITION in
          <foreach collection="userPosition" item="id" index="index" open="(" close=")" separator=",">
            #{id}
          </foreach>
		</if>
		<if test="null != userId">
			AND USER_ID = #{userId}	
		</if>
	</insert>
  <insert id="createTargetForOrg">
    INSERT INTO FUN_WORKCOUNT_TARGET ( [COMP_ID], [USER_ID], [GJ_HOUSE_COUNT], [GJ_CUSTOMER_COUNT], [VR_COUNT], [SP_COUNT], [KK_COUNT], [HOUSE_FAFA_COUNT], [POST_SHARE_COUNT], [HOUSE_ADD], [CUSTOMER_ADD], [DK_COUNT], [FK_COUNT], [YS_COUNT], [DJWT_COUNT], [SIGN_DEAL_COUNT], [TARGET_TYPE], [CREATE_TIME], [ARCHIVE_ID], [TPSC_COUNT], [CKDH_COUNT], [XSWT_COUNT], [BZWT_COUNT], [WT_COUNT],[MT_HOUSE_COUNT],[MT_CUSTOMER_COUNT],[KYYK_COUNT],[YJ_COUNT],[IPCALL_COUNT])
    SELECT COMP_ID, USER_ID, #{param.gjHouseCount}, #{param.gjCustomerCount}, #{param.vrCount}, #{param.spCount}, #{param.kkCount}, #{param.houseFafaCount}, #{param.postShareCount}, #{param.houseAdd}, #{param.customerAdd}, #{param.dkCount}, #{param.fkCount}, #{param.ysCount}, #{param.djwtCount}, #{param.signDealCount}, #{targetType}, GETDATE(), ARCHIVE_ID, #{param.tpscCount}, #{param.ckdhCount}, #{param.xswtCount}, #{param.bzwtCount}, #{param.wtCount}, #{param.mtHouseCount},#{param.mtCustomerCount},#{param.kyykCount},#{param.yjCount},#{param.ipcallCount}
    FROM dbo.FUN_USERS WHERE COMP_ID = #{compId} AND USER_WRITEOFF = 0
    <if test="orgPath != null and orgPath != ''">
      AND TISSUE_LINE = #{orgPath}
    </if>
    <if test="null != partnerIds and partnerIds.size>0">
      AND PARTNER_ID in
      <foreach collection="partnerIds" item="id" index="index" open="(" close=")" separator=",">
        #{id}
      </foreach>
    </if>
    <if test="null != userPositionList and userPositionList.size > 0">
      AND USER_POSITION in
      <foreach collection="userPositionList" item="id" index="index" open="(" close=")" separator=",">
        #{id}
      </foreach>
    </if>
    <if test="null != userId">
      AND USER_ID = #{userId}
    </if>
  </insert>
	<select id="getWorkCountOutOfUseTarget" resultMap="BaseResultMap">
		SELECT C.*
		FROM ( select user_id, A.TARGET_TYPE,max(id) maxId from
		FUN_WORKCOUNT_TARGET a
		where a.comp_id= #{compId} AND A.USER_ID = #{rangeId}
		group by user_id, A.TARGET_TYPE
		) a
		JOIN FUN_USERS b on a.user_id = b.USER_ID
		JOIN FUN_WORKCOUNT_TARGET c on a.maxId = c.id
		WHERE b.COMP_ID= #{compId} and b.user_writeoff=0 AND B.USER_ID = #{rangeId}
	</select>
</mapper>