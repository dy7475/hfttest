<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunRentCustomerMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    <id column="RENT_CUST_ID" jdbcType="INTEGER" property="rentCustId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="REG_ID" jdbcType="INTEGER" property="regId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="ARCHIVE_ID" jdbcType="INTEGER" property="archiveId" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="CREATOR_UID" jdbcType="INTEGER" property="creatorUid" />
    <result column="CREATE_ARCHIVE_ID" jdbcType="INTEGER" property="createArchiveId" />
    <result column="RENT_CUST_NO" jdbcType="VARCHAR" property="rentCustNo" />
    <result column="RENT_CUST_NAME" jdbcType="VARCHAR" property="rentCustName" />
    <result column="RENT_CUST_SEX" jdbcType="BIT" property="rentCustSex" />
    <result column="RENT_CUST_AGE" jdbcType="TINYINT" property="rentCustAge" />
    <result column="RENT_CUST_CAREER" jdbcType="TINYINT" property="rentCustCareer" />
    <result column="CELL_PHONE" jdbcType="VARCHAR" property="cellPhone" />
    <result column="ID_CARD" jdbcType="VARCHAR" property="idCard" />
    <result column="CUST_ADDR" jdbcType="VARCHAR" property="custAddr" />
    <result column="RENT_LIFEBOUND" jdbcType="VARCHAR" property="rentLifebound" />
    <result column="RENT_GOAL" jdbcType="TINYINT" property="rentGoal" />
    <result column="RENT_LENGTH" jdbcType="TINYINT" property="rentLength" />
    <result column="RENT_ABILITY" jdbcType="TINYINT" property="rentAbility" />
    <result column="RENT_PAYTYPE" jdbcType="TINYINT" property="rentPaytype" />
    <result column="CUST_LEVEL" jdbcType="VARCHAR" property="custLevel" />
    <result column="HOUSE_ROOM" jdbcType="TINYINT" property="houseRoom" />
    <result column="HOUSE_ROOM_1" jdbcType="TINYINT" property="houseRoom1" />
    <result column="HOUSE_REGION" jdbcType="VARCHAR" property="houseRegion" />
    <result column="REGION_NAME" jdbcType="VARCHAR" property="regionName" />
    <result column="BUILD_ID" jdbcType="VARCHAR" property="buildId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="SECTION_ID" jdbcType="VARCHAR" property="sectionId" />
    <result column="SECTION_NAME" jdbcType="VARCHAR" property="sectionName" />
    <result column="HOUSE_ROUND" jdbcType="VARCHAR" property="houseRound" />
    <result column="HOUSE_TYPE" jdbcType="VARCHAR" property="houseType" />
    <result column="HOUSE_USEAGE" jdbcType="VARCHAR" property="houseUseage" />
    <result column="HOUSE_FITMENT" jdbcType="TINYINT" property="houseFitment" />
    <result column="HOUSE_DIRECT" jdbcType="VARCHAR" property="houseDirect" />
    <result column="PLATE_TYPE" jdbcType="TINYINT" property="plateType" />
    <result column="RENT_CUST_SOURCE" jdbcType="TINYINT" property="rentCustSource" />
    <result column="RENT_CUST_LEVEL" jdbcType="TINYINT" property="rentCustLevel" />
    <result column="HOUSE_FLOOR_LOW" jdbcType="SMALLINT" property="houseFloorLow" />
    <result column="HOUSE_FLOOR_HIGH" jdbcType="SMALLINT" property="houseFloorHigh" />
    <result column="HOUSE_PRICE_LOW" jdbcType="NUMERIC" property="housePriceLow" />
    <result column="HOUSE_PRICE_HIGH" jdbcType="NUMERIC" property="housePriceHigh" />
    <result column="HOUSE_AREA_LOW" jdbcType="NUMERIC" property="houseAreaLow" />
    <result column="HOUSE_AREA_HIGH" jdbcType="NUMERIC" property="houseAreaHigh" />
    <result column="HOUSE_YEAR_LOW" jdbcType="SMALLINT" property="houseYearLow" />
    <result column="HOUSE_YEAR_HIGH" jdbcType="SMALLINT" property="houseYearHigh" />
    <result column="HOUSE_LOOK" jdbcType="BIT" property="houseLook" />
    <result column="CUST_REQUEST" jdbcType="VARCHAR" property="custRequest" />
    <result column="CUST_MEMO" jdbcType="VARCHAR" property="custMemo" />
    <result column="RENT_CUST_STATUS" jdbcType="TINYINT" property="rentCustStatus" />
    <result column="TRACK_TIME" jdbcType="TIMESTAMP" property="trackTime" />
    <result column="ACTION_TIME" jdbcType="TIMESTAMP" property="actionTime" />
    <result column="REPEAT_FLAG" jdbcType="BIT" property="repeatFlag" />
    <result column="INFO_TYPE" jdbcType="TINYINT" property="infoType" />
    <result column="SHARE_FLAG" jdbcType="BIT" property="shareFlag" />
    <result column="RED_FLAG" jdbcType="BIT" property="redFlag" />
    <result column="ORANGE_FLAG" jdbcType="BIT" property="orangeFlag" />
    <result column="PUBLIC_COUNT" jdbcType="INTEGER" property="publicCount" />
    <result column="PUBLIC_TIME" jdbcType="TIMESTAMP" property="publicTime" />
    <result column="DUE_TIME" jdbcType="TIMESTAMP" property="dueTime" />
    <result column="SPECIAL_TIME" jdbcType="TIMESTAMP" property="specialTime" />
    <result column="SCHEDULE_TIME" jdbcType="TIMESTAMP" property="scheduleTime" />
    <result column="DEAL_TIME" jdbcType="TIMESTAMP" property="dealTime" />
    <result column="WRITEOFF_TIME" jdbcType="TIMESTAMP" property="writeoffTime" />
    <result column="SECRECY_TIME" jdbcType="TIMESTAMP" property="secrecyTime" />
    <result column="COMMEND_TIME" jdbcType="TIMESTAMP" property="commendTime" />
    <result column="PRIVATE_TIME" jdbcType="TIMESTAMP" property="privateTime" />
    <result column="FROM_PUBLIC" jdbcType="BIT" property="fromPublic" />
    <result column="COOPERATE_FLAG" jdbcType="INTEGER" property="cooperateFlag" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="FRIEND_HOUSE" jdbcType="TINYINT" property="friendHouse" />
    <result column="COOPERATE_TIME" jdbcType="TIMESTAMP" property="cooperateTime" />
    <result column="COMPLAINT_FLAG" jdbcType="BIT" property="complaintFlag" />
    <result column="AREA_ID" jdbcType="INTEGER" property="areaId" />
    <result column="is_ignore" jdbcType="TINYINT" property="isIgnore" />
    <result column="YOU_SHARE_FLAG" jdbcType="TINYINT" property="youShareFlag" />
    <result column="YOU_SHARE_TIME" jdbcType="TIMESTAMP" property="youShareTime" />
    <result column="YOU_BUY_COUNT" jdbcType="INTEGER" property="youBuyCount" />
    <result column="PRIVATE_USER_ID" jdbcType="INTEGER" property="privateUserId" />
    <result column="SYNC_TIME" jdbcType="TIMESTAMP" property="syncTime" />
    <result column="YOU_SHARE_ID" jdbcType="INTEGER" property="youShareId" />
    <result column="SPECIAL_END_TIME" jdbcType="TIMESTAMP" property="specialEndTime" />
    <result column="SCHEDULE_END_TIME" jdbcType="TIMESTAMP" property="scheduleEndTime" />
    <result column="CITY_SHARE_FLAG" jdbcType="TINYINT" property="cityShareFlag" />
    <result column="ROADS_ID" jdbcType="VARCHAR" property="roadsId" />
    <result column="ROADS_NAME" jdbcType="VARCHAR" property="roadsName" />
    <result column="RESPITE_END_TIME" jdbcType="TIMESTAMP" property="respiteEndTime" />
    <result column="IS_SALE_LEASE" jdbcType="TINYINT" property="isSaleLease" />
    <result column="AVAILABLE_TIME" jdbcType="TIMESTAMP" property="availableTime" />
    <result column="LAST_DKAN_TIME" jdbcType="TIMESTAMP" property="lastDkanTime" />
    <result column="WECHAT_NUMBER" jdbcType="VARCHAR" property="wechatNumber" />
    <result column="CUST_PHOTO" jdbcType="VARCHAR" property="custPhoto" />
    <result column="ID_CARD_TYPE" jdbcType="INTEGER" property="idCardType" />
    <result column="RENT_CURRENT_STATUS" jdbcType="TINYINT" property="rentCurrentStatus" />
    <result column="VEHICLE" jdbcType="TINYINT" property="vehicle" />
    <result column="MENTALITY" jdbcType="TINYINT" property="mentality" />
    <result column="C_USER_ID" jdbcType="INTEGER" property="cUserId" />
    <result column="USER_LEVEL" jdbcType="INTEGER" property="userLevel" />
    <result column="TISSUE_LINE" jdbcType="VARCHAR" property="tissueLine" />
    <result column="PARTNER_ID" jdbcType="INTEGER" property="partnerId" />
    <result column="ORGANIZATION_ID" jdbcType="INTEGER" property="organizationId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    <result column="FUZZY_SEARCH" jdbcType="CLOB" property="fuzzySearch" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    RENT_CUST_ID, COMP_ID, CITY_ID, REG_ID, DEPT_ID, GR_ID, USER_ID, ARCHIVE_ID, CREATION_TIME, 
    CREATOR_UID, CREATE_ARCHIVE_ID, RENT_CUST_NO, RENT_CUST_NAME, RENT_CUST_SEX, RENT_CUST_AGE, 
    RENT_CUST_CAREER, CELL_PHONE, ID_CARD, CUST_ADDR, RENT_LIFEBOUND, RENT_GOAL, RENT_LENGTH, 
    RENT_ABILITY, RENT_PAYTYPE, CUST_LEVEL, HOUSE_ROOM, HOUSE_ROOM_1, HOUSE_REGION, REGION_NAME, 
    BUILD_ID, BUILD_NAME, SECTION_ID, SECTION_NAME, HOUSE_ROUND, HOUSE_TYPE, HOUSE_USEAGE, 
    HOUSE_FITMENT, HOUSE_DIRECT, PLATE_TYPE, RENT_CUST_SOURCE, RENT_CUST_LEVEL, HOUSE_FLOOR_LOW, 
    HOUSE_FLOOR_HIGH, HOUSE_PRICE_LOW, HOUSE_PRICE_HIGH, HOUSE_AREA_LOW, HOUSE_AREA_HIGH, 
    HOUSE_YEAR_LOW, HOUSE_YEAR_HIGH, HOUSE_LOOK, CUST_REQUEST, CUST_MEMO, RENT_CUST_STATUS, 
    TRACK_TIME, ACTION_TIME, REPEAT_FLAG, INFO_TYPE, SHARE_FLAG, RED_FLAG, ORANGE_FLAG, 
    PUBLIC_COUNT, PUBLIC_TIME, DUE_TIME, SPECIAL_TIME, SCHEDULE_TIME, DEAL_TIME, WRITEOFF_TIME, 
    SECRECY_TIME, COMMEND_TIME, PRIVATE_TIME, FROM_PUBLIC, COOPERATE_FLAG, UPDATE_TIME, 
    FRIEND_HOUSE, COOPERATE_TIME, COMPLAINT_FLAG, AREA_ID, is_ignore, YOU_SHARE_FLAG, 
    YOU_SHARE_TIME, YOU_BUY_COUNT, PRIVATE_USER_ID, SYNC_TIME, YOU_SHARE_ID, SPECIAL_END_TIME, 
    SCHEDULE_END_TIME, CITY_SHARE_FLAG, ROADS_ID, ROADS_NAME, RESPITE_END_TIME, IS_SALE_LEASE, 
    AVAILABLE_TIME, LAST_DKAN_TIME, WECHAT_NUMBER, CUST_PHOTO, ID_CARD_TYPE, RENT_CURRENT_STATUS, 
    VEHICLE, MENTALITY, C_USER_ID, USER_LEVEL, TISSUE_LINE, PARTNER_ID, ORGANIZATION_ID
  </sql>
  <sql id="Blob_Column_List">
    <!--@mbggenerated-->
    FUZZY_SEARCH
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomerExample" resultMap="ResultMapWithBLOBs">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from FUN_RENT_CUSTOMER
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomerExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_RENT_CUSTOMER
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from FUN_RENT_CUSTOMER
    where RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_RENT_CUSTOMER
    where RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomerExample">
    <!--@mbggenerated-->
    delete from FUN_RENT_CUSTOMER
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    insert into FUN_RENT_CUSTOMER (RENT_CUST_ID, COMP_ID, CITY_ID, 
      REG_ID, DEPT_ID, GR_ID, 
      USER_ID, ARCHIVE_ID, CREATION_TIME, 
      CREATOR_UID, CREATE_ARCHIVE_ID, RENT_CUST_NO, 
      RENT_CUST_NAME, RENT_CUST_SEX, RENT_CUST_AGE, 
      RENT_CUST_CAREER, CELL_PHONE, ID_CARD, 
      CUST_ADDR, RENT_LIFEBOUND, RENT_GOAL, 
      RENT_LENGTH, RENT_ABILITY, RENT_PAYTYPE, 
      CUST_LEVEL, HOUSE_ROOM, HOUSE_ROOM_1, 
      HOUSE_REGION, REGION_NAME, BUILD_ID, 
      BUILD_NAME, SECTION_ID, SECTION_NAME, 
      HOUSE_ROUND, HOUSE_TYPE, HOUSE_USEAGE, 
      HOUSE_FITMENT, HOUSE_DIRECT, PLATE_TYPE, 
      RENT_CUST_SOURCE, RENT_CUST_LEVEL, HOUSE_FLOOR_LOW, 
      HOUSE_FLOOR_HIGH, HOUSE_PRICE_LOW, HOUSE_PRICE_HIGH, 
      HOUSE_AREA_LOW, HOUSE_AREA_HIGH, HOUSE_YEAR_LOW, 
      HOUSE_YEAR_HIGH, HOUSE_LOOK, CUST_REQUEST, 
      CUST_MEMO, RENT_CUST_STATUS, TRACK_TIME, 
      ACTION_TIME, REPEAT_FLAG, INFO_TYPE, 
      SHARE_FLAG, RED_FLAG, ORANGE_FLAG, 
      PUBLIC_COUNT, PUBLIC_TIME, DUE_TIME, 
      SPECIAL_TIME, SCHEDULE_TIME, DEAL_TIME, 
      WRITEOFF_TIME, SECRECY_TIME, COMMEND_TIME, 
      PRIVATE_TIME, FROM_PUBLIC, COOPERATE_FLAG, 
      UPDATE_TIME, FRIEND_HOUSE, COOPERATE_TIME, 
      COMPLAINT_FLAG, AREA_ID, is_ignore, 
      YOU_SHARE_FLAG, YOU_SHARE_TIME, YOU_BUY_COUNT, 
      PRIVATE_USER_ID, SYNC_TIME, YOU_SHARE_ID, 
      SPECIAL_END_TIME, SCHEDULE_END_TIME, CITY_SHARE_FLAG, 
      ROADS_ID, ROADS_NAME, RESPITE_END_TIME, 
      IS_SALE_LEASE, AVAILABLE_TIME, LAST_DKAN_TIME, 
      WECHAT_NUMBER, CUST_PHOTO, ID_CARD_TYPE, 
      RENT_CURRENT_STATUS, VEHICLE, MENTALITY, 
      C_USER_ID, USER_LEVEL, TISSUE_LINE, 
      PARTNER_ID, ORGANIZATION_ID, FUZZY_SEARCH
      )
    values (#{rentCustId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{cityId,jdbcType=INTEGER}, 
      #{regId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{grId,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{archiveId,jdbcType=INTEGER}, #{creationTime,jdbcType=TIMESTAMP}, 
      #{creatorUid,jdbcType=INTEGER}, #{createArchiveId,jdbcType=INTEGER}, #{rentCustNo,jdbcType=VARCHAR}, 
      #{rentCustName,jdbcType=VARCHAR}, #{rentCustSex,jdbcType=BIT}, #{rentCustAge,jdbcType=TINYINT}, 
      #{rentCustCareer,jdbcType=TINYINT}, #{cellPhone,jdbcType=VARCHAR}, #{idCard,jdbcType=VARCHAR}, 
      #{custAddr,jdbcType=VARCHAR}, #{rentLifebound,jdbcType=VARCHAR}, #{rentGoal,jdbcType=TINYINT}, 
      #{rentLength,jdbcType=TINYINT}, #{rentAbility,jdbcType=TINYINT}, #{rentPaytype,jdbcType=TINYINT}, 
      #{custLevel,jdbcType=VARCHAR}, #{houseRoom,jdbcType=TINYINT}, #{houseRoom1,jdbcType=TINYINT}, 
      #{houseRegion,jdbcType=VARCHAR}, #{regionName,jdbcType=VARCHAR}, #{buildId,jdbcType=VARCHAR}, 
      #{buildName,jdbcType=VARCHAR}, #{sectionId,jdbcType=VARCHAR}, #{sectionName,jdbcType=VARCHAR}, 
      #{houseRound,jdbcType=VARCHAR}, #{houseType,jdbcType=VARCHAR}, #{houseUseage,jdbcType=VARCHAR}, 
      #{houseFitment,jdbcType=TINYINT}, #{houseDirect,jdbcType=VARCHAR}, #{plateType,jdbcType=TINYINT}, 
      #{rentCustSource,jdbcType=TINYINT}, #{rentCustLevel,jdbcType=TINYINT}, #{houseFloorLow,jdbcType=SMALLINT}, 
      #{houseFloorHigh,jdbcType=SMALLINT}, #{housePriceLow,jdbcType=NUMERIC}, #{housePriceHigh,jdbcType=NUMERIC}, 
      #{houseAreaLow,jdbcType=NUMERIC}, #{houseAreaHigh,jdbcType=NUMERIC}, #{houseYearLow,jdbcType=SMALLINT}, 
      #{houseYearHigh,jdbcType=SMALLINT}, #{houseLook,jdbcType=BIT}, #{custRequest,jdbcType=VARCHAR}, 
      #{custMemo,jdbcType=VARCHAR}, #{rentCustStatus,jdbcType=TINYINT}, #{trackTime,jdbcType=TIMESTAMP}, 
      #{actionTime,jdbcType=TIMESTAMP}, #{repeatFlag,jdbcType=BIT}, #{infoType,jdbcType=TINYINT}, 
      #{shareFlag,jdbcType=BIT}, #{redFlag,jdbcType=BIT}, #{orangeFlag,jdbcType=BIT}, 
      #{publicCount,jdbcType=INTEGER}, #{publicTime,jdbcType=TIMESTAMP}, #{dueTime,jdbcType=TIMESTAMP}, 
      #{specialTime,jdbcType=TIMESTAMP}, #{scheduleTime,jdbcType=TIMESTAMP}, #{dealTime,jdbcType=TIMESTAMP}, 
      #{writeoffTime,jdbcType=TIMESTAMP}, #{secrecyTime,jdbcType=TIMESTAMP}, #{commendTime,jdbcType=TIMESTAMP}, 
      #{privateTime,jdbcType=TIMESTAMP}, #{fromPublic,jdbcType=BIT}, #{cooperateFlag,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{friendHouse,jdbcType=TINYINT}, #{cooperateTime,jdbcType=TIMESTAMP}, 
      #{complaintFlag,jdbcType=BIT}, #{areaId,jdbcType=INTEGER}, #{isIgnore,jdbcType=TINYINT}, 
      #{youShareFlag,jdbcType=TINYINT}, #{youShareTime,jdbcType=TIMESTAMP}, #{youBuyCount,jdbcType=INTEGER}, 
      #{privateUserId,jdbcType=INTEGER}, #{syncTime,jdbcType=TIMESTAMP}, #{youShareId,jdbcType=INTEGER}, 
      #{specialEndTime,jdbcType=TIMESTAMP}, #{scheduleEndTime,jdbcType=TIMESTAMP}, #{cityShareFlag,jdbcType=TINYINT}, 
      #{roadsId,jdbcType=VARCHAR}, #{roadsName,jdbcType=VARCHAR}, #{respiteEndTime,jdbcType=TIMESTAMP}, 
      #{isSaleLease,jdbcType=TINYINT}, #{availableTime,jdbcType=TIMESTAMP}, #{lastDkanTime,jdbcType=TIMESTAMP}, 
      #{wechatNumber,jdbcType=VARCHAR}, #{custPhoto,jdbcType=VARCHAR}, #{idCardType,jdbcType=INTEGER}, 
      #{rentCurrentStatus,jdbcType=TINYINT}, #{vehicle,jdbcType=TINYINT}, #{mentality,jdbcType=TINYINT}, 
      #{cUserId,jdbcType=INTEGER}, #{userLevel,jdbcType=INTEGER}, #{tissueLine,jdbcType=VARCHAR}, 
      #{partnerId,jdbcType=INTEGER}, #{organizationId,jdbcType=INTEGER}, #{fuzzySearch,jdbcType=CLOB}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    insert into FUN_RENT_CUSTOMER
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="rentCustId != null">
        RENT_CUST_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="regId != null">
        REG_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="grId != null">
        GR_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="creatorUid != null">
        CREATOR_UID,
      </if>
      <if test="createArchiveId != null">
        CREATE_ARCHIVE_ID,
      </if>
      <if test="rentCustNo != null">
        RENT_CUST_NO,
      </if>
      <if test="rentCustName != null">
        RENT_CUST_NAME,
      </if>
      <if test="rentCustSex != null">
        RENT_CUST_SEX,
      </if>
      <if test="rentCustAge != null">
        RENT_CUST_AGE,
      </if>
      <if test="rentCustCareer != null">
        RENT_CUST_CAREER,
      </if>
      <if test="cellPhone != null">
        CELL_PHONE,
      </if>
      <if test="idCard != null">
        ID_CARD,
      </if>
      <if test="custAddr != null">
        CUST_ADDR,
      </if>
      <if test="rentLifebound != null">
        RENT_LIFEBOUND,
      </if>
      <if test="rentGoal != null">
        RENT_GOAL,
      </if>
      <if test="rentLength != null">
        RENT_LENGTH,
      </if>
      <if test="rentAbility != null">
        RENT_ABILITY,
      </if>
      <if test="rentPaytype != null">
        RENT_PAYTYPE,
      </if>
      <if test="custLevel != null">
        CUST_LEVEL,
      </if>
      <if test="houseRoom != null">
        HOUSE_ROOM,
      </if>
      <if test="houseRoom1 != null">
        HOUSE_ROOM_1,
      </if>
      <if test="houseRegion != null">
        HOUSE_REGION,
      </if>
      <if test="regionName != null">
        REGION_NAME,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="buildName != null">
        BUILD_NAME,
      </if>
      <if test="sectionId != null">
        SECTION_ID,
      </if>
      <if test="sectionName != null">
        SECTION_NAME,
      </if>
      <if test="houseRound != null">
        HOUSE_ROUND,
      </if>
      <if test="houseType != null">
        HOUSE_TYPE,
      </if>
      <if test="houseUseage != null">
        HOUSE_USEAGE,
      </if>
      <if test="houseFitment != null">
        HOUSE_FITMENT,
      </if>
      <if test="houseDirect != null">
        HOUSE_DIRECT,
      </if>
      <if test="plateType != null">
        PLATE_TYPE,
      </if>
      <if test="rentCustSource != null">
        RENT_CUST_SOURCE,
      </if>
      <if test="rentCustLevel != null">
        RENT_CUST_LEVEL,
      </if>
      <if test="houseFloorLow != null">
        HOUSE_FLOOR_LOW,
      </if>
      <if test="houseFloorHigh != null">
        HOUSE_FLOOR_HIGH,
      </if>
      <if test="housePriceLow != null">
        HOUSE_PRICE_LOW,
      </if>
      <if test="housePriceHigh != null">
        HOUSE_PRICE_HIGH,
      </if>
      <if test="houseAreaLow != null">
        HOUSE_AREA_LOW,
      </if>
      <if test="houseAreaHigh != null">
        HOUSE_AREA_HIGH,
      </if>
      <if test="houseYearLow != null">
        HOUSE_YEAR_LOW,
      </if>
      <if test="houseYearHigh != null">
        HOUSE_YEAR_HIGH,
      </if>
      <if test="houseLook != null">
        HOUSE_LOOK,
      </if>
      <if test="custRequest != null">
        CUST_REQUEST,
      </if>
      <if test="custMemo != null">
        CUST_MEMO,
      </if>
      <if test="rentCustStatus != null">
        RENT_CUST_STATUS,
      </if>
      <if test="trackTime != null">
        TRACK_TIME,
      </if>
      <if test="actionTime != null">
        ACTION_TIME,
      </if>
      <if test="repeatFlag != null">
        REPEAT_FLAG,
      </if>
      <if test="infoType != null">
        INFO_TYPE,
      </if>
      <if test="shareFlag != null">
        SHARE_FLAG,
      </if>
      <if test="redFlag != null">
        RED_FLAG,
      </if>
      <if test="orangeFlag != null">
        ORANGE_FLAG,
      </if>
      <if test="publicCount != null">
        PUBLIC_COUNT,
      </if>
      <if test="publicTime != null">
        PUBLIC_TIME,
      </if>
      <if test="dueTime != null">
        DUE_TIME,
      </if>
      <if test="specialTime != null">
        SPECIAL_TIME,
      </if>
      <if test="scheduleTime != null">
        SCHEDULE_TIME,
      </if>
      <if test="dealTime != null">
        DEAL_TIME,
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME,
      </if>
      <if test="secrecyTime != null">
        SECRECY_TIME,
      </if>
      <if test="commendTime != null">
        COMMEND_TIME,
      </if>
      <if test="privateTime != null">
        PRIVATE_TIME,
      </if>
      <if test="fromPublic != null">
        FROM_PUBLIC,
      </if>
      <if test="cooperateFlag != null">
        COOPERATE_FLAG,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="friendHouse != null">
        FRIEND_HOUSE,
      </if>
      <if test="cooperateTime != null">
        COOPERATE_TIME,
      </if>
      <if test="complaintFlag != null">
        COMPLAINT_FLAG,
      </if>
      <if test="areaId != null">
        AREA_ID,
      </if>
      <if test="isIgnore != null">
        is_ignore,
      </if>
      <if test="youShareFlag != null">
        YOU_SHARE_FLAG,
      </if>
      <if test="youShareTime != null">
        YOU_SHARE_TIME,
      </if>
      <if test="youBuyCount != null">
        YOU_BUY_COUNT,
      </if>
      <if test="privateUserId != null">
        PRIVATE_USER_ID,
      </if>
      <if test="syncTime != null">
        SYNC_TIME,
      </if>
      <if test="youShareId != null">
        YOU_SHARE_ID,
      </if>
      <if test="specialEndTime != null">
        SPECIAL_END_TIME,
      </if>
      <if test="scheduleEndTime != null">
        SCHEDULE_END_TIME,
      </if>
      <if test="cityShareFlag != null">
        CITY_SHARE_FLAG,
      </if>
      <if test="roadsId != null">
        ROADS_ID,
      </if>
      <if test="roadsName != null">
        ROADS_NAME,
      </if>
      <if test="respiteEndTime != null">
        RESPITE_END_TIME,
      </if>
      <if test="isSaleLease != null">
        IS_SALE_LEASE,
      </if>
      <if test="availableTime != null">
        AVAILABLE_TIME,
      </if>
      <if test="lastDkanTime != null">
        LAST_DKAN_TIME,
      </if>
      <if test="wechatNumber != null">
        WECHAT_NUMBER,
      </if>
      <if test="custPhoto != null">
        CUST_PHOTO,
      </if>
      <if test="idCardType != null">
        ID_CARD_TYPE,
      </if>
      <if test="rentCurrentStatus != null">
        RENT_CURRENT_STATUS,
      </if>
      <if test="vehicle != null">
        VEHICLE,
      </if>
      <if test="mentality != null">
        MENTALITY,
      </if>
      <if test="cUserId != null">
        C_USER_ID,
      </if>
      <if test="userLevel != null">
        USER_LEVEL,
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE,
      </if>
      <if test="partnerId != null">
        PARTNER_ID,
      </if>
      <if test="organizationId != null">
        ORGANIZATION_ID,
      </if>
      <if test="fuzzySearch != null">
        FUZZY_SEARCH,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="rentCustId != null">
        #{rentCustId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creatorUid != null">
        #{creatorUid,jdbcType=INTEGER},
      </if>
      <if test="createArchiveId != null">
        #{createArchiveId,jdbcType=INTEGER},
      </if>
      <if test="rentCustNo != null">
        #{rentCustNo,jdbcType=VARCHAR},
      </if>
      <if test="rentCustName != null">
        #{rentCustName,jdbcType=VARCHAR},
      </if>
      <if test="rentCustSex != null">
        #{rentCustSex,jdbcType=BIT},
      </if>
      <if test="rentCustAge != null">
        #{rentCustAge,jdbcType=TINYINT},
      </if>
      <if test="rentCustCareer != null">
        #{rentCustCareer,jdbcType=TINYINT},
      </if>
      <if test="cellPhone != null">
        #{cellPhone,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="custAddr != null">
        #{custAddr,jdbcType=VARCHAR},
      </if>
      <if test="rentLifebound != null">
        #{rentLifebound,jdbcType=VARCHAR},
      </if>
      <if test="rentGoal != null">
        #{rentGoal,jdbcType=TINYINT},
      </if>
      <if test="rentLength != null">
        #{rentLength,jdbcType=TINYINT},
      </if>
      <if test="rentAbility != null">
        #{rentAbility,jdbcType=TINYINT},
      </if>
      <if test="rentPaytype != null">
        #{rentPaytype,jdbcType=TINYINT},
      </if>
      <if test="custLevel != null">
        #{custLevel,jdbcType=VARCHAR},
      </if>
      <if test="houseRoom != null">
        #{houseRoom,jdbcType=TINYINT},
      </if>
      <if test="houseRoom1 != null">
        #{houseRoom1,jdbcType=TINYINT},
      </if>
      <if test="houseRegion != null">
        #{houseRegion,jdbcType=VARCHAR},
      </if>
      <if test="regionName != null">
        #{regionName,jdbcType=VARCHAR},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=VARCHAR},
      </if>
      <if test="buildName != null">
        #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="sectionId != null">
        #{sectionId,jdbcType=VARCHAR},
      </if>
      <if test="sectionName != null">
        #{sectionName,jdbcType=VARCHAR},
      </if>
      <if test="houseRound != null">
        #{houseRound,jdbcType=VARCHAR},
      </if>
      <if test="houseType != null">
        #{houseType,jdbcType=VARCHAR},
      </if>
      <if test="houseUseage != null">
        #{houseUseage,jdbcType=VARCHAR},
      </if>
      <if test="houseFitment != null">
        #{houseFitment,jdbcType=TINYINT},
      </if>
      <if test="houseDirect != null">
        #{houseDirect,jdbcType=VARCHAR},
      </if>
      <if test="plateType != null">
        #{plateType,jdbcType=TINYINT},
      </if>
      <if test="rentCustSource != null">
        #{rentCustSource,jdbcType=TINYINT},
      </if>
      <if test="rentCustLevel != null">
        #{rentCustLevel,jdbcType=TINYINT},
      </if>
      <if test="houseFloorLow != null">
        #{houseFloorLow,jdbcType=SMALLINT},
      </if>
      <if test="houseFloorHigh != null">
        #{houseFloorHigh,jdbcType=SMALLINT},
      </if>
      <if test="housePriceLow != null">
        #{housePriceLow,jdbcType=NUMERIC},
      </if>
      <if test="housePriceHigh != null">
        #{housePriceHigh,jdbcType=NUMERIC},
      </if>
      <if test="houseAreaLow != null">
        #{houseAreaLow,jdbcType=NUMERIC},
      </if>
      <if test="houseAreaHigh != null">
        #{houseAreaHigh,jdbcType=NUMERIC},
      </if>
      <if test="houseYearLow != null">
        #{houseYearLow,jdbcType=SMALLINT},
      </if>
      <if test="houseYearHigh != null">
        #{houseYearHigh,jdbcType=SMALLINT},
      </if>
      <if test="houseLook != null">
        #{houseLook,jdbcType=BIT},
      </if>
      <if test="custRequest != null">
        #{custRequest,jdbcType=VARCHAR},
      </if>
      <if test="custMemo != null">
        #{custMemo,jdbcType=VARCHAR},
      </if>
      <if test="rentCustStatus != null">
        #{rentCustStatus,jdbcType=TINYINT},
      </if>
      <if test="trackTime != null">
        #{trackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="actionTime != null">
        #{actionTime,jdbcType=TIMESTAMP},
      </if>
      <if test="repeatFlag != null">
        #{repeatFlag,jdbcType=BIT},
      </if>
      <if test="infoType != null">
        #{infoType,jdbcType=TINYINT},
      </if>
      <if test="shareFlag != null">
        #{shareFlag,jdbcType=BIT},
      </if>
      <if test="redFlag != null">
        #{redFlag,jdbcType=BIT},
      </if>
      <if test="orangeFlag != null">
        #{orangeFlag,jdbcType=BIT},
      </if>
      <if test="publicCount != null">
        #{publicCount,jdbcType=INTEGER},
      </if>
      <if test="publicTime != null">
        #{publicTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dueTime != null">
        #{dueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="specialTime != null">
        #{specialTime,jdbcType=TIMESTAMP},
      </if>
      <if test="scheduleTime != null">
        #{scheduleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealTime != null">
        #{dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="writeoffTime != null">
        #{writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="secrecyTime != null">
        #{secrecyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commendTime != null">
        #{commendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="privateTime != null">
        #{privateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fromPublic != null">
        #{fromPublic,jdbcType=BIT},
      </if>
      <if test="cooperateFlag != null">
        #{cooperateFlag,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="friendHouse != null">
        #{friendHouse,jdbcType=TINYINT},
      </if>
      <if test="cooperateTime != null">
        #{cooperateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="complaintFlag != null">
        #{complaintFlag,jdbcType=BIT},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="isIgnore != null">
        #{isIgnore,jdbcType=TINYINT},
      </if>
      <if test="youShareFlag != null">
        #{youShareFlag,jdbcType=TINYINT},
      </if>
      <if test="youShareTime != null">
        #{youShareTime,jdbcType=TIMESTAMP},
      </if>
      <if test="youBuyCount != null">
        #{youBuyCount,jdbcType=INTEGER},
      </if>
      <if test="privateUserId != null">
        #{privateUserId,jdbcType=INTEGER},
      </if>
      <if test="syncTime != null">
        #{syncTime,jdbcType=TIMESTAMP},
      </if>
      <if test="youShareId != null">
        #{youShareId,jdbcType=INTEGER},
      </if>
      <if test="specialEndTime != null">
        #{specialEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="scheduleEndTime != null">
        #{scheduleEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="cityShareFlag != null">
        #{cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="roadsId != null">
        #{roadsId,jdbcType=VARCHAR},
      </if>
      <if test="roadsName != null">
        #{roadsName,jdbcType=VARCHAR},
      </if>
      <if test="respiteEndTime != null">
        #{respiteEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isSaleLease != null">
        #{isSaleLease,jdbcType=TINYINT},
      </if>
      <if test="availableTime != null">
        #{availableTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastDkanTime != null">
        #{lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="wechatNumber != null">
        #{wechatNumber,jdbcType=VARCHAR},
      </if>
      <if test="custPhoto != null">
        #{custPhoto,jdbcType=VARCHAR},
      </if>
      <if test="idCardType != null">
        #{idCardType,jdbcType=INTEGER},
      </if>
      <if test="rentCurrentStatus != null">
        #{rentCurrentStatus,jdbcType=TINYINT},
      </if>
      <if test="vehicle != null">
        #{vehicle,jdbcType=TINYINT},
      </if>
      <if test="mentality != null">
        #{mentality,jdbcType=TINYINT},
      </if>
      <if test="cUserId != null">
        #{cUserId,jdbcType=INTEGER},
      </if>
      <if test="userLevel != null">
        #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="organizationId != null">
        #{organizationId,jdbcType=INTEGER},
      </if>
      <if test="fuzzySearch != null">
        #{fuzzySearch,jdbcType=CLOB},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomerExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_RENT_CUSTOMER
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER
    <set>
      <if test="record.rentCustId != null">
        RENT_CUST_ID = #{record.rentCustId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.regId != null">
        REG_ID = #{record.regId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.grId != null">
        GR_ID = #{record.grId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.archiveId != null">
        ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.creatorUid != null">
        CREATOR_UID = #{record.creatorUid,jdbcType=INTEGER},
      </if>
      <if test="record.createArchiveId != null">
        CREATE_ARCHIVE_ID = #{record.createArchiveId,jdbcType=INTEGER},
      </if>
      <if test="record.rentCustNo != null">
        RENT_CUST_NO = #{record.rentCustNo,jdbcType=VARCHAR},
      </if>
      <if test="record.rentCustName != null">
        RENT_CUST_NAME = #{record.rentCustName,jdbcType=VARCHAR},
      </if>
      <if test="record.rentCustSex != null">
        RENT_CUST_SEX = #{record.rentCustSex,jdbcType=BIT},
      </if>
      <if test="record.rentCustAge != null">
        RENT_CUST_AGE = #{record.rentCustAge,jdbcType=TINYINT},
      </if>
      <if test="record.rentCustCareer != null">
        RENT_CUST_CAREER = #{record.rentCustCareer,jdbcType=TINYINT},
      </if>
      <if test="record.cellPhone != null">
        CELL_PHONE = #{record.cellPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.idCard != null">
        ID_CARD = #{record.idCard,jdbcType=VARCHAR},
      </if>
      <if test="record.custAddr != null">
        CUST_ADDR = #{record.custAddr,jdbcType=VARCHAR},
      </if>
      <if test="record.rentLifebound != null">
        RENT_LIFEBOUND = #{record.rentLifebound,jdbcType=VARCHAR},
      </if>
      <if test="record.rentGoal != null">
        RENT_GOAL = #{record.rentGoal,jdbcType=TINYINT},
      </if>
      <if test="record.rentLength != null">
        RENT_LENGTH = #{record.rentLength,jdbcType=TINYINT},
      </if>
      <if test="record.rentAbility != null">
        RENT_ABILITY = #{record.rentAbility,jdbcType=TINYINT},
      </if>
      <if test="record.rentPaytype != null">
        RENT_PAYTYPE = #{record.rentPaytype,jdbcType=TINYINT},
      </if>
      <if test="record.custLevel != null">
        CUST_LEVEL = #{record.custLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.houseRoom != null">
        HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      </if>
      <if test="record.houseRoom1 != null">
        HOUSE_ROOM_1 = #{record.houseRoom1,jdbcType=TINYINT},
      </if>
      <if test="record.houseRegion != null">
        HOUSE_REGION = #{record.houseRegion,jdbcType=VARCHAR},
      </if>
      <if test="record.regionName != null">
        REGION_NAME = #{record.regionName,jdbcType=VARCHAR},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=VARCHAR},
      </if>
      <if test="record.buildName != null">
        BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      </if>
      <if test="record.sectionId != null">
        SECTION_ID = #{record.sectionId,jdbcType=VARCHAR},
      </if>
      <if test="record.sectionName != null">
        SECTION_NAME = #{record.sectionName,jdbcType=VARCHAR},
      </if>
      <if test="record.houseRound != null">
        HOUSE_ROUND = #{record.houseRound,jdbcType=VARCHAR},
      </if>
      <if test="record.houseType != null">
        HOUSE_TYPE = #{record.houseType,jdbcType=VARCHAR},
      </if>
      <if test="record.houseUseage != null">
        HOUSE_USEAGE = #{record.houseUseage,jdbcType=VARCHAR},
      </if>
      <if test="record.houseFitment != null">
        HOUSE_FITMENT = #{record.houseFitment,jdbcType=TINYINT},
      </if>
      <if test="record.houseDirect != null">
        HOUSE_DIRECT = #{record.houseDirect,jdbcType=VARCHAR},
      </if>
      <if test="record.plateType != null">
        PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      </if>
      <if test="record.rentCustSource != null">
        RENT_CUST_SOURCE = #{record.rentCustSource,jdbcType=TINYINT},
      </if>
      <if test="record.rentCustLevel != null">
        RENT_CUST_LEVEL = #{record.rentCustLevel,jdbcType=TINYINT},
      </if>
      <if test="record.houseFloorLow != null">
        HOUSE_FLOOR_LOW = #{record.houseFloorLow,jdbcType=SMALLINT},
      </if>
      <if test="record.houseFloorHigh != null">
        HOUSE_FLOOR_HIGH = #{record.houseFloorHigh,jdbcType=SMALLINT},
      </if>
      <if test="record.housePriceLow != null">
        HOUSE_PRICE_LOW = #{record.housePriceLow,jdbcType=NUMERIC},
      </if>
      <if test="record.housePriceHigh != null">
        HOUSE_PRICE_HIGH = #{record.housePriceHigh,jdbcType=NUMERIC},
      </if>
      <if test="record.houseAreaLow != null">
        HOUSE_AREA_LOW = #{record.houseAreaLow,jdbcType=NUMERIC},
      </if>
      <if test="record.houseAreaHigh != null">
        HOUSE_AREA_HIGH = #{record.houseAreaHigh,jdbcType=NUMERIC},
      </if>
      <if test="record.houseYearLow != null">
        HOUSE_YEAR_LOW = #{record.houseYearLow,jdbcType=SMALLINT},
      </if>
      <if test="record.houseYearHigh != null">
        HOUSE_YEAR_HIGH = #{record.houseYearHigh,jdbcType=SMALLINT},
      </if>
      <if test="record.houseLook != null">
        HOUSE_LOOK = #{record.houseLook,jdbcType=BIT},
      </if>
      <if test="record.custRequest != null">
        CUST_REQUEST = #{record.custRequest,jdbcType=VARCHAR},
      </if>
      <if test="record.custMemo != null">
        CUST_MEMO = #{record.custMemo,jdbcType=VARCHAR},
      </if>
      <if test="record.rentCustStatus != null">
        RENT_CUST_STATUS = #{record.rentCustStatus,jdbcType=TINYINT},
      </if>
      <if test="record.trackTime != null">
        TRACK_TIME = #{record.trackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.actionTime != null">
        ACTION_TIME = #{record.actionTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.repeatFlag != null">
        REPEAT_FLAG = #{record.repeatFlag,jdbcType=BIT},
      </if>
      <if test="record.infoType != null">
        INFO_TYPE = #{record.infoType,jdbcType=TINYINT},
      </if>
      <if test="record.shareFlag != null">
        SHARE_FLAG = #{record.shareFlag,jdbcType=BIT},
      </if>
      <if test="record.redFlag != null">
        RED_FLAG = #{record.redFlag,jdbcType=BIT},
      </if>
      <if test="record.orangeFlag != null">
        ORANGE_FLAG = #{record.orangeFlag,jdbcType=BIT},
      </if>
      <if test="record.publicCount != null">
        PUBLIC_COUNT = #{record.publicCount,jdbcType=INTEGER},
      </if>
      <if test="record.publicTime != null">
        PUBLIC_TIME = #{record.publicTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dueTime != null">
        DUE_TIME = #{record.dueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.specialTime != null">
        SPECIAL_TIME = #{record.specialTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.scheduleTime != null">
        SCHEDULE_TIME = #{record.scheduleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dealTime != null">
        DEAL_TIME = #{record.dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.writeoffTime != null">
        WRITEOFF_TIME = #{record.writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.secrecyTime != null">
        SECRECY_TIME = #{record.secrecyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commendTime != null">
        COMMEND_TIME = #{record.commendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.privateTime != null">
        PRIVATE_TIME = #{record.privateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.fromPublic != null">
        FROM_PUBLIC = #{record.fromPublic,jdbcType=BIT},
      </if>
      <if test="record.cooperateFlag != null">
        COOPERATE_FLAG = #{record.cooperateFlag,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.friendHouse != null">
        FRIEND_HOUSE = #{record.friendHouse,jdbcType=TINYINT},
      </if>
      <if test="record.cooperateTime != null">
        COOPERATE_TIME = #{record.cooperateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.complaintFlag != null">
        COMPLAINT_FLAG = #{record.complaintFlag,jdbcType=BIT},
      </if>
      <if test="record.areaId != null">
        AREA_ID = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.isIgnore != null">
        is_ignore = #{record.isIgnore,jdbcType=TINYINT},
      </if>
      <if test="record.youShareFlag != null">
        YOU_SHARE_FLAG = #{record.youShareFlag,jdbcType=TINYINT},
      </if>
      <if test="record.youShareTime != null">
        YOU_SHARE_TIME = #{record.youShareTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.youBuyCount != null">
        YOU_BUY_COUNT = #{record.youBuyCount,jdbcType=INTEGER},
      </if>
      <if test="record.privateUserId != null">
        PRIVATE_USER_ID = #{record.privateUserId,jdbcType=INTEGER},
      </if>
      <if test="record.syncTime != null">
        SYNC_TIME = #{record.syncTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.youShareId != null">
        YOU_SHARE_ID = #{record.youShareId,jdbcType=INTEGER},
      </if>
      <if test="record.specialEndTime != null">
        SPECIAL_END_TIME = #{record.specialEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.scheduleEndTime != null">
        SCHEDULE_END_TIME = #{record.scheduleEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cityShareFlag != null">
        CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="record.roadsId != null">
        ROADS_ID = #{record.roadsId,jdbcType=VARCHAR},
      </if>
      <if test="record.roadsName != null">
        ROADS_NAME = #{record.roadsName,jdbcType=VARCHAR},
      </if>
      <if test="record.respiteEndTime != null">
        RESPITE_END_TIME = #{record.respiteEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isSaleLease != null">
        IS_SALE_LEASE = #{record.isSaleLease,jdbcType=TINYINT},
      </if>
      <if test="record.availableTime != null">
        AVAILABLE_TIME = #{record.availableTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastDkanTime != null">
        LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.wechatNumber != null">
        WECHAT_NUMBER = #{record.wechatNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.custPhoto != null">
        CUST_PHOTO = #{record.custPhoto,jdbcType=VARCHAR},
      </if>
      <if test="record.idCardType != null">
        ID_CARD_TYPE = #{record.idCardType,jdbcType=INTEGER},
      </if>
      <if test="record.rentCurrentStatus != null">
        RENT_CURRENT_STATUS = #{record.rentCurrentStatus,jdbcType=TINYINT},
      </if>
      <if test="record.vehicle != null">
        VEHICLE = #{record.vehicle,jdbcType=TINYINT},
      </if>
      <if test="record.mentality != null">
        MENTALITY = #{record.mentality,jdbcType=TINYINT},
      </if>
      <if test="record.cUserId != null">
        C_USER_ID = #{record.cUserId,jdbcType=INTEGER},
      </if>
      <if test="record.userLevel != null">
        USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      </if>
      <if test="record.tissueLine != null">
        TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="record.partnerId != null">
        PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      </if>
      <if test="record.organizationId != null">
        ORGANIZATION_ID = #{record.organizationId,jdbcType=INTEGER},
      </if>
      <if test="record.fuzzySearch != null">
        FUZZY_SEARCH = #{record.fuzzySearch,jdbcType=CLOB},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER
    set RENT_CUST_ID = #{record.rentCustId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      CREATOR_UID = #{record.creatorUid,jdbcType=INTEGER},
      CREATE_ARCHIVE_ID = #{record.createArchiveId,jdbcType=INTEGER},
      RENT_CUST_NO = #{record.rentCustNo,jdbcType=VARCHAR},
      RENT_CUST_NAME = #{record.rentCustName,jdbcType=VARCHAR},
      RENT_CUST_SEX = #{record.rentCustSex,jdbcType=BIT},
      RENT_CUST_AGE = #{record.rentCustAge,jdbcType=TINYINT},
      RENT_CUST_CAREER = #{record.rentCustCareer,jdbcType=TINYINT},
      CELL_PHONE = #{record.cellPhone,jdbcType=VARCHAR},
      ID_CARD = #{record.idCard,jdbcType=VARCHAR},
      CUST_ADDR = #{record.custAddr,jdbcType=VARCHAR},
      RENT_LIFEBOUND = #{record.rentLifebound,jdbcType=VARCHAR},
      RENT_GOAL = #{record.rentGoal,jdbcType=TINYINT},
      RENT_LENGTH = #{record.rentLength,jdbcType=TINYINT},
      RENT_ABILITY = #{record.rentAbility,jdbcType=TINYINT},
      RENT_PAYTYPE = #{record.rentPaytype,jdbcType=TINYINT},
      CUST_LEVEL = #{record.custLevel,jdbcType=VARCHAR},
      HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      HOUSE_ROOM_1 = #{record.houseRoom1,jdbcType=TINYINT},
      HOUSE_REGION = #{record.houseRegion,jdbcType=VARCHAR},
      REGION_NAME = #{record.regionName,jdbcType=VARCHAR},
      BUILD_ID = #{record.buildId,jdbcType=VARCHAR},
      BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      SECTION_ID = #{record.sectionId,jdbcType=VARCHAR},
      SECTION_NAME = #{record.sectionName,jdbcType=VARCHAR},
      HOUSE_ROUND = #{record.houseRound,jdbcType=VARCHAR},
      HOUSE_TYPE = #{record.houseType,jdbcType=VARCHAR},
      HOUSE_USEAGE = #{record.houseUseage,jdbcType=VARCHAR},
      HOUSE_FITMENT = #{record.houseFitment,jdbcType=TINYINT},
      HOUSE_DIRECT = #{record.houseDirect,jdbcType=VARCHAR},
      PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      RENT_CUST_SOURCE = #{record.rentCustSource,jdbcType=TINYINT},
      RENT_CUST_LEVEL = #{record.rentCustLevel,jdbcType=TINYINT},
      HOUSE_FLOOR_LOW = #{record.houseFloorLow,jdbcType=SMALLINT},
      HOUSE_FLOOR_HIGH = #{record.houseFloorHigh,jdbcType=SMALLINT},
      HOUSE_PRICE_LOW = #{record.housePriceLow,jdbcType=NUMERIC},
      HOUSE_PRICE_HIGH = #{record.housePriceHigh,jdbcType=NUMERIC},
      HOUSE_AREA_LOW = #{record.houseAreaLow,jdbcType=NUMERIC},
      HOUSE_AREA_HIGH = #{record.houseAreaHigh,jdbcType=NUMERIC},
      HOUSE_YEAR_LOW = #{record.houseYearLow,jdbcType=SMALLINT},
      HOUSE_YEAR_HIGH = #{record.houseYearHigh,jdbcType=SMALLINT},
      HOUSE_LOOK = #{record.houseLook,jdbcType=BIT},
      CUST_REQUEST = #{record.custRequest,jdbcType=VARCHAR},
      CUST_MEMO = #{record.custMemo,jdbcType=VARCHAR},
      RENT_CUST_STATUS = #{record.rentCustStatus,jdbcType=TINYINT},
      TRACK_TIME = #{record.trackTime,jdbcType=TIMESTAMP},
      ACTION_TIME = #{record.actionTime,jdbcType=TIMESTAMP},
      REPEAT_FLAG = #{record.repeatFlag,jdbcType=BIT},
      INFO_TYPE = #{record.infoType,jdbcType=TINYINT},
      SHARE_FLAG = #{record.shareFlag,jdbcType=BIT},
      RED_FLAG = #{record.redFlag,jdbcType=BIT},
      ORANGE_FLAG = #{record.orangeFlag,jdbcType=BIT},
      PUBLIC_COUNT = #{record.publicCount,jdbcType=INTEGER},
      PUBLIC_TIME = #{record.publicTime,jdbcType=TIMESTAMP},
      DUE_TIME = #{record.dueTime,jdbcType=TIMESTAMP},
      SPECIAL_TIME = #{record.specialTime,jdbcType=TIMESTAMP},
      SCHEDULE_TIME = #{record.scheduleTime,jdbcType=TIMESTAMP},
      DEAL_TIME = #{record.dealTime,jdbcType=TIMESTAMP},
      WRITEOFF_TIME = #{record.writeoffTime,jdbcType=TIMESTAMP},
      SECRECY_TIME = #{record.secrecyTime,jdbcType=TIMESTAMP},
      COMMEND_TIME = #{record.commendTime,jdbcType=TIMESTAMP},
      PRIVATE_TIME = #{record.privateTime,jdbcType=TIMESTAMP},
      FROM_PUBLIC = #{record.fromPublic,jdbcType=BIT},
      COOPERATE_FLAG = #{record.cooperateFlag,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      FRIEND_HOUSE = #{record.friendHouse,jdbcType=TINYINT},
      COOPERATE_TIME = #{record.cooperateTime,jdbcType=TIMESTAMP},
      COMPLAINT_FLAG = #{record.complaintFlag,jdbcType=BIT},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      is_ignore = #{record.isIgnore,jdbcType=TINYINT},
      YOU_SHARE_FLAG = #{record.youShareFlag,jdbcType=TINYINT},
      YOU_SHARE_TIME = #{record.youShareTime,jdbcType=TIMESTAMP},
      YOU_BUY_COUNT = #{record.youBuyCount,jdbcType=INTEGER},
      PRIVATE_USER_ID = #{record.privateUserId,jdbcType=INTEGER},
      SYNC_TIME = #{record.syncTime,jdbcType=TIMESTAMP},
      YOU_SHARE_ID = #{record.youShareId,jdbcType=INTEGER},
      SPECIAL_END_TIME = #{record.specialEndTime,jdbcType=TIMESTAMP},
      SCHEDULE_END_TIME = #{record.scheduleEndTime,jdbcType=TIMESTAMP},
      CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      ROADS_ID = #{record.roadsId,jdbcType=VARCHAR},
      ROADS_NAME = #{record.roadsName,jdbcType=VARCHAR},
      RESPITE_END_TIME = #{record.respiteEndTime,jdbcType=TIMESTAMP},
      IS_SALE_LEASE = #{record.isSaleLease,jdbcType=TINYINT},
      AVAILABLE_TIME = #{record.availableTime,jdbcType=TIMESTAMP},
      LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      WECHAT_NUMBER = #{record.wechatNumber,jdbcType=VARCHAR},
      CUST_PHOTO = #{record.custPhoto,jdbcType=VARCHAR},
      ID_CARD_TYPE = #{record.idCardType,jdbcType=INTEGER},
      RENT_CURRENT_STATUS = #{record.rentCurrentStatus,jdbcType=TINYINT},
      VEHICLE = #{record.vehicle,jdbcType=TINYINT},
      MENTALITY = #{record.mentality,jdbcType=TINYINT},
      C_USER_ID = #{record.cUserId,jdbcType=INTEGER},
      USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      ORGANIZATION_ID = #{record.organizationId,jdbcType=INTEGER},
      FUZZY_SEARCH = #{record.fuzzySearch,jdbcType=CLOB}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER
    set RENT_CUST_ID = #{record.rentCustId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      REG_ID = #{record.regId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      GR_ID = #{record.grId,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{record.archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      CREATOR_UID = #{record.creatorUid,jdbcType=INTEGER},
      CREATE_ARCHIVE_ID = #{record.createArchiveId,jdbcType=INTEGER},
      RENT_CUST_NO = #{record.rentCustNo,jdbcType=VARCHAR},
      RENT_CUST_NAME = #{record.rentCustName,jdbcType=VARCHAR},
      RENT_CUST_SEX = #{record.rentCustSex,jdbcType=BIT},
      RENT_CUST_AGE = #{record.rentCustAge,jdbcType=TINYINT},
      RENT_CUST_CAREER = #{record.rentCustCareer,jdbcType=TINYINT},
      CELL_PHONE = #{record.cellPhone,jdbcType=VARCHAR},
      ID_CARD = #{record.idCard,jdbcType=VARCHAR},
      CUST_ADDR = #{record.custAddr,jdbcType=VARCHAR},
      RENT_LIFEBOUND = #{record.rentLifebound,jdbcType=VARCHAR},
      RENT_GOAL = #{record.rentGoal,jdbcType=TINYINT},
      RENT_LENGTH = #{record.rentLength,jdbcType=TINYINT},
      RENT_ABILITY = #{record.rentAbility,jdbcType=TINYINT},
      RENT_PAYTYPE = #{record.rentPaytype,jdbcType=TINYINT},
      CUST_LEVEL = #{record.custLevel,jdbcType=VARCHAR},
      HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      HOUSE_ROOM_1 = #{record.houseRoom1,jdbcType=TINYINT},
      HOUSE_REGION = #{record.houseRegion,jdbcType=VARCHAR},
      REGION_NAME = #{record.regionName,jdbcType=VARCHAR},
      BUILD_ID = #{record.buildId,jdbcType=VARCHAR},
      BUILD_NAME = #{record.buildName,jdbcType=VARCHAR},
      SECTION_ID = #{record.sectionId,jdbcType=VARCHAR},
      SECTION_NAME = #{record.sectionName,jdbcType=VARCHAR},
      HOUSE_ROUND = #{record.houseRound,jdbcType=VARCHAR},
      HOUSE_TYPE = #{record.houseType,jdbcType=VARCHAR},
      HOUSE_USEAGE = #{record.houseUseage,jdbcType=VARCHAR},
      HOUSE_FITMENT = #{record.houseFitment,jdbcType=TINYINT},
      HOUSE_DIRECT = #{record.houseDirect,jdbcType=VARCHAR},
      PLATE_TYPE = #{record.plateType,jdbcType=TINYINT},
      RENT_CUST_SOURCE = #{record.rentCustSource,jdbcType=TINYINT},
      RENT_CUST_LEVEL = #{record.rentCustLevel,jdbcType=TINYINT},
      HOUSE_FLOOR_LOW = #{record.houseFloorLow,jdbcType=SMALLINT},
      HOUSE_FLOOR_HIGH = #{record.houseFloorHigh,jdbcType=SMALLINT},
      HOUSE_PRICE_LOW = #{record.housePriceLow,jdbcType=NUMERIC},
      HOUSE_PRICE_HIGH = #{record.housePriceHigh,jdbcType=NUMERIC},
      HOUSE_AREA_LOW = #{record.houseAreaLow,jdbcType=NUMERIC},
      HOUSE_AREA_HIGH = #{record.houseAreaHigh,jdbcType=NUMERIC},
      HOUSE_YEAR_LOW = #{record.houseYearLow,jdbcType=SMALLINT},
      HOUSE_YEAR_HIGH = #{record.houseYearHigh,jdbcType=SMALLINT},
      HOUSE_LOOK = #{record.houseLook,jdbcType=BIT},
      CUST_REQUEST = #{record.custRequest,jdbcType=VARCHAR},
      CUST_MEMO = #{record.custMemo,jdbcType=VARCHAR},
      RENT_CUST_STATUS = #{record.rentCustStatus,jdbcType=TINYINT},
      TRACK_TIME = #{record.trackTime,jdbcType=TIMESTAMP},
      ACTION_TIME = #{record.actionTime,jdbcType=TIMESTAMP},
      REPEAT_FLAG = #{record.repeatFlag,jdbcType=BIT},
      INFO_TYPE = #{record.infoType,jdbcType=TINYINT},
      SHARE_FLAG = #{record.shareFlag,jdbcType=BIT},
      RED_FLAG = #{record.redFlag,jdbcType=BIT},
      ORANGE_FLAG = #{record.orangeFlag,jdbcType=BIT},
      PUBLIC_COUNT = #{record.publicCount,jdbcType=INTEGER},
      PUBLIC_TIME = #{record.publicTime,jdbcType=TIMESTAMP},
      DUE_TIME = #{record.dueTime,jdbcType=TIMESTAMP},
      SPECIAL_TIME = #{record.specialTime,jdbcType=TIMESTAMP},
      SCHEDULE_TIME = #{record.scheduleTime,jdbcType=TIMESTAMP},
      DEAL_TIME = #{record.dealTime,jdbcType=TIMESTAMP},
      WRITEOFF_TIME = #{record.writeoffTime,jdbcType=TIMESTAMP},
      SECRECY_TIME = #{record.secrecyTime,jdbcType=TIMESTAMP},
      COMMEND_TIME = #{record.commendTime,jdbcType=TIMESTAMP},
      PRIVATE_TIME = #{record.privateTime,jdbcType=TIMESTAMP},
      FROM_PUBLIC = #{record.fromPublic,jdbcType=BIT},
      COOPERATE_FLAG = #{record.cooperateFlag,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      FRIEND_HOUSE = #{record.friendHouse,jdbcType=TINYINT},
      COOPERATE_TIME = #{record.cooperateTime,jdbcType=TIMESTAMP},
      COMPLAINT_FLAG = #{record.complaintFlag,jdbcType=BIT},
      AREA_ID = #{record.areaId,jdbcType=INTEGER},
      is_ignore = #{record.isIgnore,jdbcType=TINYINT},
      YOU_SHARE_FLAG = #{record.youShareFlag,jdbcType=TINYINT},
      YOU_SHARE_TIME = #{record.youShareTime,jdbcType=TIMESTAMP},
      YOU_BUY_COUNT = #{record.youBuyCount,jdbcType=INTEGER},
      PRIVATE_USER_ID = #{record.privateUserId,jdbcType=INTEGER},
      SYNC_TIME = #{record.syncTime,jdbcType=TIMESTAMP},
      YOU_SHARE_ID = #{record.youShareId,jdbcType=INTEGER},
      SPECIAL_END_TIME = #{record.specialEndTime,jdbcType=TIMESTAMP},
      SCHEDULE_END_TIME = #{record.scheduleEndTime,jdbcType=TIMESTAMP},
      CITY_SHARE_FLAG = #{record.cityShareFlag,jdbcType=TINYINT},
      ROADS_ID = #{record.roadsId,jdbcType=VARCHAR},
      ROADS_NAME = #{record.roadsName,jdbcType=VARCHAR},
      RESPITE_END_TIME = #{record.respiteEndTime,jdbcType=TIMESTAMP},
      IS_SALE_LEASE = #{record.isSaleLease,jdbcType=TINYINT},
      AVAILABLE_TIME = #{record.availableTime,jdbcType=TIMESTAMP},
      LAST_DKAN_TIME = #{record.lastDkanTime,jdbcType=TIMESTAMP},
      WECHAT_NUMBER = #{record.wechatNumber,jdbcType=VARCHAR},
      CUST_PHOTO = #{record.custPhoto,jdbcType=VARCHAR},
      ID_CARD_TYPE = #{record.idCardType,jdbcType=INTEGER},
      RENT_CURRENT_STATUS = #{record.rentCurrentStatus,jdbcType=TINYINT},
      VEHICLE = #{record.vehicle,jdbcType=TINYINT},
      MENTALITY = #{record.mentality,jdbcType=TINYINT},
      C_USER_ID = #{record.cUserId,jdbcType=INTEGER},
      USER_LEVEL = #{record.userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{record.tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{record.partnerId,jdbcType=INTEGER},
      ORGANIZATION_ID = #{record.organizationId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="regId != null">
        REG_ID = #{regId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="grId != null">
        GR_ID = #{grId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="archiveId != null">
        ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creatorUid != null">
        CREATOR_UID = #{creatorUid,jdbcType=INTEGER},
      </if>
      <if test="createArchiveId != null">
        CREATE_ARCHIVE_ID = #{createArchiveId,jdbcType=INTEGER},
      </if>
      <if test="rentCustNo != null">
        RENT_CUST_NO = #{rentCustNo,jdbcType=VARCHAR},
      </if>
      <if test="rentCustName != null">
        RENT_CUST_NAME = #{rentCustName,jdbcType=VARCHAR},
      </if>
      <if test="rentCustSex != null">
        RENT_CUST_SEX = #{rentCustSex,jdbcType=BIT},
      </if>
      <if test="rentCustAge != null">
        RENT_CUST_AGE = #{rentCustAge,jdbcType=TINYINT},
      </if>
      <if test="rentCustCareer != null">
        RENT_CUST_CAREER = #{rentCustCareer,jdbcType=TINYINT},
      </if>
      <if test="cellPhone != null">
        CELL_PHONE = #{cellPhone,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        ID_CARD = #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="custAddr != null">
        CUST_ADDR = #{custAddr,jdbcType=VARCHAR},
      </if>
      <if test="rentLifebound != null">
        RENT_LIFEBOUND = #{rentLifebound,jdbcType=VARCHAR},
      </if>
      <if test="rentGoal != null">
        RENT_GOAL = #{rentGoal,jdbcType=TINYINT},
      </if>
      <if test="rentLength != null">
        RENT_LENGTH = #{rentLength,jdbcType=TINYINT},
      </if>
      <if test="rentAbility != null">
        RENT_ABILITY = #{rentAbility,jdbcType=TINYINT},
      </if>
      <if test="rentPaytype != null">
        RENT_PAYTYPE = #{rentPaytype,jdbcType=TINYINT},
      </if>
      <if test="custLevel != null">
        CUST_LEVEL = #{custLevel,jdbcType=VARCHAR},
      </if>
      <if test="houseRoom != null">
        HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      </if>
      <if test="houseRoom1 != null">
        HOUSE_ROOM_1 = #{houseRoom1,jdbcType=TINYINT},
      </if>
      <if test="houseRegion != null">
        HOUSE_REGION = #{houseRegion,jdbcType=VARCHAR},
      </if>
      <if test="regionName != null">
        REGION_NAME = #{regionName,jdbcType=VARCHAR},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=VARCHAR},
      </if>
      <if test="buildName != null">
        BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      </if>
      <if test="sectionId != null">
        SECTION_ID = #{sectionId,jdbcType=VARCHAR},
      </if>
      <if test="sectionName != null">
        SECTION_NAME = #{sectionName,jdbcType=VARCHAR},
      </if>
      <if test="houseRound != null">
        HOUSE_ROUND = #{houseRound,jdbcType=VARCHAR},
      </if>
      <if test="houseType != null">
        HOUSE_TYPE = #{houseType,jdbcType=VARCHAR},
      </if>
      <if test="houseUseage != null">
        HOUSE_USEAGE = #{houseUseage,jdbcType=VARCHAR},
      </if>
      <if test="houseFitment != null">
        HOUSE_FITMENT = #{houseFitment,jdbcType=TINYINT},
      </if>
      <if test="houseDirect != null">
        HOUSE_DIRECT = #{houseDirect,jdbcType=VARCHAR},
      </if>
      <if test="plateType != null">
        PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      </if>
      <if test="rentCustSource != null">
        RENT_CUST_SOURCE = #{rentCustSource,jdbcType=TINYINT},
      </if>
      <if test="rentCustLevel != null">
        RENT_CUST_LEVEL = #{rentCustLevel,jdbcType=TINYINT},
      </if>
      <if test="houseFloorLow != null">
        HOUSE_FLOOR_LOW = #{houseFloorLow,jdbcType=SMALLINT},
      </if>
      <if test="houseFloorHigh != null">
        HOUSE_FLOOR_HIGH = #{houseFloorHigh,jdbcType=SMALLINT},
      </if>
      <if test="housePriceLow != null">
        HOUSE_PRICE_LOW = #{housePriceLow,jdbcType=NUMERIC},
      </if>
      <if test="housePriceHigh != null">
        HOUSE_PRICE_HIGH = #{housePriceHigh,jdbcType=NUMERIC},
      </if>
      <if test="houseAreaLow != null">
        HOUSE_AREA_LOW = #{houseAreaLow,jdbcType=NUMERIC},
      </if>
      <if test="houseAreaHigh != null">
        HOUSE_AREA_HIGH = #{houseAreaHigh,jdbcType=NUMERIC},
      </if>
      <if test="houseYearLow != null">
        HOUSE_YEAR_LOW = #{houseYearLow,jdbcType=SMALLINT},
      </if>
      <if test="houseYearHigh != null">
        HOUSE_YEAR_HIGH = #{houseYearHigh,jdbcType=SMALLINT},
      </if>
      <if test="houseLook != null">
        HOUSE_LOOK = #{houseLook,jdbcType=BIT},
      </if>
      <if test="custRequest != null">
        CUST_REQUEST = #{custRequest,jdbcType=VARCHAR},
      </if>
      <if test="custMemo != null">
        CUST_MEMO = #{custMemo,jdbcType=VARCHAR},
      </if>
      <if test="rentCustStatus != null">
        RENT_CUST_STATUS = #{rentCustStatus,jdbcType=TINYINT},
      </if>
      <if test="trackTime != null">
        TRACK_TIME = #{trackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="actionTime != null">
        ACTION_TIME = #{actionTime,jdbcType=TIMESTAMP},
      </if>
      <if test="repeatFlag != null">
        REPEAT_FLAG = #{repeatFlag,jdbcType=BIT},
      </if>
      <if test="infoType != null">
        INFO_TYPE = #{infoType,jdbcType=TINYINT},
      </if>
      <if test="shareFlag != null">
        SHARE_FLAG = #{shareFlag,jdbcType=BIT},
      </if>
      <if test="redFlag != null">
        RED_FLAG = #{redFlag,jdbcType=BIT},
      </if>
      <if test="orangeFlag != null">
        ORANGE_FLAG = #{orangeFlag,jdbcType=BIT},
      </if>
      <if test="publicCount != null">
        PUBLIC_COUNT = #{publicCount,jdbcType=INTEGER},
      </if>
      <if test="publicTime != null">
        PUBLIC_TIME = #{publicTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dueTime != null">
        DUE_TIME = #{dueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="specialTime != null">
        SPECIAL_TIME = #{specialTime,jdbcType=TIMESTAMP},
      </if>
      <if test="scheduleTime != null">
        SCHEDULE_TIME = #{scheduleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealTime != null">
        DEAL_TIME = #{dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="writeoffTime != null">
        WRITEOFF_TIME = #{writeoffTime,jdbcType=TIMESTAMP},
      </if>
      <if test="secrecyTime != null">
        SECRECY_TIME = #{secrecyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commendTime != null">
        COMMEND_TIME = #{commendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="privateTime != null">
        PRIVATE_TIME = #{privateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fromPublic != null">
        FROM_PUBLIC = #{fromPublic,jdbcType=BIT},
      </if>
      <if test="cooperateFlag != null">
        COOPERATE_FLAG = #{cooperateFlag,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="friendHouse != null">
        FRIEND_HOUSE = #{friendHouse,jdbcType=TINYINT},
      </if>
      <if test="cooperateTime != null">
        COOPERATE_TIME = #{cooperateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="complaintFlag != null">
        COMPLAINT_FLAG = #{complaintFlag,jdbcType=BIT},
      </if>
      <if test="areaId != null">
        AREA_ID = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="isIgnore != null">
        is_ignore = #{isIgnore,jdbcType=TINYINT},
      </if>
      <if test="youShareFlag != null">
        YOU_SHARE_FLAG = #{youShareFlag,jdbcType=TINYINT},
      </if>
      <if test="youShareTime != null">
        YOU_SHARE_TIME = #{youShareTime,jdbcType=TIMESTAMP},
      </if>
      <if test="youBuyCount != null">
        YOU_BUY_COUNT = #{youBuyCount,jdbcType=INTEGER},
      </if>
      <if test="privateUserId != null">
        PRIVATE_USER_ID = #{privateUserId,jdbcType=INTEGER},
      </if>
      <if test="syncTime != null">
        SYNC_TIME = #{syncTime,jdbcType=TIMESTAMP},
      </if>
      <if test="youShareId != null">
        YOU_SHARE_ID = #{youShareId,jdbcType=INTEGER},
      </if>
      <if test="specialEndTime != null">
        SPECIAL_END_TIME = #{specialEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="scheduleEndTime != null">
        SCHEDULE_END_TIME = #{scheduleEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="cityShareFlag != null">
        CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      </if>
      <if test="roadsId != null">
        ROADS_ID = #{roadsId,jdbcType=VARCHAR},
      </if>
      <if test="roadsName != null">
        ROADS_NAME = #{roadsName,jdbcType=VARCHAR},
      </if>
      <if test="respiteEndTime != null">
        RESPITE_END_TIME = #{respiteEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isSaleLease != null">
        IS_SALE_LEASE = #{isSaleLease,jdbcType=TINYINT},
      </if>
      <if test="availableTime != null">
        AVAILABLE_TIME = #{availableTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastDkanTime != null">
        LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="wechatNumber != null">
        WECHAT_NUMBER = #{wechatNumber,jdbcType=VARCHAR},
      </if>
      <if test="custPhoto != null">
        CUST_PHOTO = #{custPhoto,jdbcType=VARCHAR},
      </if>
      <if test="idCardType != null">
        ID_CARD_TYPE = #{idCardType,jdbcType=INTEGER},
      </if>
      <if test="rentCurrentStatus != null">
        RENT_CURRENT_STATUS = #{rentCurrentStatus,jdbcType=TINYINT},
      </if>
      <if test="vehicle != null">
        VEHICLE = #{vehicle,jdbcType=TINYINT},
      </if>
      <if test="mentality != null">
        MENTALITY = #{mentality,jdbcType=TINYINT},
      </if>
      <if test="cUserId != null">
        C_USER_ID = #{cUserId,jdbcType=INTEGER},
      </if>
      <if test="userLevel != null">
        USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      </if>
      <if test="tissueLine != null">
        TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null">
        PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="organizationId != null">
        ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER},
      </if>
      <if test="fuzzySearch != null">
        FUZZY_SEARCH = #{fuzzySearch,jdbcType=CLOB},
      </if>
    </set>
    where RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER
    set COMP_ID = #{compId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      CREATOR_UID = #{creatorUid,jdbcType=INTEGER},
      CREATE_ARCHIVE_ID = #{createArchiveId,jdbcType=INTEGER},
      RENT_CUST_NO = #{rentCustNo,jdbcType=VARCHAR},
      RENT_CUST_NAME = #{rentCustName,jdbcType=VARCHAR},
      RENT_CUST_SEX = #{rentCustSex,jdbcType=BIT},
      RENT_CUST_AGE = #{rentCustAge,jdbcType=TINYINT},
      RENT_CUST_CAREER = #{rentCustCareer,jdbcType=TINYINT},
      CELL_PHONE = #{cellPhone,jdbcType=VARCHAR},
      ID_CARD = #{idCard,jdbcType=VARCHAR},
      CUST_ADDR = #{custAddr,jdbcType=VARCHAR},
      RENT_LIFEBOUND = #{rentLifebound,jdbcType=VARCHAR},
      RENT_GOAL = #{rentGoal,jdbcType=TINYINT},
      RENT_LENGTH = #{rentLength,jdbcType=TINYINT},
      RENT_ABILITY = #{rentAbility,jdbcType=TINYINT},
      RENT_PAYTYPE = #{rentPaytype,jdbcType=TINYINT},
      CUST_LEVEL = #{custLevel,jdbcType=VARCHAR},
      HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      HOUSE_ROOM_1 = #{houseRoom1,jdbcType=TINYINT},
      HOUSE_REGION = #{houseRegion,jdbcType=VARCHAR},
      REGION_NAME = #{regionName,jdbcType=VARCHAR},
      BUILD_ID = #{buildId,jdbcType=VARCHAR},
      BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      SECTION_ID = #{sectionId,jdbcType=VARCHAR},
      SECTION_NAME = #{sectionName,jdbcType=VARCHAR},
      HOUSE_ROUND = #{houseRound,jdbcType=VARCHAR},
      HOUSE_TYPE = #{houseType,jdbcType=VARCHAR},
      HOUSE_USEAGE = #{houseUseage,jdbcType=VARCHAR},
      HOUSE_FITMENT = #{houseFitment,jdbcType=TINYINT},
      HOUSE_DIRECT = #{houseDirect,jdbcType=VARCHAR},
      PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      RENT_CUST_SOURCE = #{rentCustSource,jdbcType=TINYINT},
      RENT_CUST_LEVEL = #{rentCustLevel,jdbcType=TINYINT},
      HOUSE_FLOOR_LOW = #{houseFloorLow,jdbcType=SMALLINT},
      HOUSE_FLOOR_HIGH = #{houseFloorHigh,jdbcType=SMALLINT},
      HOUSE_PRICE_LOW = #{housePriceLow,jdbcType=NUMERIC},
      HOUSE_PRICE_HIGH = #{housePriceHigh,jdbcType=NUMERIC},
      HOUSE_AREA_LOW = #{houseAreaLow,jdbcType=NUMERIC},
      HOUSE_AREA_HIGH = #{houseAreaHigh,jdbcType=NUMERIC},
      HOUSE_YEAR_LOW = #{houseYearLow,jdbcType=SMALLINT},
      HOUSE_YEAR_HIGH = #{houseYearHigh,jdbcType=SMALLINT},
      HOUSE_LOOK = #{houseLook,jdbcType=BIT},
      CUST_REQUEST = #{custRequest,jdbcType=VARCHAR},
      CUST_MEMO = #{custMemo,jdbcType=VARCHAR},
      RENT_CUST_STATUS = #{rentCustStatus,jdbcType=TINYINT},
      TRACK_TIME = #{trackTime,jdbcType=TIMESTAMP},
      ACTION_TIME = #{actionTime,jdbcType=TIMESTAMP},
      REPEAT_FLAG = #{repeatFlag,jdbcType=BIT},
      INFO_TYPE = #{infoType,jdbcType=TINYINT},
      SHARE_FLAG = #{shareFlag,jdbcType=BIT},
      RED_FLAG = #{redFlag,jdbcType=BIT},
      ORANGE_FLAG = #{orangeFlag,jdbcType=BIT},
      PUBLIC_COUNT = #{publicCount,jdbcType=INTEGER},
      PUBLIC_TIME = #{publicTime,jdbcType=TIMESTAMP},
      DUE_TIME = #{dueTime,jdbcType=TIMESTAMP},
      SPECIAL_TIME = #{specialTime,jdbcType=TIMESTAMP},
      SCHEDULE_TIME = #{scheduleTime,jdbcType=TIMESTAMP},
      DEAL_TIME = #{dealTime,jdbcType=TIMESTAMP},
      WRITEOFF_TIME = #{writeoffTime,jdbcType=TIMESTAMP},
      SECRECY_TIME = #{secrecyTime,jdbcType=TIMESTAMP},
      COMMEND_TIME = #{commendTime,jdbcType=TIMESTAMP},
      PRIVATE_TIME = #{privateTime,jdbcType=TIMESTAMP},
      FROM_PUBLIC = #{fromPublic,jdbcType=BIT},
      COOPERATE_FLAG = #{cooperateFlag,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      FRIEND_HOUSE = #{friendHouse,jdbcType=TINYINT},
      COOPERATE_TIME = #{cooperateTime,jdbcType=TIMESTAMP},
      COMPLAINT_FLAG = #{complaintFlag,jdbcType=BIT},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      is_ignore = #{isIgnore,jdbcType=TINYINT},
      YOU_SHARE_FLAG = #{youShareFlag,jdbcType=TINYINT},
      YOU_SHARE_TIME = #{youShareTime,jdbcType=TIMESTAMP},
      YOU_BUY_COUNT = #{youBuyCount,jdbcType=INTEGER},
      PRIVATE_USER_ID = #{privateUserId,jdbcType=INTEGER},
      SYNC_TIME = #{syncTime,jdbcType=TIMESTAMP},
      YOU_SHARE_ID = #{youShareId,jdbcType=INTEGER},
      SPECIAL_END_TIME = #{specialEndTime,jdbcType=TIMESTAMP},
      SCHEDULE_END_TIME = #{scheduleEndTime,jdbcType=TIMESTAMP},
      CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      ROADS_ID = #{roadsId,jdbcType=VARCHAR},
      ROADS_NAME = #{roadsName,jdbcType=VARCHAR},
      RESPITE_END_TIME = #{respiteEndTime,jdbcType=TIMESTAMP},
      IS_SALE_LEASE = #{isSaleLease,jdbcType=TINYINT},
      AVAILABLE_TIME = #{availableTime,jdbcType=TIMESTAMP},
      LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      WECHAT_NUMBER = #{wechatNumber,jdbcType=VARCHAR},
      CUST_PHOTO = #{custPhoto,jdbcType=VARCHAR},
      ID_CARD_TYPE = #{idCardType,jdbcType=INTEGER},
      RENT_CURRENT_STATUS = #{rentCurrentStatus,jdbcType=TINYINT},
      VEHICLE = #{vehicle,jdbcType=TINYINT},
      MENTALITY = #{mentality,jdbcType=TINYINT},
      C_USER_ID = #{cUserId,jdbcType=INTEGER},
      USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER},
      FUZZY_SEARCH = #{fuzzySearch,jdbcType=CLOB}
    where RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomer">
    <!--@mbggenerated-->
    update FUN_RENT_CUSTOMER
    set COMP_ID = #{compId,jdbcType=INTEGER},
      CITY_ID = #{cityId,jdbcType=INTEGER},
      REG_ID = #{regId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      GR_ID = #{grId,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      ARCHIVE_ID = #{archiveId,jdbcType=INTEGER},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      CREATOR_UID = #{creatorUid,jdbcType=INTEGER},
      CREATE_ARCHIVE_ID = #{createArchiveId,jdbcType=INTEGER},
      RENT_CUST_NO = #{rentCustNo,jdbcType=VARCHAR},
      RENT_CUST_NAME = #{rentCustName,jdbcType=VARCHAR},
      RENT_CUST_SEX = #{rentCustSex,jdbcType=BIT},
      RENT_CUST_AGE = #{rentCustAge,jdbcType=TINYINT},
      RENT_CUST_CAREER = #{rentCustCareer,jdbcType=TINYINT},
      CELL_PHONE = #{cellPhone,jdbcType=VARCHAR},
      ID_CARD = #{idCard,jdbcType=VARCHAR},
      CUST_ADDR = #{custAddr,jdbcType=VARCHAR},
      RENT_LIFEBOUND = #{rentLifebound,jdbcType=VARCHAR},
      RENT_GOAL = #{rentGoal,jdbcType=TINYINT},
      RENT_LENGTH = #{rentLength,jdbcType=TINYINT},
      RENT_ABILITY = #{rentAbility,jdbcType=TINYINT},
      RENT_PAYTYPE = #{rentPaytype,jdbcType=TINYINT},
      CUST_LEVEL = #{custLevel,jdbcType=VARCHAR},
      HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      HOUSE_ROOM_1 = #{houseRoom1,jdbcType=TINYINT},
      HOUSE_REGION = #{houseRegion,jdbcType=VARCHAR},
      REGION_NAME = #{regionName,jdbcType=VARCHAR},
      BUILD_ID = #{buildId,jdbcType=VARCHAR},
      BUILD_NAME = #{buildName,jdbcType=VARCHAR},
      SECTION_ID = #{sectionId,jdbcType=VARCHAR},
      SECTION_NAME = #{sectionName,jdbcType=VARCHAR},
      HOUSE_ROUND = #{houseRound,jdbcType=VARCHAR},
      HOUSE_TYPE = #{houseType,jdbcType=VARCHAR},
      HOUSE_USEAGE = #{houseUseage,jdbcType=VARCHAR},
      HOUSE_FITMENT = #{houseFitment,jdbcType=TINYINT},
      HOUSE_DIRECT = #{houseDirect,jdbcType=VARCHAR},
      PLATE_TYPE = #{plateType,jdbcType=TINYINT},
      RENT_CUST_SOURCE = #{rentCustSource,jdbcType=TINYINT},
      RENT_CUST_LEVEL = #{rentCustLevel,jdbcType=TINYINT},
      HOUSE_FLOOR_LOW = #{houseFloorLow,jdbcType=SMALLINT},
      HOUSE_FLOOR_HIGH = #{houseFloorHigh,jdbcType=SMALLINT},
      HOUSE_PRICE_LOW = #{housePriceLow,jdbcType=NUMERIC},
      HOUSE_PRICE_HIGH = #{housePriceHigh,jdbcType=NUMERIC},
      HOUSE_AREA_LOW = #{houseAreaLow,jdbcType=NUMERIC},
      HOUSE_AREA_HIGH = #{houseAreaHigh,jdbcType=NUMERIC},
      HOUSE_YEAR_LOW = #{houseYearLow,jdbcType=SMALLINT},
      HOUSE_YEAR_HIGH = #{houseYearHigh,jdbcType=SMALLINT},
      HOUSE_LOOK = #{houseLook,jdbcType=BIT},
      CUST_REQUEST = #{custRequest,jdbcType=VARCHAR},
      CUST_MEMO = #{custMemo,jdbcType=VARCHAR},
      RENT_CUST_STATUS = #{rentCustStatus,jdbcType=TINYINT},
      TRACK_TIME = #{trackTime,jdbcType=TIMESTAMP},
      ACTION_TIME = #{actionTime,jdbcType=TIMESTAMP},
      REPEAT_FLAG = #{repeatFlag,jdbcType=BIT},
      INFO_TYPE = #{infoType,jdbcType=TINYINT},
      SHARE_FLAG = #{shareFlag,jdbcType=BIT},
      RED_FLAG = #{redFlag,jdbcType=BIT},
      ORANGE_FLAG = #{orangeFlag,jdbcType=BIT},
      PUBLIC_COUNT = #{publicCount,jdbcType=INTEGER},
      PUBLIC_TIME = #{publicTime,jdbcType=TIMESTAMP},
      DUE_TIME = #{dueTime,jdbcType=TIMESTAMP},
      SPECIAL_TIME = #{specialTime,jdbcType=TIMESTAMP},
      SCHEDULE_TIME = #{scheduleTime,jdbcType=TIMESTAMP},
      DEAL_TIME = #{dealTime,jdbcType=TIMESTAMP},
      WRITEOFF_TIME = #{writeoffTime,jdbcType=TIMESTAMP},
      SECRECY_TIME = #{secrecyTime,jdbcType=TIMESTAMP},
      COMMEND_TIME = #{commendTime,jdbcType=TIMESTAMP},
      PRIVATE_TIME = #{privateTime,jdbcType=TIMESTAMP},
      FROM_PUBLIC = #{fromPublic,jdbcType=BIT},
      COOPERATE_FLAG = #{cooperateFlag,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      FRIEND_HOUSE = #{friendHouse,jdbcType=TINYINT},
      COOPERATE_TIME = #{cooperateTime,jdbcType=TIMESTAMP},
      COMPLAINT_FLAG = #{complaintFlag,jdbcType=BIT},
      AREA_ID = #{areaId,jdbcType=INTEGER},
      is_ignore = #{isIgnore,jdbcType=TINYINT},
      YOU_SHARE_FLAG = #{youShareFlag,jdbcType=TINYINT},
      YOU_SHARE_TIME = #{youShareTime,jdbcType=TIMESTAMP},
      YOU_BUY_COUNT = #{youBuyCount,jdbcType=INTEGER},
      PRIVATE_USER_ID = #{privateUserId,jdbcType=INTEGER},
      SYNC_TIME = #{syncTime,jdbcType=TIMESTAMP},
      YOU_SHARE_ID = #{youShareId,jdbcType=INTEGER},
      SPECIAL_END_TIME = #{specialEndTime,jdbcType=TIMESTAMP},
      SCHEDULE_END_TIME = #{scheduleEndTime,jdbcType=TIMESTAMP},
      CITY_SHARE_FLAG = #{cityShareFlag,jdbcType=TINYINT},
      ROADS_ID = #{roadsId,jdbcType=VARCHAR},
      ROADS_NAME = #{roadsName,jdbcType=VARCHAR},
      RESPITE_END_TIME = #{respiteEndTime,jdbcType=TIMESTAMP},
      IS_SALE_LEASE = #{isSaleLease,jdbcType=TINYINT},
      AVAILABLE_TIME = #{availableTime,jdbcType=TIMESTAMP},
      LAST_DKAN_TIME = #{lastDkanTime,jdbcType=TIMESTAMP},
      WECHAT_NUMBER = #{wechatNumber,jdbcType=VARCHAR},
      CUST_PHOTO = #{custPhoto,jdbcType=VARCHAR},
      ID_CARD_TYPE = #{idCardType,jdbcType=INTEGER},
      RENT_CURRENT_STATUS = #{rentCurrentStatus,jdbcType=TINYINT},
      VEHICLE = #{vehicle,jdbcType=TINYINT},
      MENTALITY = #{mentality,jdbcType=TINYINT},
      C_USER_ID = #{cUserId,jdbcType=INTEGER},
      USER_LEVEL = #{userLevel,jdbcType=INTEGER},
      TISSUE_LINE = #{tissueLine,jdbcType=VARCHAR},
      PARTNER_ID = #{partnerId,jdbcType=INTEGER},
      ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER}
    where RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
  </update>
  <select id="getFunRentCustomer" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomerKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from FUN_RENT_CUSTOMER
    where COMP_ID = #{erpFunRentCustomerKey.compId,jdbcType=INTEGER}
    and RENT_CUST_ID = #{erpFunRentCustomerKey.rentCustId,jdbcType=INTEGER}
  </select>
    <update id="updateByUserId" parameterType="java.util.Map">
  	update FUN_RENT_CUSTOMER
    <set>
      <if test="map.manageRegId != null">
        REG_ID = #{map.manageRegId,jdbcType=INTEGER},
      </if>
      <if test="map.manageDeptId != null">
        DEPT_ID = #{map.manageDeptId,jdbcType=INTEGER},
      </if>
      <if test="map.updateTime != null">
        UPDATE_TIME = #{map.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="map.manageAreaId != null">
        AREA_ID = #{map.manageAreaId,jdbcType=INTEGER},
      </if>
      <if test="map.manageUserId != null">
        USER_ID = #{map.manageUserId,jdbcType=INTEGER}
      </if>
    </set>
    where USER_ID = #{map.erpUserId,jdbcType=INTEGER}
  </update>
    <select id="countShareHouse" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select 
    count(1) as Attr
    from FUN_RENT_CUSTOMER
    where COMP_ID = #{compId,jdbcType=INTEGER}
    AND (PLATE_TYPE='3' OR PLATE_TYPE='1')
  </select>
  <update id="updateOthersbyUserPauseToNormal">
    update FUN_RENT_CUSTOMER  set TRACK_TIME = CASE WHEN DATEADD(DD, #{pMap.timeZone}, TRACK_TIME)    &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD, #{pMap.timeZone} , TRACK_TIME) END,
    SPECIAL_TIME  = CASE WHEN DATEADD(DD, #{pMap.timeZone} , SPECIAL_TIME)  &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD,  #{pMap.timeZone} , SPECIAL_TIME) END,
    SCHEDULE_TIME = CASE WHEN DATEADD(DD, #{pMap.timeZone} , SCHEDULE_TIME) &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD,  #{pMap.timeZone} , SCHEDULE_TIME) END,
    SECRECY_TIME  = CASE WHEN DATEADD(DD, #{pMap.timeZone} , SECRECY_TIME)  &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD,  #{pMap.timeZone} , SECRECY_TIME) END,
    COMMEND_TIME  = CASE WHEN DATEADD(DD, #{pMap.timeZone} , COMMEND_TIME)  &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD,  #{pMap.timeZone} , COMMEND_TIME) END,
    ACTION_TIME   = CASE WHEN DATEADD(DD, #{pMap.timeZone} , ACTION_TIME)   &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD,  #{pMap.timeZone} , ACTION_TIME) END,
    PRIVATE_TIME  = CASE WHEN DATEADD(DD, #{pMap.timeZone} , PRIVATE_TIME)  &gt; GETDATE() THEN GETDATE() ELSE DATEADD(DD,  #{pMap.timeZone} , PRIVATE_TIME) END
    where USER_ID = #{pMap.userId} and DEPT_ID = #{pMap.deptId} and COMP_ID = #{pMap.compId}

  </update>
  <update id="updateHouseForReg">
    update FUN_RENT_CUSTOMER set AREA_ID = #{pMap.areaId}, REG_ID = #{pMap.regId}  where COMP_ID = #{pMap.compId} and DEPT_ID= #{pMap.deptId}
  </update>
	
	<select id="selectColumnById" resultMap="BaseResultMap">
		SELECT
		<foreach collection="columns" item="column" separator=",">
			${column}
		</foreach>
		FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID=#{compId} AND RENT_CUST_ID=#{rentCustId}
	</select>
	
	<select id="getMatchHouseCustList" resultMap="BaseResultMap">
		select 
		RENT_CUST_NO,RENT_CUST_NAME,SECTION_NAME,BUILD_NAME,HOUSE_PRICE_LOW,HOUSE_PRICE_HIGH,
		HOUSE_AREA_LOW,HOUSE_AREA_HIGH,HOUSE_ROOM,HOUSE_ROOM_1,HOUSE_FITMENT,USER_ID,
		RENT_CUST_ID,DEPT_ID,REGION_NAME,COMP_ID,YOU_SHARE_FLAG,COOPERATE_FLAG,
		HOUSE_REGION, SECTION_ID
		from FUN_RENT_CUSTOMER where
		CITY_ID = #{shardCityId} AND RENT_CUST_STATUS = '1'
		and ${operRange} = #{operRangeId} AND COMP_ID=#{compId}
		<if test="null != lease.userId">and USER_ID = #{lease.userId}</if>
		<!-- 这几个ID都是整形，这样拼写没问题 -->
		<if test="null != lease.leaseReg">and HOUSE_REGION like '% '+convert(varchar(20),${lease.leaseReg})+' %'</if>
		<if test="null != lease.buildId">and BUILD_ID like '% '+convert(varchar(20),${lease.buildId})+' %'</if>
		<if test="null != lease.trackTime">and TRACK_TIME &gt;= #{lease.trackTime}</if>
		<if test="null != lease.leaseUseage">and HOUSE_USEAGE like '% '+convert(varchar(20),${lease.leaseUseage})+' %'</if>
		<if test="null != lease.leaseRoom">
			and HOUSE_ROOM &lt;= #{lease.leaseRoom} and HOUSE_ROOM_1 &gt;= #{lease.leaseRoom}
		</if>
		<if test="null != lease.leaseArea">
			and HOUSE_AREA_LOW &lt;= #{lease.leaseArea} and HOUSE_AREA_HIGH &gt;= #{lease.leaseArea}
		</if>
		<if test="null != lease.leaseTotalPrice">
			and HOUSE_PRICE_LOW &lt;= #{lease.leaseTotalPrice} and HOUSE_PRICE_HIGH &gt;= #{lease.leaseTotalPrice}
		</if>
	</select>
	
    <select id="getFlowAnalysisCountList" resultType="java.util.Map">
    select RENT_CUST_STATUS AS caseStatus,COUNT(1) AS statusCount,DATEPART(MONTH,CREATION_TIME) AS monthofyear
    from FUN_RENT_CUSTOMER
    <where>
      AND COMP_ID = #{compId}
      AND CREATION_TIME &gt;= #{startTime}
      AND CREATION_TIME &lt;= #{endTime}
      <if test="null != areaId">
		AND AREA_ID = #{areaId}
      </if>
      <if test="null != regId">
		AND REG_ID = #{regId}
      </if>
      <if test="null != deptId">
		AND DEPT_ID = #{deptId}
      </if>
      <if test="null != userId">
		AND USER_ID = #{userId}
      </if>
    </where>
    GROUP BY RENT_CUST_STATUS,DATEPART(MONTH, CREATION_TIME) 
    ORDER BY RENT_CUST_STATUS ASC,DATEPART(MONTH, CREATION_TIME) ASC
    </select>	
        
    <select id="getHouseCustStatusData" resultType="java.util.Map">
		select 
		sum(iif(CREATION_TIME &gt;= #{weekTime},1,0)) as xzCustWeek,
		sum(1) as xzCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=4,1,0)) as ydCustWeek,
		sum(iif(RENT_CUST_STATUS=4,1,0)) as ydCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=2,1,0)) as fpCustWeek,
		sum(iif(RENT_CUST_STATUS=2,1,0)) as fpCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=5,1,0)) as ncjCustWeek,
		sum(iif(RENT_CUST_STATUS=5,1,0)) as ncjCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=6,1,0)) as wcjCustWeek,
		sum(iif(RENT_CUST_STATUS=6,1,0)) as wcjCustMonth,
		
		sum(iif(CREATION_TIME &gt;= #{weekTime} and RENT_CUST_STATUS=7,1,0)) as zxCustWeek,
		sum(iif(RENT_CUST_STATUS=7,1,0)) as zxCustMonth
				
		from FUN_RENT_CUSTOMER 
		where CREATION_TIME &gt;= #{monthTime} and COMP_ID = #{compId}
    </select>

	<select id="countAvailableHouse" resultType="java.lang.Integer">
		select count(1) as custCount
		from FUN_RENT_CUSTOMER
		where RENT_CUST_STATUS IN (1,2,4) and COMP_ID = #{compId}
	</select>

	<select id="getHouseBuyingPowerData" resultType="java.util.Map">
		SELECT count(1)cust,${caseWhenSql} as price
		FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID = #{compId} AND RENT_CUST_STATUS IN (1,2,4)
		GROUP BY ${caseWhenSql}
		ORDER BY count(1) desc
	</select>
	
	<sql id="getStoreDataAnalysisQueryDimSql">
		<if test="param.queryDim == 'STATUS'">RENT_CUST_STATUS</if><!-- 有效 -->
		<if test="param.queryDim == 'PRICE'">${param.custPriceSql}</if><!-- 价格 -->
		<if test="param.queryDim == 'AREA'">${param.custAreaSql}</if><!-- 面积 -->
		<if test="param.queryDim == 'ROOM'">HOUSE_ROOM_1</if><!-- 户型 -->
		<if test="param.queryDim == 'REG'">b.SOURCE_ID</if><!-- 行政区 -->
		<if test="param.queryDim == 'SECTION'">CONCAT(b.SOURCE_ID,'_',c.SOURCE_ID)</if><!-- 商圈 -->
		<if test="param.queryDim == 'USEAGE'">b.SOURCE_ID</if><!-- 用途 -->
		<if test="param.queryDim == 'BELONG'">HOUSE_USEAGE</if><!-- 所属TODO -->
	</sql>

	<select id="getStoreDataAnalysis" resultType="java.util.Map">
		SELECT
		<if test="param.topCount">TOP ${param.topCount}</if>
		COUNT(1) AS counts,
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionColumnSql} AS dim
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" /> AS dim
			</otherwise>
		</choose>
		<choose>
			<when test="param.queryDim == 'SECTION'">
				FROM FUN_RENT_CUSTOMER a
				left join FUN_CUST_REGSECTIONS b on b.case_id=a.rent_cust_id and b.case_type=4 and b.SOURCE_TYPE=0
				left join FUN_CUST_REGSECTIONS c on c.case_id=a.rent_cust_id and c.case_type=4 and c.SOURCE_TYPE=1
				WHERE a.COMP_ID=#{param.compId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
			</when>
			<when test="param.queryDim == 'REG'">
				FROM FUN_RENT_CUSTOMER a
				left join FUN_CUST_REGSECTIONS b on b.case_id=a.rent_cust_id and b.case_type=4 and b.SOURCE_TYPE=0
				WHERE a.COMP_ID=#{param.compId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
			</when>
			<when test="param.queryDim == 'USEAGE'">
				FROM FUN_RENT_CUSTOMER a
				left join FUN_CUST_DEMAND_SPLIT b on b.case_id=a.rent_cust_id and b.case_type=4 and b.SOURCE_TYPE=2
				<if test="param.regionId != null and param.regionId != ''"><!-- 行政区域-->
					left join FUN_CUST_REGSECTIONS c on c.case_id=a.rent_cust_id and c.case_type=3 and c.SOURCE_TYPE=0
				</if>
				<if test="param.sectionId != null and param.sectionId != ''"><!-- 商圈 -->
					left join FUN_CUST_REGSECTIONS d on c.case_id=a.rent_cust_id and c.case_type=3 and c.SOURCE_TYPE=1
				</if>
				WHERE a.COMP_ID=#{param.compId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
				<if test="param.regionId != null and param.regionId != ''">AND c.SOURCE_ID = #{param.regionId}</if><!-- 行政区域 -->
				<if test="param.sectionId != null and param.sectionId != ''">AND d.SOURCE_ID = #{param.sectionId}</if><!-- 商圈 -->
			</when>
			<otherwise>
				FROM FUN_RENT_CUSTOMER a
				<if test="param.regionId != null and param.regionId != ''"><!-- 行政区域-->
					left join FUN_CUST_REGSECTIONS c on c.case_id=a.rent_cust_id and c.case_type=3 and c.SOURCE_TYPE=0
				</if>
				<if test="param.sectionId != null and param.sectionId != ''"><!-- 商圈 -->
					left join FUN_CUST_REGSECTIONS d on c.case_id=a.rent_cust_id and c.case_type=3 and c.SOURCE_TYPE=1
				</if>
				WHERE a.COMP_ID=#{param.compId}
				AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
				<if test="param.statusType == 1">AND a.RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
				<if test="param.regionId != null and param.regionId != ''">AND c.SOURCE_ID = #{param.regionId}</if><!-- 行政区域 -->
				<if test="param.sectionId != null and param.sectionId != ''">AND d.SOURCE_ID = #{param.sectionId}</if><!-- 商圈 -->
			</otherwise>
		</choose>
		GROUP BY
		<choose>
			<when test="param.queryDim == 'BELONG'"><!-- 所属 -->
				${param.dimensionGroupSql}
			</when>
			<otherwise>
				<include refid="getStoreDataAnalysisQueryDimSql" />
			</otherwise>
		</choose>
		having COUNT(1) &gt; 0
		ORDER BY COUNT(1) DESC
	</select>

	<select id="getStoreDataCount" resultType="java.lang.Integer">
		SELECT COUNT(1)
		FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID=#{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
	</select>
	
	<select id="getStoreDataDaiKan" resultType="java.util.Map">
		select sum(iif(HOUSE_LOOK is null or HOUSE_LOOK=0,1,0)) notDk,
		sum(iif(HOUSE_LOOK=1,1,0)) isDk 
		from FUN_RENT_CUSTOMER 
		WHERE COMP_ID=#{param.compId}
		AND ${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
		<if test="param.regionId != null and param.regionId != ''">AND REG_ID = #{param.regionId}</if><!-- 行政区域 -->
		<if test="param.sectionId != null and param.sectionId != ''">AND SECTION_ID = #{param.sectionId}</if><!-- 商圈 -->
	</select>
	
	<select id="getStoreDataAnalysisByUseage" resultType="java.util.Map">
		select top 10 count(1) counts,c.SOURCE_ID byName
		from FUN_RENT_CUSTOMER a
		join FUN_CUST_DEMAND_SPLIT b on b.SOURCE_TYPE=2 and b.CASE_TYPE=3
		join FUN_CUST_DEMAND_SPLIT c on c.SOURCE_TYPE=3 and c.CASE_TYPE=3
		WHERE a.COMP_ID=#{param.compId}
		AND a.${param.serchRange}=#{param.serchRangeId}<!-- 搜索范围 -->
		<if test="param.statusType == 1">AND a.RENT_CUST_STATUS IN (1,2,4)</if><!-- 有效 -->
		<if test="param.useage == 1">AND b.SOURCE_ID = 1</if><!-- 住宅 -->
		<if test="param.useage == 2">AND b.SOURCE_ID = 3</if><!-- 商铺 -->
		<if test="param.useage == 3">AND b.SOURCE_ID = 4</if><!-- 写字 -->
		group by c.SOURCE_ID
		order by count(1) desc
	</select>

	<select id="getRentCustomerByCustId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_RENT_CUSTOMER
		where RENT_CUST_ID = #{rentCustId}
	</select>
	
	<select id="getLevelCounts" resultType="java.util.Map">
		SELECT sum(iif(RENT_CUST_LEVEL=2,1,0)) as commendLevel, sum(iif(RENT_CUST_LEVEL=3,1,0)) as passwordLevel
		FROM FUN_RENT_CUSTOMER
		WHERE USER_ID = #{infoOwnerUserId} AND COMP_ID = #{compId} 
			AND DEPT_ID =#{deptId} AND RENT_CUST_LEVEL IN (2, 3) and RENT_CUST_ID != #{caseId}
	</select>

	<select id="getRentCustomerInfoByCustId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from FUN_RENT_CUSTOMER
		where RENT_CUST_ID = #{rentCustId}
	</select>
	
	<select id="getPhoneRepeatList" resultType="java.util.Map">
		SELECT
			AREA_ID areaId, REG_ID regId, DEPT_ID deptId, GR_ID grId, RENT_CUST_ID caseId,
			RENT_CUST_STATUS AS status, RENT_CUST_NO AS caseNo
		FROM FUN_RENT_CUSTOMER
		WHERE RENT_CUST_ID IN(
			SELECT CASE_ID FROM
				FUN_PHONE
			WHERE
				COMP_ID = #{compId}
			<if test="userId != null">AND USER_ID = #{userId}</if>
			AND CASE_TYPE = 4
			AND PHONE IN 
			<foreach close=")" collection="phoneArr" item="val" open="(" separator=",">#{val}</foreach>
			GROUP BY CASE_ID
		)
		ORDER BY CREATION_TIME ASC
	</select>
	
	<select id="getIdCardRepeat" resultType="java.lang.Integer">
		SELECT COUNT(1) from FUN_RENT_CUSTOMER
		WHERE 
		COMP_ID = #{compId}
		<if test="userId != null">AND USER_ID = #{userId}</if>
		<if test="custId != null">AND RENT_CUST_ID != #{custId}</if>
		AND ID_CARD = #{idCard}
		AND ID_CARD_TYPE = #{idCardType}
	</select>
	
	<select id="getRentCustCount" resultType="java.lang.Integer">
		SELECT COUNT(1) FROM FUN_RENT_CUSTOMER WHERE COMP_ID=#{compId} AND USER_ID=#{userId}
	</select>
	
	<select id="getRentCustCountByFlag" resultType="java.lang.Integer">
		SELECT COUNT(1) FROM FUN_RENT_CUSTOMER WHERE COMP_ID=#{compId}
        <if test="null != partnerId">
           and PARTNER_ID =#{partnerId}
        </if>
		AND (RED_FLAG = 1 OR ORANGE_FLAG = 1)
        <!-- 新版组织机构不用 manageLevel 层级了 -->
        <choose>
          <when test="newOrganizationType">
            AND (
            <foreach collection="rangeIds" index="index" item="item" separator="OR">
              TISSUE_LINE LIKE CONCAT('%:', #{item}, ':%')
            </foreach>
            )
          </when>
          <otherwise>
            <choose>
              <when test="rangeType == 2">AND AREA_ID</when>
              <when test="rangeType == 3">AND REG_ID</when>
              <when test="rangeType == 4">AND DEPT_ID</when>
              <when test="rangeType == 5">AND GR_ID</when>
              <when test="rangeType == 6">AND USER_ID</when>
            </choose>
            <if test="rangeType != 1">
              in
              <foreach close=")" collection="rangeIds" index="index" item="rangeId" open="(" separator=",">
                #{rangeId}
              </foreach>
            </if>
          </otherwise>
        </choose>
	</select>
	
	<update id="updateModelData">
		UPDATE FUN_RENT_CUSTOMER
		<set>
			<if test="param.availableTime != null">AVAILABLE_TIME = #{param.availableTime},</if>
			<if test="param.trackTime != null">TRACK_TIME = #{param.trackTime},</if>
			<if test="param.rentCustStatus != null">RENT_CUST_STATUS = #{param.rentCustStatus},</if>
			<if test="param.rentCustLevel != null">RENT_CUST_LEVEL = #{param.rentCustLevel},</if>
			<if test="param.grId != null">GR_ID = #{param.grId},</if>
			<if test="param.deptId != null">DEPT_ID = #{param.deptId},</if>
			<if test="param.regId != null">REG_ID = #{param.regId},</if>
			<if test="param.areaId != null">AREA_ID = #{param.areaId},</if>
			<if test="param.userId != null">USER_ID = #{param.userId},</if>
			<if test="param.archiveId != null">ARCHIVE_ID = #{param.archiveId},</if>
			<if test="param.actionTime != null">ACTION_TIME = #{param.actionTime},</if>
			<if test="param.plateType != null">PLATE_TYPE = #{param.plateType},</if>
			<if test="param.specialTime != null">SPECIAL_TIME = #{param.specialTime},</if>
			<if test="param.specialEndTime!= null">SPECIAL_END_TIME = #{param.specialEndTime},</if>
			<if test="param.scheduleTime != null">SCHEDULE_TIME = #{param.scheduleTime},</if>
			<if test="param.scheduleEndTime != null">SCHEDULE_END_TIME = #{param.scheduleEndTime},</if>
			<if test="param.respiteEndTime != null">RESPITE_END_TIME = #{param.respiteEndTime},</if>
			<if test="param.privateTime!= null">PRIVATE_TIME = #{param.privateTime},</if>
			<if test="param.privateUserId!= null">PRIVATE_USER_ID = #{param.privateUserId},</if>
			<if test="param.dealTime != null">DEAL_TIME = #{param.dealTime},</if>
			<if test="param.isSaleLease != null">IS_SALE_LEASE = #{param.isSaleLease},</if>
			<if test="param.writeoffTime!= null">WRITEOFF_TIME = #{param.writeoffTime},</if>
			<if test="param.redFlag!= null">RED_FLAG = #{param.redFlag},</if>
			<if test="param.orangeFlag != null">ORANGE_FLAG = #{param.orangeFlag},</if>
			<if test="param.cityShareFlag != null">CITY_SHARE_FLAG = #{param.cityShareFlag},</if>
			<if test="param.fromPublic != null">FROM_PUBLIC = #{param.fromPublic},</if>
			<if test="param.publicCount != null">PUBLIC_COUNT = #{param.publicCount},</if>
			UPDATE_TIME = getDate()
		</set>
		WHERE RENT_CUST_ID = #{caseId}
		<if test="plateType != null">AND PLATE_TYPE=#{plateType}</if>
	</update>
	
	<select id="getRentAddCount" resultType="java.lang.Integer">
		SELECT COUNT(1) FROM FUN_RENT_CUSTOMER WHERE COMP_ID = #{compId}
        <if test="null != partnerId">
           and PARTNER_ID =#{partnerId}
        </if>
        AND CREATION_TIME &gt;= #{startTime} AND
		<choose>
			<when test="manageLevel == 1">COMP_ID</when>
			<when test="manageLevel == 2">AREA_ID</when>
			<when test="manageLevel == 3">REG_ID</when>
			<when test="manageLevel == 4">DEPT_ID</when>
			<when test="manageLevel == 5">GR_ID</when>
		</choose>
		IN
		<foreach close=")" collection="manageRangIds" item="rangeId" open="(" separator=",">
			#{rangeId}
		</foreach>
	</select>
	<select id="getTopFunRentCustomer" resultMap="BaseResultMap">
		select TOP ${num} RENT_CUST_ID,RENT_CUST_NO from FUN_RENT_CUSTOMER
		where COMP_ID=#{compId} and DEPT_ID=#{deptId}
		<if test="userId != null">
			and USER_ID=#{userId}
		</if>
		<if test="plateType != null">
			and PLATE_TYPE=${plateType}
		</if>
	</select>

	<select id="countFunRentCustomer" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID=#{compId}
		AND DEPT_ID=#{deptId}
		<if test="userId != null">
			AND USER_ID=#{userId}
		</if>
		<if test="plateType != null">
			AND PLATE_TYPE=#{plateType}
		</if>
		AND RENT_CUST_ID IN
		<foreach close=")" collection="caseIds" item="caseId" open="(" separator=",">
			#{caseId}
		</foreach>
	</select>
	
	<select id="detectTransDataByDeptIdAndUserId" resultMap="BaseResultMap">
		select top 1 CITY_ID from FUN_RENT_CUSTOMER where DEPT_ID=#{deptId}
		<if test="userId != null">
			and USER_ID=#{userId}
		</if>
		<if test="plateType != null">
			and PLATE_TYPE=#{plateType}
		</if>
		and RENT_CUST_STATUS in (7,5,6)
	</select>

	<select id="detectTransData" resultMap="BaseResultMap">
		SELECT TOP 1 CITY_ID FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID=#{compId}
		AND RENT_CUST_ID IN
		<foreach close=")" collection="caseIds" item="caseId" open="(" separator=",">
			#{caseId}
		</foreach>
		and RENT_CUST_STATUS in (7,5,6)
	</select>

  <select id="countByUserId" resultType="java.lang.Integer">
    select COUNT (*)
    from FUN_RENT_CUSTOMER
    where COMP_ID = #{compId} and USER_ID = #{userId}
  </select>
	
 	<select id="getSpecialListCount" resultType="com.myfun.repository.erpdb.dto.ErpFunRentCustomerDto">
 		select RENT_CUST_LEVEL as LEVEL,count(*) as ATTRNAME
 		from FUN_RENT_CUSTOMER
 		where COMP_ID = #{compId} and DEPT_ID = #{deptId} and USER_ID = #{userId}
 		and RENT_CUST_LEVEL in (2,3)
 		group by RENT_CUST_LEVEL
 	</select>
	
	<select id="getMatchRentCustomerList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_RENT_CUSTOMER
		WHERE RENT_CUST_STATUS = 1
		<if test="null != param.plateType">AND PLATE_TYPE = #{param.plateType}</if>
        <if test="null != param.creationTime1 and param.creationTime1!=''">
          <choose>
            <when test="null != param.isUseCreationTimeQuery and param.isUseCreationTimeQuery == 1">
              AND CREATION_TIME &gt;= #{param.creationTime1}
            </when>
            <otherwise>
              AND AVAILABLE_TIME &gt;= #{param.creationTime1}
            </otherwise>
          </choose>
        </if>
        <if test="null != param.creationTime2 and param.creationTime2!=''">
          <choose>
            <when test="null != param.isUseCreationTimeQuery and param.isUseCreationTimeQuery == 1">
              AND CREATION_TIME &lt;= #{param.creationTime2}
            </when>
            <otherwise>
              AND AVAILABLE_TIME &lt;= #{param.creationTime2}
            </otherwise>
          </choose>
        </if>
		<choose>
			<when test="&quot;EXACT_MATCH&quot; == param.matchType">
				<choose>
					<when test="null != param.region and (4 == param.leaseUsage or 5 == param.leaseUsage or 6 == param.leaseUsage)">
						AND HOUSE_REGION LIKE '% ${param.region} %'
					</when>
					<when test="null != param.region">
						AND HOUSE_REGION LIKE '% ${param.region} %'
						<if test="null != param.saleUsage">
							AND HOUSE_USEAGE LIKE '% ${param.leaseUsage} %'
						</if>
					</when>
				</choose>
				<if test="null != param.area">
					AND HOUSE_AREA_LOW &lt;= #{param.area}
					AND HOUSE_AREA_HIGH &gt;= #{param.area}
				</if>
				<if test="null != param.floor">
					AND HOUSE_FLOOR_LOW &lt;= #{param.floor}
					AND HOUSE_FLOOR_HIGH &gt;= #{param.floor}
				</if>
				<if test="null != param.totalPrice">
					AND HOUSE_PRICE_LOW &lt;= #{param.totalPrice}
					AND HOUSE_PRICE_HIGH &gt;= #{param.totalPrice}
				</if>
				<if test="null != param.leaseRoom">
                    AND HOUSE_ROOM &lt;= #{param.leaseRoom}
                    AND HOUSE_ROOM_1 &gt;= #{param.leaseRoom}
				</if>
			</when>
			<otherwise>
				<if test="null != param.buildId">AND BUILD_ID LIKE #{param.buildId}</if>
			</otherwise>
		</choose>
		<choose>
			<when test="param.isPerLogin">
				AND USER_ID = #{param.currentUserId}
			</when>
			<!-- 移动端特有的查询-陈文超 -->
			<when test="param.isPersonalData">
                and COMP_ID in 
                <foreach close=")" collection="compIds" item="compId" open="(" separator=",">
                    #{compId}  
                </foreach>
                 AND USER_ID = #{param.currentUserId}
            </when>
			<otherwise>
				<choose>
					<when test="0 == param.bound or null == param.bound">
						<choose>
                            <when test="null != param.grId and param.grId != '' ">
                              AND GR_ID = #{param.grId}
                            </when>
                            <when test="null != param.deptId and param.deptId != '' ">
                              AND DEPT_ID = #{param.deptId}
                            </when>
                            <when test="null != param.areaId and param.areaId != ''">
                              AND AREA_ID = #{param.areaId}
                            </when>
                            <when test="null != param.regId and param.regId != ''">
                              AND REG_ID = #{param.regId}
                            </when>
						</choose>
						AND COMP_ID = #{param.currentCompId}
						<if test="null != param.operColumn and null != param.operValue">AND ${param.operColumn} =
							#{param.operValue}
						</if>
					</when>
					<when test="1 == param.bound">
						AND COOPERATE_FLAG = 1 AND USER_ID &gt; 0 AND COMP_ID IN
						<foreach close=")" collection="param.compIds" item="compId" open="(" separator=",">
							#{compId}
						</foreach>
						AND CITY_ID = #{param.cityId}
					</when>
					<when test="2 == param.bound">
						AND COOPERATE_FLAG = 1 AND USER_ID &gt; 0 AND CITY_ID = #{param.cityId}
					</when>
					<otherwise>
						AND DEPT_ID = #{param.currentDeptId} AND COMP_ID = #{param.currentCompId}
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		ORDER BY ${param.orderBy}
	</select>
	
	<select id="getFunRentCustomerByCompNo" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		FROM FUN_RENT_CUSTOMER
		where COMP_ID = #{compId}
	</select>
 
   <select id="selectOneByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunRentCustomerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    TOP 1
    <include refid="Base_Column_List" />
    from FUN_RENT_CUSTOMER
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

	<select id="getFunRentCustListByCompIdAndCaseIds" resultMap="BaseResultMap">
		SELECT 
		<include refid="Base_Column_List" />
		FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID = #{compId} AND RENT_CUST_ID IN
			<foreach close=")" collection="caseIds" item="caseId" open="(" separator=",">
				#{caseId}
			</foreach>
			ORDER BY CREATION_TIME DESC
	</select>
	
	<select id="getAppAchieveMonthStatisticsRankDetailCustomerAdd" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID = #{compId} 
		<if test="2 == trueViewRang"> AND AREA_ID = #{trueViewRangId}</if>
		<if test="3 == trueViewRang"> AND REG_ID = #{trueViewRangId}</if>
		<if test="4 == trueViewRang"> AND DEPT_ID = #{trueViewRangId}</if>
		<if test="5 == trueViewRang"> AND GR_ID = #{trueViewRangId}</if>
		<if test="6 == trueViewRang"> AND USER_ID = #{trueViewRangId}</if>
		<if test="5 == trueViewRang and deptId != null">
			AND DEPT_ID = #{deptId} 
		</if>
		AND RENT_CUST_ID IN
		<foreach close=")" collection="caseIds" index="index" item="caseId" open="(" separator=",">
			#{caseId}
		</foreach>
		ORDER BY CREATION_TIME DESC
	</select>
<select id="getAppAchieveMonthStatisticsRankDetailCustomerForOrg" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM FUN_RENT_CUSTOMER
		WHERE COMP_ID = #{compId}
        <if test="orgLikeWhereCause!=null and orgLikeWhereCause!=''">
          and ${orgLikeWhereCause}
        </if>
		AND RENT_CUST_ID IN
		<foreach close=")" collection="caseIds" index="index" item="caseId" open="(" separator=",">
			#{caseId}
		</foreach>
		ORDER BY CREATION_TIME DESC
	</select>

  <select id="getAppAchieveMonthStatisticsRankDetailCustomerAddForOrg" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_RENT_CUSTOMER
    WHERE COMP_ID = #{compId}
    <if test="2 == trueViewRang"> AND AREA_ID = #{trueViewRangId}</if>
    <if test="3 == trueViewRang"> AND REG_ID = #{trueViewRangId}</if>
    <if test="4 == trueViewRang"> AND DEPT_ID = #{trueViewRangId}</if>
    <if test="5 == trueViewRang"> AND GR_ID = #{trueViewRangId}</if>
    <if test="6 == trueViewRang"> AND USER_ID = #{trueViewRangId}</if>
    <if test="5 == trueViewRang and deptId != null">
      AND DEPT_ID = #{deptId}
    </if>
    AND RENT_CUST_ID IN
    <foreach close=")" collection="caseIds" index="index" item="caseId" open="(" separator=",">
      #{caseId}
    </foreach>
    ORDER BY CREATION_TIME DESC
  </select>

	<select id="getFunRentCustByRentId" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" /> 
		from FUN_RENT_CUSTOMER WHERE RENT_CUST_ID = #{rentCustId,jdbcType=INTEGER}
	</select>

  <select id="getCustomersByCaseIds" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_RENT_CUSTOMER
    WHERE COMP_ID = #{compId}
    AND RENT_CUST_ID IN
    <foreach close=")" collection="caseIds" index="index" item="caseId" open="(" separator=",">
      #{caseId}
    </foreach>
    ORDER BY CREATION_TIME DESC
  </select>
  
   <select id="selectCustInfoListByIds" resultType="com.myfun.erpWeb.managecenter.transaction.vo.CustInfoVO">
    SELECT
	RENT_CUST_ID as custId,BUILD_NAME as custBuildName,HOUSE_ROOM as houseRoomMin,HOUSE_ROOM_1 as houseRoomMax,HOUSE_PRICE_LOW as housePriceLow,HOUSE_PRICE_HIGH as housePriceHigh,USER_ID as custUserId,ID_CARD as customerIdCard,ID_CARD_TYPE as customerIdCardType,CELL_PHONE as customerCellPhone,RENT_CUST_NAME as customerName 
    FROM FUN_RENT_CUSTOMER
    WHERE COMP_ID = #{compId}
    AND RENT_CUST_ID IN
    <foreach close=")" collection="caseIds" index="index" item="caseId" open="(" separator=",">
      #{caseId}
    </foreach>
  </select>

  <update id="transDataForDeleteUser" parameterType="map">
  	update FUN_RENT_CUSTOMER  set
  	USER_ID = NULL,
  	ARCHIVE_ID =  NUll,
  	RENT_CUST_SOURCE	 = 5 ,
  	RENT_CUST_LEVEL = 1 ,
  	UPDATE_TIME = #{paramMap.now} ,
  	SYNC_TIME = #{paramMap.now} ,
  	ACTION_TIME = #{paramMap.now} ,
  	PUBLIC_TIME = #{paramMap.now} ,
  	TRACK_TIME = #{paramMap.now} ,
  	AREA_ID = #{paramMap.areaId} ,
  	REG_ID = #{paramMap.regId} ,
  	DEPT_ID = #{paramMap.deptId} ,
  	GR_ID = #{paramMap.grId} ,
  	PLATE_TYPE = 3 ,
  	ORANGE_FLAG = 0 ,
  	COOPERATE_FLAG = 0 ,
  	CITY_SHARE_FLAG = 0 where USER_ID = #{paramMap.userId}
  </update>
  
  
    <update id="transRentData" parameterType="map">
  	update FUN_RENT_CUSTOMER  set
  	USER_ID = NULL,
  	ARCHIVE_ID =  NUll,
  	RENT_CUST_SOURCE = 5 ,
  	RENT_CUST_LEVEL = 1 ,
  	UPDATE_TIME = #{paramMap.now} ,
  	SYNC_TIME = #{paramMap.now} ,
  	ACTION_TIME = #{paramMap.now} ,
  	PUBLIC_TIME = #{paramMap.now} ,
  	TRACK_TIME = #{paramMap.now} ,
  	PLATE_TYPE = 3 ,
  	ORANGE_FLAG = 0 ,
  	COOPERATE_FLAG = 0 ,
  	CITY_SHARE_FLAG = 0,
  	ORGANIZATION_ID = #{paramMap.organizationId},
  	USER_LEVEL = #{paramMap.userLevel},
  	TISSUE_LINE = #{paramMap.tissueLineCust}
  	where USER_ID = #{paramMap.userId}
  </update>
</mapper>