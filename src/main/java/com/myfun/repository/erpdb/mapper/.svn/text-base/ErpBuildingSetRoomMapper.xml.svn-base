<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpBuildingSetRoomMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpBuildingSetRoom">
    <!--@mbggenerated-->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="CITY_ID" jdbcType="INTEGER" property="cityId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="SYS_ROOM_ID" jdbcType="VARCHAR" property="sysRoomId" />
    <result column="ROOM_ID" jdbcType="VARCHAR" property="roomId" />
    <result column="HOUSE_ROOM" jdbcType="TINYINT" property="houseRoom" />
    <result column="HOUSE_HALL" jdbcType="TINYINT" property="houseHall" />
    <result column="HOUSE_WEI" jdbcType="TINYINT" property="houseWei" />
    <result column="HOUSE_YANG" jdbcType="TINYINT" property="houseYang" />
    <result column="HOUSE_DIRECT" jdbcType="TINYINT" property="houseDirect" />
    <result column="HOUSE_AREA" jdbcType="NUMERIC" property="houseArea" />
    <result column="HOUSE_INNERAREA" jdbcType="NUMERIC" property="houseInnerarea" />
    <result column="CREATION_TIME" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="BUILD_ROOF" jdbcType="VARCHAR" property="buildRoof" />
    <result column="BUILD_UNIT" jdbcType="VARCHAR" property="buildUnit" />
    <result column="BEYOND_RULE" jdbcType="TINYINT" property="beyondRule" />
    <result column="DEL_FLAG" jdbcType="TINYINT" property="delFlag" />
    <result column="ROOM_FLOOR" jdbcType="VARCHAR" property="roomFloor" />
    <result column="MERGE_ROOM" jdbcType="INTEGER" property="mergeRoom" />
    <result column="HOUSE_OWNER" jdbcType="VARCHAR" property="houseOwner" />
    <result column="CELL_PHONE" jdbcType="VARCHAR" property="cellPhone" />
    <result column="OWNER_SEX" jdbcType="TINYINT" property="ownerSex" />
    <result column="JOINT_USER_NAME" jdbcType="VARCHAR" property="jointUserName" />
    <result column="JOINT_CELL_PHONE" jdbcType="VARCHAR" property="jointCellPhone" />
    <result column="JOINT_USER_SEX" jdbcType="TINYINT" property="jointUserSex" />
    <result column="BUILDING_SET_ROOF_ID" jdbcType="INTEGER" property="buildingSetRoofId" />
    <result column="BUILDING_SET_UNIT_ID" jdbcType="INTEGER" property="buildingSetUnitId" />
    <result column="BUILDING_SET_FLOOR_ID" jdbcType="INTEGER" property="buildingSetFloorId" />
    <result column="ADDR_MD5" jdbcType="VARCHAR" property="addrMd5" />
    <result column="SALE_FLAG" jdbcType="TINYINT" property="saleFlag" />
    <result column="LEASE_FLAG" jdbcType="TINYINT" property="leaseFlag" />
    <result column="SALE_PRICE" jdbcType="NUMERIC" property="salePrice" />
    <result column="LEASE_PRICE" jdbcType="NUMERIC" property="leasePrice" />
    <result column="PRICE_UNIT" jdbcType="TINYINT" property="priceUnit" />
    <result column="NEAR_STREET" jdbcType="TINYINT" property="nearStreet" />
    <result column="FLOOR_HEIGHT" jdbcType="NUMERIC" property="floorHeight" />
    <result column="HOUSE_STRUCTURE" jdbcType="INTEGER" property="houseStructure" />
    <result column="TOILET_TYPE" jdbcType="INTEGER" property="toiletType" />
    <result column="KITCHEN" jdbcType="INTEGER" property="kitchen" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    ID, CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, HOUSE_HALL, HOUSE_WEI, 
    HOUSE_YANG, HOUSE_DIRECT, HOUSE_AREA, HOUSE_INNERAREA, CREATION_TIME, UPDATE_TIME, 
    BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, MERGE_ROOM, HOUSE_OWNER, 
    CELL_PHONE, OWNER_SEX, JOINT_USER_NAME, JOINT_CELL_PHONE, JOINT_USER_SEX, BUILDING_SET_ROOF_ID, 
    BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID, ADDR_MD5, SALE_FLAG, LEASE_FLAG, SALE_PRICE, 
    LEASE_PRICE, PRICE_UNIT, NEAR_STREET, FLOOR_HEIGHT, HOUSE_STRUCTURE, TOILET_TYPE, 
    KITCHEN
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoomExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from BUILDING_SET_ROOM
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from BUILDING_SET_ROOM
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from BUILDING_SET_ROOM
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoomExample">
    <!--@mbggenerated-->
    delete from BUILDING_SET_ROOM
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoom" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into BUILDING_SET_ROOM (CITY_ID, COMP_ID, BUILD_ID, 
      SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, 
      HOUSE_HALL, HOUSE_WEI, HOUSE_YANG, 
      HOUSE_DIRECT, HOUSE_AREA, HOUSE_INNERAREA, 
      CREATION_TIME, UPDATE_TIME, BUILD_ROOF, 
      BUILD_UNIT, BEYOND_RULE, DEL_FLAG, 
      ROOM_FLOOR, MERGE_ROOM, HOUSE_OWNER, 
      CELL_PHONE, OWNER_SEX, JOINT_USER_NAME, 
      JOINT_CELL_PHONE, JOINT_USER_SEX, BUILDING_SET_ROOF_ID, 
      BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID, 
      ADDR_MD5, SALE_FLAG, LEASE_FLAG, 
      SALE_PRICE, LEASE_PRICE, PRICE_UNIT, 
      NEAR_STREET, FLOOR_HEIGHT, HOUSE_STRUCTURE, 
      TOILET_TYPE, KITCHEN)
    values (#{cityId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{buildId,jdbcType=INTEGER}, 
      #{sysRoomId,jdbcType=VARCHAR}, #{roomId,jdbcType=VARCHAR}, #{houseRoom,jdbcType=TINYINT}, 
      #{houseHall,jdbcType=TINYINT}, #{houseWei,jdbcType=TINYINT}, #{houseYang,jdbcType=TINYINT}, 
      #{houseDirect,jdbcType=TINYINT}, #{houseArea,jdbcType=NUMERIC}, #{houseInnerarea,jdbcType=NUMERIC}, 
      #{creationTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{buildRoof,jdbcType=VARCHAR}, 
      #{buildUnit,jdbcType=VARCHAR}, #{beyondRule,jdbcType=TINYINT}, #{delFlag,jdbcType=TINYINT}, 
      #{roomFloor,jdbcType=VARCHAR}, #{mergeRoom,jdbcType=INTEGER}, #{houseOwner,jdbcType=VARCHAR}, 
      #{cellPhone,jdbcType=VARCHAR}, #{ownerSex,jdbcType=TINYINT}, #{jointUserName,jdbcType=VARCHAR}, 
      #{jointCellPhone,jdbcType=VARCHAR}, #{jointUserSex,jdbcType=TINYINT}, #{buildingSetRoofId,jdbcType=INTEGER}, 
      #{buildingSetUnitId,jdbcType=INTEGER}, #{buildingSetFloorId,jdbcType=INTEGER}, 
      #{addrMd5,jdbcType=VARCHAR}, #{saleFlag,jdbcType=TINYINT}, #{leaseFlag,jdbcType=TINYINT}, 
      #{salePrice,jdbcType=NUMERIC}, #{leasePrice,jdbcType=NUMERIC}, #{priceUnit,jdbcType=TINYINT}, 
      #{nearStreet,jdbcType=TINYINT}, #{floorHeight,jdbcType=NUMERIC}, #{houseStructure,jdbcType=INTEGER}, 
      #{toiletType,jdbcType=INTEGER}, #{kitchen,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoom" useGeneratedKeys="true">
    <!--@mbggenerated-->
    insert into BUILDING_SET_ROOM
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        CITY_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="sysRoomId != null">
        SYS_ROOM_ID,
      </if>
      <if test="roomId != null">
        ROOM_ID,
      </if>
      <if test="houseRoom != null">
        HOUSE_ROOM,
      </if>
      <if test="houseHall != null">
        HOUSE_HALL,
      </if>
      <if test="houseWei != null">
        HOUSE_WEI,
      </if>
      <if test="houseYang != null">
        HOUSE_YANG,
      </if>
      <if test="houseDirect != null">
        HOUSE_DIRECT,
      </if>
      <if test="houseArea != null">
        HOUSE_AREA,
      </if>
      <if test="houseInnerarea != null">
        HOUSE_INNERAREA,
      </if>
      <if test="creationTime != null">
        CREATION_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="buildRoof != null">
        BUILD_ROOF,
      </if>
      <if test="buildUnit != null">
        BUILD_UNIT,
      </if>
      <if test="beyondRule != null">
        BEYOND_RULE,
      </if>
      <if test="delFlag != null">
        DEL_FLAG,
      </if>
      <if test="roomFloor != null">
        ROOM_FLOOR,
      </if>
      <if test="mergeRoom != null">
        MERGE_ROOM,
      </if>
      <if test="houseOwner != null">
        HOUSE_OWNER,
      </if>
      <if test="cellPhone != null">
        CELL_PHONE,
      </if>
      <if test="ownerSex != null">
        OWNER_SEX,
      </if>
      <if test="jointUserName != null">
        JOINT_USER_NAME,
      </if>
      <if test="jointCellPhone != null">
        JOINT_CELL_PHONE,
      </if>
      <if test="jointUserSex != null">
        JOINT_USER_SEX,
      </if>
      <if test="buildingSetRoofId != null">
        BUILDING_SET_ROOF_ID,
      </if>
      <if test="buildingSetUnitId != null">
        BUILDING_SET_UNIT_ID,
      </if>
      <if test="buildingSetFloorId != null">
        BUILDING_SET_FLOOR_ID,
      </if>
      <if test="addrMd5 != null">
        ADDR_MD5,
      </if>
      <if test="saleFlag != null">
        SALE_FLAG,
      </if>
      <if test="leaseFlag != null">
        LEASE_FLAG,
      </if>
      <if test="salePrice != null">
        SALE_PRICE,
      </if>
      <if test="leasePrice != null">
        LEASE_PRICE,
      </if>
      <if test="priceUnit != null">
        PRICE_UNIT,
      </if>
      <if test="nearStreet != null">
        NEAR_STREET,
      </if>
      <if test="floorHeight != null">
        FLOOR_HEIGHT,
      </if>
      <if test="houseStructure != null">
        HOUSE_STRUCTURE,
      </if>
      <if test="toiletType != null">
        TOILET_TYPE,
      </if>
      <if test="kitchen != null">
        KITCHEN,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="sysRoomId != null">
        #{sysRoomId,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="houseRoom != null">
        #{houseRoom,jdbcType=TINYINT},
      </if>
      <if test="houseHall != null">
        #{houseHall,jdbcType=TINYINT},
      </if>
      <if test="houseWei != null">
        #{houseWei,jdbcType=TINYINT},
      </if>
      <if test="houseYang != null">
        #{houseYang,jdbcType=TINYINT},
      </if>
      <if test="houseDirect != null">
        #{houseDirect,jdbcType=TINYINT},
      </if>
      <if test="houseArea != null">
        #{houseArea,jdbcType=NUMERIC},
      </if>
      <if test="houseInnerarea != null">
        #{houseInnerarea,jdbcType=NUMERIC},
      </if>
      <if test="creationTime != null">
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="buildRoof != null">
        #{buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="buildUnit != null">
        #{buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="beyondRule != null">
        #{beyondRule,jdbcType=TINYINT},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="roomFloor != null">
        #{roomFloor,jdbcType=VARCHAR},
      </if>
      <if test="mergeRoom != null">
        #{mergeRoom,jdbcType=INTEGER},
      </if>
      <if test="houseOwner != null">
        #{houseOwner,jdbcType=VARCHAR},
      </if>
      <if test="cellPhone != null">
        #{cellPhone,jdbcType=VARCHAR},
      </if>
      <if test="ownerSex != null">
        #{ownerSex,jdbcType=TINYINT},
      </if>
      <if test="jointUserName != null">
        #{jointUserName,jdbcType=VARCHAR},
      </if>
      <if test="jointCellPhone != null">
        #{jointCellPhone,jdbcType=VARCHAR},
      </if>
      <if test="jointUserSex != null">
        #{jointUserSex,jdbcType=TINYINT},
      </if>
      <if test="buildingSetRoofId != null">
        #{buildingSetRoofId,jdbcType=INTEGER},
      </if>
      <if test="buildingSetUnitId != null">
        #{buildingSetUnitId,jdbcType=INTEGER},
      </if>
      <if test="buildingSetFloorId != null">
        #{buildingSetFloorId,jdbcType=INTEGER},
      </if>
      <if test="addrMd5 != null">
        #{addrMd5,jdbcType=VARCHAR},
      </if>
      <if test="saleFlag != null">
        #{saleFlag,jdbcType=TINYINT},
      </if>
      <if test="leaseFlag != null">
        #{leaseFlag,jdbcType=TINYINT},
      </if>
      <if test="salePrice != null">
        #{salePrice,jdbcType=NUMERIC},
      </if>
      <if test="leasePrice != null">
        #{leasePrice,jdbcType=NUMERIC},
      </if>
      <if test="priceUnit != null">
        #{priceUnit,jdbcType=TINYINT},
      </if>
      <if test="nearStreet != null">
        #{nearStreet,jdbcType=TINYINT},
      </if>
      <if test="floorHeight != null">
        #{floorHeight,jdbcType=NUMERIC},
      </if>
      <if test="houseStructure != null">
        #{houseStructure,jdbcType=INTEGER},
      </if>
      <if test="toiletType != null">
        #{toiletType,jdbcType=INTEGER},
      </if>
      <if test="kitchen != null">
        #{kitchen,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoomExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from BUILDING_SET_ROOM
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update BUILDING_SET_ROOM
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        CITY_ID = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.sysRoomId != null">
        SYS_ROOM_ID = #{record.sysRoomId,jdbcType=VARCHAR},
      </if>
      <if test="record.roomId != null">
        ROOM_ID = #{record.roomId,jdbcType=VARCHAR},
      </if>
      <if test="record.houseRoom != null">
        HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      </if>
      <if test="record.houseHall != null">
        HOUSE_HALL = #{record.houseHall,jdbcType=TINYINT},
      </if>
      <if test="record.houseWei != null">
        HOUSE_WEI = #{record.houseWei,jdbcType=TINYINT},
      </if>
      <if test="record.houseYang != null">
        HOUSE_YANG = #{record.houseYang,jdbcType=TINYINT},
      </if>
      <if test="record.houseDirect != null">
        HOUSE_DIRECT = #{record.houseDirect,jdbcType=TINYINT},
      </if>
      <if test="record.houseArea != null">
        HOUSE_AREA = #{record.houseArea,jdbcType=NUMERIC},
      </if>
      <if test="record.houseInnerarea != null">
        HOUSE_INNERAREA = #{record.houseInnerarea,jdbcType=NUMERIC},
      </if>
      <if test="record.creationTime != null">
        CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.buildRoof != null">
        BUILD_ROOF = #{record.buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="record.buildUnit != null">
        BUILD_UNIT = #{record.buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.beyondRule != null">
        BEYOND_RULE = #{record.beyondRule,jdbcType=TINYINT},
      </if>
      <if test="record.delFlag != null">
        DEL_FLAG = #{record.delFlag,jdbcType=TINYINT},
      </if>
      <if test="record.roomFloor != null">
        ROOM_FLOOR = #{record.roomFloor,jdbcType=VARCHAR},
      </if>
      <if test="record.mergeRoom != null">
        MERGE_ROOM = #{record.mergeRoom,jdbcType=INTEGER},
      </if>
      <if test="record.houseOwner != null">
        HOUSE_OWNER = #{record.houseOwner,jdbcType=VARCHAR},
      </if>
      <if test="record.cellPhone != null">
        CELL_PHONE = #{record.cellPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.ownerSex != null">
        OWNER_SEX = #{record.ownerSex,jdbcType=TINYINT},
      </if>
      <if test="record.jointUserName != null">
        JOINT_USER_NAME = #{record.jointUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.jointCellPhone != null">
        JOINT_CELL_PHONE = #{record.jointCellPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.jointUserSex != null">
        JOINT_USER_SEX = #{record.jointUserSex,jdbcType=TINYINT},
      </if>
      <if test="record.buildingSetRoofId != null">
        BUILDING_SET_ROOF_ID = #{record.buildingSetRoofId,jdbcType=INTEGER},
      </if>
      <if test="record.buildingSetUnitId != null">
        BUILDING_SET_UNIT_ID = #{record.buildingSetUnitId,jdbcType=INTEGER},
      </if>
      <if test="record.buildingSetFloorId != null">
        BUILDING_SET_FLOOR_ID = #{record.buildingSetFloorId,jdbcType=INTEGER},
      </if>
      <if test="record.addrMd5 != null">
        ADDR_MD5 = #{record.addrMd5,jdbcType=VARCHAR},
      </if>
      <if test="record.saleFlag != null">
        SALE_FLAG = #{record.saleFlag,jdbcType=TINYINT},
      </if>
      <if test="record.leaseFlag != null">
        LEASE_FLAG = #{record.leaseFlag,jdbcType=TINYINT},
      </if>
      <if test="record.salePrice != null">
        SALE_PRICE = #{record.salePrice,jdbcType=NUMERIC},
      </if>
      <if test="record.leasePrice != null">
        LEASE_PRICE = #{record.leasePrice,jdbcType=NUMERIC},
      </if>
      <if test="record.priceUnit != null">
        PRICE_UNIT = #{record.priceUnit,jdbcType=TINYINT},
      </if>
      <if test="record.nearStreet != null">
        NEAR_STREET = #{record.nearStreet,jdbcType=TINYINT},
      </if>
      <if test="record.floorHeight != null">
        FLOOR_HEIGHT = #{record.floorHeight,jdbcType=NUMERIC},
      </if>
      <if test="record.houseStructure != null">
        HOUSE_STRUCTURE = #{record.houseStructure,jdbcType=INTEGER},
      </if>
      <if test="record.toiletType != null">
        TOILET_TYPE = #{record.toiletType,jdbcType=INTEGER},
      </if>
      <if test="record.kitchen != null">
        KITCHEN = #{record.kitchen,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update BUILDING_SET_ROOM
    set ID = #{record.id,jdbcType=INTEGER},
      CITY_ID = #{record.cityId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      SYS_ROOM_ID = #{record.sysRoomId,jdbcType=VARCHAR},
      ROOM_ID = #{record.roomId,jdbcType=VARCHAR},
      HOUSE_ROOM = #{record.houseRoom,jdbcType=TINYINT},
      HOUSE_HALL = #{record.houseHall,jdbcType=TINYINT},
      HOUSE_WEI = #{record.houseWei,jdbcType=TINYINT},
      HOUSE_YANG = #{record.houseYang,jdbcType=TINYINT},
      HOUSE_DIRECT = #{record.houseDirect,jdbcType=TINYINT},
      HOUSE_AREA = #{record.houseArea,jdbcType=NUMERIC},
      HOUSE_INNERAREA = #{record.houseInnerarea,jdbcType=NUMERIC},
      CREATION_TIME = #{record.creationTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      BUILD_ROOF = #{record.buildRoof,jdbcType=VARCHAR},
      BUILD_UNIT = #{record.buildUnit,jdbcType=VARCHAR},
      BEYOND_RULE = #{record.beyondRule,jdbcType=TINYINT},
      DEL_FLAG = #{record.delFlag,jdbcType=TINYINT},
      ROOM_FLOOR = #{record.roomFloor,jdbcType=VARCHAR},
      MERGE_ROOM = #{record.mergeRoom,jdbcType=INTEGER},
      HOUSE_OWNER = #{record.houseOwner,jdbcType=VARCHAR},
      CELL_PHONE = #{record.cellPhone,jdbcType=VARCHAR},
      OWNER_SEX = #{record.ownerSex,jdbcType=TINYINT},
      JOINT_USER_NAME = #{record.jointUserName,jdbcType=VARCHAR},
      JOINT_CELL_PHONE = #{record.jointCellPhone,jdbcType=VARCHAR},
      JOINT_USER_SEX = #{record.jointUserSex,jdbcType=TINYINT},
      BUILDING_SET_ROOF_ID = #{record.buildingSetRoofId,jdbcType=INTEGER},
      BUILDING_SET_UNIT_ID = #{record.buildingSetUnitId,jdbcType=INTEGER},
      BUILDING_SET_FLOOR_ID = #{record.buildingSetFloorId,jdbcType=INTEGER},
      ADDR_MD5 = #{record.addrMd5,jdbcType=VARCHAR},
      SALE_FLAG = #{record.saleFlag,jdbcType=TINYINT},
      LEASE_FLAG = #{record.leaseFlag,jdbcType=TINYINT},
      SALE_PRICE = #{record.salePrice,jdbcType=NUMERIC},
      LEASE_PRICE = #{record.leasePrice,jdbcType=NUMERIC},
      PRICE_UNIT = #{record.priceUnit,jdbcType=TINYINT},
      NEAR_STREET = #{record.nearStreet,jdbcType=TINYINT},
      FLOOR_HEIGHT = #{record.floorHeight,jdbcType=NUMERIC},
      HOUSE_STRUCTURE = #{record.houseStructure,jdbcType=INTEGER},
      TOILET_TYPE = #{record.toiletType,jdbcType=INTEGER},
      KITCHEN = #{record.kitchen,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoom">
    <!--@mbggenerated-->
    update BUILDING_SET_ROOM
    <set>
      <if test="cityId != null">
        CITY_ID = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="sysRoomId != null">
        SYS_ROOM_ID = #{sysRoomId,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null">
        ROOM_ID = #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="houseRoom != null">
        HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      </if>
      <if test="houseHall != null">
        HOUSE_HALL = #{houseHall,jdbcType=TINYINT},
      </if>
      <if test="houseWei != null">
        HOUSE_WEI = #{houseWei,jdbcType=TINYINT},
      </if>
      <if test="houseYang != null">
        HOUSE_YANG = #{houseYang,jdbcType=TINYINT},
      </if>
      <if test="houseDirect != null">
        HOUSE_DIRECT = #{houseDirect,jdbcType=TINYINT},
      </if>
      <if test="houseArea != null">
        HOUSE_AREA = #{houseArea,jdbcType=NUMERIC},
      </if>
      <if test="houseInnerarea != null">
        HOUSE_INNERAREA = #{houseInnerarea,jdbcType=NUMERIC},
      </if>
      <if test="creationTime != null">
        CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="buildRoof != null">
        BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR},
      </if>
      <if test="buildUnit != null">
        BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR},
      </if>
      <if test="beyondRule != null">
        BEYOND_RULE = #{beyondRule,jdbcType=TINYINT},
      </if>
      <if test="delFlag != null">
        DEL_FLAG = #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="roomFloor != null">
        ROOM_FLOOR = #{roomFloor,jdbcType=VARCHAR},
      </if>
      <if test="mergeRoom != null">
        MERGE_ROOM = #{mergeRoom,jdbcType=INTEGER},
      </if>
      <if test="houseOwner != null">
        HOUSE_OWNER = #{houseOwner,jdbcType=VARCHAR},
      </if>
      <if test="cellPhone != null">
        CELL_PHONE = #{cellPhone,jdbcType=VARCHAR},
      </if>
      <if test="ownerSex != null">
        OWNER_SEX = #{ownerSex,jdbcType=TINYINT},
      </if>
      <if test="jointUserName != null">
        JOINT_USER_NAME = #{jointUserName,jdbcType=VARCHAR},
      </if>
      <if test="jointCellPhone != null">
        JOINT_CELL_PHONE = #{jointCellPhone,jdbcType=VARCHAR},
      </if>
      <if test="jointUserSex != null">
        JOINT_USER_SEX = #{jointUserSex,jdbcType=TINYINT},
      </if>
      <if test="buildingSetRoofId != null">
        BUILDING_SET_ROOF_ID = #{buildingSetRoofId,jdbcType=INTEGER},
      </if>
      <if test="buildingSetUnitId != null">
        BUILDING_SET_UNIT_ID = #{buildingSetUnitId,jdbcType=INTEGER},
      </if>
      <if test="buildingSetFloorId != null">
        BUILDING_SET_FLOOR_ID = #{buildingSetFloorId,jdbcType=INTEGER},
      </if>
      <if test="addrMd5 != null">
        ADDR_MD5 = #{addrMd5,jdbcType=VARCHAR},
      </if>
      <if test="saleFlag != null">
        SALE_FLAG = #{saleFlag,jdbcType=TINYINT},
      </if>
      <if test="leaseFlag != null">
        LEASE_FLAG = #{leaseFlag,jdbcType=TINYINT},
      </if>
      <if test="salePrice != null">
        SALE_PRICE = #{salePrice,jdbcType=NUMERIC},
      </if>
      <if test="leasePrice != null">
        LEASE_PRICE = #{leasePrice,jdbcType=NUMERIC},
      </if>
      <if test="priceUnit != null">
        PRICE_UNIT = #{priceUnit,jdbcType=TINYINT},
      </if>
      <if test="nearStreet != null">
        NEAR_STREET = #{nearStreet,jdbcType=TINYINT},
      </if>
      <if test="floorHeight != null">
        FLOOR_HEIGHT = #{floorHeight,jdbcType=NUMERIC},
      </if>
      <if test="houseStructure != null">
        HOUSE_STRUCTURE = #{houseStructure,jdbcType=INTEGER},
      </if>
      <if test="toiletType != null">
        TOILET_TYPE = #{toiletType,jdbcType=INTEGER},
      </if>
      <if test="kitchen != null">
        KITCHEN = #{kitchen,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpBuildingSetRoom">
    <!--@mbggenerated-->
    update BUILDING_SET_ROOM
    set CITY_ID = #{cityId,jdbcType=INTEGER},
      COMP_ID = #{compId,jdbcType=INTEGER},
      BUILD_ID = #{buildId,jdbcType=INTEGER},
      SYS_ROOM_ID = #{sysRoomId,jdbcType=VARCHAR},
      ROOM_ID = #{roomId,jdbcType=VARCHAR},
      HOUSE_ROOM = #{houseRoom,jdbcType=TINYINT},
      HOUSE_HALL = #{houseHall,jdbcType=TINYINT},
      HOUSE_WEI = #{houseWei,jdbcType=TINYINT},
      HOUSE_YANG = #{houseYang,jdbcType=TINYINT},
      HOUSE_DIRECT = #{houseDirect,jdbcType=TINYINT},
      HOUSE_AREA = #{houseArea,jdbcType=NUMERIC},
      HOUSE_INNERAREA = #{houseInnerarea,jdbcType=NUMERIC},
      CREATION_TIME = #{creationTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      BUILD_ROOF = #{buildRoof,jdbcType=VARCHAR},
      BUILD_UNIT = #{buildUnit,jdbcType=VARCHAR},
      BEYOND_RULE = #{beyondRule,jdbcType=TINYINT},
      DEL_FLAG = #{delFlag,jdbcType=TINYINT},
      ROOM_FLOOR = #{roomFloor,jdbcType=VARCHAR},
      MERGE_ROOM = #{mergeRoom,jdbcType=INTEGER},
      HOUSE_OWNER = #{houseOwner,jdbcType=VARCHAR},
      CELL_PHONE = #{cellPhone,jdbcType=VARCHAR},
      OWNER_SEX = #{ownerSex,jdbcType=TINYINT},
      JOINT_USER_NAME = #{jointUserName,jdbcType=VARCHAR},
      JOINT_CELL_PHONE = #{jointCellPhone,jdbcType=VARCHAR},
      JOINT_USER_SEX = #{jointUserSex,jdbcType=TINYINT},
      BUILDING_SET_ROOF_ID = #{buildingSetRoofId,jdbcType=INTEGER},
      BUILDING_SET_UNIT_ID = #{buildingSetUnitId,jdbcType=INTEGER},
      BUILDING_SET_FLOOR_ID = #{buildingSetFloorId,jdbcType=INTEGER},
      ADDR_MD5 = #{addrMd5,jdbcType=VARCHAR},
      SALE_FLAG = #{saleFlag,jdbcType=TINYINT},
      LEASE_FLAG = #{leaseFlag,jdbcType=TINYINT},
      SALE_PRICE = #{salePrice,jdbcType=NUMERIC},
      LEASE_PRICE = #{leasePrice,jdbcType=NUMERIC},
      PRICE_UNIT = #{priceUnit,jdbcType=TINYINT},
      NEAR_STREET = #{nearStreet,jdbcType=TINYINT},
      FLOOR_HEIGHT = #{floorHeight,jdbcType=NUMERIC},
      HOUSE_STRUCTURE = #{houseStructure,jdbcType=INTEGER},
      TOILET_TYPE = #{toiletType,jdbcType=INTEGER},
      KITCHEN = #{kitchen,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>

	<select id="selectByUserRoomId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET_ROOM
		where COMP_ID = #{compId}
		AND BUILD_ID = #{buildId} AND BUILD_ROOF = #{buildRoof}
		AND BUILD_UNIT = #{buildUnit} AND ROOM_ID = #{roomId}
		AND ROOM_FLOOR = #{roomFloor}
	</select>

	<select id="selectBySysRoomId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET_ROOM
		where COMP_ID = #{compId}
		AND BUILD_ID = #{buildId} AND BUILD_ROOF = #{buildRoof}
		AND BUILD_UNIT = #{buildUnit} AND SYS_ROOM_ID = #{sysRoomId}
	</select>

	<select id="getRoomInfoList" resultMap="BaseResultMap">
		select
		SYS_ROOM_ID, ROOM_ID, HOUSE_ROOM, HOUSE_HALL, HOUSE_WEI, HOUSE_YANG,
		HOUSE_DIRECT, HOUSE_AREA, HOUSE_INNERAREA, BUILD_ROOF, BUILD_UNIT,
		DEL_FLAG,ROOM_FLOOR,MERGE_ROOM
		from BUILDING_SET_ROOM
		where
		COMP_ID = #{compId} AND BUILD_ID = #{buildId}
		AND BUILD_ROOF = #{buildRoof} AND BUILD_UNIT = #{buildUnit}
	</select>

	<select id="getDoorAllCount" resultType="java.util.Map">
		select
		sum(iif(BEYOND_RULE=0 and DEL_FLAG=1, 1,0)) delCount,<!-- 规则内的被删除的 -->
		sum(iif(BEYOND_RULE=1 and DEL_FLAG=0, 1,0)) outCount <!-- 规则外的没删除的 -->
		from BUILDING_SET_ROOM
		where
		COMP_ID = #{compId} AND BUILD_ID = #{buildId}
	</select>

	<delete id="delBuildRoofById">
		delete from BUILDING_SET_ROOM
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		and BUILD_ROOF = #{buildRoof}
	</delete>

	<delete id="delBuildUnitById">
		delete from BUILDING_SET_ROOM
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
		and BUILD_ROOF = #{buildRoof} and BUILD_UNIT = #{buildUnit}
	</delete>

	<select id="getRoomInfoListBySysRoomIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET_ROOM
		where COMP_ID = #{param.compId} and BUILD_ID = #{param.buildId} and BUILD_ROOF = #{param.buildRoof}
		AND BUILD_UNIT = #{param.buildUnit} and SYS_ROOM_ID in
		<foreach close=")" collection="sysRoomIdsList" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</select>

	<update id="updateRoomUnit">
		update BUILDING_SET_ROOM set BUILD_UNIT=#{buildUnit}
		where COMP_ID = #{compId}
		and BUILD_ID = #{buildId} and BUILD_ROOF = #{buildRoof}
		and BUILD_UNIT = #{oldBuildUnit}
	</update>

	<update id="updateRoofByOldRoof">
		update BUILDING_SET_ROOM set BUILD_ROOF = #{buildRoof}
		where COMP_ID = #{compId} and BUILD_ID = #{buildId} and BUILD_ROOF = #{oldBuildRoof}
	</update>

	<update id="cancelMergeRoomInfo">
		UPDATE BUILDING_SET_ROOM SET MERGE_ROOM = null
		WHERE COMP_ID = #{param.compId} AND BUILD_ID = #{param.buildId}
		AND BUILDING_SET_UNIT_ID =#{param.buildingSetUnitId} AND MERGE_ROOM = #{param.mergeRoom}
	</update>

	<update id="cancelMergeReduceMergeRoom">
		UPDATE BUILDING_SET_ROOM SET MERGE_ROOM = MERGE_ROOM-1
		WHERE COMP_ID = #{param.compId} AND BUILD_ID = #{param.buildId}
		AND BUILDING_SET_UNIT_ID =#{param.buildingSetUnitId} AND MERGE_ROOM &gt; #{param.mergeRoom}
	</update>

	<select id="getRoomList" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET_ROOM
		where COMP_ID = #{compId} and BUILD_ID = #{buildId} and BUILD_ROOF = #{houseRoof}
		and BUILD_UNIT=#{houseUnit} and ROOM_FLOOR=#{houseFloor}
		<if test="houseNum != null and houseNum != ''">
			AND ROOM_ID = #{houseNum}
		</if>
		<if test="delFlag != null and delFlag != ''">
			AND DEL_FLAG = #{delFlag}
		</if>
	</select>

	<select id="getContainSysIdList" resultType="java.lang.String">
		SELECT SYS_ROOM_ID
		FROM BUILDING_SET_ROOM
		WHERE COMP_ID = #{compId} AND BUILD_ID = #{buildId} AND BUILD_ROOF = #{buildRoof}
		AND BUILD_UNIT=#{buildUnit} AND SYS_ROOM_ID IN
		<foreach close=")" collection="sysRoomIdSet" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</select>

	<insert id="insertList">
		INSERT INTO BUILDING_SET_ROOM (CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID,
		CREATION_TIME, UPDATE_TIME, BUILD_ROOF, BUILD_UNIT, DEL_FLAG, ROOM_FLOOR)
		VALUES
		<foreach close="" collection="roomList" item="room" open="" separator=",">
			(#{room.cityId}, #{room.compId}, #{room.buildId}, #{room.sysRoomId}, #{room.roomId},
			#{room.creationTime}, #{room.updateTime}, #{room.buildRoof}, #{room.buildUnit},
			#{room.delFlag}, #{room.roomFloor})
		</foreach>
	</insert>

	<select id="getErpBuildingSetRoom" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from BUILDING_SET_ROOM
		where COMP_ID = #{compId} and BUILD_ID = #{buildId} and BUILD_ROOF = #{houseRoof}
		and BUILD_UNIT=#{houseUnit} and ROOM_FLOOR=#{houseFloor} and ROOM_ID = #{houseNum} and DEL_FLAG = #{delFlag}
	</select>

	<select id="getUnitMergeRoom" resultType="java.lang.Integer">
		SELECT ISNULL(MAX(MERGE_ROOM),0)+1
		FROM BUILDING_SET_ROOM
		where COMP_ID = #{compId} AND BUILD_ID = #{buildId} AND BUILD_ROOF = #{buildRoof} AND BUILD_UNIT =#{buildUnit}
	</select>

	<delete id="delBuildById">
		delete from BUILDING_SET_ROOM
		where COMP_ID = #{compId} and BUILD_ID = #{buildId}
	</delete>

  <select id="checkExistsMergeRoom" resultType="java.lang.Integer">
    SELECT ISNULL(MERGE_ROOM, 0) FROM BUILDING_SET_ROOM
    WHERE COMP_ID = #{compId} AND BUILD_ID = #{buildId}
      AND ROOM_ID = #{roomId}
  </select>

  <delete id="delBuildRoom">
    DELETE FROM BUILDING_SET_ROOM
    WHERE COMP_ID = #{compId}
    <if test="param.buildId != null">
      AND BUILD_ID = #{param.buildId,jdbcType=INTEGER}
    </if>
    <if test="param.buildingSetRoofId != null">
      AND BUILDING_SET_ROOF_ID = #{param.buildingSetRoofId,jdbcType=INTEGER}
    </if>
    <if test="param.buildingSetUnitId != null">
      AND BUILDING_SET_UNIT_ID = #{param.buildingSetUnitId,jdbcType=INTEGER}
    </if>
    <if test="param.buildingSetFloorId != null">
      AND BUILDING_SET_FLOOR_ID = #{param.buildingSetFloorId,jdbcType=INTEGER}
    </if>
    <if test="param.buildingSetRoomId != null">
      AND ID = #{param.buildingSetRoomId,jdbcType=INTEGER}
    </if>
    <if test="param.buildingSetRoomIds != null and param.buildingSetRoomIds.size &gt; 0">
      AND ID IN
      <foreach close=")" collection="param.buildingSetRoomIds" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
  </delete>

  <select id="getBuildRoomDetailsVo" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpBuildingSetRoomDetailsVo">
    select ID AS buildingSetRoomId, BUILD_ID AS buildId, BUILDING_SET_ROOF_ID AS buildingSetRoofId,
    BUILDING_SET_UNIT_ID AS buildingSetUnitId, BUILDING_SET_FLOOR_ID AS buildingSetFloorId,
    ROOM_ID AS roomId, HOUSE_ROOM AS houseRoom, HOUSE_HALL AS houseHall, HOUSE_WEI AS houseWei, HOUSE_YANG AS houseYang,
    HOUSE_DIRECT AS houseDirect, HOUSE_AREA AS houseArea, HOUSE_INNERAREA AS houseInnerarea, BEYOND_RULE AS beyondRule,
    MERGE_ROOM AS mergeRoom, NEAR_STREET AS nearStreet,FLOOR_HEIGHT AS floorHeight,HOUSE_STRUCTURE AS houseStructure
    ,TOILET_TYPE AS toiletType,KITCHEN AS kitchen
    from BUILDING_SET_ROOM
    where COMP_ID = #{compId}
    <if test="buildId != null">
      AND BUILD_ID = #{buildId,jdbcType=INTEGER}
    </if>

    <if test="buildingSetRoomId != null">
      AND ID = #{buildingSetRoomId,jdbcType=INTEGER}
    </if>
  </select>

  <select id="checkExistsRoomId" resultType="java.lang.Integer">
    select count(1) from BUILDING_SET_ROOM
    where COMP_ID = #{compId} and BUILD_ID = #{buildId}  and BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
      and ROOM_ID = #{roomId} and ID != #{buildingSetRoomId} AND BUILDING_SET_FLOOR_ID = #{buildingSetFloorId}
  </select>

  <select id="checkExistsRoom" resultMap="BaseResultMap">
    select ROOM_ID,ADDR_MD5 from BUILDING_SET_ROOM
    where COMP_ID = #{compId}  and ID = #{id}
  </select>

  <update id="updateRoomInfo">
    update BUILDING_SET_ROOM
    <set>
      UPDATE_TIME = GETDATE(),
      ROOM_ID = #{param.roomId,jdbcType=VARCHAR},
      HOUSE_ROOM = #{param.houseRoom,jdbcType=TINYINT},
      HOUSE_HALL = #{param.houseHall,jdbcType=TINYINT},
      HOUSE_WEI = #{param.houseWei,jdbcType=TINYINT},
      HOUSE_YANG = #{param.houseYang,jdbcType=TINYINT},
      HOUSE_DIRECT = #{param.houseDirect,jdbcType=TINYINT},
      HOUSE_AREA = #{param.houseArea,jdbcType=NUMERIC},
      HOUSE_INNERAREA = #{param.houseInnerarea,jdbcType=NUMERIC},
      FLOOR_HEIGHT = #{param.floorHeight,jdbcType=NUMERIC},
      HOUSE_STRUCTURE = #{param.houseStructure,jdbcType=INTEGER},
      TOILET_TYPE = #{param.toiletType,jdbcType=INTEGER},
      KITCHEN=#{param.kitchen,jdbcType=INTEGER},
      <if test="param.updateTime != null">
        UPDATE_TIME = #{param.updateTime,jdbcType=TIMESTAMP},
       </if>
      <if test="param.nearStreet != null">
      NEAR_STREET = #{param.nearStreet,jdbcType=TINYINT},
      </if>
       <if test="addrMd5 != null">
        ADDR_MD5 = #{addrMd5},
      </if>
    </set>
    where COMP_ID = #{compId} and ID = #{param.buildingSetRoomId}
  </update>

  <update id="syncRoomInfo">
    update BUILDING_SET_ROOM
    <set>
      UPDATE_TIME = GETDATE(),
      HOUSE_ROOM = #{param.houseRoom,jdbcType=TINYINT},
      HOUSE_HALL = #{param.houseHall,jdbcType=TINYINT},
      HOUSE_WEI = #{param.houseWei,jdbcType=TINYINT},
      HOUSE_YANG = #{param.houseYang,jdbcType=TINYINT},
      HOUSE_DIRECT = #{param.houseDirect,jdbcType=TINYINT},
      HOUSE_AREA = #{param.houseArea,jdbcType=NUMERIC},
      HOUSE_INNERAREA = #{param.houseInnerarea,jdbcType=NUMERIC},
      FLOOR_HEIGHT = #{param.floorHeight,jdbcType=NUMERIC},
      HOUSE_STRUCTURE = #{param.houseStructure,jdbcType=INTEGER},
      TOILET_TYPE = #{param.toiletType,jdbcType=INTEGER},
      KITCHEN=#{param.kitchen,jdbcType=INTEGER},
      <if test="param.updateTime != null">
        UPDATE_TIME = #{param.updateTime,jdbcType=TIMESTAMP},
      </if>
      NEAR_STREET = #{param.nearStreet,jdbcType=TINYINT},
    </set>
    where COMP_ID = #{compId} and ID in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <select id="getAimRooms" resultMap="BaseResultMap">
    select MERGE_ROOM,DEL_FLAG from BUILDING_SET_ROOM
    where COMP_ID = #{compId}
    <if test="buildingSetRoofId != null">
      and BUILDING_SET_ROOF_ID =#{buildingSetRoofId}
    </if>
     and BUILDING_SET_UNIT_ID = #{buildingSetUnitId} and ID in ${ids}
  </select>

  <select id="checkIsMerged" resultType="java.lang.Integer">
    select count(1) from BUILDING_SET_ROOM
    where COMP_ID = #{compId} and ID in ${ids}  and MERGE_ROOM is not null
  </select>

  <select id="getMergeRoom" resultType="java.lang.Integer">
		SELECT ISNULL(MAX(MERGE_ROOM),0)+1
		FROM BUILDING_SET_ROOM
		where COMP_ID =0 AND BUILD_ID = #{param.buildId}  AND BUILDING_SET_UNIT_ID =#{param.buildingSetUnitId}
  </select>
  <select id="getBuildRoomByRoofIdAndRoomId" resultMap="BaseResultMap">
    select top 1
    <include refid="Base_Column_List" />
    from BUILDING_SET_ROOM where COMP_ID = #{compId} and BUILDING_SET_ROOF_ID=#{buildSetRoofId} and ROOM_ID=#{roomId}
  </select>
  <select id="selectByRoofIdAndFloorIdAndBuildRoom" resultMap="BaseResultMap">
    select top 1
    <include refid="Base_Column_List" />
    from BUILDING_SET_ROOM where COMP_ID = #{compId}  and BUILDING_SET_ROOF_ID=#{buildingSetRoofId} and BUILDING_SET_FLOOR_ID=#{buildingSetFloorId}
    and ROOM_ID in
    <foreach close=")" collection="buildRoom" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </select>
  <update id="updateMergeRomms">
    update BUILDING_SET_ROOM set MERGE_ROOM = #{mergeRoom} where COMP_ID = #{compId} and ID in ${ids}
  </update>
  <select id="selectByBuildIdAndFloorIds" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpRegisterBuildingSetRoomVO">
    select
    ID as buildingSetRoomId, BUILD_ID as buildId, ROOM_ID as roomId, HOUSE_ROOM as houseRoom, HOUSE_HALL as houseHall, HOUSE_WEI as houseWei ,
    HOUSE_YANG as houseYang , HOUSE_DIRECT as houseDirect , HOUSE_AREA as houseArea, HOUSE_INNERAREA as houseInnerarea,
    BUILD_ROOF as buildRoof, BUILD_UNIT as buildUnit, ROOM_FLOOR as roomFloor, MERGE_ROOM as mergeRoom,
     BUILDING_SET_ROOF_ID as buildingSetRoofId,SYS_ROOM_ID as sysRoomId,BUILDING_SET_UNIT_ID as buildingSetUnitId, BUILDING_SET_FLOOR_ID as buildingSetFloorId,UPDATE_TIME as updateTime,
     NEAR_STREET as nearStreet from BUILDING_SET_ROOM where COMP_ID = #{compId} and BUILD_ID=#{buildId}  and BUILDING_SET_FLOOR_ID in
    <foreach close=")" collection="floorIds" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach> order by ROOM_FLOOR,ROOM_ID
  </select>
  <select id="selectByBuildIdAndFloorIdsML" resultType="com.myfun.erpWeb.businesstools.builddic.vo.MLErpRegisterBuildingSetRoomVO">
    select
    ID as buildingSetRoomId, BUILD_ID as buildId, ROOM_ID as roomId, HOUSE_ROOM as houseRoom, HOUSE_HALL as houseHall, HOUSE_WEI as houseWei ,KITCHEN as kitchen ,
    HOUSE_YANG as houseYang , HOUSE_DIRECT as houseDirect , HOUSE_AREA as houseArea, HOUSE_INNERAREA as houseInnerarea,
    BUILD_ROOF as buildRoof, BUILD_UNIT as buildUnit, ROOM_FLOOR as roomFloor, MERGE_ROOM as mergeRoom,
    BUILDING_SET_ROOF_ID as buildingSetRoofId,SYS_ROOM_ID as sysRoomId,BUILDING_SET_UNIT_ID as buildingSetUnitId, BUILDING_SET_FLOOR_ID as buildingSetFloorId,UPDATE_TIME as updateTime,
    NEAR_STREET as nearStreet from BUILDING_SET_ROOM where COMP_ID = #{compId} and BUILD_ID=#{buildId}  and BUILDING_SET_FLOOR_ID in
    <foreach close=")" collection="floorIds" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach> order by ROOM_FLOOR,ROOM_ID
  </select>
  <select id="selectByfloorIdAndBuildRoom" resultMap="BaseResultMap">
    select top 1
    <include refid="Base_Column_List" />
    from BUILDING_SET_ROOM where BUILD_ID = #{buildId} AND COMP_ID = #{compId}
    and BUILDING_SET_FLOOR_ID=#{buildingSetFloorId} and ROOM_ID =#{buildRoom}
  </select>
  <select id="selectRoomShowInTableVos" resultType="com.myfun.erpWeb.businesstools.builddic.vo.ErpBuildingSetRoomShowInTableVo">
    select
    ID as buildingSetRoomId, BUILD_ID as buildId, BUILDING_SET_ROOF_ID as buildingSetRoofId, BUILDING_SET_UNIT_ID as buildingSetUnitId,
    BUILDING_SET_FLOOR_ID as buildingSetFloorId, SYS_ROOM_ID AS sysRoomId, ROOM_ID as roomId, HOUSE_ROOM as houseRoom,
    HOUSE_HALL as houseHall, HOUSE_YANG AS houseYang, HOUSE_WEI as houseWei, HOUSE_DIRECT as houseDirect, HOUSE_AREA as houseArea,
    HOUSE_INNERAREA as houseInnerarea, MERGE_ROOM as mergeRoom, ADDR_MD5 as addrMd5
    from BUILDING_SET_ROOM
    where COMP_ID = #{compId}
    AND BUILD_ID = #{buildId}
    <!--buildingSetRoofId == 0 号位查询 -->
    <if test="buildingSetRoofId != null and buildingSetRoofId != 0">
      AND BUILDING_SET_ROOF_ID = #{buildingSetRoofId}
    </if>
    AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
    ORDER BY SYS_ROOM_ID
  </select>
  <update id="batchUpdateRoom">
    <!-- 将房间户型,建筑面积,套内面积,朝向应用到本栋本单元同房号 -->
    update BUILDING_SET_ROOM set HOUSE_ROOM = #{param.houseRoom}, HOUSE_HALL = #{param.houseHall}, HOUSE_WEI = #{param.houseWei},
    HOUSE_DIRECT = #{param.houseDirect}, HOUSE_YANG = #{param.houseYang},
    HOUSE_AREA = #{param.houseArea}, HOUSE_INNERAREA = #{param.houseInnerarea}
    WHERE COMP_ID = #{compId}
    AND BUILD_ID = #{buildId}
    <if test="buildingSetRoomIds != null and buildingSetRoomIds.size &gt; 0">
      AND ID IN
      <foreach close=")" collection="buildingSetRoomIds" item="item" open="(" separator=",">
        ${item}
      </foreach>
    </if>
  </update>
  <delete id="delBuildRoomByRoomFloor">
    DELETE FROM BUILDING_SET_ROOM
    WHERE COMP_ID = #{compId}
    AND BUILD_ID = #{buildId}
    AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
    <if test="needDelFloors != null and needDelFloors.size &gt; 0">
      AND ROOM_FLOOR IN
      <foreach close=")" collection="needDelFloors" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
  </delete>
  <delete id="delBuildRoomBySysRoomId">
    DELETE FROM BUILDING_SET_ROOM
    WHERE COMP_ID = #{compId}
    AND BUILD_ID = #{buildId}
    AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
    <if test="notDelSysRoomIds != null and notDelSysRoomIds.size &gt; 0">
      AND SYS_ROOM_ID IN
      <foreach close=")" collection="notDelSysRoomIds" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
  </delete>
  <insert id="addRoomBySourceSysRoomId">
    INSERT INTO BUILDING_SET_ROOM(CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID, CREATION_TIME, UPDATE_TIME,
                                  BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, BUILDING_SET_ROOF_ID,
                                  BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID)
    SELECT CITY_ID, COMP_ID, BUILD_ID, #{sysRoomIdInAdd}, #{roomId}, CREATION_TIME, UPDATE_TIME,
           BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, #{roomFloor}, BUILDING_SET_ROOF_ID,
           BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID
    FROM BUILDING_SET_ROOM
    WHERE COMP_ID = #{compId}
      AND BUILD_ID = #{buildId}
      AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
    AND SYS_ROOM_ID=#{sourceSysRoomId}
  </insert>
  <update id="updateFloorIdInRoom">
    <!-- 更新房间表中的 BUILDING_SET_FLOOR_ID -->
    UPDATE A
    SET A.BUILDING_SET_FLOOR_ID = B.ID
    FROM
    BUILDING_SET_ROOM A
      JOIN BUILDING_SET_FLOOR B ON A.COMP_ID = B.COMP_ID AND A.BUILD_ID = B.BUILD_ID
    AND A.BUILDING_SET_UNIT_ID = B.BUILDING_SET_UNIT_ID AND A.ROOM_FLOOR = B.SYS_BUILD_FLOOR
    WHERE
    A.COMP_ID = #{compId} AND A.BUILD_ID = #{buildId}
    AND A.BUILDING_SET_UNIT_ID = #{buildingSetUnitId};
  </update>

  <select id="getCountByMerRoom" resultType="java.lang.Integer">
    select count(1) from BUILDING_SET_ROOM where COMP_ID = #{compId} AND BUILD_ID = #{buildId}
                                             AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId} and MERGE_ROOM = #{mergeRoom}
  </select>

  <!--<insert id="batchAddRooms2" parameterType="java.util.List">-->
    <!--INSERT INTO BUILDING_SET_ROOM(CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID, CREATION_TIME, UPDATE_TIME,-->
    <!--BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, ROOM_FLOOR, BUILDING_SET_ROOF_ID,-->
    <!--BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID)-->
    <!--<foreach collection="batchAddRooms" item="batchAddRoom" index="index" separator="UNION">-->
      <!--SELECT CITY_ID, COMP_ID, BUILD_ID, #{batchAddRoom.sysRoomIdInAdd}, #{batchAddRoom.roomId}, CREATION_TIME, GETDATE(),-->
      <!--BUILD_ROOF, BUILD_UNIT, BEYOND_RULE, DEL_FLAG, #{batchAddRoom.roomFloor}, BUILDING_SET_ROOF_ID,-->
      <!--BUILDING_SET_UNIT_ID, BUILDING_SET_FLOOR_ID-->
      <!--FROM BUILDING_SET_ROOM-->
      <!--WHERE COMP_ID = #{batchAddRoom.compId}-->
      <!--AND BUILD_ID = #{batchAddRoom.buildId}-->
      <!--AND BUILDING_SET_UNIT_ID = #{batchAddRoom.buildingSetUnitId}-->
      <!--AND SYS_ROOM_ID=#{batchAddRoom.sourceSysRoomId}-->
    <!--</foreach>-->
  <!--</insert>-->

  <insert id="batchAddRooms">
    INSERT INTO BUILDING_SET_ROOM(CITY_ID, COMP_ID, BUILD_ID, SYS_ROOM_ID, ROOM_ID,
    CREATION_TIME, UPDATE_TIME, BUILD_ROOF, BUILD_UNIT, DEL_FLAG, ROOM_FLOOR,
    BUILDING_SET_ROOF_ID, BUILDING_SET_UNIT_ID, ADDR_MD5) VALUES
    <foreach collection="batchAddRooms" index="index" item="batchAddRoom" separator=",">
      (
      #{batchAddRoom.cityId}, #{batchAddRoom.compId}, #{batchAddRoom.buildId},
      #{batchAddRoom.sysRoomId}, #{batchAddRoom.roomId}, GETDATE(), GETDATE(), #{batchAddRoom.buildRoof},
      #{batchAddRoom.buildUnit}, 0, #{batchAddRoom.roomFloor}, #{batchAddRoom.buildingSetRoofId},
      #{batchAddRoom.buildingSetUnitId}, #{batchAddRoom.addrMd5}
      )
    </foreach>
  </insert>

  <select id="getRoomBySys" resultType="com.myfun.repository.erpdb.po.ErpBuildingSetRoom">
      SELECT CITY_ID AS cityId, COMP_ID AS compId, BUILD_ID AS buildId, SYS_ROOM_ID AS sysRoomId, ROOM_ID AS roomId,
             BUILD_ROOF AS buildRoof, BUILD_UNIT AS buildUnit, BEYOND_RULE AS beyondRule, DEL_FLAG AS delFlag,
             ROOM_FLOOR AS roomFloor, BUILDING_SET_ROOF_ID AS buildingSetRoofId, BUILDING_SET_UNIT_ID AS buildingSetUnitId, BUILDING_SET_FLOOR_ID AS buildingSetFloorId
      FROM BUILDING_SET_ROOM
      WHERE COMP_ID = #{compId}
      AND BUILD_ID = #{buildId}

      AND BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
      AND SYS_ROOM_ID=#{sourceSysRoomId}
  </select>
  <update id="batchUpdateRoomMd5" parameterType="list">
    <foreach close="" collection="batchUpdateRoomMd5s" index="index" item="item" open="" separator=";">
      update BUILDING_SET_ROOM
      <set>
        ADDR_MD5 = #{item.addMd5},
        <if test="item.buildRoof != null">
          BUILD_ROOF = #{item.buildRoof},
        </if>
        <if test="item.buildUnit != null">
          BUILD_UNIT = #{item.buildUnit},
        </if>
        <if test="item.buildFloor != null">
          ROOM_FLOOR = #{item.buildFloor},
        </if>
        <if test="item.roomId != null">
          ROOM_ID = #{item.roomId},
        </if>
        update_time = GETDATE()
      </set>
      WHERE COMP_ID = 0
      AND BUILD_ID = #{buildId}
      AND ID = #{item.buildingSetRoomId}
    </foreach>
  </update>
  <select id="selectRoomWithBuildFloor" resultType="com.myfun.repository.erpdb.dto.RoomWithBuildFloorDto">
    select
    A.ID AS buildingSetRoomId, A.BUILD_ID as buildId, A.BUILDING_SET_ROOF_ID as buildingSetRoofId, A.BUILD_UNIT AS buildUnit,
    A.BUILDING_SET_UNIT_ID as buildingSetUnitId, A.BUILDING_SET_FLOOR_ID as buildingSetFloorId, A.SYS_ROOM_ID AS sysRoomId,
    A.ROOM_ID as roomId, B.BUILD_FLOOR AS buildFloor, A.BUILD_ROOF AS buildRoof
    from BUILDING_SET_ROOM A
    LEFT JOIN BUILDING_SET_FLOOR B ON A.BUILDING_SET_FLOOR_ID = B.ID
    where A.COMP_ID = 0
    AND A.BUILD_ID = #{buildId}

    <if test="buildingSetRoofId != null and buildingSetRoofId != 0">
      AND A.BUILDING_SET_ROOF_ID = #{buildingSetRoofId}
    </if>
    <if test="buildingSetUnitId != null and buildingSetUnitId != 0">
      AND A.BUILDING_SET_UNIT_ID = #{buildingSetUnitId}
    </if>
    ORDER BY A.SYS_ROOM_ID
  </select>
  <select id="selectByUnitIdAndBuildRoom" resultMap="BaseResultMap">
    select top 1
    <include refid="Base_Column_List" />
    from  BUILDING_SET_ROOM where  COMP_ID=0 and BUILDING_SET_UNIT_ID=#{id}  and ROOM_ID in
    <foreach close=")" collection="room" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </select>

  <select id="getRoomListById" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from BUILDING_SET_ROOM where COMP_ID=0 and ID in ${ids}
  </select>
  <select id="getRoomListByMd5s" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM BUILDING_SET_ROOM WHERE COMP_ID=0 AND BUILD_ID=#{buildId} AND ADDR_MD5 IN
    <foreach close=")" collection="md5s" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </select>

  <select id="getDistinctBuildId" resultMap="BaseResultMap">
    SELECT
    DISTINCT (BUILD_ID)
    FROM BUILDING_SET_ROOM WHERE COMP_ID=0
  </select>

  <update id="batchUpdateRoomMd5InAddZero" parameterType="list">
    <foreach close="" collection="rooms" index="index" item="item" open="" separator=";">
      update BUILDING_SET_ROOM
      <set>
        ROOM_ID = #{item.roomId},
        ADDR_MD5 = #{item.addrMd5},
        update_time = GETDATE()
      </set>
      WHERE COMP_ID = 0
      AND BUILD_ID = #{buildId}
      AND ID = #{item.id}
    </foreach>
  </update>

  <select id="getDistinctBuildIdLessTenFloor" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM BUILDING_SET_ROOM
    WHERE COMP_ID = 0
    AND BUILD_ID = #{buildId}
    AND convert(int, ROOM_FLOOR) &lt; 10
  </select>

  <select id="getBuildWithoutRoom" resultMap="BaseResultMap">
    SELECT DISTINCT(BUILD_ID)
    FROM BUILDING_SET_ROOF
    WHERE BUILD_ID NOT IN
          (SELECT DISTINCT(BUILD_ID) FROM BUILDING_SET_ROOM WHERE COMP_ID = 0)
      AND COMP_ID = 0
  </select>

  <select id="getBuildWithBrackets1" resultMap="BaseResultMap">
    SELECT DISTINCT(BUILD_ID) FROM BUILDING_SET_ROOF WHERE COMP_ID = 0 AND (BUILD_ROOF LIKE '%（%' OR BUILD_ROOF LIKE '%）%');
  </select>
  <select id="getBuildWithBrackets2" resultMap="BaseResultMap">
    SELECT DISTINCT(BUILD_ID) FROM BUILDING_SET_UNIT WHERE COMP_ID = 0 AND (BUILD_UNIT LIKE '%（%' OR BUILD_UNIT LIKE '%）%');
  </select>
  <select id="getBuildWithBrackets3" resultMap="BaseResultMap">
    SELECT DISTINCT(BUILD_ID) FROM BUILDING_SET_FLOOR WHERE COMP_ID = 0 AND (BUILD_FLOOR LIKE '%（%' OR BUILD_FLOOR LIKE '%）%');
  </select>
  <select id="getBuildWithBrackets4" resultMap="BaseResultMap">
    SELECT DISTINCT(BUILD_ID) FROM BUILDING_SET_ROOM WHERE COMP_ID = 0 AND (ROOM_ID LIKE '%（%' OR ROOM_ID LIKE '%）%');
  </select>

</mapper>