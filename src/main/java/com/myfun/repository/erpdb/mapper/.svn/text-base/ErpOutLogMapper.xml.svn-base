<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpOutLogMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpOutLog">
    <!--@mbggenerated-->
    <id column="OUT_ID" jdbcType="INTEGER" property="outId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="OUT_USER" jdbcType="INTEGER" property="outUser" />
    <result column="OUT_TIME" jdbcType="VARCHAR" property="outTime" />
    <result column="EXPECT_BACKTIME" jdbcType="INTEGER" property="expectBacktime" />
    <result column="OUT_DESC" jdbcType="VARCHAR" property="outDesc" />
    <result column="BACK_TIME" jdbcType="VARCHAR" property="backTime" />
    <result column="OUT_USER_NAME" jdbcType="VARCHAR" property="outUserName" />
    <result column="CHECK_IN_COUNT" jdbcType="INTEGER" property="checkInCount" />
    <result column="AUDIT_ID" jdbcType="INTEGER" property="auditId" />
    <result column="ASSESSMENT_MONTH" jdbcType="VARCHAR" property="assessmentMonth" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    OUT_ID, COMP_ID, DEPT_ID, OUT_USER, OUT_TIME, EXPECT_BACKTIME, OUT_DESC, BACK_TIME, 
    OUT_USER_NAME, CHECK_IN_COUNT, AUDIT_ID, ASSESSMENT_MONTH
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpOutLogExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from OUT_LOG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from OUT_LOG
    where OUT_ID = #{outId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from OUT_LOG
    where OUT_ID = #{outId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpOutLogExample">
    <!--@mbggenerated-->
    delete from OUT_LOG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpOutLog">
    <!--@mbggenerated-->
    <selectKey keyProperty="outId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_OUT_LOG_OUT_ID
    </selectKey>
    insert into OUT_LOG (OUT_ID, COMP_ID, DEPT_ID, 
      OUT_USER, OUT_TIME, EXPECT_BACKTIME, 
      OUT_DESC, BACK_TIME, OUT_USER_NAME, 
      CHECK_IN_COUNT, AUDIT_ID, ASSESSMENT_MONTH
      )
    values (#{outId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{outUser,jdbcType=INTEGER}, #{outTime,jdbcType=VARCHAR}, #{expectBacktime,jdbcType=INTEGER}, 
      #{outDesc,jdbcType=VARCHAR}, #{backTime,jdbcType=VARCHAR}, #{outUserName,jdbcType=VARCHAR}, 
      #{checkInCount,jdbcType=INTEGER}, #{auditId,jdbcType=INTEGER}, #{assessmentMonth,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpOutLog">
    <!--@mbggenerated-->
    <selectKey keyProperty="outId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_OUT_LOG_OUT_ID
    </selectKey>
    insert into OUT_LOG
    <trim prefix="(" suffix=")" suffixOverrides=",">
      OUT_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="outUser != null">
        OUT_USER,
      </if>
      <if test="outTime != null">
        OUT_TIME,
      </if>
      <if test="expectBacktime != null">
        EXPECT_BACKTIME,
      </if>
      <if test="outDesc != null">
        OUT_DESC,
      </if>
      <if test="backTime != null">
        BACK_TIME,
      </if>
      <if test="outUserName != null">
        OUT_USER_NAME,
      </if>
      <if test="checkInCount != null">
        CHECK_IN_COUNT,
      </if>
      <if test="auditId != null">
        AUDIT_ID,
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{outId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="outUser != null">
        #{outUser,jdbcType=INTEGER},
      </if>
      <if test="outTime != null">
        #{outTime,jdbcType=VARCHAR},
      </if>
      <if test="expectBacktime != null">
        #{expectBacktime,jdbcType=INTEGER},
      </if>
      <if test="outDesc != null">
        #{outDesc,jdbcType=VARCHAR},
      </if>
      <if test="backTime != null">
        #{backTime,jdbcType=VARCHAR},
      </if>
      <if test="outUserName != null">
        #{outUserName,jdbcType=VARCHAR},
      </if>
      <if test="checkInCount != null">
        #{checkInCount,jdbcType=INTEGER},
      </if>
      <if test="auditId != null">
        #{auditId,jdbcType=INTEGER},
      </if>
      <if test="assessmentMonth != null">
        #{assessmentMonth,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpOutLogExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from OUT_LOG
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update OUT_LOG
    <set>
      <if test="record.outId != null">
        OUT_ID = #{record.outId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.outUser != null">
        OUT_USER = #{record.outUser,jdbcType=INTEGER},
      </if>
      <if test="record.outTime != null">
        OUT_TIME = #{record.outTime,jdbcType=VARCHAR},
      </if>
      <if test="record.expectBacktime != null">
        EXPECT_BACKTIME = #{record.expectBacktime,jdbcType=INTEGER},
      </if>
      <if test="record.outDesc != null">
        OUT_DESC = #{record.outDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.backTime != null">
        BACK_TIME = #{record.backTime,jdbcType=VARCHAR},
      </if>
      <if test="record.outUserName != null">
        OUT_USER_NAME = #{record.outUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.checkInCount != null">
        CHECK_IN_COUNT = #{record.checkInCount,jdbcType=INTEGER},
      </if>
      <if test="record.auditId != null">
        AUDIT_ID = #{record.auditId,jdbcType=INTEGER},
      </if>
      <if test="record.assessmentMonth != null">
        ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update OUT_LOG
    set OUT_ID = #{record.outId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      OUT_USER = #{record.outUser,jdbcType=INTEGER},
      OUT_TIME = #{record.outTime,jdbcType=VARCHAR},
      EXPECT_BACKTIME = #{record.expectBacktime,jdbcType=INTEGER},
      OUT_DESC = #{record.outDesc,jdbcType=VARCHAR},
      BACK_TIME = #{record.backTime,jdbcType=VARCHAR},
      OUT_USER_NAME = #{record.outUserName,jdbcType=VARCHAR},
      CHECK_IN_COUNT = #{record.checkInCount,jdbcType=INTEGER},
      AUDIT_ID = #{record.auditId,jdbcType=INTEGER},
      ASSESSMENT_MONTH = #{record.assessmentMonth,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpOutLog">
    <!--@mbggenerated-->
    update OUT_LOG
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="outUser != null">
        OUT_USER = #{outUser,jdbcType=INTEGER},
      </if>
      <if test="outTime != null">
        OUT_TIME = #{outTime,jdbcType=VARCHAR},
      </if>
      <if test="expectBacktime != null">
        EXPECT_BACKTIME = #{expectBacktime,jdbcType=INTEGER},
      </if>
      <if test="outDesc != null">
        OUT_DESC = #{outDesc,jdbcType=VARCHAR},
      </if>
      <if test="backTime != null">
        BACK_TIME = #{backTime,jdbcType=VARCHAR},
      </if>
      <if test="outUserName != null">
        OUT_USER_NAME = #{outUserName,jdbcType=VARCHAR},
      </if>
      <if test="checkInCount != null">
        CHECK_IN_COUNT = #{checkInCount,jdbcType=INTEGER},
      </if>
      <if test="auditId != null">
        AUDIT_ID = #{auditId,jdbcType=INTEGER},
      </if>
      <if test="assessmentMonth != null">
        ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR},
      </if>
    </set>
    where OUT_ID = #{outId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpOutLog">
    <!--@mbggenerated-->
    update OUT_LOG
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      OUT_USER = #{outUser,jdbcType=INTEGER},
      OUT_TIME = #{outTime,jdbcType=VARCHAR},
      EXPECT_BACKTIME = #{expectBacktime,jdbcType=INTEGER},
      OUT_DESC = #{outDesc,jdbcType=VARCHAR},
      BACK_TIME = #{backTime,jdbcType=VARCHAR},
      OUT_USER_NAME = #{outUserName,jdbcType=VARCHAR},
      CHECK_IN_COUNT = #{checkInCount,jdbcType=INTEGER},
      AUDIT_ID = #{auditId,jdbcType=INTEGER},
      ASSESSMENT_MONTH = #{assessmentMonth,jdbcType=VARCHAR}
    where OUT_ID = #{outId,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="BaseDtoResultMap" type="com.myfun.repository.erpdb.dto.ErpOutLogDto">
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="CREATE_TIME" jdbcType="VARCHAR" property="createTime" />
    <result column="LONGI" jdbcType="VARCHAR" property="longi" />
    <result column="LATI" jdbcType="VARCHAR" property="lati" />
    <result column="PHOTO_PATH" jdbcType="VARCHAR" property="photoPath" />
    <result column="CHECK_IN_DESC" jdbcType="VARCHAR" property="checkInDesc" />
    <result column="LOCATION_DETAIL" jdbcType="VARCHAR" property="locationDetail" />
    <result column="LOCATION_DESC" jdbcType="VARCHAR" property="locationDesc" />
  </resultMap>
  
  <resultMap extends="BaseResultMap" id="BaseVoResultMap" type="com.myfun.erpWeb.openApi.attendance.vo.ErpOutLogVO">
    <result column="GR_ID" jdbcType="INTEGER" property="grId" />
    <result column="CREATE_TIME" jdbcType="VARCHAR" property="createTime" />
    <result column="LONGI" jdbcType="VARCHAR" property="longi" />
    <result column="LATI" jdbcType="VARCHAR" property="lati" />
    <result column="PHOTO_PATH" jdbcType="VARCHAR" property="photoPath" />
    <result column="CHECK_IN_DESC" jdbcType="VARCHAR" property="checkInDesc" />
    <result column="LOCATION_DETAIL" jdbcType="VARCHAR" property="locationDetail" />
    <result column="LOCATION_DESC" jdbcType="VARCHAR" property="locationDesc" />
  </resultMap>
  
   <select id="selectOutLogByUserIdAndBlankBackTime" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from OUT_LOG
    where OUT_USER = #{outUser,jdbcType=INTEGER}
    and BACK_TIME is null
  </select>
  
  <select id="selectOutLogList" resultMap="BaseDtoResultMap">
    select
    <include refid="Base_Column_List" />
    from OUT_LOG
    where OUT_TIME &lt;= #{param.endTime,jdbcType=VARCHAR}
    and  OUT_TIME &gt;= #{param.startTime,jdbcType=VARCHAR}
    and COMP_ID = #{param.compId,jdbcType=INTEGER}
    <if test="deptIds != null">
      and DEPT_ID in
      <foreach collection="deptIds" item="deptId" open="(" separator="," close=")">
        #{deptId}
      </foreach>
    </if>
    <if test="param.userId != null">
      and  OUT_USER = #{param.userId,jdbcType=INTEGER}
    </if>
    <if test="param.orderBy != null and ''!=param.orderBy">
      ORDER BY ${param.orderBy};
    </if>
  </select>
  
  <select id="selectOutLogListByDeptAndUserId" resultMap="BaseDtoResultMap">
    select 
    A.* 
    from OUT_LOG A LEFT JOIN FUN_USERS B 
    ON A.OUT_USER = B.USER_ID 
    where A.OUT_TIME &lt;= #{param.endTime,jdbcType=VARCHAR}
    and  A.OUT_TIME &gt;= #{param.startTime,jdbcType=VARCHAR}
    and A.COMP_ID = #{param.compId,jdbcType=INTEGER}
    <if test="deptIds != null">
	    and A.DEPT_ID in 
		    <foreach close=")" collection="deptIds" item="deptId" open="(" separator=","> 
				 #{deptId}
		    </foreach>
    </if>
    <if test="userIds != null">
	    and A.OUT_USER in 
		    <foreach close=")" collection="userIds" item="userId" open="(" separator=","> 
				 #{userId}
		    </foreach>
    </if>
    <if test="param.grId != null">
      and  B.GR_ID = #{param.grId,jdbcType=INTEGER}
    </if>
    <if test="param.userId != null">
   		and  A.OUT_USER = #{param.userId,jdbcType=INTEGER}
    </if>
    <if test="param.orderBy != null and ''!=param.orderBy">
    	ORDER BY ${param.orderBy};
    </if>
  </select>
  
  <update id="updateBackTimeByUserId">
    update OUT_LOG
    set BACK_TIME = #{date}
    where OUT_USER = #{userId} AND BACK_TIME IS NULL
  </update>

	<select id="getOutLogRecordList" resultMap="BaseDtoResultMap">
	  SELECT TOP 1000
      A.OUT_ID, A.COMP_ID, A.DEPT_ID, A.OUT_USER, A.OUT_TIME, A.EXPECT_BACKTIME, A.OUT_DESC, A.BACK_TIME,
      A.OUT_USER_NAME, A.CHECK_IN_COUNT, A.AUDIT_ID, A.ASSESSMENT_MONTH,B.GR_ID
		FROM OUT_LOG A JOIN FUN_USERS B ON A.OUT_USER = B.USER_ID
		WHERE A.COMP_ID = #{compId}
		<if test="param.newOrg == false">
          <if test="null != param.areaId and param.areaId != ''">
              AND B.AREA_ID = #{param.areaId}
          </if>
          <if test="null != param.regId and param.regId != ''">
              AND B.REG_ID = #{param.regId}
          </if>
          <if test="null != param.deptId and param.deptId != ''">
              AND B.DEPT_ID = #{param.deptId}
          </if>
          <if test="null != param.grId and param.grId != ''">
              AND B.GR_ID = #{param.grId}
          </if>
        </if>
        <if test="param.newOrg == true and param.organizationId != null and param.organizationId &gt; 0">
            AND B.TISSUE_LINE LIKE '%:${param.organizationId}:%'
        </if>
		<if test="null != param.userId and param.userId != ''">
			AND B.USER_ID = #{param.userId}
		</if>
		<if test="null != param.assessmentMonth and param.assessmentMonth != ''">
			AND A.ASSESSMENT_MONTH = #{param.assessmentMonth}
		</if>
		<if test="null != param.startTime and param.startTime != ''">
			AND A.OUT_TIME &gt;= #{param.startTime}
		</if>
		<if test="null != param.endTime and param.endTime != ''">
			AND A.OUT_TIME &lt;= #{param.endTime}
		</if>
		ORDER BY A.OUT_TIME DESC
	</select>
	
	<select id="getOutLogRecordVoList" resultMap="BaseVoResultMap">
	  SELECT TOP 1000
      A.OUT_ID, A.COMP_ID, A.DEPT_ID, A.OUT_USER, A.OUT_TIME, A.EXPECT_BACKTIME, A.OUT_DESC, A.BACK_TIME,
      A.OUT_USER_NAME, A.CHECK_IN_COUNT, A.AUDIT_ID, A.ASSESSMENT_MONTH,B.GR_ID
		FROM OUT_LOG A JOIN FUN_USERS B ON A.OUT_USER = B.USER_ID
		WHERE A.COMP_ID = #{compId}
		<if test="null != param.areaId and param.areaId != ''">
			AND B.AREA_ID = #{param.areaId}
		</if>
		<if test="null != param.regId and param.regId != ''">
			AND B.REG_ID = #{param.regId}
		</if>
		<if test="null != param.deptId and param.deptId != ''">
			AND B.DEPT_ID = #{param.deptId}
		</if>
		<if test="null != param.grId and param.grId != ''">
			AND B.GR_ID = #{param.grId}
		</if>
		<if test="null != param.userId and param.userId != ''">
			AND B.USER_ID = #{param.userId}
		</if>
		<if test="null != param.assessmentMonth and param.assessmentMonth != ''">
			AND A.ASSESSMENT_MONTH = #{param.assessmentMonth}
		</if>
		<if test="null != param.startTime and param.startTime != ''">
			AND A.OUT_TIME &gt;= #{param.startTime}
		</if>
		<if test="null != param.endTime and param.endTime != ''">
			AND A.OUT_TIME &lt;= #{param.endTime}
		</if>
		ORDER BY A.OUT_TIME DESC
	</select>

	<select id="getOutLogAuditCheckRecordList" resultMap="BaseDtoResultMap">
		SELECT B.CREATE_TIME,B.LONGI,B.LATI,B.PHOTO_PATH,B.CHECK_IN_DESC,B.LOCATION_DETAIL,B.LOCATION_DESC 
		FROM OUT_LOG A LEFT JOIN CHECK_IN_RECORD B ON A.OUT_ID = B.OUT_ID 
		WHERE A.AUDIT_ID = #{auditId}
	</select>	
</mapper>