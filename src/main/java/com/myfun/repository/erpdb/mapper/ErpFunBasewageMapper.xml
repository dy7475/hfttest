<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunBasewageMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunBasewage">
    <!--@mbggenerated-->
    <id column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="BASE_MONEY" jdbcType="INTEGER" property="baseMoney" />
    <result column="WAGETYPE_ID" jdbcType="INTEGER" property="wagetypeId" />
    <result column="ASSESSMENT_FLAG" jdbcType="TINYINT" property="assessmentFlag" />
  </resultMap>
  
  <resultMap id="BaseResultMapDto" type="com.myfun.repository.erpdb.dto.ErpFunBasewageDto">
    <id column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CHANGE_DEPT_FLAG" property="changeDeptFlag" />
    <result column="NOW_DEPT_ID" property="nowDeptId" />
    <result column="USER_WRITEOFF" property="userWriteoff" />
    <result column="USER_POSITION" property="roleId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="BASE_MONEY" property="baseMoney" />
    <result column="WAGETYPE_ID" jdbcType="INTEGER" property="wagetypeId" />
    <result column="ASSESSMENT_FLAG" jdbcType="TINYINT" property="assessmentFlag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    USER_ID, COMP_ID, DEPT_ID, BASE_MONEY, WAGETYPE_ID, ASSESSMENT_FLAG
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewageExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_BASEWAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select 
    <include refid="Base_Column_List" />
    from FUN_BASEWAGE
    where USER_ID = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_BASEWAGE
    where USER_ID = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewageExample">
    <!--@mbggenerated-->
    delete from FUN_BASEWAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewage">
    <!--@mbggenerated-->
    insert into FUN_BASEWAGE (USER_ID, COMP_ID, DEPT_ID, 
      BASE_MONEY, WAGETYPE_ID, ASSESSMENT_FLAG
      )
    values (#{userId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{baseMoney,jdbcType=INTEGER}, #{wagetypeId,jdbcType=INTEGER}, #{assessmentFlag,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewage">
    <!--@mbggenerated-->
    insert into FUN_BASEWAGE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="baseMoney != null">
        BASE_MONEY,
      </if>
      <if test="wagetypeId != null">
        WAGETYPE_ID,
      </if>
      <if test="assessmentFlag != null">
        ASSESSMENT_FLAG,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="baseMoney != null">
        #{baseMoney,jdbcType=INTEGER},
      </if>
      <if test="wagetypeId != null">
        #{wagetypeId,jdbcType=INTEGER},
      </if>
      <if test="assessmentFlag != null">
        #{assessmentFlag,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewageExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_BASEWAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BASEWAGE
    <set>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.baseMoney != null">
        BASE_MONEY = #{record.baseMoney,jdbcType=INTEGER},
      </if>
      <if test="record.wagetypeId != null">
        WAGETYPE_ID = #{record.wagetypeId,jdbcType=INTEGER},
      </if>
      <if test="record.assessmentFlag != null">
        ASSESSMENT_FLAG = #{record.assessmentFlag,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_BASEWAGE
    set USER_ID = #{record.userId,jdbcType=INTEGER},
      COMP_ID = #{record.compId,jdbcType=INTEGER},
      DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      BASE_MONEY = #{record.baseMoney,jdbcType=INTEGER},
      WAGETYPE_ID = #{record.wagetypeId,jdbcType=INTEGER},
      ASSESSMENT_FLAG = #{record.assessmentFlag,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewage">
    <!--@mbggenerated-->
    update FUN_BASEWAGE
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="baseMoney != null">
        BASE_MONEY = #{baseMoney,jdbcType=INTEGER},
      </if>
      <if test="wagetypeId != null">
        WAGETYPE_ID = #{wagetypeId,jdbcType=INTEGER},
      </if>
      <if test="assessmentFlag != null">
        ASSESSMENT_FLAG = #{assessmentFlag,jdbcType=TINYINT},
      </if>
    </set>
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunBasewage">
    <!--@mbggenerated-->
    update FUN_BASEWAGE
    set COMP_ID = #{compId,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=INTEGER},
      BASE_MONEY = #{baseMoney,jdbcType=INTEGER},
      WAGETYPE_ID = #{wagetypeId,jdbcType=INTEGER},
      ASSESSMENT_FLAG = #{assessmentFlag,jdbcType=TINYINT}
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>
  <sql id="DtoBase_Column_List">
    A.USER_ID, A.COMP_ID, A.DEPT_ID, A.BASE_MONEY, A.WAGETYPE_ID
  </sql>
	<select id="getUserBasewage" resultMap="BaseResultMapDto">
		select 
		A.USER_ID, A.COMP_ID, B.DEPT_ID, A.BASE_MONEY, A.WAGETYPE_ID, B.USER_POSITION
		from FUN_BASEWAGE A LEFT JOIN FUN_USERS B ON A.USER_ID=B.USER_ID
		where A.COMP_ID = #{compId} and 
		(B.USER_WRITEOFF != 1
			<if test="startTime != null">
				OR B.WRITEOFF_TIME &gt;= #{startTime}
			</if>
		)
		<if test="deptId != null">
			AND B.DEPT_ID = #{deptId}
		</if>
		<if test="userId != null">
			AND A.USER_ID = #{userId}
		</if>
		<if test="roleId!=null and ''!=roleId">
			AND B.USER_POSITION = #{roleId}
		</if>
		ORDER BY A.BASE_MONEY DESC
	</select>
	<select id="getBaseWageList" resultMap="BaseResultMapDto">
		select 
		B.USER_WRITEOFF,<include refid="DtoBase_Column_List" />
		from FUN_BASEWAGE A join FUN_USERS B on A.USER_ID = B.USER_ID
		where A.COMP_ID = #{compId}
		<if test="deptId != null">
			AND B.DEPT_ID = #{deptId}
		</if>
		<if test="userPosition != null and userPosition!=''">
			AND B.USER_POSITION = #{userPosition}
		</if>
		and B.USER_JOB_DATE&lt;=#{endTime} and (B.USER_WRITEOFF=0 or (B.USER_WRITEOFF !=0 and B.WRITEOFF_TIME&gt;=#{startTime}))
		ORDER BY WAGETYPE_ID DESC
	</select>
	<select id="getBaseMoneyByUserId" resultType="java.lang.String">
		select BASE_MONEY from FUN_BASEWAGE 
		where COMP_ID = #{param.compId} and USER_ID = #{param.userId}
	</select>
	
	<update id="resetBasicSalary">
		UPDATE FUN_BASEWAGE
		SET DEPT_ID = #{newDeptId}
		WHERE COMP_ID = #{compId} AND USER_ID=#{userId}
	</update>
	
</mapper>


